"issuekey","created","title","description","storypoint"
"ALOY-344","10/24/2012 23:41:49","CLONE - Studio Dashboard: ""default"" and ""Default Project"" does not give clear information about Alloy and Project unless description is read.","Steps To Reproduce:    1. On dashboard on studio 3.0, navigate to Develop tab.  2. Notice ""default"" and ""Default Project""  & ""two-tabbed"" and ""Tabbed Application"" names.    Actual:  User does not get clear information from names that one is alloy project and another one is Titanium project unless he reads the description below.    Expected:  Naming convention or icon corresponding must suggest type of Project.",8
"ALOY-440","12/20/2012 17:21:38","Ti.UI.Picker has no collection binding","h3. original discussion    http://developer.appcelerator.com/question/145992/databinding-on-picker    h3. problem    Collection binding is not implemented for Ti.UI.Picker as it is for Ti.UI.TableView and other generic Titaniums views (View, Window, ScrollView, etc...).     h3. solution     Support collection binding on Ti.UI.Picker just as it is on TableView. It will need special handling as the Ti.UI.Picker requires custom parsing for columns and rows. Something like this should be how it would work for devs:    {code:xml}  <Alloy>      <Collection src=""book"" />      <Window class=""container"">          <Picker dataCollection=""book"">              <PickerRow title=""{title}"" />          </Picker>      </Window>  </Alloy>  {code}",8
"ALOY-443","12/21/2012 13:41:13","Enable more complex notation in binding","Allow developers to use syntax like the following in collection/model bindings:    {code:xml}  <Alloy>      <Model src=""someModel""/>      <Window title=""{someModel.title} {someModel.subtitle}""/>  </Alloy>  {code}    Basically, instead of assuming the whole property needs to be wrapped in \{\}, allow developers to put as many of them in the attribute as they want.",8
"ALOY-488","01/26/2013 22:14:34","Orphan file cleanup deletes builtins and widget assets","During the compile process Alloy will attempt to remove files from the Resources directory that are no longer present anywhere in the ""app"" folder. Alloy searches a number of locations in the ""app"" folder to see if the file is an orphan or not. False negatives should be avoided as they will leave unused files in the project. False positives on the other hand are not really worrisome since those resources will be recreated on the next compile anyway.     With that in mind, there are currently false positives for orphan file deletion for builtins and widgets. Builtins and widgets will be pulled in fresh each time. Again, this will not negatively impact a developer's build process or app in any way, it would just be more true to the logic if these files were left alone during the orphan cleanup phase.",3
"ALOY-540","03/01/2013 19:25:27","Resolve suboptimal compression from uglify-js v2 update","The v2 update of uglify-js in Alloy, specifically version 2.2.5, has some suboptimal compressions, which are causing the optimizer.js test spec to fail in certain cases. Specifically the issues are around booleans and cascading of variables in assignments. These issues have been logged with the Uglifyjs2 project in the following links:    * https://github.com/mishoo/UglifyJS2/issues/137  * https://github.com/mishoo/UglifyJS2/issues/138    When these issues are resolved and distributed in an npm release, we need to revisit these compressions and testing to ensure that the fixes are in place, and that new uglify-js version has no regressions that impact alloy.",5
"ALOY-544","03/07/2013 01:14:43","Ability to define a custom namespace to enable Alloy to generate custom widgets","Alloy should allow the user to specify a custom namespace for each widget in XML which modifies the generated code to use the widgets within the specified namespace.    As an example, <Window id=""win""> generates Ti.UI.createwindow(). The user should be able to specify <Window ns=""mcd"" id=""win""/>, which Alloy would in turn use to generate mcd.createwindow(). This is useful if the user has their own custom framework with custom widget attributes.",3
"ALOY-592","03/30/2013 18:12:57","Widget: default new widget platforms do not respect tiapp.xml deployment targets","Widget: default new widget platforms do not respect tiapp.xml deployment targets.    Test Steps:    1. Create Alloy project with all deployment targets (including blackberry and tizen).  2. New > Alloy Widget.    Test Results:    Observe the platforms listed in the widget, only a few targets are present.",3
"ALOY-716","06/20/2013 23:48:30","When using view-model binding, whitespace inside curly braces disables binding","h2. problem    http://developer.appcelerator.com/question/153856/alloy-update-view-with-fetched-collection    h2. expected    Both labels in the example below should be data bound, regardless of the superfluous whitespace.    {code:xml}  <Alloy>      <TableView dataCollection=""someCollection"">          <TableViewRow layout=""vertical"">              <Label text=""{text1}""/>              <Label text=""{ text2 }""/>          </TableViewRow>      </TableView>  </Alloy>  {code}",13
"ALOY-1514","08/19/2013 11:18:25","Add a CLI command to extract i18n strings from alloy code and update the strings.xml files (ALSO for XML files)","Now that Alloy 1.2 allows to use L() in XML files, this tool must scan XML files, apart the classic JS and TSS files.    I've been tested it and it is not doing it actually.",1
"ALOY-1518","08/23/2013 19:40:11","ListView: Custom widget support in templates","Currently there does not seem to be support for adding custom widgets in Listview templates. Please add widget support to ListView.",13
"ALOY-829","09/18/2013 07:51:11","Add a shorthand for fetch() adapter","If I get a reference to an ID would be nice to have a shortend like     var model =  Alloy.createModel(""..."");  model.fetch({ id: 123 });    instead of have to provide a full sql statement    I suggest an implementation approach like this one   https://github.com/viezel/napp.alloy.adapter.restsql#extended-sql-interface  which would make querying the database more object friendly.    Thanks, Luca    (for original Q&A see http://developer.appcelerator.com/question/157222/fetch-single-record-by-id-via-alloy-models)",5
"ALOY-858","10/23/2013 09:36:51","Alloy: Theme ""i18n"" and ""platform"" folders","I would like to be able to theme the {{i18n}} and {{platform}} folders so that for a white-label app I can keep all brand-specific stuff in the theme folder.    h1. Use case  For example, the i18n strings would include brand-specific texts in multiple languages and the platform folder would include brand-specific Android themes and UrbanAirship configurations.    h1. Implementation  It would be most ideal to not just overwrite the {{i18n}} files, but really merge the strings in the XML. For the platform folder we could just overwrite files, just like we do for {{assets}} and {{lib}} with the {{Resources}} folder.",8
"ALOY-859","10/23/2013 16:40:04","Compile failing on OSX Mavericks when targeting Windows Server network drives","h2. update (10/24/2013)    A correlation between [~jamesdraper] and [~core13] shows that the likely culprit for this issue is when a network drive sourced from a Windows Server is used as the project folder when building Alloy on OSX Mavericks.     h2. original    Q&A: http://developer.appcelerator.com/question/158722/titanium-studio-and-os-x-mavericks---error-generating-ast-file-with-jquery    No existing or new Alloy based apps will compile.  Each fails during the ""optimizing"" process, usually indicating an issue with the base alloy files.    **Error text;**    [INFO] :   ----- OPTIMIZING -----  [INFO] :   - alloy.js  [INFO] :   - alloy/widget.js  [INFO] :   - alloy/sync/localStorage.js  [INFO] :   - alloy/sync/properties.js  [INFO] :   - alloy/sync/sql.js  [INFO] :   - alloy/sync/util.js  [WARN] :   : ERROR: Unexpected character '' [alloy/sync/util.js:7,1]  [ERROR] :  Error generating AST for ""/Volumes/concepts/tests/Test44-Vanilla/Resources/alloy/sync/util.js""  [ERROR] :  Unexpected character ''  [ERROR] :  line 7, column 1, position 183  [ERROR] :  Alloy compiler failed    **util.js** (system file - after being compiled by Alloy)    function S4() {       return (((1+Math.random())*0x10000)|0).toString(16).substring(1);  };     exports.guid = function() {       return (S4()+S4()+'-'+S4()+'-'+S4()+'-'+S4()+'-'+S4()+S4()+S4());  }     The problem occurs in different files in different code positions and when it is triggered always appears to denote the last character as being at fault.  Simply changing the positions of code in the app does NOT change where the error is triggered - it always appears to be the end of a file that is getting snagged.",13
"ALOY-932","01/21/2014 14:45:54","Improve error messages when attempting to bind to complex objects","When attempting to bind to a complex object, such as the following, the resulting error messages are not clear and meaningful.    {code}  <TableView dataCollection=""provider"">      <TableViewRow id=""row"" onClick=""doViewDetails"">          <ImageView id=""rowImage"" image=""{photo.urls.square_75}"" />          <Label id=""rowFirstName"" text=""{first_name}"" />          <Label id=""rowLastName"" text=""{last_name}"" />      </TableViewRow>  </TableView>  {code}    Generates:    {{""'undefined' is not an object (evaluating 'Alloy.Models.photo.on')"";}}    Which doesn't clearly identify the problem being the attempt to reference the deep object reference {{photo.urls.square_75}}.     As pointed out in the original source of this ticket (http://developer.appcelerator.com/question/161740/alloymodelsphotoon#answer-274198), the solution is to map the object property to an attribute of the model, which could be done by extending the model or collection. Error message could possibly point developers to this solution.",3
"ALOY-934","01/22/2014 20:09:06","Change androidView behavior for optionDialog and similar components","We need to change the androidView behavior for optionDialog (and any other components that support an Android-specific view as a child) so that an AndroidView proxy parser is used rather than creating an arbitrary view.    Need also to communicate the change, as it deprecates old behavior.    Instead of an anroidView being assigned like this:    {code:xml}  <OptionDialog>      <View/>  </OptionDialog>  {code}    It should instead be like this, like the rest of the generic view proxy properties:    {code:xml}  <OptionDialog>      <AndroidView>          <View/>      </AndroidView>  </OptionDialog>  {code}  ",3
"ALOY-950","02/06/2014 00:16:50","'localStorage' adapter for Alloy Models should be deprecated and no longer used","h5. Improvement description  We should deprecate the usage of the localStorage adapter for Alloy Models.   It could create confusion as only supports MobileWeb and Tizen and is outdated by the 'properties' adapter (that supports all platforms).     See also http://docs.appcelerator.com/titanium/latest/#!/guide/Alloy_Sync_Adapters_and_Migrations-section-36739597_AlloySyncAdaptersandMigrations-Ready-MadeSyncAdapters    Will need updates to documentation that includes sample code to use Properties rather than localStorage. Tizen support has already been removed, so this will focus on only MobileWeb. Make sure the change is communicated in the release notes.",3
"ALOY-952","02/07/2014 00:21:45","Non numeric primary key not escaped during query","I am having a weird issue with alloy model generating an unescaped query, even though it uses prepared statement.  To recreate it:     1. Create a model with a non integer primary key.   2. Do a simple model.fetch({id: ""your_text_id""});      It will generate a query like so: SELECT * FROM table_name WHERE some_primary_key = your_text_id  where you would expect something like the following: SELECT * FROM table_name WHERE some_primary_key = 'your_text_id'    quoted from: http://developer.appcelerator.com/question/162301/weird-sqlite-escaping-issue",3
"ALOY-963","02/27/2014 01:35:56","Allow platform specific subfolders in lib and vendor directories","Platform specific folders (iphone,android,etc.) in the app/lib and app/vendor directories were not compiling to Resources correctly. The following pull request will fix this.    https://github.com/appcelerator/alloy/pull/337",2
"ALOY-964","03/03/2014 15:13:27","Support AndroidView in addition to View as child of AlertDialog","While the API name is AndroidView, Alloy expects child views of AlertDialog to be created with the View tag. It throws an error that Ti.UI.createAndroidView is not a valid method name if you use AndroidView. While it's okay to support View as a shorthand, we should also support AndroidView as a tag.    Reference: http://developer.appcelerator.com/question/163125/cannot-getset-textfield-value-in-alloy#answer-275881    Test case attached with commented-out working code that uses View.",5
"ALOY-967","03/06/2014 14:53:32","Support i18n directory in widgets","Customers have requested support for widget specific i18n localization files.  This would be useful for fully independent UI widgets.",3
"ALOY-977","04/01/2014 21:08:56","Add code comments","Add comments to the alloy scripts, specifically to the compile-related files. Code comment structure should be compatible with the TBD code-doc tool.",3
"ALOY-1063","04/09/2014 10:03:32","CLI: `ti clean` should remove/empty `Resources` for Alloy projects","h4. Problem Description  With the Alloy compiler trying to become smarter in compiling only those files that are changed, it happens more often that for different reasons the {{Resources}} directory is not up-to-date anymore. For this reason I'd like to see the {{Resources}} folder emptied or removed with {{ti clean}} and the Studio options using this CLI command. This way I can instruct people to do a clean as a first attempt to resolve compile/build problems.  ",3
"ALOY-1021","05/10/2014 19:29:24","Alloy: Add support for Alloy.CFG and Alloy.Globals in views","As the attached sample app shows, you can not use {{Alloy.CFG.}} and {{Alloy.Globals.}} in Alloy views. In the compiled code, they will end up as strings:    {code:javascript}      $.__views.__alloyId0 = Ti.UI.createLabel({          top: 50,          text: ""Alloy.CFG.foo"",          id: ""__alloyId0""      });  {code}    I would like to see that just like {{Ti.}} the {{Alloy.}} namespace would be detected and used as variable instead of string.",3
"ALOY-1018","05/16/2014 18:48:30","Add defaultNamespace or module attribute to Alloy Tag","Alloy currently has a feature of specifying a module attribute against tags, allowing a custom JS module to be used to create the elements, enabling developers to return modified or different elements.    e.g:    <Label module=""ui'>Foo</Label>    It's a very powerful feature and means we can create our custom tags for elements that are OS specific e.g. TitleControl and have that return a TitleControl for iOS (no change) or a Ti.UI.View for Android, with custom title text etc.    It would be useful to be able to add this namespace / module element ONCE so that you don't have to add it to every / multiple tags in a view.    So, adding the ability to specify it in the Alloy tag would mean for every tag instance, the custom module is checked first.    <Alloy module=""ui.js""> for example?",5
"ALOY-1043","06/05/2014 20:53:23","Tooling: add script to compile all test apps and add _generated folders","To improve our testing, we should have _generated folders (containing generated code for each platform) that can be compared to with each run of the {{jake test:all}} script.     It should:    * Process each project in the test/apps folder tree  * Compile the app for each platform, saving the results to _generated/PLATFORM/alloy/controllers  * Offer a switch ({{--force}}) which if set, will overwrite existing _generated files    The test/testgen.js looks to accomplish this for an individual sample app. There's also the partially complete tools/compiles.js that might serve similar purpose.",8
"ALOY-1044","06/06/2014 17:20:26","Remove the sample widgets","The widgets have been deprecated and should be removed in the next release. They should be handled as follows:    * If required for functional test apps or the widget sample apps, either move the required widgets into those apps or implement new simple widgets so as to preserve the goal of the demo apps.  * Contact the original author to see if he/she would like to re-take ownership and maintenance of the widget.  * Remove all remaining widgets.",5
"ALOY-1089","06/24/2014 10:09:58","Alloy support for Windows toolbar[] attribute","It would be very nice to have direct support for the Window.toolbar[] attribute in Alloy  Something like:    <Window id=""supportWindow"" >     <toolbar platform=""ios"">      <Button id=""button1"" title=""First"" />      <Button id=""button2"" title=""Second"" />     </toolbar>    </Window>  ",3
"ALOY-1059","06/24/2014 17:39:19","i18n from app must override i18n from widgets","Given a language string in the app's i18n strings.xml file with the same name as a value in a widget's strings.xml file, the app's string must override that of the widget.    To create a test app for this:    1. Copy the ALOY-967 test app  2. Modify the app's i18n/en/strings.xml file to add this new key:  {{<string name=""language__intro_text"">i18n from app overrides widget</string>}}  3. Build the app and you should see the above string.    Currently, with the 967 test app, you see ""i18n from com.mylanguage.widget"" which is coming from the widget.",5
"ALOY-1062","06/30/2014 11:49:44","Blackberry: Default Alloy Project shows incorrect app icon for blackberry","Default Alloy Project shows incorrect app icon for blackberry  Steps to reproduce:  1)Create any default alloy project and install on device.    {color:green}*Expected Result:*{color}  Alloy app icon must be displayed on the device.    {color:red}*Actual Result:*{color}  Instead of Alloy app icon classic app icon is being displayed on device.    This is an issue for Blackberry only.  For Android and iOS it is showing correct app icon.",3
"ALOY-1064","06/30/2014 20:28:17","ListView parser should remove Templates node after processing the templates","Given a project containing a widget and this in index.xml:    {code}  <Alloy>      <Window>          <Widget src=""foo"">              <ListView>                  <Templates>                      <ItemTemplate name=""first"">                         <!-- ... ... ... -->                      </ItemTemplate>                          <ItemTemplate name=""second"">                         <!-- ... ... ... -->                      </ItemTemplate>                  </Templates>              </ListView>         </Widget>      </Window>  </Alloy>  {code}    The widget receives an arguments object containing two extra {{null}} values which presumably correspond to the ItemTemplate tags. Those should be removed by the Ti.UI.ListView.js parser.    Generated code without this change:  {code}  $.__views.__alloyId0 = Alloy.createWidget(""foo"", ""widget"", {      id: ""__alloyId0"",      children: [ , , $.__views.__alloyId1 ],      __parentSymbol: $.__views.index  });  {code}    Using child views of Widget other than ListView (such as using a pair of Views) does not pass those null values via the children array.    Workaround: reference the children array like this:    {code}  var kids = _.compact(arguments[0].children);  Ti.API.info(JSON.stringify(kids));  {code}  ",5
"ALOY-1067","07/02/2014 15:42:20","Support L() in XML as Label text ","For following view,  {{L()}} should work if we've set foo equal to some string in i18n. Now it prints out L('foo') instead    {code}  <Window>      <Label>L('foo')</Label>  <!-- this print out L('foo') instead of treating it as L() -->  </Window>  {code}",3
"ALOY-1068","07/02/2014 15:58:25","Runtime error if Label's text attribute starts with L() alias in quotes","h6. 1. Use following sample  {code}  <Alloy>   <Window>    <Label text=""L(foo)"" />   </Window>  </Alloy>  {code}    h6. 2. Build and run  Results in Alloy runtime error.  {code}  [ERROR] :  Script Error {  [ERROR] :      backtrace = ""#0 () at file:///Users/fmiao/Library/Application%20Support/iPhone%20Simulator/7.1/Applications/5E942DE7-5E41-4DE0-81EF-D3CB0000304A/ALOY-1052.app/alloy.js:231"";  [ERROR] :      line = 46;  [ERROR] :      message = ""Can't find variable: foo"";  [ERROR] :      name = ReferenceError;  [ERROR] :      sourceId = 349641088;  [ERROR] :      sourceURL = ""file:///Users/fmiao/Library/Application%20Support/iPhone%20Simulator/7.1/Applications/5E942DE7-5E41-4DE0-81EF-D3CB0000304A/ALOY-1052.app/alloy/controllers/index.js"";  [ERROR] :  }  {code}",2
"ALOY-1096","07/03/2014 23:15:03","Alloy: Update moment.js built-in library to latest version.","The latest version of the moment.js library is v2.7.0, yet Alloy includes an outdated version 2.1.0 as a built in.      There are new features and bug fixes on the new version that we could use. As of now, we have to include moment 2.7.0 as a stand-alone lib on our Alloy project for these new features and cannot use the built-in.",3
"ALOY-1076","07/07/2014 12:38:00","Studio: Distorted console view for alloy project launch on emulator","Test Steps:  This is specific to windows.    1. Create an Alloy Project.  2. Launch it on emulator. Observe the console view.    Actual Result:  Distorted console view for alloy project launch on emulator is noticed.Please refer attached screenshot.",5
"ALOY-1073","07/07/2014 18:03:18","Create a Backbone 1.x compatible sync adapter","To provide for backward compatibility, create a version of the SQL sync adapter that supports Backbone 1.x (current version), leaving the existing adapter for 0.9x compatibility reasons.",5
"ALOY-1074","07/07/2014 18:06:58","Enable developers to specify Backbone version in config.json","Enable developers to choose whether to use Backbone 0.9x or 1.x. The default should be 1.x. Support for the older version would be to provide backward compatibility for existing projects that depend on 0.9x behaviors or functionality.",8
"ALOY-1075","07/07/2014 18:08:38","Confirm existing adapters support Backbone 1.x","Specifically, check Mads' REST adapter. Provide guidance on updating adapters that don't work.",3
"ALOY-1098","07/09/2014 10:20:17","Support actionView property of MenuItem in XML markup","{code}  <Menu>    <MenuItem>       <ActionView>           <View backgroundColor=""#fff"" />       </ActionView>    </MenuItem>  </Menu>  {code}    Set actionView of MenuItem using alloy xml markup",3
"ALOY-1080","07/09/2014 14:49:04","Compiler fails with misleading message when dataCollection set on ListView rather than ListSection","If the {{dataCollection}} attribute is set on the ListView, as shown below, the Alloy compiler fails with the message that the ItemTemplate must have a name attribute (which it does in the example).    {code}  <Alloy>    <Collection src=""mycollection""/>    <Window id=""win"">      <ListView id=""thelist"" defaultItemTemplate=""listTemplate"" dataCollection=""mycollection"">        <Templates>          <ItemTemplate name=""listTemplate"">            <Label bindId=""mylabel"" id=""mylabel""/>          </ItemTemplate>        </Templates>        <ListSection id=""mainsection"">        </ListSection>      </ListView>    </Window>  </Alloy>  {code}    Moving the {{dataCollection}} attribute to the ListSection tag resolves the issue.    This might be primarily a documentation issue -- that the list section is what you bind to your collection. However, the error message should be more meaningful and accurate.",3
"ALOY-1081","07/09/2014 15:27:54","Improve query selection speed through sync adapter optimizations","Community-submitted pull request: https://github.com/appcelerator/alloy/pull/471    Speed improvements for selecting data",3
"ALOY-1082","07/14/2014 12:53:14","Allows <Templates> to be children of <Widget>","h2. Description    When creating a ListView in a widget, it is not possible to add the templates as children of the widget.    h2. Sample  The ListView is created as a Widget. XML code:    {code}  <Alloy>   <ListView id=""list"">    <ListSection>     <ListItem image:image=""someimage.jpg"" label:text=""this is some text""/>    </ListSection>   </ListView>  </Alloy>  {code}    The Templates should be added in the index.xml:    {code}  <Alloy>   <Window>    <Widget src=""listtemplate"" defaultItemTemplate=""template1"">     <Templates>      <ItemTemplate name=""template1"" height=""100"">       <ImageView bindId=""image"" id=""image""/>       <Label bindId=""label"" id=""label1""/>      </ItemTemplate>     </Templates>    </Widget>   </Window>  </Alloy>  {code}",3
"ALOY-1085","07/15/2014 15:48:09","Update Alloy templates","I've prepared a PR with some updates for the Alloy templates:    https://github.com/appcelerator/alloy/pull/480    Changes:    - Re-Organises platform files copied in by new-command to support the next two:  - Moves MarketPlaceArtwork.png to the project root folder to save APK size  - Adds iTunesConnect.png to the project root folder  - Adds iOS7 icons  - Adds iTunesArtwork@2x file (note: upscaled!)  - Optimised all assets, saving more then 1MB or 20%    Ideally the {{iTunesArtwork@2x}} file would be replaced since this one is scaled up.",3
"ALOY-1099","07/17/2014 12:29:06","Alloy: Code Analyzer fails to analyze","Code Analyzer fails to analyze Alloy Project from Studio on Windows system only. But working fine from CLI.     1. Create a default alloy project.  2. Execute the Code Analyzer against Android/Mobileweb platforms.    Actual Result - Shows error message. Please refer the attached log file and screen shot for more clarification.    Expected Result - Code Analyzer should work fine for Alloy project from Studio.    Notes -   1. The same works fine for Classic project.  2. Code Analyzer works fine for Alloy Project from CLI.  3. Code Analyzer works fine for Alloy/Classic on Mac and Ubuntu systems.",5
"ALOY-1118","07/18/2014 07:57:23","Allow theming of tiapp.xml e.g. through Alloy themes","Now Alloy supports theming of {{app/config.json}} and {{i18n}} and {{platforms}} on their way, the last thing to tackle for easily building branded apps of a white label codebase is ""theming"" {{tiapp.xml}}.    This might me the most challenging one, since I guess the CLI already reads some information from {{tiapp.xml}} before the first hook that Alloy uses is triggered. Also, it will require some serious smarts to know when to overwrite and when to append XML tags and attributes.",8
"ALOY-1091","07/18/2014 08:15:38","id property of <Picker> other than 'picker' is treated as a variable","If you use id name except 'picker' to Picker, that id will be handled as variable.    h5. view  {code:xml}  <Alloy>    <Picker id=""testpicker""/>  </Alloy>  {code}    h5. style  {code:css}  '#testpicker': {    type: Ti.UI.PICKER_TYPE_DATE_AND_TIME  }  {code}    h5. compiled code  {code:javascript}  $.__views.testpicker = Ti.UI.createPicker({    type: Ti.UI.PICKER_TYPE_DATE_AND_TIME,    id: testpicker  });  {code}",3
"ALOY-1090","07/18/2014 12:05:48","Views XML: Support spaces in comma-separated lists of targets in the platform attribute","After one hour struggling my mind (since the update from 3.2.3 to 3.3.0) why the same code didn't work, I found a little bug, I suppose its in Alloy 1.4, because changing the SDK from 3.3.0 to 3.2.3 didn't work    {code:xml}  <Alloy>    <Window platform=""android, mobileweb"" exitOnClose=""true"">      <Button bottom=""5"" width=""Ti.UI.FILL"">Click</Button>    </Window>  </Alloy>  {code}    For JS only $.index.open();    When compiling to Mobile Web it throws an error ""undefined open"".    The problem was the *space* between *android* and *mobileweb*. After delete it, all works. Previously to the update, the original code worked fine.    {code:xml}  <Alloy>    <Window platform=""android,mobileweb"" exitOnClose=""true"">      <Button bottom=""5"" width=""Ti.UI.FILL"">Click</Button>    </Window>  </Alloy>  {code}    Someone have the same issue?.",3
"ALOY-1092","07/21/2014 02:24:29","Allow more query options / scope in .tss","The docs state that you have to use Alloy.Globals.* in a .tss query.  You can actually use a local function in a controller too, i.e. `""#window[if=myFunc()]""` and that will work too.    What won't work however is basing a query off of params passed to the controller instance.  It would work, but the Alloy compiler doesn't allow it - `""#window[if=arguments[0].someProp]""`    This would be a very powerful addition to the new queries available.  It technically already works in the runtime code (I hardcoded it and tried it)...but it just won't compile right now because we're not allowed to put those characters in the tss query.",3
"ALOY-1093","07/21/2014 09:05:11","Picker: quotes removed from dimension properties with string values during parsing ","with alloy 1.4 if i run {{alloy compile --config platform=android}}    the code in the tss in the widget  {code}  Picker[platform=android]"":{  left:""10dp"",  right:""10dp""  }  {code}    is parsed into  {code}  $.__views.__alloyId7.add($.__views.dateLbl);  $.__views.picker = Ti.UI.createPicker({left:10dp,right:10dp,format24:false,calendarViewShown:false,id:""picker"",top:40,type:Ti.UI.PICKER_TYPE_DATE_AND_TIME,}  );  {code}    (im using ti.ux templates)  ",3
"ALOY-1094","07/21/2014 20:07:26","Date or time pickers: cannot use Ti.UI.* type constants, must use Titanium.UI.* abbreviations","The following code will generate an error because it uses {{type: Ti.UI.PICKER_TYPE_DATE_AND_TIME}} rather than {{type: Titanium.UI.PICKER_TYPE_DATE_AND_TIME}}. The same is true with any of the date or time type picker type constants.    h5. view  {code:xml}  <Alloy>    <Picker id=""testpicker""/>  </Alloy>  {code}    h5. style  {code:css}  '#testpicker': {    type: Ti.UI.PICKER_TYPE_DATE_AND_TIME  }  {code}  ",3
"ALOY-1097","07/22/2014 19:35:20","Update Popover samples to use contentView in all cases","Adding views to contentView is the preferred technique. Adding views directly to the popover might still work, but our samples should not show that technique.    Need to update:    * test/apps/ui/popover  * test/apps/testing/ALOY-983",3
"ALOY-1108","07/25/2014 09:41:28","Some .svn directories slipped into the GIT repo of Alloy","Dear Alloy guru's, I found some .svn folders in the GIT repo that break an SVN checkout. It's minor I know, but just to let you know. Thanks, Wouter Monkhorst",2
"ALOY-1127","07/31/2014 09:17:21","Alloys Data Binding feature does not respect formFactor property","Similar to ALOY-691 the same example fails if using the {{formFactor}} attribute. See following example using Alloy 1.4.1 . It results in a crash.    {code:title=views/index.xml}  <Alloy>      <Collection src=""test"" />      <Window id=""index"" platform=""ios"" formFactor=""tablet"">          <View id=""content"" dataCollection=""test"" dataFunction=""render"">              <View></View>          </View>      </Window>      <Window id=""index"" platform=""ios"" formFactor=""handheld"">          <TableView>              <TableViewRow dataCollection=""test"" dataFunction=""render"">                  <View></View>              </TableViewRow>          </TableView>      </Window>  </Alloy>  {code}    {code:title=controllers/index.js}  $.index.addEventListener('open', function () {      $.destroy();  });     $.index.open();      render();  {code}    {code:title=models/test.js}  exports.definition = {       configuration : {      ""columns"": {        ""username"":""string""      },      ""adapter"": {        ""type"": ""sql"",        ""collection_name"": ""test""      },    },       extendModel: function(Model) {         _.extend(Model.prototype, {});         return Model;    },       extendCollection: function(Collection) {         _.extend(Collection.prototype, {});         return Collection;    }  }  {code}    This will generate the following code in {{destroy()}} although always only one of those can be defined at a moment. To reproduce just run it on iOS.    {code}  exports.destroy = function() {      __alloyId5.off(""fetch destroy change add remove reset"", render);      __alloyId12.off(""fetch destroy change add remove reset"", render);  };  {code}    Error message will be for instance  {code}  'undefined' is not an object (evaluating '__alloyId5.off')  {code}    Link to Q&A: http://developer.appcelerator.com/question/176639/alloys-data-binding-feature-does-not-respect-handheld-property",13
"ALOY-1102","07/31/2014 09:29:34","Module for ListView is not working when using SDK 3.2.3","h2. Description  Following ticket ALOY-1082 I tried to create a module for ListView. While the code (pasted below) works fine using SDK 3.3.0.GA, an error is thrown when building with 3.2.3.GA.    h2. Code  Code as proposed by [~skypanther] is the following:    lib/customlist.js    {code}  var ListView = function(args) {      this.view = Ti.UI.createListView(args);  }     ListView.prototype.addMeASectionPlease = function(items) {      var section = Ti.UI.createListSection();      section.setItems(items);      return this.view.appendSection(section);  }  ListView.prototype.getView = function() {      return this.view;  }     exports.createListView = function(args) {      return new ListView(args);  };  {code}    index.xml    {code}  <Alloy>      <Window>          <Label text=""Add section"" top=""20"" id=""addButton""/>          <ListView module=""customlist"" top=""50"" id=""mylist"" defaultItemTemplate=""template"">              <Templates>                  <ItemTemplate name=""template"">                      <Label bindId=""myLabel"" class=""myLabel""></Label>                  </ItemTemplate>              </Templates>          </ListView>      </Window>  </Alloy>  {code}    index.js    {code}  $.addButton.addEventListener('click', function() {      var items = [          {myLabel: {text:'Foo'}, template:'template',  properties: {backgroundColor: 'purple'}},          {myLabel: {text:'Bar'}, template:'template'},          {myLabel: {text:'Baz'}, template:'template'}      ];      $.mylist.addMeASectionPlease(items);  })     $.index.open();  {code}    h2. Error    Following the error when running the app on iOS Simulator:    {code}  [ERROR] :  Script Error {  [ERROR] :      backtrace = ""#0 () at file:///Users/USER/Library/Application%20Support/iPhone%20Simulator/7.1/Applications/CFCEF8AE-346F-4338-AE45-9BF2B447D10B/AlloyTestListView.app/alloy.js:231"";  [ERROR] :      line = 59;  [ERROR] :      message = ""-[__NSDictionaryM krollObjectForBridge:]: unrecognized selector sent to instance 0xce8e420"";  [ERROR] :      sourceId = 301971840;  [ERROR] :      sourceURL = ""file:///Users/USER/Library/Application%20Support/iPhone%20Simulator/7.1/Applications/CFCEF8AE-346F-4338-AE45-9BF2B447D10B/AlloyTestListView.app/alloy/controllers/index.js"";  [ERROR] :  }  {code}",3
"ALOY-1103","07/31/2014 18:49:15","<headerview formFactor=""handheld""> not working and throwing an error","h5. Problem description    formFactor='handheld' is not correctly applied if applied to <HeaderView> object.  Depending on the target, could either be not visible or crashing the app.      h5. Steps to reproduce    Use the following sample code:    h6. index.xml   {code}  <Alloy>      <Window>              <TableView height=""80%"">              <HeaderView formFactor=""handheld"">                  <View>                      <Label>HeaderView Handheld</Label>                  </View>              </HeaderView>          </TableView>           <View formFactor=""handheld"">               <Label>View Handheld</Label>              </View>      </Window>  </Alloy>  {code}     h6. index.tss  {code}  ""Window"":{   backgroundColor:'white',   layout:'vertical'  }    ""Label"":{   font:{    fontSize:'20dp',    color:'black'   }  }  {code}    1. Build and run on Android Tablet (tested with Google Nexus 7 4.3)    Expected result:  App runs. Both Headerview and View are not visible.    Result:   App crashes with the following error log:    {code}  E/AndroidRuntime( 3251): FATAL EXCEPTION: main    E/AndroidRuntime( 3251): Process: com.appcelerator.AlloyHarness, PID: 3251    E/AndroidRuntime( 3251): java.lang.RuntimeException: Unable to start activity ComponentInfo{com.appcelerator.AlloyHarness/org.appcelerator.titanium.TiActivity}: java.lang.NullPointerException    E/AndroidRuntime( 3251):  at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:2195)    E/AndroidRuntime( 3251):  at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:2245)    E/AndroidRuntime( 3251):  at android.app.ActivityThread.access$800(ActivityThread.java:135)    E/AndroidRuntime( 3251):  at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1196)    E/AndroidRuntime( 3251):  at android.os.Handler.dispatchMessage(Handler.java:102)    E/AndroidRuntime( 3251):  at android.os.Looper.loop(Looper.java:136)    E/AndroidRuntime( 3251):  at android.app.ActivityThread.main(ActivityThread.java:5017)    E/AndroidRuntime( 3251):  at java.lang.reflect.Method.invokeNative(Native Method)    E/AndroidRuntime( 3251):  at java.lang.reflect.Method.invoke(Method.java:515)    E/AndroidRuntime( 3251):  at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:779)    E/AndroidRuntime( 3251):  at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:595)    E/AndroidRuntime( 3251):  at dalvik.system.NativeStart.main(Native Method)    E/AndroidRuntime( 3251): Caused by: java.lang.NullPointerException    E/AndroidRuntime( 3251):  at ti.modules.titanium.ui.widget.tableview.TiTableView.layoutHeaderOrFooter(TiTableView.java:505)    E/AndroidRuntime( 3251):  at ti.modules.titanium.ui.widget.tableview.TiTableView.<init>(TiTableView.java:347)    E/AndroidRuntime( 3251):  at ti.modules.titanium.ui.widget.TiUITableView.processProperties(TiUITableView.java:106)    E/AndroidRuntime( 3251):  at org.appcelerator.kroll.KrollProxy.setModelListener(KrollProxy.java:1185)    E/AndroidRuntime( 3251):  at org.appcelerator.titanium.proxy.TiViewProxy.realizeViews(TiViewProxy.java:500)    E/AndroidRuntime( 3251):  at org.appcelerator.titanium.proxy.TiViewProxy.handleGetView(TiViewProxy.java:491)    E/AndroidRuntime( 3251):  at org.appcelerator.titanium.proxy.TiViewProxy.getOrCreateView(TiViewProxy.java:469)    E/AndroidRuntime( 3251):  at org.appcelerator.titanium.proxy.TiViewProxy.realizeViews(TiViewProxy.java:507)    E/AndroidRuntime( 3251):  at org.appcelerator.titanium.proxy.TiViewProxy.handleGetView(TiViewProxy.java:491)    E/AndroidRuntime( 3251):  at org.appcelerator.titanium.proxy.TiViewProxy.getOrCreateView(TiViewProxy.java:469)    E/AndroidRuntime( 3251):  at org.appcelerator.titanium.proxy.TiViewProxy.handleAdd(TiViewProxy.java:670)    E/AndroidRuntime( 3251):  at org.appcelerator.titanium.proxy.TiViewProxy.add(TiViewProxy.java:564)    E/AndroidRuntime( 3251):  at ti.modules.titanium.ui.WindowProxy.windowCreated(WindowProxy.java:233)    E/AndroidRuntime( 3251):  at org.appcelerator.titanium.TiActivityWindows.windowCreated(TiActivityWindows.java:32)    E/AndroidRuntime( 3251):  at org.appcelerator.titanium.TiBaseActivity.windowCreated(TiBaseActivity.java:442)    E/AndroidRuntime( 3251):  at org.appcelerator.titanium.TiBaseActivity.onCreate(TiBaseActivity.java:524)    E/AndroidRuntime( 3251):  at org.appcelerator.titanium.TiActivity.onCreate(TiActivity.java:18)    E/AndroidRuntime( 3251):  at android.app.Activity.performCreate(Activity.java:5231)    E/AndroidRuntime( 3251):  at android.app.Instrumentation.callActivityOnCreate(Instrumentation.java:1087)    E/AndroidRuntime( 3251):  at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:2159)    E/AndroidRuntime( 3251):  ... 11 more    W/ActivityManager(  550):   Force finishing activity com.appcelerator.AlloyHarness/org.appcelerator.titanium.TiActivity    W/ActivityManager(  550):   Force finishing activity com.appcelerator.AlloyHarness/.HarnessActivity    W/ActivityManager(  550): Activity pause timeout for ActivityRecord{528b362c u0 com.appcelerator.AlloyHarness/org.appcelerator.titanium.TiActivity t16 f}    W/EGL_genymotion( 1017): eglSurfaceAttrib not implemented    I/Process ( 3251): Sending signal. PID: 3251 SIG: 9    W/InputDispatcher(  550): channel '528c7ea0 com.appcelerator.AlloyHarness/com.appcelerator.AlloyHarness.HarnessActivity (server)' ~ Consumer closed input channel or an error occurred.  events=0x9    E/InputDispatcher(  550): channel '528c7ea0 com.appcelerator.AlloyHarness/com.appcelerator.AlloyHarness.HarnessActivity (server)' ~ Channel is unrecoverably broken and will be disposed!    W/audio_hw_primary(  114): out_write() limiting sleep time 69659 to 23219    I/ActivityManager(  550): Process com.appcelerator.AlloyHarness (pid 3251) has died.    W/InputDispatcher(  550): Attempted to unregister already unregistered input channel '528c7ea0 com.appcelerator.AlloyHarness/com.appcelerator.AlloyHarness.HarnessActivity (server)'    W/InputMethodManagerService(  550): Window already focused, ignoring focus gain of: com.android.internal.view.IInputMethodClient$Stub$Proxy@52bd1b38 attribute=null, token = android.os.BinderProxy@52bca104    I/WindowState(  550): WIN DEATH: Window{528c7ea0 u0 com.appcelerator.AlloyHarness/com.appcelerator.AlloyHarness.HarnessActivity}    W/audio_hw_primary(  114): out_write() limiting sleep time 46439 to 23219    W/audio_hw_primary(  114): out_write() limiting sleep time 34828 to 23219  {code}    2. Build run on iOS tablet  Result: app runs. <Headerview> and <View> are not visible as expected    3. Build run on Android and iOS handheld  Result: app runs. <Headerview> however is not displayed, while <View> is correctly displayed as expected.   Expected result: <Headerview> should be displayed.",5
"ALOY-1104","08/01/2014 01:18:55","Fail build with clear message if controllers/index.js is missing","h6. Problem description  Build fails on Android if the 'asset' folder is being deleted from the app project and is also not present in the Resources files folder.     h6. Steps to reproduce  1. Create a new Alloy project  2. Delete everything in app folder except ""views/index.xml"" and ""controllers/index.tss"". Also delete config.json and alloy.js files.   3. Run on Android    Result: app build and does not properly start with error:    {code}  [ERROR] TiExceptionHandler: (main) [438,438] ----- Titanium Javascript Runtime Error -----  [ERROR] TiExceptionHandler: (main) [1,439] - In ti:/module.js:280,9  [ERROR] TiExceptionHandler: (main) [0,439] - Message: Uncaught Error: Requested module not found: alloy/CFG  [ERROR] TiExceptionHandler: (main) [1,440] - Source:   throw new Error(""Requested module not found: "" + request);  [ERROR] V8Exception: Exception occurred at ti:/module.js:280: Uncaught Error: Requested module not found: alloy/CFG    {code}",5
"ALOY-1105","08/01/2014 21:16:57","Widget assets are not copied to the compiled app","In testing widgets, I've found that widget assets are not copied to the compiled app.    Steps to reproduce:    1. Make sure you're using a 1.5.0 branch of Alloy  2. From the repo directory, run {{jake app:run dir=ALOY\-898}} This sample app happens to use the loading widget, which contains a set of graphic assets.  3. When the app opens, click Open Window. You'll see messages in the console that the image assets cannot be found.  4. Copy the file path from one of those log messages. Open Finder and choose Go, Go to Folder. Paste in that path -- before you click Open, change the two instances of %20 to spaces in the path.  5. Right-click Harness.app and choose Show package contents. There should be an images/com.appcelerator.loading folder containing simlinks to a set of PNG assets. It's not there.  6. Change to Alloy 1.4.1 and repeat the preceding steps. The images will be there.",5
"ALOY-1107","08/04/2014 04:22:38","Rollback Theme ""i18n"" and ""platform"" folders implementations","Remove changes made to Alloy to implement this feature. A better solution has been proposed to handle this at the platform level and Alloy can then use it to more safely theme these folders.",2
"ALOY-1220","08/07/2014 04:20:19","Widgets can not be used in ListView Templates","When leveraging templates in a ListView, the alloy compiler fails when trying to compile an ItemTemplate that contains a Widget tag.",13
"ALOY-1112","08/08/2014 18:08:01","Styles TSS: Support spaces in comma-separated lists of targets in the platform attribute","h5. Improvement description  See ALOY-1090  Spaces in comma-separated lists of targets in the platform attribute could be supported also in styles .TSS.    For example:  1. Create a new project and use the following code:  {code}  '#index[platform=android, ios]': {   backgroundColor: 'yellow',   fullscreen: false,   exitOnClose: true  }  {code}    2. Run on android and ios.    Result:  In this case, no errors are displayed and the only the first target is (android) is currently recognized and styles applied.    Expected result:  Both target platforms should be recognized.",3
"ALOY-1113","08/08/2014 22:10:35","Fix case on 'alloy info adapters' command output","""alloy info adapters"" command returns the contents of description in the tag name ""description"". However, ""alloy info samples"" (or even templates) have the contents in ""Description"" tag/field. Studio is expecting the same tag for all samples, templates and adapters. I believe the tag name has to be ""Description"" for all commands.",3
"ALOY-1229","08/13/2014 17:47:23","iOS: ListView filling template incorrectly","The ListView is not filling out incorrectly. The first label ""#faultyLabel"" should be replace with text and have a backgroundColor=""magenta"", but what's happening is a new label is appearing behind the next line, with its backgroundColor=""magenta"" and the text either not displayed or displayed out of view.    Create a new Alloy project and drop the three attached files to see the issue. The ListView works correctly in Android (screenshot also attached)",5
"ALOY-1115","08/19/2014 22:18:58","CLI command to create a project from an Alloy test case ","In a recent email thread, [~skypanther] had an idea to add an {{alloy}} CLI to create a new Alloy project from a given sample, e.g. {{alloy create_sample basics/simple}}. Moar:    bq. ...The samples are actually installed to the developer’s computer...as is a shell/template app. Such a command could merge the two, putting the resulting files in the developer’s workspace directory.      There is also a [doc ticket|TIDOC-1849] to better expose the samples, but this type of tool enhancement would be nice, too.  ",3
"ALOY-1240","08/21/2014 10:15:19","Date picker type cannot be specified in the TSS","views/index.xml contains:  {code}  <Picker class=""datePicker"" id=""observation_date_picker"" type=""Titanium.UI.PICKER_TYPE_DATE""></Picker>  {code}    styles/index.tss contains:  {code}  ""Picker"":{   width:Titanium.UI.FILL,   height:Titanium.UI.SIZE,   selectionIndicator:""true"",   useSpinner:""true"",  }  "".datePicker"":{   minDate:Alloy.CFG.minDate,   maxDate:Alloy.CFG.maxDate,  }  {code}    Result: Date picker shows as expected.    However, when the type definition is moved into the .tss (usual case):    views/index.xml contains:  {code}  <Picker class=""datePicker"" id=""observation_date_picker""></Picker>  {code}    styles/index.tss contains:  {code}  ""Picker"":{   width:Titanium.UI.FILL,   height:Titanium.UI.SIZE,   selectionIndicator:""true"",   useSpinner:""true"",  }  "".datePicker"":{   type:""Titanium.UI.PICKER_TYPE_DATE"",   minDate:Alloy.CFG.minDate,   maxDate:Alloy.CFG.maxDate,  }  {code}    Result: The entire picker is not displayed at all. The class .datePicker is not defined anywhere else in index.tss. Any attempts to assign a date value to the picker results in an app crash.      This was tested on a Samsung Galaxy Note 2 LTE running Android 4.3. Project is based on the Default Alloy Project template.",5
"ALOY-1116","08/22/2014 20:01:45","sql sync adapter: optimize update method for adding/updating models","Community PR: https://github.com/appcelerator/alloy/pull/518    The proposed change should offer speed improvements but implements no functional changes (in other words, existing code should continue to work).    Per the comment on the PR: Consider adding a batch update method that would be faster because it would process all model changes in a single SQL statement rather than by opening repeated connections to the database. (Likely that's a separate ticket)",5
"ALOY-1221","08/26/2014 13:52:27","Support Widgets and Require in ListItem Templates","Currently, it is not possible to use <Widget> or <Require> within a ItemTemplate like this:    {code:xml}  <Alloy>      <ListView id=""listview"" onItemclick=""onItemClick"">          <Templates>                <ItemTemplate name=""default"" class=""row"">                    <View class=""titles"">                      <Label bindId=""title"" class=""title"" />                      <Label bindId=""subtitle"" class=""subtitle"" />                  </View>                    <!-- This won't work -->                  <Require src=""remoteImage"" bindId=""image"" class=""thumb"" />                    <View class=""rating"">                      <!-- This won't work -->                      <Widget bindId=""rating"" id=""rating"" src=""starrating"" max=""5"" />                            <Label bindId=""ratingLbl"" class=""ratingLbl"" />                  </View>                </ItemTemplate>          </Templates>                        <ListSection                dataCollection=""events""               dataTransform=""doTransform"">                <ListItem template=""default""                   title:text=""{title}""                  subtitle:text=""{subtitle}""                  image:image=""{image}""                  rating:initialRating=""{stars}""                  ratingLbl:text=""{rating}""                  />             </ListSection>            </ListView>  </Alloy>  {code}    Alloy Compiler fails with error:    {code}  [ERROR] :  : Cannot read property 'symbol' of undefined  [ERROR] :  Alloy compiler failed  {code}    as described in https://jira.appcelerator.org/browse/ALOY-611",0
"ALOY-1121","08/26/2014 15:11:11","Update extract-i18n command to extract strings from XML files in addition to TSS","Community PR https://github.com/appcelerator/alloy/pull/527    Ticket is to test, confirm functionality and applicability.",3
"ALOY-1122","08/27/2014 22:11:17","Consistent naming for platform-specific folders","There is a discrepancy in the naming of the folder for iOS-specific resources in the Alloy file structure.    For assets and libs, the folder is called ""iphone"".    For controllers, views, and styles, the folder is called ""ios"".    I think we should have one consistent folder name for Alloy.",3
"ALOY-1123","08/29/2014 18:41:59","When a new project is created in Appcelerator Studio app.tss should be created","When a new project is created in Appcelerator Studio app.tss should be created since it is not.    This is similar to the alloy.js file which is included as an empty file with instructions as to what would go inside    app.tss holds global styles",2
"ALOY-1125","09/02/2014 18:30:42","Alloy: Button - Click event doesn't trigger","Click event doesn't trigger correctly. After few (~3) clicks the event is not triggered at all. Button basically behave as it was without any event listener.    Please look at it ASAP.    index.js (only)  {code:javascript}  var win = Ti.UI.createWindow();    var table = Ti.UI.createTableView();    var row = Ti.UI.createTableViewRow({   selectionStyle: Ti.UI.iPhone.TableViewCellSelectionStyle.NONE  });    var button = Ti.UI.createButton({   title: ""Press!"",   width: 50, height: 50,   backgroundColor: ""red"",   right: 25  });    var section = Ti.UI.createTableViewSection({   rows: [row]  });    button.addEventListener(""click"", function(e) {   console.log(e);  });    row.add(button);  table.setData([section]);    win.add(table);  win.open();  {code}",8
"ALOY-1124","09/02/2014 22:33:14","When using view-model binding, whitespace outside curly braces for ImageViews crashes the app","h5. Problem description  When using view-model binding, putting a whitespace outside curly braces, in the quotes, when using ImageViews, crashes the app    h5. Steps to reproduce  1. Grab the sample code for https://jira.appcelerator.org/browse/ALOY-716 : https://github.com/appcelerator/alloy/tree/master/test/apps/testing/ALOY-716  2. Run on iOS  Result: app crashes with following error:  {code}  [ERROR] :  invalid image type. expected TiBlob, String, TiFile, was: __NSCFString -[TiUIImageView setImage_:] (TiUIImageView.m:685)  [ERROR] :  -[__NSCFString absoluteString]: unrecognized selector sent to instance 0x146a7ae0  [ERROR] :  The application has crashed with an uncaught exception 'NSInvalidArgumentException'.  [ERROR] :  Reason:  [ERROR] :  -[__NSCFString absoluteString]: unrecognized selector sent to instance 0x146a7ae0  [ERROR] :  Stack trace:  [ERROR] :    [ERROR] :  0   CoreFoundation                      0x2d6eaecb <redacted> + 130  [ERROR] :  1   libobjc.A.dylib                     0x37e85ce7 objc_exception_throw + 38  [ERROR] :  2   CoreFoundation                      0x2d6ee7f7 <redacted> + 202  [ERROR] :  3   CoreFoundation                      0x2d6ed0f7 <redacted> + 706  [ERROR] :  4   CoreFoundation                      0x2d63c058 _CF_forwarding_prep_0 + 24  [ERROR] :  5   Harness                             0x00176395 Harness + 574357  [ERROR] :  6   Harness                             0x00177aad Harness + 580269  [ERROR] :  7   Harness                             0x0017daa5 Harness + 604837  [ERROR] :  8   Harness                             0x0017df43 Harness + 606019  [ERROR] :  9   Harness                             0x0014607f Harness + 376959  [ERROR] :  10  Harness                             0x001237f1 Harness + 235505  [ERROR] :  11  Harness                             0x00121939 Harness + 227641  [ERROR] :  12  Harness                             0x001b8d65 Harness + 847205  [ERROR] :  13  Harness                             0x001ba235 Harness + 852533  [ERROR] :  14  CoreFoundation                      0x2d62f38f <redacted> + 90  [ERROR] :  15  CoreFoundation                      0x2d62f2c1 <redacted> + 232  [ERROR] :  16  Harness                             0x001b9d85 Harness + 851333  [ERROR] :  17  Harness                             0x001ba741 Harness + 853825  [ERROR] :  18  Harness                             0x00166af5 Harness + 510709  [ERROR] :  19  UIKit                               0x3004f179 <redacted> + 408  [ERROR] :  20  UIKit                               0x2fff63db <redacted> + 1802  [ERROR] :  21  UIKit                               0x2fff5c31 <redacted> + 184  [ERROR] :  22  UIKit                               0x2ff1c2e5 <redacted> + 380  [ERROR] :  23  QuartzCore                          0x2fb9831b <redacted> + 142  [ERROR] :  24  QuartzCore                          0x2fb93b3f <redacted> + 350  [ERROR] :  25  QuartzCore                          0x2fb939d1 <redacted> + 16  [ERROR] :  26  QuartzCore                          0x2fb933e5 <redacted> + 228  [ERROR] :  27  QuartzCore                          0x2fb931f7 <redacted> + 314  [ERROR] :  28  QuartzCore                          0x2fb8cf1d <redacted> + 56  [ERROR] :  29  CoreFoundation                      0x2d6b5ff9 <redacted> + 20  [ERROR] :  30  CoreFoundation                      0x2d6b3987 <redacted> + 286  [ERROR] :  31  CoreFoundation                      0x2d6b3cd3 <redacted> + 738  [ERROR] :  32  CoreFoundation                      0x2d61e729 CFRunLoopRunSpecific + 524  [ERROR] :  33  CoreFoundation                      0x2d61e50b CFRunLoopRunInMode + 106  [ERROR] :  34  GraphicsServices                    0x3258d6d3 GSEventRunModal + 138  [ERROR] :  35  UIKit                               0x2ff7f871 UIApplicationMain + 1136  [ERROR] :  36  Harness                             0x000eef87 Harness + 20359  [ERROR] :  37  libdyld.dylib                       0x38383ab7 <redacted> + 2  [ERROR] :  *** Terminating app due to uncaught exception 'NSInvalidArgumentException', reason: '-[__NSCFString absoluteString]: unrecognized selector sent to instance 0x146a7ae0'  [ERROR] :  *** First throw call stack:  [ERROR] :  (0x2d6eaecb 0x37e85ce7 0x2d6ee7f7 0x2d6ed0f7 0x2d63c058 0x176395 0x177aad 0x17daa5 0x17df43 0x14607f 0x1237f1 0x121939 0x1b8d65 0x1ba235 0x2d62f38f 0x2d62f2c1 0x1b9d85 0x1ba741 0x166af5 0x3004f179 0x2fff63db 0x2fff5c31 0x2ff1c2e5 0x2fb9831b 0x2fb93b3f 0x2fb939d1 0x2fb933e5 0x2fb931f7 0x2fb8cf1d 0x2d6b5ff9 0x2d6b3987 0x2d6b3cd3 0x2d61e729 0x2d61e50b 0x3258d6d3 0x2ff7f871 0xeef87 0x38383ab7)  -- End application log -------------------------------------------------------    {code}    3. Edit index.xml and remove the space outside the curly braces for the ImageView object, changing into something like this:  {code}  <TableViewRow class=""row"">               <Label class=""title"" text="" { title }""/>               <Label class=""subtitle"" text="" { subtitle}""/>               <ImageView class=""image"" image=""{ image }""/>        </TableViewRow>  {code}  and run.  Result: app is not crashing but the binding is also lost, therefore also reopening https://jira.appcelerator.org/browse/ALOY-716    h5. Note  Not reproducible with Alloy 1.4.1, therefore is a regression.",3
"ALOY-1129","09/08/2014 13:23:35","Delete method shouldn't reset model's id","Community PR https://github.com/appcelerator/alloy/pull/547    ""Model's ID should not be deleted (reset) in the adapter. The problem is that after the Sync is done Backbone will trigger destroy which will execute a method called _onModelEvent -> remove ,but model doesn't have an id anymore ,so it won't be deleted from a collection - set _byId. If you try to add a new model to the collection with the same ID, backbone will not allow you to do that because the ID already exists in the set.""",3
"ALOY-1130","09/08/2014 16:05:39","""ui/map"" sample code error for mobileweb","h5. Problem description  Ui/Map module sample is not runnable on MobileWeb for a typo in the code    h5. Steps to reproduce  1. Import ui/map sample  2. Run in MobileWeb  Result: 'Uncaught reference - ti is not defined at /index.html'    The code for MobileWeb is   {code}  <View id=""map"" ns=""ti.map"" method=""createView"" platform=""mobileweb"">  {code}    ""ti.map"" should be changed into ""Ti.Map"".  ",2
"ALOY-1131","09/08/2014 16:32:04","ALOY-1028 sample test is not included in master or 1_5_X branch","ALOY-1028 sample test is not icluded in master or 1_5_X branch  In present in 1_4_X branch (and works fine with latest 1_5_X). ",2
"ALOY-1132","09/08/2014 19:32:40"," 'testing/ALOY-1058' sample code is using quoted type value","h5. Problem description  Sample code for ALOY-1058 is using a value for the type property with quotes, while, setting the type from the TSS, it should be used with no quotes.  Not a regression.     From the sample code ""index.tss"", type is defined in this way:  {code}  ""#picker"":{   type:""Ti.UI.PICKER_TYPE_DATE""  }  {code}    while type should be:  {code}  type: Ti.UI.PICKER_TYPE_DATE  {code}    h5. Steps to reproduce  1. Run the sample code  Result: Running the sample, the picker is actually showing DATE as a type when run, but the constant values should be used with no quotes in the TSS.  Here is the compiled code from Resources/iphone/alloy/controller/index.js:  {code}    $.__views.picker = Ti.UI.createPicker({          type: ""Ti.UI.PICKER_TYPE_DATE"",          id: ""picker"",          minDate: new Date(""Tue Apr 01 2014 00:00:00 GMT-0700 (PDT)""),          maxDate: new Date(""Thu May 01 2014 12:00:00 GMT-0700 (PDT)""),          value: new Date(""Tue Apr 15 2014 12:00:00 GMT-0700 (PDT)"")      });  {code}    2. Change index.tss picker stile to:  {code}  ""#picker"":{   type:Ti.UI.PICKER_TYPE_DATE_AND_TIME  }  {code}    Result: compiled code is:  {code}     $.__views.picker = Ti.UI.createPicker({          type: ""Ti.UI.PICKER_TYPE_DATE_AND_TIME"",          id: ""picker"",          minDate: new Date(""Tue Apr 01 2014 00:00:00 GMT-0700 (PDT)""),          maxDate: new Date(""Thu May 01 2014 12:00:00 GMT-0700 (PDT)""),          value: new Date(""Tue Apr 15 2014 12:00:00 GMT-0700 (PDT)"")      });  {code}     However, DATE type picker is still shown (not DATE_AND_TIME).  Considering the generated code, this could be a behavior issue relative to how SDK is handling the Picker type property, not Alloy. Investigating and creating a Classic Titanium sample.    3. Change the picker style to:   {code}  ""#picker"":{   type:Ti.UI.PICKER_TYPE_DATE_AND_TIME  }  {code}    Result: Picker DATE_AND_STYLE is shown. Compiled code also looks good:  {code}   $.__views.picker = Ti.UI.createPicker({          type: Ti.UI.PICKER_TYPE_DATE_AND_TIME,          id: ""picker"",          minDate: new Date(""Tue Apr 01 2014 00:00:00 GMT-0700 (PDT)""),          maxDate: new Date(""Thu May 01 2014 12:00:00 GMT-0700 (PDT)""),          value: new Date(""Tue Apr 15 2014 12:00:00 GMT-0700 (PDT)"")      });  {code}    h5. Note  My suggestion for the sample is to use the DATE_AND_TIME picker as type in case of iOS.  i.e.  {code}  ""#picker"":{   type:Ti.UI.PICKER_TYPE_DATE  }    ""#picker[platform=ios]"":{   type:Ti.UI.PICKER_TYPE_DATE_AND_TIME  }  {code}",2
"ALOY-1133","09/09/2014 00:32:45","Alloy 1.5b fails to build a project using Napp Drawer if one of the menus is <Required> ed in.","h4. Expectation  Project to build    h4. Reality  Project doesn't build    {code}  [INFO]    style:      ""index.tss""  [INFO]    view:       ""index.xml""  [DEBUG] /usr/local/lib/node_modules/alloy/Alloy/commands/compile/styler.js:582  [DEBUG]              var standard = bindingStr.match(/^\s*\'\+(.*)\+\'\s*$/)[1];  [DEBUG]                                                                     ^  [ERROR] : Cannot read property '1' of null  {code}",3
"ALOY-1134","09/09/2014 21:23:04","Add @3x images and new icon sizes to new-app templates and samples","To support the iPhone 6/6+ screen sizes, we will need to add new icons and launch screen images to our new-app templates and samples.    See https://developer.apple.com/library/prerelease/ios/documentation/UserExperience/Conceptual/MobileHIG/IconMatrix.html#//apple_ref/doc/uid/TP40006556-CH27-SW1 for the complete list.    For iPhone 6, launch images:     750 x 1334 (@2x) for portrait  1334 x 750 (@2x) for landscape    For iPhone 6 Plus:    1242 x 2208 (@3x) for portrait  2208 x 1242 (@3x) for landscape    New icons: 180x180, 120x120, 87x87 ",3
"ALOY-1135","09/12/2014 12:11:50","iOS: TextField: Textfield is not visible on window when styles applied in tss file","Textfield not visible on window when styles applied in tss  Not a regression. Since issue occurs with 3.3.0.GA also    *Steps to reproduce:*  1. Create Alloy Project. Replace the js files with code mentioned below  2. Run the app.    index.js:  {code}  $.win.open();  {code}    index.xml:  {code}  <Alloy>      <Window id=""win"">          <TextField id=""textField""/>      </Window>  </Alloy>  {code}    index.tss:  {code}  ""#win"":{   backgroundColor: ""white""  }    ""#textField"":{   borderStyle: ""Ti.UI.INPUT_BORDERSTYLE_ROUNDED"",   color: ""#336699"",   top: ""10"",   left: ""10"",   width: ""250"",   height: ""60""  }    {code}    {color:green}*Expected Result:*{color}  2. Textfield must be visible.    {color:red}*Actual Result:*{color}  Textfield is not visible.    Note: if the styles are applied on xml file itself. Then Textfield is visible.      ",2
"ALOY-1137","09/13/2014 18:58:49","Jake: not able to run project from Studio on Genymotion if not manually editing tiapp.xml","h5. Problem description  After using Jake to import, setup and run an Alloy project in Appcelerator Studio, is not possible to run it on Genymotion emulators if not manually editing first tiapp.xml.    h5. Steps to reproduce  1. Import the Harness project in Appcelerator Studio  2. Import any Alloy project using Jake.  ex.  {code}  jake app:setup dir=advanced/custom_tss_queries/  {code}  3. Run on Genymotion simulator the Harness project from Studio.    Result:  App fails to build and run  {code}  [ERROR] Application Installer abnormal process termination. Process exit value was 1  [WARN] :   --avd-* options have been deprecated, please use --device-id  Available Emulators:     titanium_1_WVGA800 (4.1.2)     titanium_GalaxyNexus_4.0_API14 (4.0)     Google Galaxy Nexus - 4.3 - API 18 - 720x1280 (4.3)     Google Nexus 7 - 4.4.2 - API 19 - 800x1280 (4.4.2)     Google Nexus One - 2.3.7 - API 10 - 480x800 (2.3.7)  For help, run: titanium help build  [ERROR] :  Missing required option: --device-id <name>  {code}    3. Open tiapp.xml and save. Run again.  Result: project build and run and expected.    Seems to be reproducible only when building/running on Genymotion. Android Emulator and Android device launch as expected.",3
"ALOY-1138","09/15/2014 17:12:54","Error creating a new Widget from Studio if config.json is not present","h5. Problem description  If no config.json file is present, creating a new Widget returns an error.    h5. Steps  1. Create a new Alloy project  2. Delete config.json file in the root project folder  3. From Appcelerator Studio, left click and create a new Widget    Result: a problem occurred creating a new widget.  Widget folder is created but config.json file is not found and an error is thrown.  {code}  fs.js:427    return binding.open(pathModule._makeLong(path), stringToFlags(flags), mode);                   ^  Error: ENOENT, no such file or directory '/usr/local/lib/node_modules/alloy/Alloy/template/config.json'      at Object.fs.openSync (fs.js:427:18)      at Object.fs.readFileSync (fs.js:284:15)      at module.exports (/usr/local/lib/node_modules/alloy/Alloy/commands/generate/targets/widget.js:50:19)      at generate (/usr/local/lib/node_modules/alloy/Alloy/commands/generate/index.js:37:34)      at Object.<anonymous> (/usr/local/lib/node_modules/alloy/Alloy/alloy.js:100:46)      at Module._compile (module.js:456:26)      at Object.Module._extensions..js (module.js:474:10)      at Module.load (module.js:356:32)      at Function.Module._load (module.js:312:12)      at Module.require (module.js:364:17)      at require (module.js:380:17)      at Object.<anonymous> (/usr/local/lib/node_modules/alloy/bin/alloy:3:1)      at Module._compile (module.js:456:26)      at Object.Module._extensions..js (module.js:474:10)      at Module.load (module.js:356:32)      at Function.Module._load (module.js:312:12)      at Function.Module.runMain (module.js:497:10)      at startup (node.js:119:16)      at node.js:901:3  {code}    Ideal result would probably be to automatically create a default config.json file and add in there the informations regarding the new created Widget.    If config.json file is removed, then, in order to create a new Widget, the user has to re-create manually a new config.json file just including : {{ {} }}      h5. Note  Not a regression.   ",3
"ALOY-1139","09/15/2014 21:46:45","Investigate options for automated testing","Investigate the use of tiO2 for automated runtime testing to improve our test coverage and improve quality for Alloy development.",8
"ALOY-1140","09/16/2014 05:11:53","Windows: The path format for app.js is different from controller files in sourcemap","The sourcemap contains different source location path format for app.js file compared to controller files on Windows platform.    The map file for app.js is :  {code}  ""version"":3,""file"":""Resources/android/app.js"",""sources"":[""Resources/android/app.js""]  {code}    The map file for index.js is :  {code}  ""version"":3,""file"":""Resources\\alloy\\controllers\\index.js"",""sources"":[""Resources\\alloy\\controllers\\index.js"",""app\\controllers\\index.js""]  {code}    Due to the difference of path formats, Studio fails to parse the paths and the debugger fails to stop at the expected breakpoints.    We need to investigate the difference in the path generation and ideally, in order to handle the paths consistently across all platforms, it might be better to have the paths in unix format.",8
"ALOY-1141","09/17/2014 17:27:40","iOS, Jake: Harness project from Studio on iPhone simulators might use wrong Sim version","h5. Problem description  Following https://jira.appcelerator.org/browse/ALOY-956, SDK hardcoded version has been removed from tiapp.xml when importing a project in the Harness project.    Using iOS 8 simulators and Studio this could lead to running a wrong Simulator version if running the project just after importing it without first editing tiapp.xml    h5. Steps to reproduce  1. Import Harness project in Studio (included in <alloy repo>/test/projects/Harness  2. Setup a sample test.  For example:  {code}  jake app:setup dir=basics/simple  {code}  3. Run the project from Studio on iOS8>iPhone6+ simulator    Result: iPhone 5S/iOS8 simulator is launched instead    4. Edit tiapp.xml from Studio. Studio will add tiapp.xml version selected from ""ti sdk select"". Change nothing but save and close. Run the project again on iOS8>iPhone6+ simulator  Result: iPhone6+ simulator is correctly launched now.     h5. Note  Apparently this happens only for iOS 8 simulators.   Been able to launch the desired Simulator version choosing OS v7.1 or v7.0.3 ",3
"ALOY-1142","09/17/2014 18:20:30","iOS: ALOY-720 sample: <NavigationGroup> object needs to be changed to <NavigationWindow>","h5. Problem description  <NavigationGroup> is no longer supported for iOS. Instead, NavigationWindow object should be used.     Sample https://github.com/appcelerator/alloy/tree/master/test/apps/testing/ALOY-720 needs to be updated as still using NavigationGroup and currently failing to run.     Ideally, a mobileweb folder using NavigationGroup should be created in the sample.",2
"ALOY-1144","09/19/2014 11:54:42","Alloy: createStyle turns proxy objects into JS objects","In Alloy 1.5.0 [{{Alloy.createStyle()}}|https://github.com/appcelerator/alloy/blob/master/Alloy/lib/alloy.js#L233] uses a new utility method [{{deepExtend}}|https://github.com/appcelerator/alloy/blob/master/Alloy/lib/alloy.js#L609] to clone the merged properties. However, because of its implementation a proxy object like the transform passed as a default in the following example [will be turned into a JS object|https://github.com/appcelerator/alloy/blob/master/Alloy/lib/alloy.js#L652]:    {code:js}  $.someView.animate($.createStyle({    id: 'someId',    transform: Ti.UI.create2DMatrix().scale(.5, .5),    duration: 500  }));  {code}    I have a PR to fix {{deepExtend}} by checking for {{.__prototype}} before cloning objects:    - https://github.com/appcelerator/alloy/pull/567",3
"ALOY-1145","09/19/2014 15:32:58","Add ALOY-1144 test case app to master branch","A community pull request for ALOY-1144 was merged to master. It did not include a test app. I added one for the corresponding PR I created to implement the fix in the 1_5_X branch. This ticket is to add that test app to the test/apps/testing folder for the master branch.",2
"ALOY-1148","09/26/2014 15:17:01","Update model template code to include Backbone 1.1.2 support code","Per ALOY-1074, if a developer uses Backbone 1.1.2 (rather than the default 0.9.2), he/she must extend the collection definition to account for a breaking change in backbone.    Add this to the modelcode.js template file to provide guidance to developers attempting to use this feature.    {code}  // For Backbone v1.1.2, uncomment this to override the fetch method  /*  fetch: function(options) {   options = options ? _.clone(options) : {};   options.reset = true;   return Backbone.Collection.prototype.fetch.call(this, options);  }  */  {code}",2
"ALOY-1152","09/26/2014 16:33:38","Alloy 1.5.0 RC3: Compiler fails on TextArea with child control","Problem:    Placing a child control inside a TextArea that is part of a ListView template causes the Alloy compiler to fail with:    {quote}  [ERROR]  Cannot read property 'symbol' of undefined  [ERROR]  Alloy compiler failed  {quote}    Test:     Build the sample code below.    {code:title=index.xml}  <Alloy>   <Window>          <ListView>              <Templates>                  <ItemTemplate name=""tMsg"">                      <TextArea bindId=""cMsg"">                          <Label bindId=""lHintText"" />                      </TextArea>                  </ItemTemplate>              </Templates>              <ListSection>                  <ListItem itemId=""liMessage"" template=""tMsg"" />                                  </ListSection>          </ListView>   </Window>  </Alloy>  {code}      If you remove {{<Label bindId=""lHintText"" />}} from the TextArea control. It compiles fine.      The code above worked fine under Alloy 1.3 and 1.4.    ",5
"ALOY-1149","09/26/2014 23:33:46","iOS: Gradient array properties are converted into objects","h5. Problem description  Gradients contain properties as array, for example the 'color' property.   In Alloy, those properties are now converted and passed as objects and an app is crashing if using those properties.     The issue seems to be introduced after ALOY-1051 as is not reproducible using Alloy version 1.4.1 (and Alloy 1.5.0-rc3 as well - see ALOY-1146, where a regression was introduced breaking Aloy-1051), but is reproducible with Alloy 1.5.0-rc, 1.5.0-rc2 and 1.5.0-rc5.  Is therefore a regression.    h5. Steps to reproduce  1. Grab the sample code for ALOY-717 : https://github.com/appcelerator/alloy/tree/master/test/apps/testing/ALOY-717  2. Run the sample app on iOS (any version)  Result: App crashes with an ""Application Error - Invalid type passed to function at alloy.js""  See error log attached and screenshot.     3. Edit index.tss and comment the 'colors' property for .bgGradient class:  {code}  '.bgGradient': {   backgroundGradient: {    type: 'linear',          startPoint: { x: '0%', y: '50%' },          endPoint: { x: '100%', y: '50%' },          // colors: [           // { color: 'red', offset: 0.0},           // { color: 'blue', offset: 0.25 },           // { color: 'red', offset: 1.0 }          // ],   }  }  {code}  and run on iOS devices  Result: app runs fine and no error are thrown.   ",5
"ALOY-1150","09/29/2014 22:16:01","Release notes: there is no date for the 1.5.0 release","h5. Problem description  A date for the 1.5.0 release should be added to the release notes.  Alloy CHANGELOG.md in the Github 1.5.0 branch currently says:  {code}  Release 1.5.0  Full list of Issues that were addressed in Release 1.5.0  [...]  Release 1.4.1 (07/28/2014)  Below are the fixes included in this release.  {code}    Therefore the current release date (09/29/2014) should be added.  ",1
"ALOY-1156","10/03/2014 16:50:42","Update readme to prune outdated information","Text in the Getting Started, Additional Notes, Feedback, Contributing, and Contributors sections is perhaps dated. We should confirm that text still applies and prune outdated or extraneous information as needed.    Add info on the new --testapp attribute in the Running Sample Test Apps section    Update jakelib/readme.md to note commands to use with the new iOS8 simulators (how to launch a specific sim)`  ",2
"ALOY-1163","10/07/2014 09:27:14","Using $.UI.create on a ListView with Custom Data templates causes to hide rows when templates are created programmatically.","h4. Problem Description  When using the $.UI.create function for ListViews using custom item templates causes the listitems not to show.    h4. Steps to reproduce  1. Create a new mobile project  2. Add this testcase  h4. index.xml:  {code}  <Alloy>   <Window id=""container"" class=""container"">   </Window>  </Alloy>  {code}    h4. index.js (Example from docs)  {code}  // Create a custom template that displays an image on the left,   // then a title next to it with a subtitle below it.  var myTemplate = {      childTemplates: [          {                            // Image justified left              type: 'Ti.UI.ImageView', // Use an image view for the image              bindId: 'pic',           // Maps to a custom pic property of the item data              properties: {            // Sets the image view  properties                  width: '50dp', height: '50dp', left: 0              }          },          {                            // Title               type: 'Ti.UI.Label',     // Use a label for the title               bindId: 'info',          // Maps to a custom info property of the item data              properties: {            // Sets the label properties                  color: 'black',                  font: { fontFamily:'Arial', fontSize: '20dp', fontWeight:'bold' },                  left: '60dp', top: 0,              }          },          {                            // Subtitle              type: 'Ti.UI.Label',     // Use a label for the subtitle              bindId: 'es_info',       // Maps to a custom es_info property of the item data              properties: {            // Sets the label properties                  color: 'gray',                  font: { fontFamily:'Arial', fontSize: '14dp' },                  left: '60dp', top: '25dp',              }          }      ]  };    var listView = $.UI.create(""ListView"", {      // Maps myTemplate dictionary to 'template' string      templates: { 'template': myTemplate },      // Use 'template', that is, the myTemplate dict created earlier      // for all items as long as the template property is not defined for an item.      defaultItemTemplate: 'template'  });  var sections = [];    var fruitSection = $.UI.create(""ListSection"", { headerTitle: 'Fruits / Frutas'});  var fruitDataSet = [      // the text property of info maps to the text property of the title label      // the text property of es_info maps to text property of the subtitle label      // the image property of pic maps to the image property of the image view      { info: {text: 'Apple'}, es_info: {text: 'Manzana'}, pic: {image: 'apple.png'}},      { info: {text: 'Banana'}, es_info: {text: 'Banana'}, pic: {image: 'banana.png'}}  ];  fruitSection.setItems(fruitDataSet);  sections.push(fruitSection);    var vegSection = $.UI.create(""ListSection"", { headerTitle: 'Vegetables / Verduras'});  var vegDataSet = [      { info: {text: 'Carrot'}, es_info: {text: 'Zanahoria'}, pic: {image: 'carrot.png'}},      { info: {text: 'Potato'}, es_info: {text: 'Patata'}, pic: {image: 'potato.png'}}  ];  vegSection.setItems(vegDataSet);  sections.push(vegSection);    var grainSection = $.UI.create(""ListSection"", { headerTitle: 'Grains / Granos'});  var grainDataSet = [      { info: {text: 'Corn'}, es_info: {text: 'Maiz'}, pic: {image: 'corn.png'}},      { info: {text: 'Rice'}, es_info: {text: 'Arroz'}, pic: {image: 'rice.png'}}  ];  grainSection.setItems(grainDataSet);  sections.push(grainSection);    listView.setSections(sections);  $.container.add(listView);  $.container.open();  {code}    However, switching to Ti.UI.create<Type>() {} works:  index.js:  {code}  // Create a custom template that displays an image on the left,   // then a title next to it with a subtitle below it.  var myTemplate = {      childTemplates: [          {                            // Image justified left              type: 'Ti.UI.ImageView', // Use an image view for the image              bindId: 'pic',           // Maps to a custom pic property of the item data              properties: {            // Sets the image view  properties                  width: '50dp', height: '50dp', left: 0              }          },          {                            // Title               type: 'Ti.UI.Label',     // Use a label for the title               bindId: 'info',          // Maps to a custom info property of the item data              properties: {            // Sets the label properties                  color: 'black',                  font: { fontFamily:'Arial', fontSize: '20dp', fontWeight:'bold' },                  left: '60dp', top: 0,              }          },          {                            // Subtitle              type: 'Ti.UI.Label',     // Use a label for the subtitle              bindId: 'es_info',       // Maps to a custom es_info property of the item data              properties: {            // Sets the label properties                  color: 'gray',                  font: { fontFamily:'Arial', fontSize: '14dp' },                  left: '60dp', top: '25dp',              }          }      ]  };    var listView = Ti.UI.createListView({      // Maps myTemplate dictionary to 'template' string      templates: { 'template': myTemplate },      // Use 'template', that is, the myTemplate dict created earlier      // for all items as long as the template property is not defined for an item.      defaultItemTemplate: 'template'  });  var sections = [];    var fruitSection = Ti.UI.createListSection({ headerTitle: 'Fruits / Frutas'});  var fruitDataSet = [      // the text property of info maps to the text property of the title label      // the text property of es_info maps to text property of the subtitle label      // the image property of pic maps to the image property of the image view      { info: {text: 'Apple'}, es_info: {text: 'Manzana'}, pic: {image: 'apple.png'}},      { info: {text: 'Banana'}, es_info: {text: 'Banana'}, pic: {image: 'banana.png'}}  ];  fruitSection.setItems(fruitDataSet);  sections.push(fruitSection);    var vegSection = Ti.UI.createListSection({ headerTitle: 'Vegetables / Verduras'});  var vegDataSet = [      { info: {text: 'Carrot'}, es_info: {text: 'Zanahoria'}, pic: {image: 'carrot.png'}},      { info: {text: 'Potato'}, es_info: {text: 'Patata'}, pic: {image: 'potato.png'}}  ];  vegSection.setItems(vegDataSet);  sections.push(vegSection);    var grainSection = Ti.UI.createListSection({ headerTitle: 'Grains / Granos'});  var grainDataSet = [      { info: {text: 'Corn'}, es_info: {text: 'Maiz'}, pic: {image: 'corn.png'}},      { info: {text: 'Rice'}, es_info: {text: 'Arroz'}, pic: {image: 'rice.png'}}  ];  grainSection.setItems(grainDataSet);  sections.push(grainSection);    listView.setSections(sections);  $.container.add(listView);  $.container.open();  {code}  3. Test in device    h4. Results  According to the Appcelerator documentation Alloy Dynamic Styles ""Since Alloy 1.2.0, Alloy supports changing styles dynamically or during runtime. There are two methods to support dynamic styling in Alloy. You can either generate a dynamic style dictionary that can be passed to applyProperties or a create method, or modify TSS class styles to an existing component on the fly.""    Using ""$.UI.create"" in SDK 3.4.0.GA and Alloy 1.5.1 causes listview rows hide. Whether in SDK 3.3.0.GA and Alloy 1.4.0 it works fine.    h4. Extra information  Both examples used to work in Ti SDK 3.3.X and iOS 7.X and Alloy 1.4.X  ",5
"ALOY-1157","10/07/2014 17:03:32","Creating sample app from advanced/android_density doesn't copy resolution-specific image folders ","*Steps:*    1. Create a new Alloy app from the advanced/android_density sample    {code}  titanium create --name=appname --id=com.domain.appname --platforms=all  cd appname  alloy new . --testapp advanced/android_density  {code}     Note that the source android_density code includes the following res-* folders each containing 'theImage.png' at different pixel densities.    {code}  ├── assets  │   ├── android  │   │   ├── appicon.png  │   │   ├── default.png  │   │   └── images  │   │       ├── res-hdpi  │   │       │   └── theImage.png  │   │       ├── res-ldpi  │   │       │   └── theImage.png  │   │       ├── res-mdpi  │   │       │   └── theImage.png  │   │       └── res-xhdpi  │   │           └── theImage.png  │   └── images  │       └── theImage.png  {code}    2. Examine contents of the generated Alloy project's *appname/app/assets* directory.     *Results*    The res-* folders and contents were not copied into the new project's corresponding assets/android/images folder, as shown below:    {code}  │   ├── assets  │   │   ├── android  │   │   │   ├── appicon.png  │   │   │   ├── default.png  │   │   │   └── images  │   │   │       ├── res-long-land-hdpi  │   │   │       │   └── default.png  │   │   │       ├── res-long-land-ldpi  │   │   │       │   └── default.png  │   │   │       ├── res-long-land-mdpi  │   │   │       │   └── default.png  │   │   │       ├── res-long-land-xhdpi  │   │   │       │   └── default.png  │   │   │       ├── res-long-land-xxhdpi  │   │   │       │   └── default.png  │   │   │       ├── res-long-land-xxxhdpi  │   │   │       │   └── default.png  │   │   │       ├── res-long-port-hdpi  │   │   │       │   └── default.png  │   │   │       ├── res-long-port-ldpi  │   │   │       │   └── default.png  │   │   │       ├── res-long-port-mdpi  {code}    *Expected*  The res-* folders and their contents are merged in with the existing assets/android/images folder contents.    {code}  │   ├── assets  │   │   ├── android  │   │   │   ├── appicon.png  │   │   │   ├── default.png  │   │   │   └── images  │   │   │       ├── res-hdpi  │   │   │       │   └── theImage.png  │   │   │       ├── res-ldpi  │   │   │       │   └── theImage.png  │   │   │       ├── res-mdpi  │   │   │       │   └── theImage.png  │   │   │       ├── res-xhdpi  │   │   │       │   └── theImage.png  │   │   │       ├── res-long-land-xxhdpi  │   │   │       │   └── default.png  │   │   │       ├── res-long-land-xxxhdpi  │   │   │       │   └── default.png  │   │   │       ├── res-long-port-hdpi  │   │   │       │   └── default.png  │   │   │       ├── res-long-port-ldpi  │   │   │       │   └── default.png  │   │   │       ├── res-long-port-mdpi  {code}",5
"ALOY-1241","10/08/2014 11:12:31","Alloy: Widget is loaded - initialized twice","Widget within TableViewSection is initialized twice.    index.xml  {code:xml}  <Alloy>   <Window>    <TableView>     <TableViewSection>         <Widget src=""abc""/>     </TableViewSection>          <Widget src=""abc""/>    </TableView>   </Window>  </Alloy>  {code}    widget.xml  {code:xml}  <Alloy>   <TableViewRow title=""1""/>  </Alloy>  {code}    widget.js  {code:xml}  console.log(""WIDGET.JS"");  {code}    Console output:  {code}  WIDGET.JS // < Widget in section  WIDGET.JS // < Widget in section  WIDGET.JS // < No section  {code}",5
"ALOY-1158","10/08/2014 20:05:55","Alloy Model/Collection tests need to be updated for supporting also Backbone 1.1.2","h5. Problem description  According to https://jira.appcelerator.org/browse/ALOY-576 we are upgrading Backbone version from 0.9.2 to 1.1.2    Backbone 0.9.2 will still there but will be deprecated in Alloy 1.6.0 - also 1.1.2 is going to break old samples and code, therefore need to be updated.     See also docs: https://jira.appcelerator.org/browse/TIDOC-1895  ",3
"ALOY-1159","10/10/2014 14:09:27","Update underscore library to latest version","Update underscore lib, per PR https://github.com/appcelerator/alloy/pull/578    Need to update both runtime and build-time versions of the lib.",3
"ALOY-1160","10/10/2014 19:19:55","Replace splash screens & icons for new projects","We need to replace the draft Alloy icons & splash screens used for new projects prior to the 1.6 release.",3
"ALOY-1161","10/13/2014 20:39:10","MobileWeb: using 'backbone 1.1.2' dependency, app crashes on MobileWeb","h5. Problem description  Accordingly to https://jira.appcelerator.org/browse/ALOY-1074 Backbone 1.1.2 is now selectable in config. json  However, if 1.1.2 is selected, MobileWeb projects are not runnable.     h5. Steps to reproduce  1. Create a new Alloy project  2. Edit config.json and add  {code}  ""backbone"": ""1.1.2""  {code}  3. Run on MobileWeb    Result: Application error is displayed. See screenshot    Using Backbone 0.9.2 it runs as expected.",3
"ALOY-1162","10/13/2014 23:42:00","Backbone 1.1.2 : <model/property> sample returning unexpected data for model attributes","h5. Problem description  Using Backbone 1.1.2, sample app included in <model/properties> returns unexpected data values when fetching for stored persistent Model data (using properties adapter).    h5. Steps to reproduce  Currently working on narrowing down the sample code. However it can be reproduced by getting the alloy sample for model/properties (https://github.com/appcelerator/alloy/tree/master/test/apps/models/properties )    1. Import the sample code  2. Add backbone support in config.json and in the 'exports.definition = {}' add:  {code}  {   ""sourcemap"": false,   ""adapters"": [""properties""],   ""backbone"": ""1.1.2""  }  {code}  3. Edit models/modelTab.js and add  {code}  extendCollection : function(Collection) {          _.extend(Collection.prototype, {       // For Backbone v1.1.2, uncomment this to override the fetch method          fetch: function(options) {      options = options ? _.clone(options) : {};      options.reset = true;      return Backbone.Collection.prototype.fetch.call(this, options);     },                     comparator: function(singleModel) {      return singleModel.get('done');     }          });            return Collection;      }  {code}  4. Run  5. Click on Increment a few times. Then close the app.  Result: label is updated accordingly as expected, incrementing the count. Displayed label is something like:  {code}  model: {""id"":""instance"", ""count"":2}  {code}  6. Reopen the app  Displayed label is now different than expected, returning a new model with count 0 and the previous created/incremented models.   See attachment.      ",3
"ALOY-1165","10/14/2014 15:05:57","Compile error when merging backgroundGradient","PR: https://github.com/appcelerator/alloy/pull/588    Review pull request, create test case / sample app to be added to test suite",3
"ALOY-1166","10/15/2014 15:08:17","Direction arrow in models/binding_dataFunction test sample not correct on Android ","https://github.com/appcelerator/alloy/tree/master/test/apps/models/binding_dataFunction    1. Build and run for Android and iPhone.    Results: Direction arrow on Android is center-aligned; on iOS, the arrow is left-aligned.    Expected: Arrow position same on both platforms.",2
"ALOY-1167","10/15/2014 17:56:16","Update travis.yml to exit w/non-zero value on errors","GitHub builds are marked as passing even when errors are encountered by Travis. Our test scripts must be exiting with a non-zero value in the case of errors.    We should add an {{after_script}} section that exits with 0/non-zero to properly signal build state.    http://docs.travis-ci.com/user/build-configuration/",3
"ALOY-1170","10/16/2014 15:11:16","SQL runtime error when running models/listview_binding test app","Steps:    1. Build/run https://github.com/appcelerator/alloy/tree/1_5_X/test/apps/models/binding_listview for Android or iOS    Results:   On iOS, the following error is generated:    {quote}  [DEBUG] 2014-10-16 10:02:57.854 binding_listview[31708:445138] [ERROR] A SQLite database error occurred on database '/Users/tstatler/Library/Developer/CoreSimulator/Devices/861898C4-B00A-46FE-B8BF-AF20F274270C/data/Containers/Data/Application/8411B43C-2D41-4140-BD17-9F5275B43166/Library/Private Documents/_alloy_.sql': Error Domain=com.plausiblelabs.pldatabase Code=3 ""An error occured parsing the provided SQL statement."" UserInfo=0x7c93c470 {com.plausiblelabs.pldatabase.error.vendor.code=1, NSLocalizedDescription=An error occured parsing the provided SQL statement., com.plausiblelabs.pldatabase.error.query.string=INSERT INTO info (title,subtitle,image) VALUES (?,?,?);, com.plausiblelabs.pldatabase.error.vendor.string=table info has no column named title} (SQLite #1: table info has no column named title) (query: 'INSERT INTO info (title,subtitle,image) VALUES (?,?,?);')  [ERROR] Script Error {  [ERROR]     backtrace = ""#0 () at file:///Users/tstatler/Library/Developer/CoreSimulator/Devices/861898C4-B00A-46FE-B8BF-AF20F274270C/data/Containers/Bundle/Application/DA7AB9EB-0FAB-4D30-BB29-2E1CD5D26933/binding_listview.app/alloy/models/Info.js:54\n#1 Migrate() at file:///Users/tstatler/Library/Developer/CoreSimulator/Devices/861898C4-B00A-46FE-B8BF-AF20F274270C/data/Containers/Bundle/Application/DA7AB9EB-0FAB-4D30-BB29-2E1CD5D26933/binding_listview.app/alloy/sync/sql.js:245\n#2 () at file:///Users/tstatler/Library/Developer/CoreSimulator/Devices/861898C4-B00A-46FE-B8BF-AF20F274270C/data/Containers/Bundle/Application/DA7AB9EB-0FAB-4D30-BB29-2E1CD5D26933/binding_listview.app/alloy/sync/sql.js:341\n#3 () at file:///Users/tstatler/Library/Developer/CoreSimulator/Devices/861898C4-B00A-46FE-B8BF-AF20F274270C/data/Containers/Bundle/Application/DA7AB9EB-0FAB-4D30-BB29-2E1CD5D26933/binding_listview.app/alloy.js:128\n#4 () at file:///Users/tstatler/Library/Developer/CoreSimulator/Devices/861898C4-B00A-46FE-B8BF-AF20F274270C/data/Containers/Bundle/Application/DA7AB9EB-0FAB-4D30-BB29-2E1CD5D26933/binding_listview.app/alloy/models/Info.js:59"";  [ERROR]     line = 93;  [ERROR]     message = ""invalid SQL statement"";  [ERROR]     nativeLocation = ""-[TiDatabaseProxy execute:] (TiDatabaseProxy.m:191)"";  [ERROR]     nativeReason = ""Error Domain=com.plausiblelabs.pldatabase Code=3 \""An error occured parsing the provided SQL statement.\"" UserInfo=0x7c93c470 {com.plausiblelabs.pldatabase.error.vendor.code=1, NSLocalizedDescription=An error occured parsing the provided SQL statement., com.plausiblelabs.pldatabase.error.query.string=INSERT INTO info (title,subtitle,image) VALUES (?,?,?);, com.plausiblelabs.pldatabase.error.vendor.string=table info has no column named title}"";  [ERROR]     sourceId = 299232704;  [ERROR]     sourceURL = ""file:///Users/tstatler/Library/Developer/CoreSimulator/Devices/861898C4-B00A-46FE-B8BF-AF20F274270C/data/Containers/Bundle/Application/DA7AB9EB-0FAB-4D30-BB29-2E1CD5D26933/binding_listview.app/alloy/sync/sql.js"";  [ERROR] }   [ERROR] Script Error Module ""alloy/models/Info"" failed to leave a valid exports object  {quote}",3
"ALOY-1172","10/20/2014 15:18:56","Properties test sample: Collection view doesn't update after adding first item on Android","Steps:    1. Create an Alloy application from the [models/properties|https://github.com/appcelerator/alloy/tree/master/test/apps/models/properties] sample.  2. Build, run on Android.  3. Click Collections tab.  4. Enter text in input and click add/+ buttton.    Results: New item doesn't appear in TableView.  Expected: Item appears in tableview.    Subsequent items added to the collection appear in the TableView, it's just the first one that doesn't. Works as expected on iOS (sim).",3
"ALOY-1173","10/20/2014 20:44:37","Add functionality from alloy-smelter to Alloy","The https://github.com/k0sukey/alloy-smelter offers some nice capabilities that should perhaps be included in Alloy itself. For example, copying/moving/renaming/deleting controllers.    Sub-tickets will be needed to implement the individual features.    Alternately, alloy-smelter could be wrapped, providing ""alloy foo"" commands that call to smelter.",5
"ALOY-1174","10/20/2014 20:57:12","Update sync adapters to support promises in addition to callbacks","Per comments at [Hacking alloy to get promises to work|https://github.com/aaronksaunders/tiConnectSampleApp#hacking-of-alloyjs-to-get-promises-to-work], the core model/collection constructors could be modified simply to support using promises in addition to callbacks. As shown in [Aaron's TiConnect sample|https://github.com/aaronksaunders/tiConnectSampleApp/blob/master/app/alloy.js#L22] the change involves returning the results of the sync call.    Resolving this cannot break existing apps, so extensive testing should be done on all platforms.",5
"ALOY-1175","10/21/2014 22:09:04","Cannot call methods or access properties on MenuItems declared in markup","DESCRIPTION:  Cannot call methods or access properties using the `id` attribute of MenuItems created in XML markup.  Related feature ticket: ALOY-1098    REPRODUCTION:  Run the Alloy application below.  Hit the Expand or Collapse action items or try to expand the action view from the overflow menu.    RESULTS:  Trying to call a method or accessing a property results in 'Cannot read property of undefined` or `Cannot call method X of undefined`.    {noformat}  [ERROR] :  TiExceptionHandler: (main) [3824,3824] ----- Titanium Javascript Runtime Error -----  [ERROR] :  TiExceptionHandler: (main) [0,3824] - In alloy/controllers/index.js:70,28  [ERROR] :  TiExceptionHandler: (main) [1,3825] - Message: Uncaught TypeError: Cannot read property 'actionViewExpanded' of undefined  [ERROR] :  TiExceptionHandler: (main) [0,3825] - Source:         Ti.API.info($.item3.actionViewExpanded);  [ERROR] :  V8Exception: Exception occurred at alloy/controllers/index.js:70: Uncaught TypeError: Cannot read property 'actionViewExpanded' of undefined  {noformat}            `index.xml`  {code}  <Alloy>      <Window id=""win"">          <Menu>              <MenuItem id=""item1"" title=""Expand"" onClick=""expand"" showAsAction=""Titanium.Android.SHOW_AS_ACTION_IF_ROOM"" />              <MenuItem id=""item2"" title=""Collapse"" onClick=""collapse"" showAsAction=""Titanium.Android.SHOW_AS_ACTION_IF_ROOM"" />              <MenuItem id=""item3"" title=""Alt Text"" showAsAction=""Titanium.Android.SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW"" onExpand=""report"" onCollapse=""report"">                  <ActionView>                   <View layout=""horizontal"">                       <Button left=""0"">Search</Button>                       <TextField right=""0"" hintText=""Type Something""/>                      </View>                  </ActionView>              </MenuItem>          </Menu>                  </Window>  </Alloy>  {code}    `index.js`  {code}  $.win.open();    function expand (e) {   $.item3.expandActionView();  };    function collapse(e) {   $.item3.collapseActionView();  }    function report(e) {   Ti.API.info(e.type);   Ti.API.info($.item3.actionViewExpanded);  }  {code}    Classic Examples:  {code}  var win = Ti.UI.createWindow();  var item1 = item2 = item3 = null;  var actionView = Ti.UI.createView({layout: 'horizontal'});  actionView.add(Ti.UI.createButton({title: 'Search', left: 0}));  actionView.add(Ti.UI.createTextField({hintText: 'Type Something', right: '0'}));  win.addEventListener(""open"", function() {        win.activity.onCreateOptionsMenu = function(e) {          var item, menu;          menu = e.menu;          menu.clear();          item1 = menu.add({              title : ""Collapse"",              showAsAction: Ti.Android.SHOW_AS_ACTION_ALWAYS          });    item1.addEventListener('click', function (e) {     item3.collapseActionView();    });          item2 = menu.add({              title : ""Expand"",              showAsAction : Ti.Android.SHOW_AS_ACTION_ALWAYS          });          item2.addEventListener('click', function (e) {     item3.expandActionView();    });          item3 = menu.add({           title : 'Alt Text',           showAsAction : Titanium.Android.SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW,           actionView: actionView          });          item3.addEventListener('collapse', function(e) {           Ti.API.info(item3.actionViewExpanded);          });          item3.addEventListener('expand', function(e) {           Ti.API.info(item3.actionViewExpanded);          });      };  });    win.open();  {code}    ",5
"ALOY-1177","10/21/2014 23:02:28","Implicitly set ns attribute for SearchView to Ti.UI.Android","When declaring a SearchView element in XML markup, Alloy should assign it the 'Ti.UI.Android' namespace.  Alloy is currently doing this for a lot of iOS-specific components.    These two items should be equivalent.  {code}  <SearchView ns=""Titanium.UI.Android""/>  {code}    {code}  <SearchView/>  {code}",3
"ALOY-1209","11/12/2014 14:01:58","Compile error when a view's attribute contains an escaped quote","The following view:    {code:xml}  <Alloy>   <Window>    <Label html=""Hello <b>Bold</b> <font color=\""red\"">World!</font>"" />   </Window>  </Alloy>  {code}    Will result in the following compile error:    {code}  [INFO]    view:       ""index.xml""  [WARN]  attribute space is required""html""!!  [WARN]  @#[line:3,col:3]  [ERROR] Error parsing XML file.  [ERROR] element parse error: Error: attribute value must after ""=""  [ERROR] @#[line:3,col:3]  [ERROR] Alloy compiler failed  {code}    I'd expect this to work fine since the {{""}} is escaped?",8
"ALOY-1225","11/24/2014 15:39:25","social.js authorize UI crashes on android","Upon calling the 'authorize' method, the loading view opens and then immediately crashes, resulting in the following error.     [INFO] :   libc: Fatal signal 11 (SIGSEGV) at 0x00000014 (code=1), thread 2206 (KrollRuntimeThr)    The behavior is consistent. However, if I open and close a facebook authorize dialog before opening the twitter authorize dialog, the twitter dialog will usually work. The issue may lie in the ""popIn"" animation: it appears that the window expands beyond the mobile screen viewport, and will crash at about the time the window should zoom back into the viewport.   See the attached video for a demo of the bug.     Functionality is fine in iOS v 8.1.     Other notes:  * Line 514 of the social.js file makes us of the deprecated ""Ti.UI.AUTODETECT_NONE""   * The default navigation/action bar at the top becomes visible",3
"ALOY-1195","12/02/2014 19:46:55","Alloy Migrations: Template up.down functions do not match documentation","When generating a migration with the Alloy CLI (1.5.1), the generated file has this code:  {noformat}  migration.up = function(db) {    };    migration.down = function(db) {     };  {noformat}    But documentation uses 'migrator' in place of 'db' for the function parameter.    Since the passed-in object itself has a 'db' parameter, the 'migrator' naming helps to avoid potential confusion.    migrator.db.execute(...)    vs.    db.db.execute(...)",3
"ALOY-1202","12/12/2014 15:14:33","Update ti.paint module in HarnessTemplate with a 64-bit compatible version","The HarnessTemplate includes the ti.paint module for use with the test/apps/advanced/native_modules sample. The version included is 32-bit only. Update to a 64-bit version.    Incidentally, there is an Android version of this module. The sample app could be updated to work on both iOS and Android (it is iOS-only currently).",3
"ALOY-1206","12/12/2014 22:04:41","Alloy compiler doesn't regenerate controllers if only change is made to the distribution target","When building for a different target environment (development, test or production) conditional code in {{app/alloy.js}} is not updated in {{Resources/\[platform\]/app.js}}. This can cause serious errors when relying on the conditions for particular behaviour in ad-hoc and app store builds.    h1. Test case    1. Create a project: {{ti create -t app -p ios -n conditions --id test.conditions -d .}}  2. Make it Alloy: {{cd conditions && alloy new}}  3. Insert the following snippet in both {{app/alloy.js}} and {{app/controllers/index.js}}:    {code:javascript}  if (ENV_PRODUCTION) console.debug('if (ENV_PRODUCTION)');  if (ENV_TEST) console.debug('if (ENV_TEST)');  if (ENV_DEV) console.debug('if (ENV_DEVELOPMENT)');  {code}    4. Build the production for Simulator: {{ti build -p ios -b}}  5. Confirm that both {{Resources/iphone/app.js}} and {{Resources/iphone/alloy/controllers/index.js}} only have {{console.debug(""if (ENV_DEVELOPMENT)"");}} which is correct  6. Build for ad-hoc or to device: {{ti build -p ios --target dist-adhoc}}  7. Confirm that {{Resources/iphone/app.js}} still has {{console.debug(""if (ENV_DEVELOPMENT)"");}} while {{Resources/iphone/alloy/controllers/index.js}} is correctly updated to have {{console.debug(""if (ENV_PRODUCTION)"");}}",8
"ALOY-1215","12/15/2014 09:32:26","Samples: Alloy RSS Reader sample does not work on iPad","This is not a regression as the issue occurs in SDK 3.4.0.GA as well.    Steps to Reproduce:  1. Import the Alloy - RSS Reader sample in studio  2. Run the sample project on iPad device or simulator    Actual Result:  The app installs and launches successfully but does not show any content. Only waiting spinner is shown continuously.    Expected Result;  The RSS Reader sample app should show the RSS feeds",3
"ALOY-1205","12/17/2014 16:08:17","Alloy launch image for 667h has the wrong filename","It is named {{Default-Portrait-667h@2x.png}} but should be {{Default-667h@2x.png}} like the classic template has:    https://github.com/appcelerator/titanium_mobile/tree/master/iphone/templates/app/default/template/Resources/iphone    PR: https://github.com/appcelerator/alloy/pull/637",2
"ALOY-1207","12/18/2014 08:39:10","Alloy: Theme ""lib"" folder","Although there's no real difference between the Alloy {{assets}} and {{lib}} folder, themes should also support the latter so that to theme a utility module you have in {{app/lib/util.js}} you no longer need to put this in {{app/themes/mine/assets/util.js}}.    PR incoming..",5
"ALOY-1210","12/18/2014 09:27:55","Alloy: Add support for DIST in the Project Configuration File","Recently, in Alloy 1.4.0 {{DIST_ADHOC}} and {{DIST_STORE}} were added the options for [conditional code in controllers|http://docs.appcelerator.com/titanium/latest/#!/guide/Alloy_Controllers-section-34636384_AlloyControllers-ConditionalCode].    I'd like to also have support the same conditions in {{config.json}}.    The use case would be to have different endpoints, keys or other configuration variables for production ad-hoc builds and production store-builds.    Example:    {code}  {   ""global"": {""foo"":1},   ""env:development"": {""foo"":2},   ""env:test"":{""foo"":3},   ""env:production"":{""foo"":4},   ""os:ios env:production"": {""foo"":5},   ""os:ios env:development"": {""foo"":6},   ""os:ios env:test"": {""foo"":7},   ""os:android"":{""foo"":8},   ""os:mobileweb"":{""foo"":9},   ""os:ios dist:adhoc"": {""foo"":10},   ""os:ios dist:store"": {""foo"":10},   ""dependencies"": {    ""com.foo.widget"":""1.0""   }  }   {code}",5
"ALOY-1214","12/22/2014 15:30:09","Button in Inheritance sample app difficult to click on iOS","Steps    1.Build and run https://github.com/appcelerator/alloy/tree/master/test/apps/advanced/inheritance on an iPhone device or simulator.  2. Try to click the baseDialog button.    Results: Because the button is partially covered by the status bar it's hard to click, even with a mouse pointer.  Expected: Button easy to click with finger or mouse.        ",3
"ALOY-1232","12/22/2014 21:51:49","--deploy-type ignored on android builds for emulator and device","h4. Problem Description  The argument --deploy-type or -D is ignored if the target is android, always generating 'development' for emulator and 'test' for device, even if specified the other way. iOS works fine. I didn't test all the others platforms.    h4. Steps to reproduce  Since we use these settings to trigger our testing scripts, figured I'd give it a test. Ti.App.deployType seems to work fine here. But your settings from the config.json file do not.  added the following to my alloy.js to test faster:  {code}  console.log('Ti.App.deployType: ', Ti.App.deployType);  console.log('Alloy.CFG: ', Alloy.CFG);  {code}    Results:  Genymotion Google Nexus 5 - 5.0.0 - API 21 - 1080x1920 (5.0.0)  {code}  [INFO]  Ti.App.deployType:  test  [INFO]  Alloy.CFG:  {""dependencies"":{},""TEST_STRING"":""TEST ENV""}  {code}  {code}  [INFO]  Ti.App.deployType:  development  [INFO]  Alloy.CFG:  {""dependencies"":{},""TEST_STRING"":""TEST ENV""}  {code}    Genymotion Samsung Galaxy S5 - 4.4.4 - API 19 - 1080x1920 (4.4.4)  {code}  [INFO]  Ti.App.deployType:  test  [INFO]  Alloy.CFG:  {""dependencies"":{},""TEST_STRING"":""TEST ENV""}  {code}  {code}  [INFO]  Ti.App.deployType:  development  [INFO]  Alloy.CFG:  {""dependencies"":{},""TEST_STRING"":""TEST ENV""}  {code}    Device Samsung S4  {code}  12-22 20:32:56.028: I/TiAPI(17077):  Ti.App.deployType:  development  12-22 20:32:56.028: I/TiAPI(17077):  Alloy.CFG:  {""dependencies"":{},""TEST_STRING"":""TEST ENV""}  {code}  {code}  12-22 20:34:35.465: I/TiAPI(18183):  Ti.App.deployType:  test  12-22 20:34:35.475: I/TiAPI(18183):  Alloy.CFG:  {""dependencies"":{},""TEST_STRING"":""TEST ENV""}  {code}    h4. Steps to reproduce  I used these commands for testing:  {code}  ti build -p android -D development --device-id ?  {code}    {code}  ti build -p android -D test --device-id ?  {code}    {code}  ti build -p android -D development -T device  {code}    {code}  ti build -p android -D test -T device  {code}    h4. Extra info  Seems like CFG.js doesn't get updated under resources once you switch the deployType flag. Deleting the content of Resources (aka forcing regeneration of CFG.js) will go and use the right config.",5
"ALOY-1285","12/27/2014 00:37:13","TSS conditional statement is ignored by items dynamically generated on runtime","Below is the sample of the TSS condition statement:  "".date[if=false]"": {   backgroundColor: ""#f00""   }    This always gets executed, even if logically it shouldn't be.  It happens to elements created on runtime by this code:    label = $.UI.create('Label', { text: displayDate, classes: ['date']} );",5
"ALOY-1216","12/29/2014 19:04:23","Speed compilation by enabling selective compiles of specified files","Community PR https://github.com/appcelerator/alloy/pull/625     * PR needs testing to confirm it works as described and introduces no side-effects/regressions  * Add unit tests  * Open related docs tickets, update ALOY-757 & ALOY-620 as needed.  ",5
"ALOY-1217","12/30/2014 00:53:24","TextField with proxy property causes compile error as ItemTemplate","h3. index.xml  {code:xml}  <Alloy>    <Window id=""settingsWin"" title=""Settings"" class=""container"" tabBarHidden=""true"">      <ListView id=""listView"" defaultItemTemplate=""template"" allowsSelection=""false"">        <Templates>          <ItemTemplate id=""inputTemplate"" name=""inputTemplate"">            <TextField              platform=""ios""              borderStyle=""Ti.UI.INPUT_BORDERSTYLE_BEZEL""              keyboardToolbarColor=""#999"" keyboardToolbarHeight=""40""              top=""10"" height=""35"" width=""300""              value=""Focus to see keyboard with toolbar"">                      <!-- Sets the keyboardToolbar property -->              <KeyboardToolbar>                <Toolbar>                  <Items>                    <Button systemButton=""Ti.UI.iPhone.SystemButton.CANCEL"" />                    <FlexSpace/>                    <Button systemButton=""Ti.UI.iPhone.SystemButton.CAMERA"" />                    <FlexSpace/>                    <Button style=""Ti.UI.iPhone.SystemButtonStyle.DONE"">Send</Button>                  </Items>                </Toolbar>              </KeyboardToolbar>                    </TextField>          </ItemTemplate>        </Templates>           <ListSection headerTitle=""Login Id"" id=""idSection"">          <ListItem template=""inputTemplate"" textfield:value=""""/>        </ListSection>      </ListView>    </Window>  </Alloy>  {code}    h3. index.js  {code:javascript}  $.settingsWin.open();  {code}    h3. Console output  {code}  Titanium Command-Line Interface, CLI version 3.4.1, Titanium SDK version 3.4.1.GA  Copyright (c) 2012-2014, Appcelerator, Inc.  All Rights Reserved.  Please report bugs to http://jira.appcelerator.org/  [DEBUG] :  Detecting modules in /Users/ndizazzo/Library/Application Support/Titanium/modules  [DEBUG] :  Detected android module: com.appcelerator.apm 1.0.10 @ /Users/ndizazzo/Library/Application Support/Titanium/modules/android/com.appcelerator.apm/1.0.10  [DEBUG] :  Detected android module: facebook 3.0.2 @ /Users/ndizazzo/Library/Application Support/Titanium/modules/android/facebook/3.0.2  [DEBUG] :  Detected android module: facebook 3.0.3 @ /Users/ndizazzo/Library/Application Support/Titanium/modules/android/facebook/3.0.3  [DEBUG] :  Detected android module: ti.cloudpush 3.3.0 @ /Users/ndizazzo/Library/Application Support/Titanium/modules/android/ti.cloudpush/3.3.0  [DEBUG] :  Detected android module: ti.cloudpush 3.3.4 @ /Users/ndizazzo/Library/Application Support/Titanium/modules/android/ti.cloudpush/3.3.4  [DEBUG] :  Detected android module: ti.map 2.1.4 @ /Users/ndizazzo/Library/Application Support/Titanium/modules/android/ti.map/2.1.4  [DEBUG] :  Detected android module: ti.map 2.2.2 @ /Users/ndizazzo/Library/Application Support/Titanium/modules/android/ti.map/2.2.2  [DEBUG] :  Detected commonjs module: ti.cloud 3.2.3 @ /Users/ndizazzo/Library/Application Support/Titanium/modules/commonjs/ti.cloud/3.2.3  [DEBUG] :  Detected commonjs module: ti.cloud 3.2.5 @ /Users/ndizazzo/Library/Application Support/Titanium/modules/commonjs/ti.cloud/3.2.5  [DEBUG] :  Detected commonjs module: ti.cloud 3.2.7 @ /Users/ndizazzo/Library/Application Support/Titanium/modules/commonjs/ti.cloud/3.2.7  [DEBUG] :  Detected iphone module: com.appcelerator.apm 1.0.10 @ /Users/ndizazzo/Library/Application Support/Titanium/modules/iphone/com.appcelerator.apm/1.0.10  [DEBUG] :  Detected iphone module: com.appcelerator.urlSession 1.0.1 @ /Users/ndizazzo/Library/Application Support/Titanium/modules/iphone/com.appcelerator.urlSession/1.0.1  [DEBUG] :  Detected iphone module: facebook 3.1.1 @ /Users/ndizazzo/Library/Application Support/Titanium/modules/iphone/facebook/3.1.1  [DEBUG] :  Detected iphone module: ti.coremotion 1.0.1 @ /Users/ndizazzo/Library/Application Support/Titanium/modules/iphone/ti.coremotion/1.0.1  [DEBUG] :  Detected iphone module: ti.map 2.0.2 @ /Users/ndizazzo/Library/Application Support/Titanium/modules/iphone/ti.map/2.0.2  [DEBUG] :  Detected iphone module: ti.map 2.0.4 @ /Users/ndizazzo/Library/Application Support/Titanium/modules/iphone/ti.map/2.0.4  [DEBUG] :  Detected iphone module: ti.touchid 1.0 @ /Users/ndizazzo/Library/Application Support/Titanium/modules/iphone/ti.touchid/1.0  [DEBUG] :  Detecting plugins in /Users/ndizazzo/dev/Studio_Workspace/TestApplication/plugins  [DEBUG] :  Detected plugin: ti.alloy @ /Users/ndizazzo/dev/Studio_Workspace/TestApplication/plugins/ti.alloy  [DEBUG] :  Detecting plugins in /Users/ndizazzo/Library/Application Support/Titanium/plugins  [DEBUG] :  Detected plugin: com.appcelerator.test @ /Users/ndizazzo/Library/Application Support/Titanium/plugins/com.appcelerator.test  [DEBUG] :  Looking for Titanium plugin id=ti.alloy version=1.0  [INFO] :   Found Titanium plugin id=ti.alloy version=1.0   [DEBUG] :  Titanium SDK iOS directory: /Users/ndizazzo/Library/Application Support/Titanium/mobilesdk/osx/3.4.1.GA/iphone  [INFO] :   Deploy type: development  [INFO] :   Building for target: simulator  [INFO] :   Building using iOS SDK: 8.1  [INFO] :   Building for iOS Simulator: iPhone 5s  [DEBUG] :  UDID: xxxx  [DEBUG] :  Simulator type: iphone  [DEBUG] :  Simulator version: 8.1  [INFO] :   Building for device family: universal  [DEBUG] :  Setting Xcode target to Debug  [DEBUG] :  Setting Xcode build OS to iphonesimulator8.1  [DEBUG] :  Xcode installation: /Applications/Xcode.app/Contents/Developer  [DEBUG] :  iOS WWDR certificate: installed  [DEBUG] :  Building for the following architectures: armv7 armv7s i386  [INFO] :   Minimum iOS version: 6.0  [INFO] :   Debugging disabled  [INFO] :   Profiler disabled  [INFO] :   Forcing rebuild: /Users/ndizazzo/dev/Studio_Workspace/TestApplication/build/iphone/build-manifest.json does not exist  [INFO] :   Initiating prepare phase  [INFO] :   Found Alloy app in /Users/ndizazzo/dev/Studio_Workspace/TestApplication/app  [INFO] :   Executing Alloy compile: /usr/local/bin/node /usr/local/bin/alloy compile /Users/ndizazzo/dev/Studio_Workspace/TestApplication/app --config platform=ios,version=0,simtype=none,devicefamily=universal,deploytype=development,target=simulator --no-colors  [DEBUG] :         .__  .__                  [DEBUG] :  _____  |  | |  |   ____ ___.__.  [DEBUG] :  \__  \ |  | |  |  /  _ <   |  |  [DEBUG] :   / __ \|  |_|  |_(  <_> )___  |  [DEBUG] :  (____  /____/____/\____// ____|  [DEBUG] :       \/                 \/  [DEBUG] :  Alloy 1.5.1 by Appcelerator. The MVC app framework for Titanium.  [DEBUG] :  ----- CONFIGURATION -----  [DEBUG] :  raw config = ""platform=ios,version=0,simtype=none,devicefamily=universal,deploytype=development,target=simulator""  [DEBUG] :  platform = ios  [DEBUG] :  version = 0  [DEBUG] :  simtype = none  [DEBUG] :  devicefamily = universal  [DEBUG] :  deploytype = development  [DEBUG] :  target = simulator  [DEBUG] :  project path = /Users/ndizazzo/dev/Studio_Workspace/TestApplication  [DEBUG] :  app path = /Users/ndizazzo/dev/Studio_Workspace/TestApplication/app  [DEBUG] :    [DEBUG] :  ----- CONFIG.JSON -----  [DEBUG] :  dependencies = {}  [INFO] :   [config.json] regenerating CFG.js from config.json...  [DEBUG] :  {  [DEBUG] :  ""dependencies"": {},  [DEBUG] :  ""sourcemap"": true,  [DEBUG] :  ""autoStyle"": false,  [DEBUG] :  ""adapters"": [  [DEBUG] :  ""localStorage"",  [DEBUG] :  ""properties"",  [DEBUG] :  ""sql""  [DEBUG] :  ]  [DEBUG] :  }  [DEBUG] :    [DEBUG] :  ----- CLEANING RESOURCES -----  [DEBUG] :  Removing orphaned controllers ...  [DEBUG] :  Removing orphaned models ...  [DEBUG] :  Removing orphaned styles ...  [DEBUG] :  Removing orphaned sync adapters...  [DEBUG] :  Removing orphaned assets and libs...  [DEBUG] :    [DEBUG] :  ----- BASE RUNTIME FILES -----  [DEBUG] :    [INFO] :   ----- MVC GENERATION -----  [INFO] :   [global style] writing to cache...  [INFO] :   [index.xml] view processing...  [INFO] :   style:      ""index.tss""  [INFO] :   view:       ""index.xml""  [DEBUG] :  /usr/local/lib/node_modules/alloy/Alloy/commands/compile/parsers/Alloy.Abstract._ItemArray.js:58  [DEBUG] :        return state.itemsArray + '.push(' + s.parent.symbol + ');';  [DEBUG] :                                                     ^  [ERROR] :  : Cannot read property 'symbol' of undefined  [DEBUG] :      at Object.CU.generateNodeExtended.post (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/parsers/Alloy.Abstract._ItemArray.js:58:52)  [DEBUG] :      at Object.exports.parse (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/parsers/base.js:14:17)  [DEBUG] :      at Object.exports.parse (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/parsers/default.js:10:27)  [DEBUG] :      at parse (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/parsers/Ti.UI.Button.js:30:30)  [DEBUG] :      at Object.exports.parse (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/parsers/base.js:11:17)  [DEBUG] :      at Object.exports.parse (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/parsers/Ti.UI.Button.js:14:27)  [DEBUG] :      at Object.exports.generateNode (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/compilerUtils.js:316:48)  [DEBUG] :      at Object.exports.generateNodeExtended (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/compilerUtils.js:253:17)  [DEBUG] :      at /usr/local/lib/node_modules/alloy/Alloy/commands/compile/parsers/Alloy.Abstract._ItemArray.js:55:16  [DEBUG] :      at Array.forEach (native)  [DEBUG] :      at Function._.each._.forEach (/usr/local/lib/node_modules/alloy/Alloy/lib/alloy/underscore.js:79:11)  [DEBUG] :      at parse (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/parsers/Alloy.Abstract._ItemArray.js:37:4)  [DEBUG] :      at Object.exports.parse (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/parsers/base.js:11:17)  [DEBUG] :      at Object.exports.parse (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/parsers/Alloy.Abstract._ItemArray.js:18:27)  [DEBUG] :      at Object.exports.parse (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/parsers/Alloy.Abstract.Items.js:15:48)  [DEBUG] :      at Object.exports.generateNode (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/compilerUtils.js:316:48)  [DEBUG] :      at Object.exports.generateNodeExtended (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/compilerUtils.js:253:17)  [DEBUG] :      at /usr/local/lib/node_modules/alloy/Alloy/commands/compile/parsers/Alloy.Abstract._ItemContainer.js:51:15  [DEBUG] :      at Array.forEach (native)  [DEBUG] :      at Function._.each._.forEach (/usr/local/lib/node_modules/alloy/Alloy/lib/alloy/underscore.js:79:11)  [DEBUG] :      at parse (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/parsers/Alloy.Abstract._ItemContainer.js:31:4)  [DEBUG] :      at Object.exports.parse (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/parsers/base.js:11:17)  [DEBUG] :      at Object.exports.parse (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/parsers/Alloy.Abstract._ItemContainer.js:20:27)  [DEBUG] :      at Object.exports.parse (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/parsers/Ti.UI.iOS.Toolbar.js:11:52)  [DEBUG] :      at Object.exports.generateNode (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/compilerUtils.js:316:48)  [DEBUG] :      at Object.exports.generateNodeExtended (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/compilerUtils.js:253:17)  [DEBUG] :      at /usr/local/lib/node_modules/alloy/Alloy/commands/compile/parsers/_ProxyProperty.js:43:14  [DEBUG] :      at Array.forEach (native)  [DEBUG] :      at Function._.each._.forEach (/usr/local/lib/node_modules/alloy/Alloy/lib/alloy/underscore.js:79:11)  [DEBUG] :      at parse (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/parsers/_ProxyProperty.js:32:4)  [DEBUG] :      at Object.exports.parse (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/parsers/base.js:11:17)  [DEBUG] :      at Object.exports.parse (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/parsers/_ProxyProperty.js:16:27)  [DEBUG] :      at Object.exports.parse (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/parsers/_ProxyProperty.KeyboardToolbar.js:12:37)  [DEBUG] :      at Object.exports.generateNode (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/compilerUtils.js:316:48)  [DEBUG] :      at Object.exports.generateNodeExtended (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/compilerUtils.js:253:17)  [DEBUG] :      at /usr/local/lib/node_modules/alloy/Alloy/commands/compile/parsers/Ti.UI.TextField.js:48:14  [DEBUG] :      at Array.forEach (native)  [DEBUG] :      at Function._.each._.forEach (/usr/local/lib/node_modules/alloy/Alloy/lib/alloy/underscore.js:79:11)  [DEBUG] :      at parse (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/parsers/Ti.UI.TextField.js:30:4)  [DEBUG] :      at Object.exports.parse (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/parsers/base.js:11:17)  [DEBUG] :      at Object.exports.parse (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/parsers/Ti.UI.TextField.js:20:27)  [DEBUG] :      at Object.exports.generateNode (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/compilerUtils.js:316:48)  [DEBUG] :      at Object.exports.generateNodeExtended (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/compilerUtils.js:253:17)  [DEBUG] :      at /usr/local/lib/node_modules/alloy/Alloy/commands/compile/parsers/Alloy.Abstract.ItemTemplate.js:64:15  [DEBUG] :      at Array.forEach (native)  [DEBUG] :      at Function._.each._.forEach (/usr/local/lib/node_modules/alloy/Alloy/lib/alloy/underscore.js:79:11)  [DEBUG] :      at parse (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/parsers/Alloy.Abstract.ItemTemplate.js:54:5)  [DEBUG] :      at Object.exports.parse (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/parsers/base.js:11:17)  [DEBUG] :      at Object.exports.parse (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/parsers/Alloy.Abstract.ItemTemplate.js:10:27)  [DEBUG] :      at Object.exports.generateNode (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/compilerUtils.js:316:48)  [DEBUG] :      at Object.exports.generateNodeExtended (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/compilerUtils.js:253:17)  [DEBUG] :      at /usr/local/lib/node_modules/alloy/Alloy/commands/compile/parsers/Ti.UI.ListView.js:131:17  [DEBUG] :      at Array.forEach (native)  [DEBUG] :      at Function._.each._.forEach (/usr/local/lib/node_modules/alloy/Alloy/lib/alloy/underscore.js:79:11)  [DEBUG] :      at /usr/local/lib/node_modules/alloy/Alloy/commands/compile/parsers/Ti.UI.ListView.js:122:6  [DEBUG] :      at Array.forEach (native)  [DEBUG] :      at Function._.each._.forEach (/usr/local/lib/node_modules/alloy/Alloy/lib/alloy/underscore.js:79:11)  [DEBUG] :      at parse (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/parsers/Ti.UI.ListView.js:48:4)  [DEBUG] :      at Object.exports.parse (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/parsers/base.js:11:17)  [DEBUG] :      at Object.exports.parse (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/parsers/Ti.UI.ListView.js:29:27)  [DEBUG] :      at Object.exports.generateNode (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/compilerUtils.js:316:48)  [DEBUG] :      at /usr/local/lib/node_modules/alloy/Alloy/commands/compile/compilerUtils.js:391:29  [DEBUG] :      at Array.forEach (native)  [DEBUG] :      at Function._.each._.forEach (/usr/local/lib/node_modules/alloy/Alloy/lib/alloy/underscore.js:79:11)  [DEBUG] :      at Object.exports.generateNode (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/compilerUtils.js:386:5)  [DEBUG] :      at /usr/local/lib/node_modules/alloy/Alloy/commands/compile/index.js:577:28  [DEBUG] :      at Array.forEach (native)  [DEBUG] :      at Function._.each._.forEach (/usr/local/lib/node_modules/alloy/Alloy/lib/alloy/underscore.js:79:11)  [DEBUG] :      at parseAlloyComponent (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/index.js:566:5)  [DEBUG] :      at /usr/local/lib/node_modules/alloy/Alloy/commands/compile/index.js:258  [DEBUG] :  :6  [DEBUG] :      at Array.forEach (native)  [DEBUG] :      at Function._.each._.forEach (/usr/local/lib/node_modules/alloy/Alloy/lib/alloy/underscore.js:79:11)  [DEBUG] :      at /usr/local/lib/node_modules/alloy/Alloy/commands/compile/index.js:247:6  [DEBUG] :      at Array.forEach (native)  [DEBUG] :      at Function._.each._.forEach (/usr/local/lib/node_modules/alloy/Alloy/lib/alloy/underscore.js:79:11)  [DEBUG] :      at module.exports (/usr/local/lib/node_modules/alloy/Alloy/commands/compile/index.js:243:4)  [DEBUG] :      at Object.<anonymous> (/usr/local/lib/node_modules/alloy/Alloy/alloy.js:103:46)  [DEBUG] :      at Module._compile (module.js:456:26)  [DEBUG] :      at Object.Module._extensions..js (module.js:474:10)  [DEBUG] :      at Module.load (module.js:356:32)  [DEBUG] :      at Function.Module._load (module.js:312:12)  [DEBUG] :      at Module.require (module.js:364:17)  [DEBUG] :      at require (module.js:380:17)  [DEBUG] :      at Object.<anonymous> (/usr/local/lib/node_modules/alloy/bin/alloy:3:1)  [DEBUG] :      at Module._compile (module.js:456:26)  [DEBUG] :      at Object.Module._extensions..js (module.js:474:10)  [DEBUG] :      at Module.load (module.js:356:32)  [DEBUG] :      at Function.Module._load (module.js:312:12)  [DEBUG] :      at Function.Module.runMain (module.js:497:10)  [DEBUG] :      at startup (node.js:119:16)  [DEBUG] :      at node.js:906:3  [ERROR] :  Alloy compiler failed  {code}",8
"ALOY-1219","01/06/2015 08:23:07","ALLOY: prevent parsing of {{ }} in alloy views.","Alloy is currently catching and interpreting {{ }} as an alloy binding when it should only catch { }.    This change is needed for https://github.com/dbankier/nano.",3
"ALOY-1222","01/07/2015 18:58:17","Fix failing Travis test `[FAIL] alloy install plugin --> is supported`","Travis builds are failing with {{\[FAIL\] alloy install plugin --> is supported}}    Failures are caused by recent changes for ALOY-1173 and ALOY-1207",3
"ALOY-1226","01/13/2015 19:31:28","To Do sample app - validate() fails to prevent invalid (empty) items from being added","The model definition in the test/apps/models/todo app includes a validation check. If a model doesn't pass this check, it should not be added to the database. However, empty items are being added.     Per the [Backbone docs|http://backbonejs.org/#Model-validate], you override the validate function with your own code. If a model fails validation, you return any string and save() will be prevented. ",3
"ALOY-1228","01/15/2015 14:33:54","Selective compilation can fail with platform-specific controllers and throws Exception incorrectly","Per email from David Bankier, the compilation-optimization technique implemented in [PR625|https://github.com/appcelerator/alloy/pull/625] will fail in certain cases. He suggests the following changes be made to fix these issues:    * https://github.com/xavierlacot/alloy/pull/1  * https://github.com/xavierlacot/alloy/pull/2     Investigate and implement, add tests",3
"ALOY-1231","01/20/2015 19:33:57","Mapping sample: add readme, remove map key","Add a readme file to the samples/mapping app that describes the steps that an Android developer would need to follow to run the app (obtain a key, which file to update, etc.) Include a reference to the Guides where the we describe how to obtain a key.     Also, update the JMK file to remove the old key (commented out currently). Replace it with something like {{// Paste your key here}}",2
"ALOY-1234","02/02/2015 15:51:49","Annotate Alloy API docs with GitHub URL","To support TIDOC-2058, the following PR adds an {{@editurl}} field to the JSDuck docs for each public class.    https://github.com/appcelerator/alloy/pull/659    Ideally, this would be done by a doc build script (like we do for Titanium), but since there are just a few Alloy docs to annotate, this seemed a more direct approach.",2
"ALOY-1237","02/10/2015 11:57:42","Alloy: Remove all event listeners added via view in $.destroy()","Too make it easier for developers to clean up the event listeners they've added via the XML view ({{onClick}} and other attributes), could we make it so that if you add an event listener that way, that it would also be removed in the {{$.destroy()}} method?    The developer would still be responsible for calling that method and for removing listeners he added in the controller, but it would align nicely with the current behaviour of the method where it also cleans up a listener added via the view, which is for the {{<Collection>}} or {{<Model}}> tag.    For reference:  https://github.com/appcelerator/alloy/blob/master/test/apps/basics/markup_events/_generated/ios/alloy/controllers/index.js#L44-L49    Perhaps the {{__defers}} object could be used for this in some way?    We could even go as far as extending the Backbone {{$.listenTo()}} method that if its first argument is a proxy, then it would both pass it on to that proxies' {{addEventListener}} method and queue it for removal in {{$.destroy}} at the same time.",8
"ALOY-1238","02/10/2015 17:31:57","Can't re-create index controller after renaming original one","h5. Scenario  I want to refactor an existing Alloy app by moving/re-naming the current index.xml/js/tss controller triad to something else, and then create a new index controller.    h6. Steps:  1. Create a new Alloy app.  2. Rename views/index.xml, styles/index.tss, and controllers/index.js to views/main.xml, styles/main.tss, and controllers/main.js.  3. Create a new ""index"" controller:  {code}  $ alloy generate controller index  {code}    h6. Results:  Actual:  {code}  [ERROR] Alloy ""app"" directory has no ""controllers/index.js"" file at ""/Users/tstatler/alloy_test_apps/testing/boo/app/controllers/index.js"".   {code}  Expected: I can create a new index controller w/o error.    ",3
"ALOY-1239","02/11/2015 15:48:22","Set Node 0.10 as minimum supported version","Update the minimum supported version of Node to 0.10.x. Make sure to check for and update any version checks in the code as well as updating the package.json file.",5
"ALOY-1249","02/18/2015 15:59:35","iOS: Misleading error message when controller file not found","When Alloy can't find a controller on iOS, it gives a message saying that a module (controllerName) for architecture (arm7/arm64) can't be found. very confusing, becuase it sounds like there's a native module problem.    {code:title=index.js}  Alloy.createController('foo');  {code}",5
"ALOY-1252","02/19/2015 16:45:31","restrictionPath missing in parseAlloyComponent for controller without corresponding view","As reported at https://github.com/dbankier/TiShadow/issues/388#issuecomment-73190579 Alloy optimizes all JS files when using the selective compile feature implemented in ALOY-1216.    Community PR to resolve this: https://github.com/appcelerator/alloy/pull/661    Needs verification and testing.    ",3
"ALOY-1257","03/24/2015 18:15:09","Map DocumentViewer to Ti.UI.iOS instead of deprecated Ti.UI.iPad namespace","The {{DocumentViewer}} tag is currently [mapped|https://github.com/appcelerator/alloy/blob/master/Alloy/common/constants.js#L195] to the {{Ti.UI.iPad}} namespace, while that has been deprecated since Ti SDK 3.0.0 in favour of {{Ti.UI.iOS}}.    * PR on master: https://github.com/appcelerator/alloy/pull/673/files",1
"ALOY-1262","04/13/2015 11:03:46","a directory ending with "".js"" causes Alloy compiler error","This bug is related to [ALOY-920], which introduced a fix for the specific case of {{should.js}}.    When building an Alloy project containg a library directory named with a {{.js}} suffix, the compiler fails:    {code}  [INFO]  ----- OPTIMIZING -----  [INFO]  - iphone/vendor/validator.js  [ERROR] Error generating AST for ""/Users/xavier/titanium/DemoApp/Resources/iphone/vendor/validator.js""  [ERROR] EISDIR, illegal operation on a directory  [ERROR] Alloy compiler failed  {code}    The {{getJsFiles()}} Alloy compiler method filters which files have to be optimized, as in https://github.com/appcelerator/alloy/blob/master/Alloy/commands/compile/index.js#L1017  This method fails to exclude items which are directories ending with {{.js}}, and {{uglifyjs.parse()}} then throws an error.    A pull request has been submitted at https://github.com/appcelerator/alloy/pull/683",5
"ALOY-1278","05/07/2015 00:05:04","Pass model config to migration functions","It will be nice if sql sync adapter will pass model config to migration functions. It will get access to model columns inside migration for example.    {code:javascript}  migration.up = function(migrator, config) {      migrator.createTable(config);      // other migration actions  };  {code}    Community PR: https://github.com/appcelerator/alloy/pull/684",3
"ALOY-1265","05/12/2015 20:28:41","Update builtin moment.js library to 2.10.6 (or latest)","Moment.js has changed how it handles time zones/UTC. Took me forever to figure out why my calls to {{moment().utcOffset();}} didn't work.",5
"ALOY-1273","05/25/2015 08:32:45","Code documentation contains links to out-dated Titanium docs","The (code) documentation in the Alloy repository contains links to the now out-dated Titanium documentation, where it should be updated to link to the Platform documentation:    https://github.com/appcelerator/alloy/search?utf8=%E2%9C%93&q=%22titanium%2Flatest%22",2
"ALOY-1276","05/27/2015 22:25:00","Alloy's deepExtend is broken","Since [this commit|https://github.com/appcelerator/alloy/commit/84c9470d9932a5ad762f8220db79802d91ec4c86], the {{deepExtend()}} method present in Alloy is broken, as deeply merged properties get overwritten three line below.    The method should not state:  {code}      target[name] = deepExtend(deep, clone, copy);  }    target[name] = copy;  {code}    but:    {code}      target[name] = deepExtend(deep, clone, copy);  } else {      target[name] = copy;  }  {code}    As a consequence, this method is purely useless.",5
"ALOY-1280","06/20/2015 00:15:33","Support CommandBar in XML markup","Windows Phone has a platform-specific feature called the CommandBar, similar to the Android Action Bar or iOS Toolbar.  The Titanium.UI.Windows.CommandBar object is assigned an array of buttons and separators to its items property for it to display.    For a classic Titanium example, see: https://appcelerator.github.io/appc-docs/latest/#!/api/Titanium.UI.Windows.CommandBar    Example of an Alloy view using the CommandBar  {noformat}  <Alloy>      <Window>          <CommandBar platform=""windows"">              <AppBarButton icon=""Titanium.UI.Windows.SystemIcon.ADD""/>              <!-- Support shorthand notation, that is, omit the namespace -->              <AppBarToggleButton icon=""LIKEDISLIKE"" />              <AppBarSeparator />           </CommandBar>      </Window>  </Alloy>  {noformat}",5
"ALOY-1281","06/22/2015 15:51:55","RSS sample should be removed in favour of Studio version","The RSS sample in the Alloy repository...  https://github.com/appcelerator/alloy/tree/master/samples/rss    .. should be removed to avoid confusion now Studio has an updated version:  https://github.com/appcelerator-developer-relations/Sample.RSS",3
"ALOY-1283","06/25/2015 11:16:10","ActionView views with an ID cannot be found under $ because they are created after merge","ALOY-1175 fixed this issue for IDs set on {{<MenuItem>}} but it is still an issue for views under {{<ActionView>}}. Because they are created after the controller merges {{$.__views}} with {{$}} you cannot access the views via {{$.<id>}}.    *index.xml*    {code:xml}  <Alloy>      <Window>          <Menu>              <MenuItem title=""Open"" showAsAction=""Titanium.Android.SHOW_AS_ACTION_ALWAYS"">                  <ActionView>                      <View id=""myViewInActionView"" backgroundColor=""red"">                       <Button onClick=""changeColor"">Change Color</Button>                      </View>                  </ActionView>              </MenuItem>          </Menu>                  </Window>  </Alloy>  {code}    *index.js*    {code:javascript}  $.index.open();     function changeColor() {    $.myViewInActionView.backgroundColor = 'green';  }  {code}",5
"ALOY-1287","07/01/2015 09:29:12","Alloy styles compilation does not produce the same results accross successive compilations","In some cases, when the developer overloads in a stylesheets some styles defined in the {{app.tss}} files, the alloy compilation won't produce the same resulting javascript accross successive compilations.    Alloy's styler orders style rules to define their priority, but there's a bug with the {{app.tss}} global styles being cached and therefore not correctly being counted by the styler during a compilation phase when {{app.tss}} didn't change.    Steps to reproduce:     * create a new alloy app, replace its {{app}} folder with the one contained in the attached app.zip file   * compile once: {{alloy compile --config platform=ios}}. Check in {{Resources/iphone/alloy/controllers/sum.js}} that the style rules defined in {{app/styles/sum.tss}} are applied correctly   * compile again, the generated javascript in the {{Resources}} directory differ. In particular, the {{Resources/iphone/alloy/controllers/sum.js}} does only contain rules from the {{app.tss}} file.    A PR is being proposed to fix this problem.",5
"ALOY-1288","07/02/2015 11:45:48","Windows: Label not visible when using default app.tss","The [default app.tss|https://github.com/appcelerator/alloy/blob/master/Alloy/template/app.tss] sets the Window backgroundColor to white for all platforms. on Windows the default color of a label is white, making them invisible when using the default {{app.tss}}. Just like we do for Android, we should set the Label color to black.    Note: There might still be issues with other elements that default to white on Windows, like titles in ListViews.",3
"ALOY-1295","07/30/2015 22:46:04","Windows: App crashes when calling fetch() method on a collection bound to a view","REPRODUCTION:  Create a new Alloy project and overwrite the files with the versions from the attachment.  Run the project in the Windows emulator.    RESULTS:  The app crashes with the following error:  {code}  [INFO]  Installing and launching the application  [INFO]  Project built successfully in 20s 802ms    [INFO]  Connected to app  -- Start application log -----------------------------------------------------  [INFO]  Disconnected from app  -- End application log -------------------------------------------------------    [ERROR] The remote procedure call failed.  [ERROR] Error: The remote procedure call failed.      at ChildProcess.<anonymous> (C:\ProgramData\Titanium\mobilesdk\win32\5.1.0.v20151026164636\node_modules\windowslib\lib\emulator.js:287:15)      at ChildProcess.emit (events.js:110:17)      at maybeClose (child_process.js:1008:16)      at ChildProcess._handle.onexit (child_process.js:1080:5)  {code}    OTHER INFO:  Comment out the Alloy.Collections.book.fetch() method in the app/controllers/index.js file and the application runs fine.  ",5
"ALOY-1297","08/12/2015 01:45:30","Cannot use localized strings for AlertDialog ButtonNames in XML","Create a new Alloy project and overwrite the files with the one in the attached ZIP file.  Run the project.    RESULTS:  The dialog displays the localize function and not the value.  See attached screenshot.    OTHER INFO:  Works fine in the TSS.",3
"ALOY-1299","08/17/2015 12:59:06","Cannot build a new project for iOS due to missing appicons","Cannot build to iOS simulator or device. Error shown during build for missing appicons.    This is a regression as the issue does not occur on 4.1.0.GA    Steps to Reproduce:  1. Create a new titanium project  2. Build it for iOS simulator or device    Actual Result:  An error is shown  {code}  [ERROR] No suitable app icon that is at least 180x180, unable to create missing icons:  [ERROR]   appicon-Small@3x.png - Used for iPhone - required size: 87x87 (29x29 @3x)  [ERROR]   appicon-Small-40.png - Used for iPad - required size: 40x40 (40x40 @1x)  [ERROR]   appicon-Small-40@2x.png - Used for iPhone, iPad - required size: 80x80 (40x40 @2x)  [ERROR]   appicon-Small-40@3x.png - Used for iPhone - required size: 120x120 (40x40 @3x)  [ERROR]   appicon-76.png - Used for iPad - required size: 76x76 (76x76 @1x)  [ERROR]   appicon-76@2x.png - Used for iPad - required size: 152x152 (76x76 @2x)  [ERROR] An error occurred during build after 8s 152ms     ERROR  | ti run exited with error code 1  {code}    Expected Result:  The project should build successfully for iOS",3
"ALOY-1300","08/20/2015 08:54:41","iOS: Assets Catalog inconsistency between Alloy and Classic","Comparing the folders *Assets.xcassets* in the generated build folder between a classic and alloy project, the alloy *AppIcon.appiconset* and *LaunchImage.launchimage* contains inconsistent images, even though the file naming convention is correct. See attached images for comparison.    h4. Steps to reproduce  1. Create a ti classic project: ti create  2. enter project folder  3. Create Alloy: alloy new  4. Compile Alloy: alloy compile --config platform=ios  5. Build project: ti build -p ios -I 9.0    h4. Expected result  images in assets catalog should be consistent    h4. Actual result  appicon-60@2x.png and appicon-60@3x.png is different from the rest  Default-Landscape-736h@3x.png and Default-667h@2x.png and Default-Portrait-736h@3x.png is different from the rest    *Note*: because of this, appc run is seeing the same issue.",3
"ALOY-1627","08/25/2015 23:40:33","Breakpoints not working on alloy apps","Sprint noticed their their break points aren't working on conditions in their alloy apps. I've been able to verify this with my own testing on a fresh application. To clarify (➜ == break point):    {code}  // This will not pause and the inner block runs  ➜ if(true){        console.log(""hello Jay!"");   }     // This will pause   if(true){        ➜ console.log(""hello Jay!"");   }  {code}    h3. Steps to reproduce  1. Create a new alloy app within Appcelerator Studio  2. Add the above if statement with a breakpoint on the conditoin  3. Run in debugging mode    h3. Expected  The code pauses on the if statement and doesn't call console.log()    h3. Actual  The code is ran as if the breakpoint isn't there. ",5
"ALOY-1302","09/10/2015 08:21:30","Alloy needs to have a consistent behavior with Ti on App Icons","See related ticket. Currently the behavior in managing the app icons is different. This ticket has to address and make them consistent.  With the related ticket, a DefaultIcon.png WILL BE copied into the project's root when {{alloy new}} is run.    h4. Test cases APPC CLI :  A. Brand new project via Appc. *appc new* *appc run -p ios*  B. *appc run -p ios -T dist-adhoc*  C. Scenario where DefaultIcon.png (use attached [^DefaultIcon.png] in ticket), and ALL icons described [here|http://docs.appcelerator.com/platform/latest/#!/guide/Icons_and_Splash_Screens] exists, but are different from DefaultIcon.png. (This is the situation when a user decide to IGNORE the DefaultIcon.png and have his very own other icons). *appc run -p ios*  D. Scenario where DefaultIcon.png is missing, but ALL icons described [here|http://docs.appcelerator.com/platform/latest/#!/guide/Icons_and_Splash_Screens] exists. (This is the situation when a user updates an existing project to the latest SDK). *appc run -p ios*  E. Scenario where DefaultIcon.png is missing, but SOME icons described [here|http://docs.appcelerator.com/platform/latest/#!/guide/Icons_and_Splash_Screens] are missing. (This is the situation when a user updates an existing project with missing icons to the latest SDK). *appc run -p ios*    h4. Expected Results:  A. Build success. See inside build->iphone->Assets.xcassets and see these files [^defaultContent.png]  B. Build success. See inside build->iphone->build->Products->Release-iphoneos->SGIcon.app->Show Package Content, there's the iTunesArtwork.png and iTunesArtwork@2x.png  C. Build success. User's icons should be prioritized over the use of DefaultIcon.png. See inside build->iphone->Assets.xcassets and see these files [^withDefaultAndAllIcons.png]  D. Build success. See inside build->iphone->Assets.xcassets and see these files [^defaultContent.png]  E. Build Fail. See error prompt   {code}  [ERROR] There are missing app icons  [ERROR] You must either create the missing icons below or create an image named ""DefaultIcon.png"" in the root of your project  [ERROR] If the DefaultIcon.png image is present, the build will use it to generate all missing icons  [ERROR] It is highly recommended that the DefaultIcon.png be 1024x1024  [ERROR] Unable to create missing icons:  [ERROR]   Resources/iphone/appicon-Small@3x.png - Used for iPhone - required size: 87x87  [ERROR]   Resources/iphone/appicon-Small-40@3x.png - Used for iPhone - required size: 120x120  [ERROR]   Resources/iphone/appicon-60@3x.png - Used for iPhone - required size: 180x180  [ERROR] An error occurred during build after 2s 554ms  {code}    h4. Actual Result:  A. Build success. But the content of build->iphone->Assets.xcassets is inconsistent. [^appcdefaultContent.png] In tooling, we have to remove all the existing icons in the Resources folder so that DefaultIcon.png can do it's job.  ",5
"ALOY-1304","09/16/2015 10:58:18","Alloy: Support Node text for TextField and TextArea","The following sample and attached screenshot shows that {{TextArea}} and {{TextField}} do not support using node text to set the {{value}} property.    {code:xml}  <Alloy>      <Window backgroundColor=""white"" layout=""vertical"">          <Label top=""20"" width=""100"" backgroundColor=""#ccc"">Hello</Label>          <TextField top=""20"" width=""100"" backgroundColor=""#ccc"">Hello</TextField>          <TextArea top=""20"" width=""100"" backgroundColor=""#ccc"">Hello</TextArea>      </Window>  </Alloy>  {code}    This is in line with [documentation|http://docs.appcelerator.com/platform/latest/#!/guide/Alloy_XML_Markup-section-35621528_AlloyXMLMarkup-PropertyMapping] so not a bug, but a feature request.",3
"ALOY-1305","09/20/2015 22:07:07","deepclean.js syntax error in line 17: missing semicolon;","Upgraded to Appcelerator Studio 5 and changed the tiapp.xml for the app (I have been in the process of developing for several months now targeted for iOS/iPad) to use Titanium SDK 5.0.0 GA.    Experienced the following issue any time I try to build the app (iOS app for iPad 2):    deepclean.js regenerates itself and results in a missing semicolon.    This is traceable to a syntax error in the GitHub source code    https://github.com/appcelerator/alloy/blob/12310dda3b987292ee1bbbbcfdd129af6b6c5cfc/hooks/deepclean.js    I have not enough experience with the platform to know how to proceed in resolving this issue.    ",1
"ALOY-1308","09/25/2015 18:40:12","iTunesArtwork is being copied into Resources/iphone instead of project root","The iTunesArtwork and iTunesArtwork@2x files are being copied from the assets/iphone directory into the Resources/iphone directory when actually they should be copied in to the project root.",0
"ALOY-1313","10/06/2015 17:33:05","Add ""bugs"" URL to package.json","Adding a URL to the location of where ""bugs"" are filed makes it easier for developers.    {code}    ""bugs"": {      ""url"": ""https://jira.appcelerator.org/browse/ALOY""    },  {code}",5
"ALOY-1314","10/08/2015 08:42:25","Alloy: Remove alpha channel from DefaultIcon.png","Xcode does not accept app icons with alpha channel in it, please remove the alpha channel for DefaultIcon.png",1
"ALOY-1315","10/08/2015 19:24:31","Update out-of-date Alloy dependencies.","There are a number of out-dated Alloy dependencies, we should update them to the latest stable versions.    {quote}  ""colors"" can be updated from 0.6.0-1 to 1.1.2 (Installed: none, Latest: 1.1.2)  ""pkginfo"" can be updated from 0.2.2 to 0.3.0 (Installed: none, Latest: 0.3.0)  ""commander"" can be updated from 0.6.1 to 2.8.1 (Installed: none, Latest: 2.8.1)  ""wrench"" can be updated from 1.3.9 to 1.5.8 (Installed: none, Latest: 1.5.8)  ""jsonlint"" can be updated from 1.5.1 to 1.6.2 (Installed: none, Latest: 1.6.2)  ""uglify-js"" can be updated from 2.4.15 to 2.4.24 (Installed: none, Latest: 2.4.24)  ""source-map"" can be updated from 0.1.9 to 0.5.1 (Installed: none, Latest: 0.5.1)  ""moment"" can be updated from 2.7.0 to 2.10.6 (Installed: none, Latest: 2.10.6)  ""node.extend"" can be updated from 1.0.10 to 1.1.5 (Installed: none, Latest: 1.1.5)  {quote}",3
"ALOY-1316","10/09/2015 12:54:36","Support use of $.args.* in any XML attribute or TSS property","We now support using {{$.args}} in XML {{if=$.args.foo}} attributes. However, it would be very useful if you could use it as value of any attribute, as well as value in TSS.    The following should then result in a Window containing a label that says _bar_:    *index.xml*  {code:xml}  <Alloy>   <Window class=""container"">    <Require src=""foo"" foo=""bar"" />   </Window>  </Alloy>  {code}    *foo.xml*  {code:xml}  <Alloy>   <Label text=""$.args.foo"" />  </Alloy>  {code}    Currently this compiles to:    {code:javascript}      $.__views.foo = Ti.UI.createLabel({          text: ""$.args.foo"",          id: ""foo""      });  {code}    If you try to use {{$.args.foo}} in TSS it will fail to compile with:    {code}  [ERROR] Expected ""Alloy"", ""L"", ""Ti"", ""Titanium"", ""WPATH"", ""["", ""false"", ""null"", ""true"", ""undefined"", ""{"", comment, end of line, number, string or whitespace but ""$"" found.  {code}",2
"ALOY-1317","10/12/2015 09:08:02","Alloy: Default top-level ID doesn't take if-attribute into account","While ALOY-851 is said to be fixed, the following:    {code:xml}  <Alloy>      <TabGroup if=""Alloy.Globals.requiredVersion"">    <Require src=""list"" />    <Require src=""apis"" />    <Require src=""console"" />   </TabGroup>     <Window if=""!Alloy.Globals.requiredVersion"">    <Label>This sample requires Titanium 5.1 or later</Label>   </Window>    </Alloy>  {code}    still compiles to:    {code:javascript}      if (Alloy.Globals.requiredVersion) {          var __alloyId11 = [];          $.__views.__alloyId12 = Alloy.createController(""list"", {              id: ""__alloyId12""          });          __alloyId11.push($.__views.__alloyId12.getViewEx({              recurse: true          }));          $.__views.__alloyId14 = Alloy.createController(""apis"", {              id: ""__alloyId14""          });          __alloyId11.push($.__views.__alloyId14.getViewEx({              recurse: true          }));          $.__views.__alloyId16 = Alloy.createController(""console"", {              id: ""__alloyId16""          });          __alloyId11.push($.__views.__alloyId16.getViewEx({              recurse: true          }));          $.__views.index = Ti.UI.createTabGroup({              tabsBackgroundColor: ""white"",              tabsTintColor: Alloy.CFG.brandPrimary,              tabs: __alloyId11,              id: ""index""          });          $.__views.index && $.addTopLevelView($.__views.index);      }      if (!Alloy.Globals.requiredVersion) {          $.__views.__alloyId17 = Ti.UI.createWindow({              backgroundColor: ""#fff"",              barColor: Alloy.CFG.brandPrimary,              navTintColor: ""#FFF"",              translucent: false,              titleAttributes: {                  color: ""#FFF""              },              id: ""__alloyId17""          });          $.__views.__alloyId17 && $.addTopLevelView($.__views.__alloyId17);          $.__views.__alloyId18 = Ti.UI.createLabel({              text: ""This sample requires Titanium 5.1 or later"",              id: ""__alloyId18""          });          $.__views.__alloyId17.add($.__views.__alloyId18);      }  {code}    which shows that the negative condition does not give the ID ""index"" to the window, which it should.",5
"ALOY-1318","10/14/2015 17:46:43","DefaultIcon(-platform).png should be theme-able","The new {{/DefaultIcon.png}} which has platform specific versions at {{/DefaultIcon-<platform>.png}} should be theme-able via Alloy.    We probably need a similar approach as with {{i18n}} and {{platform}} since we can't overwrite the {{DefaultIcon.png}} in the project root, so we have to do it at build-time.    - https://github.com/appcelerator/alloy/pull/662/files#diff-ddbdb7300fa15590afdfee9246ac61fcR327  - https://github.com/appcelerator/alloy/pull/662/files#diff-6487ccfa4909144bbc33134e4d85bdddR159    Kindly pointed out by [~jasonkneen]:  https://twitter.com/jasonkneen/status/654326054488834048",5
"ALOY-1319","10/14/2015 22:25:12","Support CardView in XML","Titanium SDK 5.1.0 introduces a new view container for Android called CardView.  http://appcelerator.github.io/appc-docs/latest/#!/api/Titanium.UI.Android.CardView    We should support it in XML and implicitly set the namespace to Ti.UI.Android.    Example XML of sample in API docs:  {noformat}  <Alloy>    <Window>      <ScrollView>        <CardView ns=""Ti.UI.Android"">          <Label>A long label...</Label>        </CardView>        <CardView ns=""Ti.UI.Android"">          <Label>A long label...</Label>        </CardView>        <CardView ns=""Ti.UI.Android"">          <Label>A long label...</Label>        </CardView>        ...      </ScrollView>    </Window>  </Alloy>  {noformat}",5
"ALOY-1320","10/28/2015 12:43:27","Styles not applied when an element uses another namespace","When an Alloy view element uses another namespace styles are no longer applied. When you set {{ns}} to the default {{Ti.UI}} it still works, but any other value will not.    *index.xml*    {code:xml}  <Alloy>      <Window>          <View />          <View ns=""Ti.UI"" />          <View ns=""Ti.UI.Android"" />      </Window>  </Alloy>  {code}    *index.tss*    {code}  'View': {   backgroundColor: 'red'  }  {code}    *Compiled code*    {code:javascript}      $.__views.__alloyId0 = Ti.UI.createView({          backgroundColor: ""red"",          id: ""__alloyId0""      });      $.__views.index.add($.__views.__alloyId0);      $.__views.__alloyId1 = Ti.UI.createView({          backgroundColor: ""red"",          id: ""__alloyId1""      });      $.__views.index.add($.__views.__alloyId1);      $.__views.__alloyId2 = Ti.UI.Android.createView({          id: ""__alloyId2""      });  {code}",5
"ALOY-1321","10/29/2015 01:31:23","iOS: packaged app icons for new projects needs to be updated","Since TI SDK 5.0.0, we support app icons resizing, placing them into assets catalog etc, so we should do a clean up on the app icons to reduce the number of warnings being shown now.    1. All app icons should NOT have alpha channel.  2. Remove unsupported app icons.    See current trace when there's no DefaultIcon.png or DefaultIcon-ios.png:  {code}  [INFO]  Creating app icon set  [DEBUG] Unsupported app icon Resources/iphone/appicon-176@2x.png, skipping  [DEBUG] Unsupported app icon Resources/iphone/appicon-60.png, skipping  [WARN]  Resources/iphone/appicon-60@2x.png contains an alpha channel and will be flattened against a white background  [WARN]  Resources/iphone/appicon-60@3x.png contains an alpha channel and will be flattened against a white background  [DEBUG] Unsupported app icon Resources/iphone/appicon-72.png, skipping  [DEBUG] Unsupported app icon Resources/iphone/appicon-72@2x.png, skipping  [WARN]  Resources/iphone/appicon-76.png contains an alpha channel and will be flattened against a white background  [WARN]  Resources/iphone/appicon-Small-40.png contains an alpha channel and will be flattened against a white background  [WARN]  Resources/iphone/appicon-Small-40@2x.png contains an alpha channel and will be flattened against a white background  [DEBUG] Unsupported app icon Resources/iphone/appicon-Small-50.png, skipping  [DEBUG] Unsupported app icon Resources/iphone/appicon-Small-50@2x.png, skipping  [WARN]  Resources/iphone/appicon-Small.png contains an alpha channel and will be flattened against a white background  [WARN]  Resources/iphone/appicon-Small@2x.png contains an alpha channel and will be flattened against a white background  [DEBUG] Unsupported app icon Resources/iphone/appicon@2x.png, skipping  {code}    *OR* we can just remove all the ios app icons in the assets folder,  and only have DefaultIcon.png in the root of the project to avoid confusion.",1
"ALOY-1323","11/01/2015 18:49:35","Alloy: module-tag in Alloy element effects all controller-views","The attached app-folder demonstrates that when you use the {{module}} tag on the {{<Alloy>}} tag of one view, this will be applied to *all* other controller-views as well.    1. Compile the app.  2. Open {{Resources/iphone/controllers/testWindow.js}}.  3. Confirm that it has {{(require(""testModule"").createWindow || Ti.UI.createWindow)}} for all views as well, while only {{app/views/index.xml}} has has the {{module}} tag.    Found by [~falko]",3
"ALOY-1325","11/04/2015 11:51:27","Add PreviewContext element to XML views","Alloy should support the new {{Ti.UI.iOS.createPreviewContext}}.    * A PreviewContext can be added to most views via their {{previewContext}} property.  * The PreviewContext itself has a {{preview}} property which must be assigned a single View.  * The PreviewContext also has an {{actions}} property for one or more actions or action groups.    {code:xml}  <Alloy>   <View>    <PreviewContext onPeek=""fn1"" onPop=""fn2"" contentHeight=""300"">     <Preview>      <View>       <Label>Hello</Label>      </View>     </Preview>    </PreviewContext>   <View>   <ListView>    <PreviewContext onPeek=""fn"">     <Preview>      <View>       <Label>Hello</Label>      </View>     </Preview>     <Actions>      <Action title=""Email"" onClick=""fn"" />      <ActionGroup title=""Delete"">       <Action title=""Confirm"" onClick=""fn"" />       <Action title=""Cancel"" onClick=""fn"" />      </ActionGroup>     </Actions>    </PreviewContext>    <ListSection>     <ListItem title=""Hello"" />    </ListSection>   </ListView>  </Alloy>  {code}",8
"ALOY-1331","11/16/2015 23:34:31","Windows: App crashes with 'Cannot find variable: OS_BLACKBERRY","h5.Description    When building an Alloy app for Windows Platform the app crashes with the below error      The error originates from [this line in alloy.js|https://github.com/appcelerator/alloy/blob/1fb9878e769c6afee6f46516c08b4708830e26a6/Alloy/lib/alloy.js#L486] and removing the OS_BLACKBERRY check allows the app to launch.    {code}  [ERROR] :  Application Error: {  [ERROR] :    ""line"": 2,  [ERROR] :    ""column"": 10,  [ERROR] :    ""message"": ""Error while require(/app) Error while require(alloy) Can't find variable: OS_BLACKBERRY"",  [ERROR] :    ""native_stack"": [  [ERROR] :      ""JSExportClass<class Titanium::GlobalObject>::CallNamedFunction""  [ERROR] :    ]  [ERROR] :  }  {code}    h5.Steps to reproduce     1. Create an Alloy app using {{appc new}}  2. Build the app to Windows Platform using {{appc run -p windows}}    h5.Actual Result     App crashes with the below       {code}  [ERROR] :  Application Error: {  [ERROR] :    ""line"": 2,  [ERROR] :    ""column"": 10,  [ERROR] :    ""message"": ""Error while require(/app) Error while require(alloy) Can't find variable: OS_BLACKBERRY"",  [ERROR] :    ""native_stack"": [  [ERROR] :      ""JSExportClass<class Titanium::GlobalObject>::CallNamedFunction""  [ERROR] :    ]  [ERROR] :  }  {code}    h5.Expected result    App should not crash",1
"ALOY-1335","11/27/2015 10:41:20","Use Alloy's deepExtend to handle conditional on-device style inheritance","Alloy selectors provide ways to overload style rules based on switches (formFactor, OS, conditional rules, etc.). Say the TSS is somehow:    {code}  ...  "".title-home"": {   bottom: 4,  },  "".title-home[formFactor=tablet]"": {   bottom: 8  },  ...  {code}    The generated code will look like:    {code}  Alloy.deepExtend(true, o, {      bottom: 4  });  Alloy.isTablet && _.extend(o, {      bottom: 8  });  {code}    If this works fine with most of the properties, this is particularly annoying with font or nested properties. For instance,     {code}  "".title-home"": {   font: {    fontFamily: ""Delius-Regular"",    fontSize: 11   }  },  "".title-home[formFactor=tablet]"": {   font: {    fontSize: 22   }  },  {code}    will result in the font name being simply ignored on tablets, as {{_.extend()}} is not a deepExtend method. We're lucky, Alloy provides a {{deepExtend()}} implementation which we may want to use. I therefore propose to switch from {{_.extend()}} to Alloy's {{deepExtend}} implementation. This will allow much more efficient ways of integrating complex graphical interfaces, with style inheritances all across the app:    {code:xml}  <Label class=""fonticon icon-row-right icon-arrow-md icon-arrow-right white"" />  {code}    All styles are merged deeply, and it becomes unnecessary to repeat over and over the font name.    I _know_ that this change may break many tests, but I strongly believe that this behavior is the right way styles _should_ work, in the sake for development efficiency.",5
"ALOY-1340","12/14/2015 17:32:48","Alloy selective compilation broken since ALOY-1332","Since [this commit|https://github.com/feons/alloy/commit/25855c1f342eecf6cb6e69dca007d05ebde1771b#diff-ddbdb7300fa15590afdfee9246ac61fcR177], Alloy's selective compilation is broken since the {{Resources}}'s {{alloy.js}} file gets replaced each and every time the alloy compile command is called.    Instead, the fix should look if there's a file restriction, and not replace {{alloy.js}} if this restriction does not affect this file.    This is particularly problematic when using some compilation watcher (aka. tishadow + grunt-tishadow), which look for changes in the {{Resources}} folder to re-launch the app. With the current change, the app will be refreshed using a template-based {{alloy.js}} file (not a recompiled one).",3
"ALOY-1341","12/16/2015 21:05:23","Add Arabic lang to builtin MomentJS","Community PR: https://github.com/appcelerator/alloy/pull/741  {quote}  Arabic Saudi Arabic is the common use from GCC countries, Yemen, Egypt and Sudan.  Also using Arabic number ١ ٢ ٣ ٤ ٥ ٦ ٧ ٨ ٩ instead of English  {quote}",2
"ALOY-1342","12/16/2015 21:57:46","Sample Todo App TextField text color to black","Community PR: https://github.com/appcelerator/alloy/pull/702",1
"ALOY-1345","01/04/2016 21:20:44","iOS Attributed Strings are not showing","h6.Issue Description  Using Attributed String for label in Alloy, it is not showing up in iOS. Where as the same is working properly for Android and in classic.     h6.Steps to reproduce  //Alloy   # Create a new simple project application in alloy  # Open the index.xml view  # Add the next Label:   {code}   <Label>              <AttributedString class=""as"">                  Appcelerator Titanium rocks!               </AttributedString>          </Label>  {code}  # Open the index.tss Style   # Add the next style:   {code}  "".as"" : {    attributes: [     {      type: Ti.UI.ATTRIBUTE_FOREGROUND_COLOR,      value: 'red',      range: [0, 4]     }    ]   }   {code}  # Run    // Classic (Working project)  # Create a new cassic default application project  # Open the app.js file  # Replace the content with the next code:  {code}  var win = Ti.UI.createWindow({   backgroundColor: ""white""  });    var attr = Titanium.UI.createAttributedString({      text: ""Appcelerator Rocks""  });    // Underlines text  attr.addAttribute({   type: Ti.UI.ATTRIBUTE_FOREGROUND_COLOR,    value: 'red',    range: [0, 4]   });    var label = Titanium.UI.createLabel({      left: 20,      right: 20,      height: Titanium.UI.SIZE,      attributedString: attr  });    win.add(label);    win.open();    {code}  # Run",3
"ALOY-1346","01/06/2016 15:54:07","Controller template should no longer declare args variable","Since Alloy 1.6.0 (by ALOY-1092) the compiled controllers [have the following line|https://github.com/appcelerator/alloy/blob/master/Alloy/template/component.js#L20]:    {code:javascript}   this.args = arguments[0] || {};   // ..   var $ = this;  {code}    Still, our [template for new controllers|https://github.com/appcelerator/alloy/blob/master/Alloy/template/controller.js] has:    {code:javascript}  var args = arguments[0] || {};  {code}    Clearly this is no longer needed. The template can be emptied and the availability of {{$.args}} should be documented. I'll create a separate TIDOC ticket for that.",1
"ALOY-1350","02/04/2016 08:54:16","Warning on compile: moment construction falls back to js Date","Alloy spits out a Moment.js warning on compile and a long stack trace on debug-level:    {code}  [INFO]  [ios.xml] view processing...  [INFO]    style:      ""ios.tss""  [INFO]    view:       ""ios.xml""  [WARN]  ing: moment construction falls back to js Date. This is discouraged and will be removed in upcoming major release. Please refer to https://github.com/moment/moment/issues/1407 for more info.  [ERROR]  [DEBUG]     at Function.createFromInputFallback (/Users/fokkezb/dev/forks/alloy/node_modules/moment/moment.js:746:36)  [DEBUG]     at configFromString (/Users/fokkezb/dev/forks/alloy/node_modules/moment/moment.js:826:32)  [DEBUG]     at configFromInput (/Users/fokkezb/dev/forks/alloy/node_modules/moment/moment.js:1353:13)  [DEBUG]     at prepareConfig (/Users/fokkezb/dev/forks/alloy/node_modules/moment/moment.js:1340:13)  [DEBUG]     at createFromConfig (/Users/fokkezb/dev/forks/alloy/node_modules/moment/moment.js:1307:44)  [DEBUG]     at createLocalOrUTC (/Users/fokkezb/dev/forks/alloy/node_modules/moment/moment.js:1385:16)  [DEBUG]     at local__createLocal (/Users/fokkezb/dev/forks/alloy/node_modules/moment/moment.js:1389:16)  [DEBUG]     at utils_hooks__hooks (/Users/fokkezb/dev/forks/alloy/node_modules/moment/moment.js:16:29)  [DEBUG]     at Object.exports.createDate (/Users/fokkezb/dev/forks/alloy/Alloy/utils.js:572:26)  [DEBUG]     at processStyle (/Users/fokkezb/dev/forks/alloy/Alloy/commands/compile/styler.js:364:17)  [DEBUG]     at Object.exports.processStyle (/Users/fokkezb/dev/forks/alloy/Alloy/commands/compile/styler.js:420:2)  [DEBUG]     at Object.exports.generateStyleParams (/Users/fokkezb/dev/forks/alloy/Alloy/commands/compile/styler.js:600:20)  [DEBUG]     at parse (/Users/fokkezb/dev/forks/alloy/Alloy/commands/compile/parsers/default.js:132:19)  [DEBUG]     at Object.exports.parse (/Users/fokkezb/dev/forks/alloy/Alloy/commands/compile/parsers/base.js:11:17)  [DEBUG]     at Object.exports.parse (/Users/fokkezb/dev/forks/alloy/Alloy/commands/compile/parsers/default.js:10:27)  [DEBUG]     at parse (/Users/fokkezb/dev/forks/alloy/Alloy/commands/compile/parsers/Ti.UI.Picker.js:72:31)  [DEBUG]     at Object.exports.parse (/Users/fokkezb/dev/forks/alloy/Alloy/commands/compile/parsers/base.js:11:17)  [DEBUG]     at Object.exports.parse (/Users/fokkezb/dev/forks/alloy/Alloy/commands/compile/parsers/Ti.UI.Picker.js:29:27)  [DEBUG]     at Object.exports.generateNode (/Users/fokkezb/dev/forks/alloy/Alloy/commands/compile/compilerUtils.js:317:48)  [DEBUG]     at /Users/fokkezb/dev/forks/alloy/Alloy/commands/compile/compilerUtils.js:401:29  [DEBUG]     at Array.forEach (native)  [DEBUG]     at Function._.each._.forEach (/Users/fokkezb/dev/forks/alloy/Alloy/lib/alloy/underscore.js:79:11)  [DEBUG]     at Object.exports.generateNode (/Users/fokkezb/dev/forks/alloy/Alloy/commands/compile/compilerUtils.js:392:5)  [DEBUG]     at /Users/fokkezb/dev/forks/alloy/Alloy/commands/compile/compilerUtils.js:401:29  [DEBUG]     at Array.forEach (native)  [DEBUG]     at Function._.each._.forEach (/Users/fokkezb/dev/forks/alloy/Alloy/lib/alloy/underscore.js:79:11)  [DEBUG]     at Object.exports.generateNode (/Users/fokkezb/dev/forks/alloy/Alloy/commands/compile/compilerUtils.js:392:5)  [DEBUG]     at /Users/fokkezb/dev/forks/alloy/Alloy/commands/compile/compilerUtils.js:401:29  [DEBUG]     at Array.forEach (native)  [DEBUG]     at Function._.each._.forEach (/Users/fokkezb/dev/forks/alloy/Alloy/lib/alloy/underscore.js:79:11)  [DEBUG]     at Object.exports.generateNode (/Users/fokkezb/dev/forks/alloy/Alloy/commands/compile/compilerUtils.js:392:5)  [DEBUG]     at Object.exports.generateNodeExtended (/Users/fokkezb/dev/forks/alloy/Alloy/commands/compile/compilerUtils.js:254:17)  [DEBUG]     at parse (/Users/fokkezb/dev/forks/alloy/Alloy/commands/compile/parsers/Ti.UI.Tab.js:27:14)  [DEBUG]     at Object.exports.parse (/Users/fokkezb/dev/forks/alloy/Alloy/commands/compile/parsers/base.js:11:17)  [DEBUG]     at Object.exports.parse (/Users/fokkezb/dev/forks/alloy/Alloy/commands/compile/parsers/Ti.UI.Tab.js:7:27)  [DEBUG]     at Object.exports.generateNode (/Users/fokkezb/dev/forks/alloy/Alloy/commands/compile/compilerUtils.js:317:48)  [DEBUG]     at /Users/fokkezb/dev/forks/alloy/Alloy/commands/compile/index.js:693:28  [DEBUG]     at Array.forEach (native)  [DEBUG]     at Function._.each._.forEach (/Users/fokkezb/dev/forks/alloy/Alloy/lib/alloy/underscore.js:79:11)  [DEBUG]     at parseAlloyComponent (/Users/fokkezb/dev/forks/alloy/Alloy/commands/compile/index.js:687:5)  [DEBUG]     at /Users/fokkezb/dev/forks/alloy/Alloy/commands/compile/index.js:304:6  [DEBUG]     at Array.forEach (native)  [DEBUG]     at Function._.each._.forEach (/Users/fokkezb/dev/forks/alloy/Alloy/lib/alloy/underscore.js:79:11)  [DEBUG]     at /Users/fokkezb/dev/forks/alloy/Alloy/commands/compile/index.js:293:6  [DEBUG]     at Array.forEach (native)  [DEBUG]     at Function._.each._.forEach (/Users/fokkezb/dev/forks/alloy/Alloy/lib/alloy/underscore.js:79:11)  [DEBUG]     at module.exports (/Users/fokkezb/dev/forks/alloy/Alloy/commands/compile/index.js:289:4)  [DEBUG]     at Object.<anonymous> (/Users/fokkezb/dev/forks/alloy/Alloy/alloy.js:113:46)  [DEBUG]     at Module._compile (module.js:413:34)  [DEBUG]     at Object.Module._extensions..js (module.js:422:10)  [DEBUG]     at Module.load (module.js:357:32)  [DEBUG]     at Function.Module._load (module.js:314:12)  [DEBUG]     at Module.require (module.js:367:17)  [DEBUG]     at require (internal/module.js:16:19)  [DEBUG]     at Object.<anonymous> (/Users/fokkezb/dev/forks/alloy/bin/alloy:3:1)  [DEBUG]     at Module._compile (module.js:413:34)  [DEBUG]     at Object.Module._extensions..js (module.js:422:10)  [DEBUG]     at Module.load (module.js:357:32)  [DEBUG]     at Function.Module._load (module.js:314:12)  [DEBUG]     at Function.Module.runMain (module.js:447:10)  [DEBUG]     at startup (node.js:139:18)  [DEBUG]     at node.js:999:3  [INFO]    controller: ""ios.js""  {code}    Source (but there's probably more):  https://github.com/appcelerator/alloy/blob/master/Alloy/utils.js#L572    PS: We fixed same issue for 360 in APPTS-6100",0
"ALOY-1353","02/04/2016 09:44:35","Annotation doesn't appear in only Alloy Map","I followed this example:    http://docs.appcelerator.com/platform/latest/#!/api/Modules.Map-method-createAnnotation    but if i create the map with Alloy, the map is ok but the annotation doesn't appear. With this example (no Alloy) all work well:    http://docs.appcelerator.com/platform/latest/#!/guide/iOS_Map_Kit    i think there are a bug with annotation in Alloy.",5
"ALOY-1352","02/08/2016 16:29:57","Alloy: add support for xhigh on iOS in measurement builtin","{{dpToPX}} and {{pxToDP}} methods of the measurement module should support HD Retina iOS    https://github.com/appcelerator/alloy/blob/master/Alloy/builtins/measurement.js",3
"ALOY-1351","02/08/2016 20:16:54","Generating `Resources/alloy.js` from template is not required when selective compile","Community PR: https://github.com/appcelerator/alloy/pull/751    When compiling only app/alloy.js, generating Resources/alloy.js from template is not required.  Because Resource/alloy.js is not user's code but builtin code. So when compiling specific controller and alloy.js only, Generate Resource/alloy.js should be skipped.    \\  h5. Reproduce steps  # delete all file of Resources folder.  # run : alloy compile -q ios --config file=app/alloy.js  # you can check compiling result on Resource  {{Resources/iphone/alloy.js}} is generated from template  But {{Resources/iphone/alloy.js}} is not optimized. It has uncompiled CONSTANT such as OS_MOBILEWEB. it makes undefined error on runtime.    ",3
"ALOY-1356","02/13/2016 16:39:34","Add support for LivePhotoView under Ti.UI.iOS namespace","With TIMOB-19666 resolved for 5.2, the Alloy version shipping with the 5.2 CLI should support defining the {{Ti.UI.iOS.LivePhotoView}} in XML.",3
"ALOY-1357","02/13/2016 18:49:03","Support Ti.UI.iOS.MenuPopup in XML","With TIMOB-5812 resolved for the 5.2.0 SDK, Alloy should support this in XML for the version to be included in Unified CLI 5.2.0.    See classic API at:  http://docs.appcelerator.com/platform/latest/#!/api/Titanium.UI.iOS.MenuPopup    The view is not added to any parent and wants a list of strings as items, just like an OptionDialog",5
"ALOY-1358","02/13/2016 18:56:29","Support Ti.UI.iOS.BlurView in XML","With TIMOB-20176 resolved for the 5.4.0 SDK, the Alloy version shipping with CLI 5.4.0 should include support for {{Ti.UI.iOS.BlurView}} in XML.    The view must be added to an ImageView.",3
"ALOY-1360","02/22/2016 15:49:23","Allow baseController as attribute of Alloy xml tag","As a developer,  I want to add an attribute of ""baseController"" to the root Alloy xml tag in an Alloy Controller,  So that I can define the baseController of a new controller without having to create a .js file.      {code:xml}  <Alloy baseController=""myBaseController"">      <Label text=""baseControllerTest"" />  </Alloy>  {code}    Added PR:  https://github.com/appcelerator/alloy/pull/761  ",3
"ALOY-1361","02/25/2016 14:50:54","Destroy calling off on variables that may be undefined","If you have an Alloy component that uses databinding and has conditional code defined in the xml, the destroy function is not taking into consideration the fact that the component may be undefined before calling the `off` function.    Alloy xml:     {code:xml}              <TableViewRow id=""trainer_row"" layout=""composite"" class=""listitem_row"" hasChild=""true"" onClick=""$.togglePicker"" if=""$.args.editmode"">                          <View height=""50"" top=""0"" layout=""composite"" touchEnabled=""false"">                              <Label text=""Trainer"" class=""listitem_settings_name"" touchEnabled=""false"" />                              <Label text=""{mymodel.trainer_name}"" class=""listitem_settings_value_haschild"" touchEnabled=""false"" />                          </View>                          <Picker id=""trainer"" width=""350"" height=""150"" visible=""false"" onChange=""$.onChange"" top=""40"">                              <Column dataCollection=""trainer"">                                  <Row title=""{name}"" value=""{id}"" />                              </Column>                          </Picker>                      </TableViewRow>  {code}    Generated code:     {code:javascript}    if ($.args.editmode) {           // ------ only showing relevant code  ------             var __alloyId287 = Alloy.Collections[""trainer""] || trainer;          __alloyId287.on(""fetch destroy change add remove reset"", __alloyId288);          }        exports.destroy = function() {          __alloyId281.off(""fetch destroy change add remove reset"", __alloyId282);          __alloyId293.off(""fetch destroy change add remove reset"", __alloyId294);          __alloyId314.off(""fetch destroy change add remove reset"", __alloyId315);          __alloyId330.off(""fetch destroy change add remove reset"", __alloyId331);   Alloy.Models.mymodel.off(""fetch change destroy"", __alloyId346);      };    {code}    In this case, `__alloyId281` is actually undefined because it was declared and a value assigned inside the conditional if block.      This is a pretty serious issue as I believe the error that occurs is stopping the other (existing) `off` functions from being called and causing a memory leak.    ",3
"ALOY-1368","03/16/2016 12:22:48","Complex data binding for individual model doesn't work with transform() method","The complex data binding introduced by ALOY-443 does not work if the model has a {{transform()}} method:    {code:xml}  <Alloy>   <Model src=""user"" />   <Window>    <Label title=""{user.foo}"" />    <Label title=""the {user.foo}"" />    <Label title=""{user.foo} - {user.bar}"" />   </Window>  </Alloy>  {code}    Compiles to:    {code:js}      var __alloyId13 = function() {          $.__alloyId2.title = _.isFunction(Alloy.Models.user.transform) ? Alloy.Models.user.transform()[""foo""] : _.template(""<%=user.foo%>"", {              user: Alloy.Models.user.toJSON()          });          $.__alloyId3.title = _.isFunction(Alloy.Models.user.transform) ? Alloy.Models.user.transform()[""foo""] : _.template(""the <%=user.foo%>"", {              user: Alloy.Models.user.toJSON()          });          $.__alloyId4.title = _.isFunction(Alloy.Models.user.transform) ? Alloy.Models.user.transform()[""foo""] : _.template(""<%=user.foo%> - <%=user.bar%>"", {              user: Alloy.Models.user.toJSON()          });      };  {code}    So, if the model has a {{transform()}} method all three labels will only show the value of the foo attribute.    The correct code should be:    {code:js}      var __alloyId13 = function() {          var transformed = _.isFunction(Alloy.Models.user.transform) ? Alloy.Models.user.transform() : Alloy.Models.user.toJSON();          $.__alloyId2.title = _.template(""<%=user.foo%>"", {              user: transformed          });          $.__alloyId3.title = _.template(""the <%=user.foo%>"", {              user: transformed          });          $.__alloyId4.title = _.template(""<%=user.foo%> - <%=user.bar%>"", {              user: transformed          });      };  {code}",5
"ALOY-1474","03/28/2016 08:31:47","Regression: Model data binding no longer works","For  ALOY-1369 I changed the interpolation of binding templates:  https://github.com/appcelerator/alloy/pull/769/files#diff-a59a2178e486f81366775c39e5393695R571    As found by [~hazemkhaled] this caused a regression in data binding of models without a transform method:  https://jira.appcelerator.org/browse/ALOY-1254?focusedCommentId=380741&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-380741    Creating test app and fix.",5
"ALOY-1475","03/28/2016 12:33:57","Alloy compile tests should show diff with known good generated code","Currently when compile tests fail they show:    !Screen Shot 2016-03-28 at 13.06.58.png!    There's two problems with this:    1. It is showing both the message and the stack trace, last is of no use  2. It is not showing what actually is different    I expect it to give:    !Screen Shot 2016-03-28 at 13.06.20.png!",5
"ALOY-1476","03/28/2016 12:42:10","Travis does not test against known good generated code because it targets Linux only","While working on ALOY-1474 and local tests I ran into 355 failures to match against known good generated code, while Travis didn't fail at all.    After submitting https://github.com/appcelerator/alloy/pull/775 I noticed Travis logs don't mention the tests against the known good generated code at all:    {code}  [PASS] alloy compile advanced/device_query --> preparing test app  [PASS] alloy compile advanced/device_query [android] --> compiles without critical error  [PASS] alloy compile advanced/device_query [android] --> leaves no compiler directives in generated code  [PASS] alloy compile advanced/device_query [android] --> has no undefined style entries  [PASS] alloy compile advanced/device_query [ios] --> compiles without critical error  [PASS] alloy compile advanced/device_query [ios] --> leaves no compiler directives in generated code  [PASS] alloy compile advanced/device_query [ios] --> has no undefined style entries  [PASS] alloy compile advanced/device_query [mobileweb] --> compiles without critical error  [PASS] alloy compile advanced/device_query [mobileweb] --> leaves no compiler directives in generated code  [PASS] alloy compile advanced/device_query [mobileweb] --> has no undefined style entries  {code}    while locally it fails:    {code}  [PASS] alloy compile advanced/device_query --> preparing test app  [PASS] alloy compile advanced/device_query [android] --> compiles without critical error  [PASS] alloy compile advanced/device_query [android] --> leaves no compiler directives in generated code  [PASS] alloy compile advanced/device_query [android] --> has no undefined style entries  [PASS] alloy compile advanced/device_query [android] --> generated a alloy/controllers/index.js file  [FAIL] alloy compile advanced/device_query [android] --> matches known good generated code for alloy/controllers/index.js  [PASS] alloy compile advanced/device_query [ios] --> compiles without critical error  [PASS] alloy compile advanced/device_query [ios] --> leaves no compiler directives in generated code  [PASS] alloy compile advanced/device_query [ios] --> has no undefined style entries  [PASS] alloy compile advanced/device_query [ios] --> generated a alloy/controllers/index.js file  [FAIL] alloy compile advanced/device_query [ios] --> matches known good generated code for alloy/controllers/index.js  [PASS] alloy compile advanced/device_query [mobileweb] --> compiles without critical error  [PASS] alloy compile advanced/device_query [mobileweb] --> leaves no compiler directives in generated code  [PASS] alloy compile advanced/device_query [mobileweb] --> has no undefined style entries  [PASS] alloy compile advanced/device_query [mobileweb] --> generated a alloy/controllers/index.js file  [FAIL] alloy compile advanced/device_query [mobileweb] --> matches known good generated code for alloy/controllers/index.js  {code}    I also saw this test only runs on darwin:  https://github.com/appcelerator/alloy/blob/master/test/specs/compile.js#L173    We don't specify an OS:  https://github.com/appcelerator/alloy/blob/master/.travis.yml    Which seems to make Travis to only test on Linux:  https://travis-ci.org/appcelerator/alloy/builds/118954721    Unfortunately enabling osx on Travis fails:  https://travis-ci.org/appcelerator/alloy/jobs/118956715    Because of:  https://github.com/travis-ci/travis-ci/issues/2311    Which can be workaround like:  https://github.com/travis-ci/travis-ci/issues/2311#issuecomment-171180704    Which I did:  https://github.com/appcelerator/alloy/pull/775/files#diff-354f30a63fb0907d4ad57269548329e3L1    And now Travis is failing 355 tests on OSX just like local:  https://travis-ci.org/appcelerator/alloy/builds/118959856    I've checked all 355 failures and all were expected because of tests that were not updated for tickets like ALOY-1355, ALOY-1237 and ALOY-1335, so generated new known good code for all.",5
"ALOY-1478","03/29/2016 13:25:26","Data binding fails when binding string or model attribute name has dash, space or quote","Alloy data binding can't handle complex bindings strings or model attributes names that contain a dash, space or quotes.    This is in part because of the way it renders the compiled {{\_.template()}} code, but also because of limitations in {{\_.template()}} itself:  http://stackoverflow.com/a/15956433/4626813    {code:xml}  <Alloy>   <Model src=""mymodel"" />   <Collection src=""mymodel"" />   <Window>    <ScrollView layout=""vertical"">       <!-- ALL OK -->     <Label top=""30"" text=""{mymodel.a}"" />       <!-- COMPILE ERROR -->     <!-- <Label text=""{mymodel.a'b}"" /> -->     <!-- <Label text=""he's {mymodel.a}"" /> -->       <!-- RUN-TIME ERROR -->     <!-- <Label text=""{mymodel.a-b}"" /> -->     <!-- <Label text=""{mymodel[a-b]}"" /> -->     <!-- <Label text=""{mymodel.a b}"" /> -->     <!-- <Label text='{mymodel.a""b}' /> -->       <ListView>      <ListSection dataCollection=""mymodel"">         <!-- ALL OK -->       <ListItem title=""{a}"" />         <!-- COMPILE ERROR -->       <!-- <ListItem title=""{a'b}"" /> -->         <!-- RUN-TIME ERROR -->       <!-- <ListItem title=""{a-b}"" /> -->       <!-- <ListItem title=""{[a-b]}"" /> -->       <!-- <ListItem title=""{a b}"" /> -->       <!-- <ListItem title='{a""b}' /> -->        </ListSection>     </ListView>    </ScrollView>   </Window>  </Alloy>  {code}    *index.js*    {code:js}  var test = {    a: 'a',    'a-b': 'a-b',    'a b': 'a b',    'a""b': 'a""b',    ""a'b"": ""a'b""  };    Alloy.Models.mymodel.set(test);  Alloy.Collections.mymodel.reset([test]);    $.index.open();  {code}    *mymodel.js*    {code:js}  exports.definition = {};  {code}",5
"ALOY-1479","03/30/2016 14:41:20","Regression: Model instance data binding no longer works","Data binding of local model instances throws an exception in Alloy 1.8.3 and 1.8.4 because of [this line change|https://github.com/appcelerator/alloy/pull/769/files#diff-a59a2178e486f81366775c39e5393695L521] to resolve ALOY-1369.    *XML*    {code:xml}    <Label top=""20"" text=""{$.modelinstance.foo}"" />    <Label text=""{$.modelinstance.foo} {$.modelinstance.bar}"" />  {code}    *compiled*    {code:js}          $.__alloyId4.text = _.template(""{$.modelinstance.foo}"", {              modelinstance: transformed          }, {              interpolate: /\{([\s\S]+?)\}/g          });          $.__alloyId5.text = _.template(""{$.modelinstance.foo} {$.modelinstance.bar}"", {              modelinstance: transformed          }, {              interpolate: /\{([\s\S]+?)\}/g          });  {code}",5
"ALOY-1480","03/31/2016 10:03:15","Bug/Regression: Data binding always returns string values","For ALOY-443 (Alloy 1.5.0) we started to use {{_.template()}} for complex model data binding.    With ALOY-1368 and ALOY-1369 we also adopted this method for complex collection data binding.    Since {{_.template()}} always returns a string, it doesn't work for binding objects, e.g. an attributedString as the attached test case:    {code:xml}  <Alloy>   <Collection src=""source"" />   <Window class=""container"">    <ListView id=""List"" defaultItemTemplate=""test"" top=""30"">     <Templates>      <ItemTemplate name=""test"" height=""50"">       <View height=""Ti.UI.SIZE"" layout=""vertical"">        <Label id=""simpleTestLabel"" bindId=""simpleTestLabel""></Label>        <Label id=""attributedTestLabel"" bindId=""attributedTestLabel"" top=""5""></Label>       </View>      </ItemTemplate>     </Templates>     <ListSection dataCollection=""source"" dataTransform=""transform"">      <ListItem simpleTestLabel:text=""{simple}"" attributedTestLabel:attributedString=""{attributedString}""></ListItem>     </ListSection>    </ListView>   </Window>  </Alloy>  {code}    h2. Original description    Just tested that, using alloy v1.8.2 and v1.8.5 I was unable to set the `attributedString` property via a `ListItem` template.  Using alloy 1.7.35 everything is working fine.    I attach a simple test project that contains a `ListView` with a template composed by two labels.  On the first label I set the `text` property with a simple model string and on the second one i set the `attributedString`.    For the first label everything is working correctly (as expected) and for the second one is working only using v1.7.35 of alloy.",8
"ALOY-1486","04/01/2016 20:10:17","iOS, Android: Global styles is not overridden by local styles for orientationModes.","h6. Description  If we set orientationModes on window in app.tss file portrait, landscape both and any individual tss file only portrait then portrait mode does not work for individual tss.    h6. Steps to reproduce  1. Just create an alloy project.  2. Replace this app.tss and index.tss file,  3. Run this code in device or emulator.  4. Rotate device.  5. It does not stop.      h6. actual behaviour  If device rotate, the app orientation change.  h6. Expected behaviour  Since orientation Modes ""PORTRAIT"" for the index.tss file so it should be always portrait.    {code:title=app.tss}  ""Window"": {    orientationModes: [Ti.UI.PORTRAIT,Ti.UI.LANDSCAPE_LEFT,Ti.UI.LANDSCAPE_RIGHT],    backgroundColor: ""red""  }  {code}    {code:title=index.tss}  ""Window"": {   orientationModes: [Titanium.UI.PORTRAIT],   backgroundColor: ""blue""  }    {code}",5
"ALOY-1492","04/20/2016 19:33:56","Fix no such file or directory when doing ""alloy new""","When creating a new alloy project, the creation process should be more careful when platform template folder doesn't not exist.    h6. Reproduce Step  {{appc new}} titanium app    h6. Expected Output  The app should be created with no error.    h6. Actual Output  {{Error: ENOENT: no such file or directory}} ",3
"ALOY-1493","04/21/2016 10:54:56","[Alloy] Alloy sql adapter db_file to be function","{code:javascript}  // app/models/mytable.js  exports.definition = {      config: {          columns: {},          adapter: {              type: ""sql"",              collection_name: ""mytable"",              db_file: function() {                  var myFile = Titanium.Filesystem.getFile(Titanium.Filesystem.applicationDataDirectory, 'file1.sql');                  return myFile.exists() ? myFile.nativePath : Titanium.Filesystem.applicationDataDirectory + 'file2.sql';              },              db_name: ""projectsDB"",              idAttribute: ""UserID"",              remoteBackup: false          }      }  };  {code}    https://github.com/appcelerator/alloy/pull/788",5
"ALOY-1494","04/22/2016 17:05:05","iOS: Support Ti.UI.iOS.Stepper in Alloy","https://jira.appcelerator.org/browse/TIMOB-6305 adds support for the new Stepper UI element on iOS. We should include the alloy-change just from the beginning",3
"ALOY-1495","04/25/2016 14:45:54","Support newer versions of Underscore / Lodash","{quote}This is different than ticket ALOY-1168: https://jira.appcelerator.org/browse/ALOY-1168{quote}    ALOY-1168 is about replacing the shipped version of underscore.   This ticket is about supporting apps where underscore is replaced by the developer.   I still think that ALOY-1168 should be implemented and I have developed it in a fork (https://github.com/mobilehero/adamantium/tree/feature/underscore-to-lodash), but I am having issues w/ the tests.    Currently, Alloy allows developer to replace the current version of underscore with a different version (or with lodash) by putting the updated underscore.js file in the directory: /app/lib/alloy.    However, the issue is that the code that Alloy generates for a controller that uses databinding, references the old version of _.template.       There are probably several different ways this could be solved to support both old and new versions of Underscore.   One might be to check the version of underscore.  I think the function was changed in 1.7.0.    Let me know if you think there is a workable solution and I can create a PR and tests for it.  Thanks!!    ",0
"ALOY-1504","04/29/2016 15:13:59","ERROR: Alloy is not defined","I have an Android project integrated with _iamyellow.net_ Push Notification module.    Erroneous scenario generated by following steps.  1. App is closed manually in background   2. There is a notification in notification bar for the app  3. App is opened by tapping on the notification.  4. An error with ""Alloy is not defined"", sourced build/android/assets/alloy.js, is appeared.  Please refer screenshot in attachment.  5. App sticks at default screen after receiving error.    Please consider this as high priority issue.    Regards.",3
"ALOY-1508","06/02/2016 12:26:12","iOS: Localised splash screen is not visible","When I add the splash screen in the ""app/i18n/en/"" path I am not able to see the splash screen. I get black screen.    *Steps to reproduce:*  1. Create an alloy project  2. Place a splash screen image In app/i18n/en/ folder   3. Run the app on simulator    *Expected:* Splash screen should be visible when the app launches.  *Actual:* A black screen is shown instead of splash screen image.    Reference: http://docs.appcelerator.com/platform/latest/#!/guide/Icons_and_Splash_Screens-section-29004897_IconsandSplashScreens-LocalizedSplashScreens",3
"ALOY-1502","06/05/2016 17:42:37","Destroy Model in Alloy doesn't seem to be working","Hi,  Trying to delete models using destroy() events seems not working.  Steps to reproduce :  1. Create a simple Alloy project.  2.Create a model TestUser.js  {code}  exports.definition = {   config: {    columns: {     'id': 'INTEGER PRIMARY KEY AUTOINCREMENT',        ""firstName"": ""TEXT"",        ""lastName"": ""TEXT"",        ""street"": ""TEXT""    },    adapter: {     type: ""sql"",     collection_name: ""TestModel"",     idAttribute: 'id'    }   }  };  {code}  3. Copy the following code in index.js   {code}  var user = Alloy.createModel('TestUser');  user.save({id:1, firstName:'aa', lastName:'bb', street:'cc'},{   success:function()   {    Ti.API.info('*** user before destroy\n' + JSON.stringify(user,null,2));    alert('*** user before destroy\n' + JSON.stringify(user,null,2));    user.destroy({     success:function()     {      Ti.API.info('*** user after destroy\n' + JSON.stringify(user,null,2));      alert('*** user after destroy\n' + JSON.stringify(user,null,2));     }    });       }  });  /*  user.fetch();  user.destroy({   success:function()   {    Ti.API.info('*** user after destroy\n' + JSON.stringify(user,null,2));    alert('*** user after destroy\n' + JSON.stringify(user,null,2));   }  });  */  $.index.open();  {code}  4. Run this project    Destroy Model in Alloy doesn't seem to be working, because I get same log before and after destroy();    Log  {code}  [INFO] :   *** book before destroy    [INFO] :   {    [INFO] :   ""title"": ""aa2"",    [INFO] :   ""author"": ""bb2"",    [INFO] :   ""alloy_id"": ""3da5ac16-aa00-0e52-727d-9ad551f5c850""    [INFO] :   }    [INFO] :   *** book after destroy    [INFO] :   {    [INFO] :   ""title"": ""aa2"",    [INFO] :   ""author"": ""bb2"",    [INFO] :   ""alloy_id"": ""3da5ac16-aa00-0e52-727d-9ad551f5c850""    [INFO] :   }    {code}    Environment   {code}  Operating System    Name                        = Mac OS X    Version                     = 10.11.5    Architecture                = 64bit    # CPUs                      = 4    Memory                      = 8.0GB    Node.js    Node.js Version             = 4.4.4    npm Version                 = 2.15.1    Appcelerator CLI    Installer                   = 4.2.6    Core Package                = 5.3.0    Titanium CLI    CLI Version                 = 5.0.8    node-appc Version           = 0.2.31  Titanium SDK : 5.3.0.GA  alloy -v : 1.7.33    {code}      Thanks",8
"ALOY-1505","06/17/2016 20:13:21","Add ability to pass cancel attribute to Option element for OptionDialog","{quote}As a developer,  I want to be able to mark an option as being the option to use for cancelling an OptionDialog in Alloy XML,  So that I can use OptionDialog in view without dependency on controller.  {quote}    Currently, I can do this:    {code:xml}         <OptionDialog id=""dialog"" title=""Delete File?"" cancel=""2"" >              <Options>                  <Option>Confirm</Option>                  <Option platform=""ios"">Help</Option>                  <Option>Cancel</Option>              </Options>            </OptionDialog>    {code}    However, if an option is not displayed due to conditional code, then the index number will no longer be valid.    Proposed new attribute:    {code:xml}         <OptionDialog id=""dialog"" title=""Delete File?"">              <Options>                  <Option>Confirm</Option>                  <Option platform=""ios"">Help</Option>                  <Option cancel=""true"">Cancel</Option>              </Options>            </OptionDialog>    {code}  ",3
"ALOY-1510","07/27/2016 16:55:30","Receiving ""<SearchView> is only available in Android"" when compiling tableview despite platform=""android"" attribute being present","h2. Problem  We have a number of views with tableviews that use the SearchView component. When compiling for iOS, we receive this warning:    {code:none}  [WARN]  <SearchView> is only available in Android  [WARN]  To get rid of this warning, add platform=""android"" to your <SearchView> element  {code}      However, our SearchView elements already have the platform attribute set to ""android"".    h2. Test case  {code:lang=xml|title=index.xml}  <Alloy>      <Window>          <TableView>              <SearchBar platform=""ios""/>              <SearchView ns=""Ti.UI.Android"" platform=""android""/>          </TableView>      </Window>  </Alloy>  {code}    h2. Logs  {code:lang=none|title=console}  [INFO] [index.xml] view processing...  [INFO]   style:      ""index.tss""  [INFO]   view:       ""index.xml""  [WARN] <SearchView> is only available in Android  [WARN] To get rid of this warning, add platform=""android"" to your <SearchView> element  [INFO]   controller: ""index.js""  [TRACE] - Processing ""builtins"" module...  [TRACE] - Processing ""optimizer"" module...  [TRACE] - Processing ""compress"" module...  [INFO]   created:    ""Resources/iphone/alloy/controllers/index.js""  [DEBUG]   map:        ""build/map/Resources/iphone/alloy/controllers/index.js.map""  [INFO]   created:     ""Resources/iphone/alloy/styles/index.js""  {code}  h2. Notes  I believe the error is in commands/compile/parsers/Ti.UI.TableView.js:49. It currently reads:    {code:javascript}  if (node.getAttribute('platform') !== 'android') {  {code}    I believe it should read:    {code:javascript}  if (child.getAttribute('platform') !== 'android') {  {code}  ",1
"ALOY-1517","08/04/2016 13:15:55","UI elements are not created properly with formFactor property in style","When I use a conditional style I know the style only applies if the conditions are met. If not, a default style will be applied. For example:    *index.xml*  {code:xml}  <Label>Hello, World</Label>  {code}    *index.tss*  {code:javascript}  ""Label[platform=ios formFactor=tablet]"":{      color: ""red""  }  {code}    On iPad the label will be red, but it will render as black on other devices.    But this is not the case when I’m styling a NavigationWindow for a specific platform:    *index.xml*    {code:xml}  <Alloy>      <NavigationWindow>          <Window>              <Label>Hello, World</Label>          </Window>      </NavigationWindow>  </Alloy>  {code}    *index.tss*    {code:javascript}  ""NavigationWindow[platform=ios formFactor=tablet]"":{}  {code}    Launching the app on an iPhone, Alloy don’t create the NavigationWindow:    {code:javascript}      $.__views.index = Ti.UI.iOS.createNavigationWindow(function() {          var o = {};          Alloy.isTablet && Alloy.deepExtend(true, o, {              window: $.__views.__alloyId0,              id: ""index""          });          return o;      }());  {code}    The app crash with the error message: *“Invalid type passed to function”*.    Why a style determines if create or not the element? The correct code could be:    {code:javascript}      $.__views.index = Ti.UI.iOS.createNavigationWindow(function() {          var o = {};          Alloy.isTablet && Alloy.deepExtend(true, o, {          });            Alloy.deepExtend(true, o, {              window: $.__views.__alloyId0,              id: ""index""          });          return o;      }());  {code}",3
"ALOY-1512","08/11/2016 18:23:06","Replace Uglify with Babylon","At the moment, Uglify has limited support of ES6 features. https://github.com/mishoo/UglifyJS2/issues/448. Consider moving to using Babylon. https://github.com/babel/babylon    ",0
"ALOY-1519","09/13/2016 12:17:09","Alloy: Support iOS 10 <RefreshControl> tag in Ti.UI.ScrollView","We introduced the {{Ti.UI.RefreshControl}} usage in the {{Ti.UI.ScrollView}} in TIMOB-23524. It is a new iOS 10 feature we exposed to the proxy. Now we need the Alloy parser-binding to use it in the XML like we already can do with the {{Ti.UI.TableView}} and {{Ti.UI.ListView}}.",5
"ALOY-1528","09/13/2016 17:37:04","getWidgetDirectories does not respect theme config.json","We have multiple themes for our Alloy/Titanium application, and each theme needs to have a different sent of dependencies.    However, dependencies set in app/themes/theme_name/config.json are not checked when returning widget directories:  https://github.com/appcelerator/alloy/blob/5991de44082a492d143612cc2175b7eef30d36e6/Alloy/utils.js#L286    (For reference, this theme config.json _is_ observed when generating the CFG.js file:  https://github.com/appcelerator/alloy/blob/977a2c147e809ccd1c05d197d54828c3e7660150/Alloy/commands/compile/compilerUtils.js#L827)",2
"ALOY-1520","09/15/2016 06:14:56","Replace Ti.Ui.iPhone with Ti.Ui.iOS in Alloy","Since 5.4.0.GA we facing a lot of warnings messages because Alloy using Ti.iPhone namespace, I just replaced it with Ti.IOS    PR: https://github.com/appcelerator/alloy/pull/795",3
"ALOY-1526","10/07/2016 08:14:51","Special text property value is not parsed correctly","In the new version we found an error... We get a compiler error. This is caused in the XML file by     text=""#js:dtgL('report46')""    Fun fact when i build the project via command line : ti build —platform ios    it works... so it has to be something in the Studio itsself",3
"ALOY-1523","10/18/2016 19:13:37","Alloy uses old require-paths with new require-behavior","We introduced an updated require-handling in Titanium 6 that matches the full NodeJS specs for handling all kind of files and data structures. Although we are save for older require-paths, we should update the Alloy-internal require-calls as well. Example log:  {code}  require called with un-prefixed module id: alloy/constants, should be a core or CommonJS module. Falling back to old Ti behavior and assuming it's an absolute path: /alloy/constants  {code}  It will only be shown in the DEBUG log-level, but adjusting it internally would be the cleanest way here. Thx!",8
"ALOY-1524","10/18/2016 22:21:50","Replace wrench with fs-extra","Alloy uses {{wrench.js}} extensively throughout its code base, however the module have been  deprecated. We should replace it with another module to do filesystem operations, i.e. fs-extra.",5
"ALOY-1530","11/24/2016 04:12:41","Alloy: Support multiple restrict files","ALOY-1216 is a PR to allow compile only one specific file.  This PR supports compiling several specific files.    example:    {code}  alloy compile --config platform=ios,file=app/controllers/index.js,file=app/controller/myCtrl.js  {code}  ",3
"ALOY-1533","12/27/2016 23:02:45","Upgrade underscore.js to version 1.8.3","Upgrade underscore.js to version 1.8.3 from the current version of 1.6.0.    Community PR: https://github.com/appcelerator/alloy/pull/700",0
"ALOY-1534","01/09/2017 14:40:10","Add support for Backbone 1.3.3 and Underscore 1.8.3","Currently Alloy uses backbone 0.9.2 as default, and there is an ability to upgrade to 1.1.2 through the config.json as per documentation: [https://wiki.appcelerator.org/display/guides2/Alloy+Backbone+Migration].     However, the current release of backbone is 1.3.3. There should be support for this version in Alloy too.    And I assume it wouldn't hurt updating the default backbone version either, but I guess thats a breaking change and perhaps another ticket. ",1
"ALOY-1535","01/14/2017 12:27:10","iOS: Warning message thrown when using <View> in <AlertDialog> (Android-only)","When using the {{<View>}} tag in {{<AlertDialog}} on iOS, a warning is thrown, also the platform is set to Android. ",1
"ALOY-1536","01/20/2017 01:29:57","iPad Splash Screen Orientation - No Landscape","This one is pretty simple. Create a generic new alloy project and, and edit the trap.xml file like so:    <enable-launch-screen-storyboard>false</enable-launch-screen-storyboard>  ...  <key>UISupportedInterfaceOrientations~ipad</key>    <array>      <string>UIInterfaceOrientationLandscapeRight</string>    </array>    LandscapeLeft won't work either. When the app is launched, the splash screen will appear in portrait mode.",1
"ALOY-1537","01/27/2017 06:48:52","Update uglify-js and moment.js","Ran {{nsp check}}, two alloy dependencies, {{uglify-js@2.4.15}} and {{moment@2.10.6}}, are returning {{Regular Expression Denial of Service}}.     This ticket is to track the progress of updating uglify-js from 2.4.15 to *2.6.1* and moment.js from 2.10.6 to *2.17.1*.    Note:   ECMAScript 5.1 doesn't permit newline characters in string literals. It requires {{\n}}. According to [903|https://github.com/mishoo/UglifyJS2/pull/903] Uglify also doesn't like it in versions 2.6.2 and after, thus failed some of the test apps. For now, updating to uglify-js@2.6.1 should correct nsp errors. We need to look into alloy compiler if we need a major uglify upgrade. ",5
"ALOY-1541","02/02/2017 10:17:56","XML: Require LeftNavButtons/RightNavButtons not working","Require LeftNavButton/RightNavButton working while LeftNavButtons/RightNavButtons not working    example  {code:xml|title=index.xml}  <Alloy>   <NavigationWindow>    <Window class=""container"">     <Require src=""navbar"" />     <Label id=""label"">Hello, World</Label>    </Window>   </NavigationWindow>  </Alloy>  {code}    {code:xml|title=navbar.xml}  <Alloy>   <LeftNavButtons>    <Button>Btn1</Button>    <Button>Btn2</Button>   </LeftNavButtons>  </Alloy>  {code}    compiled code problem  {code:javascript|title=Resources/iphone/alloy/controllers/navbar.js}      var leftNavButtons = [];      $.__views.__alloyId2 = Ti.UI.createButton({          title: ""aaa"",          id: ""__alloyId2""      });      leftNavButtons.push($.__views.__alloyId2);      $.__views.__alloyId3 = Ti.UI.createButton({          title: ""bbb"",          id: ""__alloyId3""      });      leftNavButtons.push($.__views.__alloyId3);      // >>>>> THIS IS THE ERROR <<<<< //      void 0.leftNavButtons = leftNavButtons;      $.__views.navbar && $.addTopLevelView($.__views.navbar);  {code}    while LeftNavButton compile to  {code:javascript|title=Resources/iphone/alloy/controllers/navbar.js}      $.__views.__alloyId2 = Ti.UI.createButton({          title: ""Btn1"",          id: ""__alloyId2""      });      __parentSymbol.leftNavButton = $.__views.__alloyId2;      $.__views.navbar && $.addTopLevelView($.__views.navbar);  {code}",3
"ALOY-1543","02/25/2017 00:55:17","Widget files are optimized twice during compilation","When MVC generation step of alloy compile, widget files are optimized.  So there is no reason to optimize widget file on OPTIMIZING step again.    Community PR: https://github.com/appcelerator/alloy/pull/805",3
"ALOY-1544","02/25/2017 01:52:15","Add optimizingExeptions option to config.json","This PR make you can skip the file when doing an optimization manually.  There are no reason to optimize js files which doesn't depends on alloy.    Community PR : https://github.com/appcelerator/alloy/pull/818",3
"ALOY-1550","03/24/2017 17:22:24","Alloy: Update gitignore for default project","When creating a new alloy project with the open source {{ti}} tool it uses the .gitignore from {{Alloy/template/gitignore.txt}}. This file isn't in sync with {{alloy/templates/default/.gitignore}} yet.    PR: https://github.com/appcelerator/alloy/pull/821    *Reproduce:*  {code:java}  ti create -t app -n test --id com.test.test -p all -u test.de -d .  cd test  alloy new  {code}      ",1
"ALOY-1557","04/18/2017 12:11:21","Alloy: Keep Changelog up to date","It would be great if the changelog will be updated periodically to reflect the changes:  https://github.com/appcelerator/alloy/blob/master/CHANGELOG.md    If another resource exists (JIRA/Appcelerator docs link?), please link to it in this CHANGELOG.md file and remove the rest of its contents so that the changelog can be found on a single resource only.",1
"ALOY-1564","05/22/2017 13:35:55","Broken Require data-binding event translation. Custom events on Required views are being applied to the required root View instead of the required Controller itself, causing an error.","When requiring a view with data binding, for instance:     {code:javascript}  <ScrollView dataCollection=""clclients"" layout=""vertical"" class=""Size"">              <Label text=""{name}"" class=""header Size"" top=""10""/>              <Require src=""products"" name=""{name}"" onClick=""doSomething"" type=""view""/>          </ScrollView>  {code}     the following errors is firing:    {code}  [ERROR] :  Script Error {  [ERROR] :      column = 18;  [ERROR] :      line = 40;  [ERROR] :      message = ""undefined is not a function (evaluating '__alloyId146.getViewEx({\n                recurse: true\n            }).on(\""click\"", doSomething)')"";  [ERROR] :      stack = ""__alloyId148\ntriggerEvents\ntrigger\n_onModelEvent\ntriggerEvents\ntrigger\nset\nsuccess\n\nonload"";  [ERROR] :  }  {code}      due to this processed code:    {code:javascript}   doSomething ? __alloyId146.getViewEx({                  recurse: true              }).on(""click"", doSomething) : __defers[""__alloyId146.getViewEx({recurse:true})!click! doSomething""] = true;  {code}    which should be:    {code:javascript}  doSomething ? __alloyId146.on(""click"", doSomething) : __defers[""__alloyId146!click! doSomething""] = true;  {code}",3
"ALOY-1569","06/14/2017 21:45:34","WPATH function to match updated require-handling in Titanium 6","This should also fix WPATH function to match updated require-handling in Titanium 6   ",2
"ALOY-1570","06/20/2017 13:58:39","Alloy: exports.baseController does not work since 1.10.0 (Regression)","since 1.10.0 exports.baseController = 'name' does not work.    I attached simple project with three controllers   * Base  * BasedOnBase with exports.baseController = 'base' in js  * BasedOnBaseXML with <Alloy baseController=""Base""> in xml    With Alloy 1.9.11 I got correct result in both cases:  {code}  function Controller() {      require(""/alloy/controllers/Base"").apply(this, Array.prototype.slice.call(arguments));  ...  {code}    but with Alloy 1.10.x I get correct code only for  BasedOnBaseXML    for BasedOnBase I get:  {code}   require('/alloy/controllers/' + 'BaseController').apply(this, Array.prototype.slice.call(arguments));   this.__controllerPath = 'BasedOnBase';   this.args = arguments[0] || {};     if (arguments[0]) {    var __parentSymbol = __processArg(arguments[0], '__parentSymbol');    var $model = __processArg(arguments[0], '$model');    var __itemTemplate = __processArg(arguments[0], '__itemTemplate');   }   var $ = this;   var exports = {};   var __defers = {};     $.__views.BasedOnBase = Ti.UI.createView({ id: ""BasedOnBase"" });   $.__views.BasedOnBase && $.addTopLevelView($.__views.BasedOnBase);   exports.destroy = function () {};     _.extend($, $.__views);     var args = $.args;   exports.baseController = 'Base';  {code}",2
"ALOY-1572","06/23/2017 13:32:48","Alloy doesn't compile external app.js","If your Alloy project has an `app.js` in a subdirectory (example: `lib/app.js`), it is not compiled.    So, if you have a pre-processor constant like `OS_IOS` or `OS_ANDROID` in this file,  the result is a runtime error because no var defined `OS_IOS` is found.    *This is a critical issue, because Alloy produces a broken app!*    PR: https://github.com/appcelerator/alloy/pull/836",2
"ALOY-1574","08/02/2017 16:54:56","Unable to use ES6 import/exports in alloy controllers due to bad code generation","If you add imports or exports to an alloy controller, we can now parse the code and handle it in our use of babel/babylon instead of uglify. BUT, we don't ""hoist"" the imports/exports to the top of the generated code, so it can become embedded underneath a function which is invalid ES6 code. imports and exports must be ""moved"" up to the global top-level or else the code is invalid.    i.e.  {code:javascript}  import 'foo' from 'bar';  export const foo = Math.sqrt(2);  {code}  On a related note, we don't really ""handle"" ES6 imports/exports anyways down the line, but that's another ticket we can address in titanium CLI/build to just use babel transpilation to generate requires out of them (until the wider JS community has settled how to handle module vs script difference and imports/exports)",5
"ALOY-1575","08/27/2017 17:54:46","Allow Android to use Ti.UI.RefreshControl as well","We added refresh-control for Android in TIMOB-1072, but we also need Android to use the Alloy <RefreshControl> tag.",0
"ALOY-1578","08/30/2017 18:35:56","Move Ti.UI.iOS.Toolbar to Ti.UI.Toolbar","Yordan PR: https://github.com/appcelerator/alloy/pull/841  Additional code changes are needed.",2
"ALOY-1579","08/30/2017 19:17:31","Support Titanium.UI.Android.DrawerLayout","https://jira.appcelerator.org/browse/TIMOB-15910    Usage   {code:xml}  <Alloy>   <Window class='container'>    <DrawerLayout>     <LeftView>      <View> ... </View>     </LeftView>       <CenterView>      <View> ... </View>     </CenterView>       <RightView>      <View> ... </View>     </RightView>    </DrawerLayout>   </Window>  </Alloy>  {code}",3
"ALOY-1591","12/07/2017 11:22:12","Transpile Alloy source to allow platform-independent ES6 / ES7 usage","We added Babel transpiling for classic apps in TIMOB-24610. In order to use it in Alloy as well, the Alloy build needs to be updated to properly use it as well. As we had some issues with minification after updating our tooling recently, we need to ensure this won't happen again.",0
"ALOY-1592","12/07/2017 12:31:59","Builtins: Reimplement measurement by convertUnits","Reimplementing the measurement built-ins. PR: https://github.com/appcelerator/alloy/pull/668",3
"ALOY-1596","12/19/2017 14:51:40","Mobileweb assets copied on alloy new ","h5.Description    Similar to ALOY-1322, mobileweb assets are still being copied when creating a new alloy app.  There's a lot more mentions of mobileweb in the test suite than blackberry I believe so not sure simple this would be, is it actually more involved that just removing the platform/mobileweb folder? [~fmiao] any recommendations?    h5.Steps to reproduce    # {{appc new -t titanium -n mwassets --id com.foo}}  # {{ls mwassets/app/assets/}}    h5.Actual    mobileweb assets are there    h5.Expected    No mobileweb assets",3
"ALOY-1597","12/20/2017 11:00:18","Use babel-code-frame to provide context when failing to parse code","h5.Description    Currently when we are parsing files if we hit a parser error then we output an error that isn't super helpful, it contains an line/column numbers but it would be a much better dev experience if we could show the code using babel-code-frame. We could also expand this to xml/tss parsing errors if the modules we use give us the locations in an easily consumable way    {code: title=current}  [ERROR] Error generating AST for ""/Users/eharris/Documents/projects/repotest/apps/hyperloop-examples/app/controllers/index.js""  [ERROR] Unexpected token (1:5)  [ERROR] position 5  {code}    {code: title=babel-code-frame}  [INFO]   controller: ""index.js""  > 1 | x ==== foo      |     ^    2 | /**    3 |  * I wrap code that executes on creation in a self-executing function just to    4 |  * keep it organised, not to protect global scope like it would in alloy.js  [ERROR] Error generating AST for ""/Users/eharris/Documents/projects/repotest/apps/hyperloop-examples/app/controllers/index.js""  {code}",5
"ALOY-1599","01/11/2018 11:21:29","ALLOY: Model Data binding problem with the first upper case in the model src","There is a problem with code generated for Simple Data Binding with the first upper case letter in model name.    I have two models defined:  app/models/book.js  app/models/Task.js    I expect that following XMLs will produce the same code:  {code:xml}  <Alloy>   <Model src=""book""/>   <Label>{book.name}</Label>  </Alloy>  {code}  {code:xml}  <Alloy>   <Model src=""Task""/>   <Label>{Task.name}</Label>  </Alloy>  {code}      But in the first case it is correct:  {code:javascript}   Alloy.Models.instance('book');     $.__views.Book = Ti.UI.createLabel({ id: ""Book"" });   $.__views.Book && $.addTopLevelView($.__views.Book);   var __alloyId2 = function () {    Alloy['Models']['book'].__transform = _.isFunction(Alloy['Models']['book'].transform) ? Alloy['Models']['book'].transform() : Alloy['Models']['book'].toJSON();$.Book.text = Alloy['Models']['book']['__transform']['name'];   };Alloy['Models']['book'].on('fetch change destroy', __alloyId2);exports.destroy = function () {    Alloy['Models']['book'] && Alloy['Models']['book'].off('fetch change destroy', __alloyId2);   };  {code}    and in the second case it is invalid:  {code:javascript}   $.__views.Task = Ti.UI.createLabel({ text: $model.__transform.Task.name, id: ""Task"" });   $.__views.Task && $.addTopLevelView($.__views.Task);  {code}    and I get error $model.__transform is undefined",1
"ALOY-1602","02/01/2018 15:36:12","Avoid some global variables to be only available in parent controller.","Quote from [Github|https://github.com/appcelerator/alloy/pull/859]:  {quote}  I don't understand why it is necessary to remove ""$model"", ""__parentSymbol"" or ""__itemTemplate"" from the ""arguments"" variable.    This is causing issues when passing ""$model"" for example to a controller which is inheriting from another controller as per Alloy Controller Inheritance documentation (http://docs.appcelerator.com/platform/latest/#!/guide/Alloy_Controllers-section-src-34636384_AlloyControllers-Inheritance).    If we delete it from there, only the parent will have ""$model"" properly set but the child controller won't as it's deleted from ""arguments"".    Another option would be to run ""__processArg()"" before calling the parent controller but this would mean only the child controller has `$model` properly set, it will be `null` for the parent one.    In order to reproduce:  # index.js  Alloy.createController('child', \{ $model: aBackboneModelObject \});    # parent.js  console.log(_.isNull($model)); // always return false  ...    # child.js  exports.baseController = ""parent"";  console.log(_.isNull($model)); // always return true    {quote}",1
"ALOY-1603","02/06/2018 15:30:28","Update Moment.js to version 2.21.0","According to the new updates such as backbone.js and underscore.js in Appcelerator CLI 7.0.2, we should also update Moment.js from version 2.16.0 to version 2.20.1",1
"ALOY-1607","03/01/2018 13:36:55","Latest underscore version is breaking removeListener method in BaseController.js","Latest underscore version (1.8.3) used in Alloy 1.11.0 causes an error using *$.removeListener* method.    https://github.com/appcelerator/alloy/blob/2a25b1d50fe22d3f5c4f423a6027e1c1d7748b88/Alloy/lib/alloy/controllers/BaseController.js#L496    I don't know why Appc Team use underscore inside BaseController.js instead use built in prototype functions like 'forEach'. In fact bump to latest underscore version is breaking the normal usage of `$.removeListener`method and this is why:    BaseController.js    {code:java}    removeListener: function(proxy, type, callback) {    _.each(this.__events, function(event, index) {      if ((!proxy || proxy.id === event.id) &&        (!type || type === event.type) &&        (!callback || callback === event.handler)) {        event.view.removeEventListener(event.type, event.handler);          //This line is removing a item from __events array but a undefined value is placed in the removed index        //self.__events.splice(index, 1); removes the item with no undefined value instead        delete self.__events[index];      }    });    return this;  }  {code}      What happens in the underscore 1.8.3 version *_.each* method?  Well, it iterates in the array using a *for*, `undefined` values included.  If *event* is undefined when *event.view.removeEventListener(event.type, event.handler);* it fails because *view* isn't in event    {color:red}[ERROR] Error catched: Cannot read property 'view' of undefined{color}    {code:java}  _.each = _.forEach = function(obj, iteratee, context) {    iteratee = optimizeCb(iteratee, context);    var i, length;    if (isArrayLike(obj)) {      for (i = 0, length = obj.length; i < length; i++) {        iteratee(obj[i], i, obj);      }    } else {      var keys = _.keys(obj);      for (i = 0, length = keys.length; i < length; i++) {        iteratee(obj[keys[i]], keys[i], obj);      }    }    return obj;  };  {code}    What happens in the oldest underscore 1.6.0 version *_.each* method?  Well, it checks if *forEach* method is present in `Array.prototype` and uses it. This method skipes `undefined`values.      {code:java}  var ArrayProto = Array.prototype;  var nativeForEach      = ArrayProto.forEach;    var each = _.each = _.forEach = function(obj, iterator, context) {      if (obj == null) return obj;      if (nativeForEach && obj.forEach === nativeForEach) {        obj.forEach(iterator, context);      } else if (obj.length === +obj.length) {        for (var i = 0, length = obj.length; i < length; i++) {          if (iterator.call(context, obj[i], i, obj) === breaker) return;        }      } else {        var keys = _.keys(obj);        for (var i = 0, length = keys.length; i < length; i++) {          if (iterator.call(context, obj[keys[i]], keys[i], obj) === breaker) return;        }      }      return obj;    };  {code}    Use case in Titanium:        {code:java}      $.addListener($.win, 'open', disableClick);      $.addListener($.win, 'close', clean);      $.addListener($.disable, 'click', disableClick);      $.addListener($.label, 'click', close);    function disableClick() {      //Removes listener but undefined value is placed      $.removeListener($.disable, 'click', disableClick);    }      function close(e) {      Ti.API.info('Closing window');      $.win.close();    }      function clean(e) {      Ti.API.info('Cleaning window');      try {        Ti.API.info('Call $.removeListener()');        $.removeListener();      } catch (err) {        //It tries to remove event to undefined value        //[ERROR] Error catched: Cannot read property 'view' of undefined        Ti.API.error('Error catched: ' + err.message);      }    }  {code}      How to solve:    How you can solve this? So easy...    First way:    Change _.each for forEach    {code:java}  removeListener: function(proxy, type, callback) {    this.__events.forEach(function(event, index) {      if ((!proxy || proxy.id === event.id) &&        (!type || type === event.type) &&        (!callback || callback === event.handler)) {        event.view.removeEventListener(event.type, event.handler);        delete self.__events[index];      }    });    return this;  }  {code}      Second way:    Adding a simple check in the if...    {code:java}  removeListener: function(proxy, type, callback) {    _.each(this.__events, function(event, index) {      if (event && (!proxy || proxy.id === event.id) &&        (!type || type === event.type) &&        (!callback || callback === event.handler)) {        event.view.removeEventListener(event.type, event.handler);        delete self.__events[index];      }    });    return this;  }  {code}    As Konstantin Bueschel commented a way to avoid this undefined holes inside arrays is using *splice* instead *delete*    *self.__events.splice(index, 1);*",1
"ALOY-1609","03/07/2018 13:01:38","Add alloy.js plugin file to .gitignore","Every time the alloy version changes, the alloy.js plugin file inside the plugin folder changes too. This pollutes git and a default procedure is to remove the file from git alltogether.    This is discussed in a recent kitchensink PR https://github.com/appcelerator/kitchensink-v2/pull/31#pullrequestreview-101563655 by [~hknoechel], [~eharris] and me. ",1
"ALOY-1615","04/26/2018 11:18:11","Audioplayer cannot be created from Alloy without specifying ns property","When creating an audioplayer from alloy this should work:    {code}          <AudioPlayer id=""player"" />  {code}    But it doesn't, the {{ns}} property needs to be specified as such:    {code}          <AudioPlayer id=""player"" ns=""Ti.Media"" />  {code}    it would be great if this can be fixed/improved so the {{ns}} property doesn't need to be specified",1
"ALOY-1620","05/31/2018 11:19:00","Fix new Buffer deprecation warnings","h5.Description    Node 10 produces a deprecation warning when the {{new Buffer}} constructor is used. See https://nodesource.com/blog/understanding-the-buffer-deprecation-in-node-js-10/ if you're curious    In most cases I believe the most appropriate swap for us to do is turn {{new Buffer}} into {{Buffer.from}}    There is one instance in the alloy code https://github.com/appcelerator/alloy/search?q=%22new+Buffer%22&unscoped_q=%22new+Buffer%22, it might not show up when alloy is ran however as code under {{node_modules}} will not throw the buffer deprecation warning    We might also wish to update eslint-config-axway to include the {{no-buffer-constructor}} rule    Steps to reproduce to be added as replacement happens",1
"ALOY-1621","06/12/2018 19:33:53","Move NavigationWindow API from Ti.UI.iOS to Ti.UI (parity)","We are moving the Ti.UI.iOS.NavigationWindow to the cross-platform Ti.UI namespace, for parity with Android and Windows. Related tickets:  - Android: TIMOB-24582  - Windows: TIMOB-25537  - iOS: TIMOB-26060    For that, we also need to open the {{<NavigationWindow>}} API for other platforms. Right now, it is only accessible from iOS. This is planned to happen in the SDK 7.4.0 timeframe, with a CLI minor-release that includes a new Alloy version with this fix.",3
"ALOY-1626","08/29/2018 09:38:17","Alloy: Missing plugins/ directory causes cloned app-projects to fail","As part of ALOY-1609 we ignored the {{plugins/ti.alloy}} directory to prevent some git-glitches around the hook. Unfortunately that caused a regression that causes developers that clone other apps (like from GitHub) to see the following error because the directory is missing:  {code}  [WARN]  Could not find Titanium plugin id=ti.alloy version=1.0  [ERROR] Could not find all required Titanium plugins:  [ERROR]    id: ti.alloy  version: 1.0  {code}  We instead need to revert the change and figure out why the hook is rewritten across Alloy versions.",1
"ALOY-1631","09/19/2018 12:42:17","Define theme from CLI","From [documentation|https://docs.appcelerator.com/platform/latest/#!/guide/Alloy_Themes]  {quote}To use a theme, add it to your Alloy project's config.json file with ""theme"" as the key and the name of the theme folder as the value{quote}      For my application I need to apply different themes for customers, so it would be nice to have ability to define theme from command line.  ",3
"ALOY-1638","11/17/2018 15:28:57","Theme is ""null"" when a theme is defined in config.json","I think it is caused by https://jira.appcelerator.org/browse/ALOY-1631.    If no theme is defined in the cli, alloy will be called with theses args:  {code}  alloy.cmd compile C:\myapp --config theme=null,platform=android,version=0,simtype=none,devicefamily=none,deploytype=production,target=dist-playstore  {code}    theme with be a string with ""null"" inside.    In this file https://github.com/appcelerator/alloy/blob/master/Alloy/commands/compile/compilerUtils.js#L904,  we should check if theme is null or a string ""null"".  {code}  if (alloyConfig.theme && alloyConfig.theme != ""null"") {   o.theme = alloyConfig.theme;  }  {code}        ----        config.json  {code}  {   ""global"": {    ""theme"": ""abcdef""   },   ""env:development"": {},   ""env:test"": {},   ""env:production"": {},   ""os:android"": {},   ""os:ios"": {},   ""os:windows"": {},   ""dependencies"": {}  }  {code}      In 1.13.4:  {code}     Alloy 1.13.4 by Appcelerator. The MVC app framework for Titanium.                                                                                                                                                                                                               [DEBUG] ----- CONFIGURATION -----                                                                                                       [DEBUG] raw config = ""theme=null,platform=android,version=0,simtype=none,devicefamily=none,deploytype=development,target=emulator""      [DEBUG] theme = null                                                                                                                    [DEBUG] platform = android                                                                                                              [DEBUG] version = 0                                                                                                                     [DEBUG] simtype = none                                                                                                                  [DEBUG] devicefamily = none                                                                                                             [DEBUG] deploytype = development                                                                                                        [DEBUG] target = emulator                                                                                                               [DEBUG] project path = C:\app\myapp                                                                                                     [DEBUG] app path = C:\app\myapp\app                                                                                                     [DEBUG]                                                                                                                                 [DEBUG] ----- CONFIG.JSON -----                                                                                                         [DEBUG] dependencies = {}                                                                                                               [INFO]  [config.json] regenerating CFG.js from config.json...                                                                           [DEBUG] {                                                                                                                                 ""dependencies"": {},                                                                                                                     ""theme"": ""null"",                                                                                                                        ""sourcemap"": true,                                                                                                                      ""autoStyle"": false,                                                                                                                     ""adapters"": [                                                                                                                             ""localStorage"",                                                                                                                         ""properties"",                                                                                                                           ""sql""                                                                                                                                 ]                                                                                                                                     }    {code}       In 1.13.2, theme is defined:   {code}  Alloy 1.13.2 by Appcelerator. The MVC app framework for Titanium.    [DEBUG] ----- CONFIGURATION -----  [DEBUG] raw config = ""theme=null,platform=android,version=0,simtype=none,devicefamily=none,deploytype=development,target=emulator""  [DEBUG] theme = null  [DEBUG] platform = android  [DEBUG] version = 0  [DEBUG] simtype = none  [DEBUG] devicefamily = none  [DEBUG] deploytype = development  [DEBUG] target = emulator  [DEBUG] project path = C:\app\myapp  [DEBUG] app path = C:\app\myapp\app  [DEBUG]  [DEBUG] ----- CONFIG.JSON -----  [DEBUG] dependencies = {}  [INFO]  [config.json] regenerating CFG.js from config.json...  [DEBUG] {    ""dependencies"": {},    ""theme"": ""abcdef"",    ""sourcemap"": true,    ""autoStyle"": false,    ""adapters"": [      ""localStorage"",      ""properties"",      ""sql""    ]  }  {code}                                                                                                                                   ",3
"ALOY-1641","01/15/2019 20:39:12","iOS: TabbedBar usage on lower than SDK 8 is broken","h5.Description    https://github.com/appcelerator/alloy/pull/918 was bad and was missing several requires, this was not exposed through either eslint or the tests although it should have been (and I should have realised how bad I borked anyways)    h5.Steps to reproduce    1. Build kitchensink-v2 with alloy 1.13.6 and sdk 7.5.0    h5.Actual    {code}   ReferenceError: CU is not defined  {code}    h5.Expected    It should work",3
"ALOY-1686","05/02/2019 10:27:34","Alloy: App crashes due to context used when accessing Ti.Database API","The current master is broken due to changes in the Obj-C JSCore interface (TIMOB-26038):  {code}  [ERROR] Script Error {  [ERROR]     column = 38;  [ERROR]     line = 214;  [ERROR]     message = ""self type check failed for Objective-C instance method"";  [ERROR]     sourceURL = ""file:///Users/hans/Library/Developer/CoreSimulator/Devices/884D0F2B-46F2-41D5-AA78-C26BC42BF348/data/Containers/Bundle/Application/B1994734-79D4-40DD-9003-C940456A903D/Lambus.app/alloy/sync/sql.js"";  [ERROR]     stack = ""    at [native code]\n    at Sync(/alloy/sync/sql.js:214:38)\n    at sync(/alloy.js:92:22)\n    at fetch(/alloy/backbone.js:344:47)\n    at (/app.js:45:24)\n    at global code(/app.js:225:70)\n    at require@[native code]\n    at (/ti.main.js:8997:10)\n    at doLoad(/ti.main.js:8955:15)\n    at loadBootstrapScripts(/ti.main.js:8967:11)\n    at loadAsync(/ti.main.js:8972:23)\n    at global code(/ti.main.js:8994:10)"";  [ERROR]     toJSON = ""<KrollCallback: 0x600000bfba40>"";  [ERROR] }  {code}  Specifically, changes in {{Ti.Database}} seem to have caused this issues. It was triggered by Alloy models which use Backbone in the background which uses Ti.Database in the background.    To reproduce, simply create a new Alloy app and create a model as documented in the docs. For the core-team: This is also reproducible in the app you guys have access to.    *EDIT*: After investigating this, it seems like [this selector|https://github.com/appcelerator/titanium_mobile/pull/10381/files#diff-d0e600e43c92d0fe06ffee452771f44cR125] is causing the issues as it's referenced in the sql.js to get the field from the result-set at the specified index.",8
"ALOY-1737","08/11/2020 20:11:46","Alloy: ListView dataBinding creates deprecated setItems call","When using Alloy ListView databinding it will produce code with {code}setItems(){code} and therefore produce a ""using deprecated setter"" warning:    https://github.com/appcelerator/alloy/blob/6c311743af90da438f9c30bfdbe29275247daa51/Alloy/commands/compile/parsers/Ti.UI.ListSection.js#L163    {code}  <ListView id=""lst_parks"" defaultItemTemplate=""default"" >    <Templates>     <ItemTemplate name=""default"">     </ItemTemplate>    </Templates>    <ListSection dataCollection=""parks""/>   </ListView>  {code}",1
