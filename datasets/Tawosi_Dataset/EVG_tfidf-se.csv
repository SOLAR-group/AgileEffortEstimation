"issuekey","created","storypoint","context","codesnippet","t_New.Feature","t_Improvement","t_Bug","t_Task","t_Build.Failure","t_Question","t_Problem.Ticket","t_Incident","t_Sub.task","c_app","c_legacy.ui","c_perf.tools","c_platform","c_ui","c_ops"
"EVG-336","06/03/2014 22:41:30",1,"Spawnhost in AWS regions besides us-east-1 ""[~david.hows] recently spent a month in NYC as a new """"exo-dev"""" for the kernel team. He proclaimed MCI as a """"Brilliant magical tool, knowledge and access to it needs to be shared widely.""""    One point he identified: +spawnhost+ functionality is incredibly helpful, *except when the host is on the other side of the world from you*. Packet latency from Sydney to us-east-1 is bad and Windows RDP is especially unusable with high latency.    If we roll out spawnhost functionality more widely to support staff, Dublin will feel the same pinch, but Sydney will still feel it most.    *Request*: allow spawnhost users to provision instance in a alternate Amazon EC2 region.    - I think you need [AMI Copy for Amazon EC2|http://aws.amazon.com/about-aws/whats-new/2013/03/12/announcing-ami-copy-for-amazon-ec2/]  -- pay for transfer and storage in the new region  - Initial EC2 regions supported:  -- US East (Virginia) = us-east-1  -- Asia Pacific (Sydney) = ap-southeast-2  -- MAYBE: EU West (Ireland) = eu-west-1  - Add a pull-down menu on the """"spawnhost configure"""" page to select AWS region (small set we allow)  - Use MCI user timezone preferences to select an EC2 region for the user?  -- or make it another preference?  ""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-90","03/09/2015 19:54:06",2,"get rid of global locking ""its bad design and its gettin pretty irritating to users when patches time out.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-136","05/06/2015 16:45:54",1,"hostinit should use workdir ""In provisioning and setting up a host, the hostinit process should do all it's work in the specified distro working directory.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-298","05/13/2015 21:16:12",1,"Simplify util.FileExists API ""the function definition is        which accepts multiple arguments then path joins them together. However, none of our code actually makes use of this multi-arg approach. We always do a filepath.Join() on the inputs before passing them to FileExists in our code. Let's change the function to behave the way we're using it.""","  func FileExists(elem ...string) (bool, error) {   path := filepath.Join(elem...)   _, err := os.Stat(path)   if err == nil {    return true, nil   }   if os.IsNotExist(err) {    return false, nil   }   return false, err  }  ",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-68","05/14/2015 21:44:08",2,"allow terminating a host directly from UI ""if """"decommissioning"""" a host isn't good enough (the host is actually stuck in a weird state that decommissioning won't get it out of) it would be useful to have the ability to just forceably terminate it right away.""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-223","06/08/2015 22:08:15",2,"Add patch alert triggers ""as an extension of the alert/notify rewrite""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-497","08/19/2015 20:02:15",2,"""Terminate host ()?"" ""When clicking the trash icon on https://evergreen.mongodb.com/ui/spawn I get a thoughtful question if I am sure if I want to terminate the instance... But it doesn't tell me which instance.    The message appears to supposed to have more info  {code}  public/static/partials/user_host_terminate.html:      Terminate <strong>[[curHostData.distro._id]]</strong> host (<strong>[[curHostData.id]]</strong>)?  {code}    But only becomes    ""","  public/static/partials/user_host_terminate.html:      Terminate <strong>[[curHostData.distro._id]]</strong> host (<strong>[[curHostData.id]]</strong>)?    Terminate host ()?  ",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-518","08/27/2015 16:40:48",1,"Remove InsecureSkipVerify with modified go http package ""evaluate whether or not we can take out InsecureSkipVerify with the modified http package for go 1.6  ""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-631","10/09/2015 21:20:41",1,"Log an event whenever a user sets priority ""Would be nice to have the option to look this up if we ever encounter a string of abuse.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-700","11/03/2015 20:58:53",2,"Add git tags in commit, if any, to waterfall page ""Is it possible to display any tags a given commit has in the waterfall page? Now that there are no BUMP commits for releases this information will be very useful to identify releases.    See attached screenshot for details.    Thanks,  Ram√≥n.    Cc [~geert.bosch]""","",0,1,0,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-763","12/03/2015 20:29:16",2,"evergreen configuration validator should validate commands inside of functions  ""e.g. if a function definition is missing a command field, it should raise an error in the validator.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-805","01/12/2016 17:13:12",1,"Disallow decommissioning static hosts ""That status doesn't make a lot of sense for static hosts - they should either be running or quarantined on the hosts page. There also appear to be some internal process(es?) that attempt to terminate hosts in this status.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-929","03/25/2016 15:07:12",1,"spawn page should give helpful error if there are no spawnable distros ""This will only affect deployments where no distro types allow user spawning. Right now on such deployments, you can set up a public key but cannot click the """"SPAWN"""" button, with no error message to indicate why.""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-939","03/31/2016 23:14:59",1,"'Error setting host RDP password' message incorrectly displays error message ""I received this error message:      """"\[object Object\]"""" should be the error message instead, presumably.""","  Error setting host RDP password: [object Object]  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-948","04/06/2016 01:32:18",1,"Add revision order number to expansions ""This will allow users to upload artifacts with a monotonically increasing sequence number.""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-992","05/04/2016 15:51:09",1,"""json.get"" and ""s3.get"" commands should automatically create outer directory if it doesn't exist yet ""for example, in :      if """"src"""" doesn't exist, we should just automatically mkdir it before trying to write stand.json into it.  This avoids the need for the project maintainer to have to remember to explicitly do a """"mkdir"""" somewhere before the command runs.    The workaround is to add the following before the json.get:    ""","         - command: json.get           params:             task: ${compare_task}             variant : ${variant1}             file: """"src/stand.json""""             name: """"perf""""           - command: shell.exec           params:             script: |                mkdir -p src  ",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-1016","05/17/2016 22:21:48",1,"System.out/err xUnit output not displayed ""See [this build|https://evergreen.mongodb.com/task/mongo_java_driver_ubuntu_1404_test_0078a5e9b337fd76cacf38c2185c84a67ed25a5b_16_05_16_15_31_47#/log/E]    Many of the test suites should have System.out content in the test report, e.g.        I don't see it displayed anywhere in the UI.""","  <?xml version=""""1.0"""" encoding=""""UTF-8""""?>  <testsuite name=""""com.mongodb.operation.InsertOperationSpecification"""" tests=""""18"""" skipped=""""0"""" failures=""""0"""" errors=""""0"""" timestamp=""""2016-05-16T15:55:01"""" hostname=""""jeff.fios-router.home"""" time=""""1.112"""">    <properties/>    <testcase name=""""should return correct result"""" classname=""""com.mongodb.operation.InsertOperationSpecification"""" time=""""0.051""""/>  ...    <system-out><![CDATA[11:55:01.790 [Test worker] INFO  org.mongodb.driver.connection - Opened connection [connectionId{localValue:377, serverValue:69}] to localhost:27017  ]]></system-out>    <system-err><![CDATA[]]></system-err>  </testsuite>  ",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-1041","06/06/2016 18:27:33",2,"Add audit log for user-triggered events with filtering ""Would be nice to have an audit log listing who did what at what time on Evergreen.    Right now if I need to restart a task I can add a note via the Build Baron plugin saying """"I restarted this task"""", but if I need to restart all failures in a build (EVG-429) I can't easily add a note to all the restarted tasks.    Ideally the audit log would have some filtering mechanism (like the waterfall view has) so one could type """"restart"""" to see all the recent task restarts.    I think this would be useful information for the Build Baron to have, so the """"audit log"""" is just a proposal. If a task restart (or cancellation, or priority change) automatically added a note visible via the BB plugin I think that would meet the requirements.""","",1,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-1053","06/13/2016 18:55:11",1,"repo tracker should not try to fetch info on projects that are still in the process of being configured ""Creating a new project from the admin panel inserts a record into the project refs, and the next repo tracker run tries to pull commits for that project ref even when the user has not yet finished updating it with the repo owner/name/branch etc.    This results in almost always getting at least 1 alert about the project being broken as it's being set up, which is pretty annoying (and confusing).""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-1066","06/22/2016 04:31:31",2,"hosts page should show idle time of each host ""It shows how long the host has been up, and (if applicable) how long the current task has been running.  But, there's no way to see how long an idle host has been idle, without going to a specific host's page and inspecting its event log.""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3011","07/13/2016 22:01:19",8,"Add ability to zoom out on performance trend graphs ""From multiple discussions it would be nice to be able to zoom out on the trend graphs on mongo-perf and sys-perf to see longer term trends. The data could be sampled as we zoom out. ""","",0,0,0,1,0,0,0,0,0,0,0,1,0,0,0
"EVG-9415","07/20/2016 18:50:22",0.5,"Write build system and Evergreen configuration for greenbay ""This will borrow significantly from the amboy/curator/etc projects.""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-9556","07/20/2016 18:55:21",1,"Define test result type and reporting format for greenbay ""Include methods for creating, aggregating, printing, writing to a file, both in human readable format and in evergreen's report.json format.""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-1245","10/06/2016 20:12:57",2,"New Project should be disabled on project page for non super-users ""Project admins cannot create their own projects. ""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-1285","10/31/2016 18:52:35",1,"Project admins cannot view disabled projects if they have no enabled projects ""Suppose I am the project admin of two projects, foo and bar. If foo is enabled and bar is disabled, I can view both foo and bar. If, however, I am just the project admin of bar, I cannot view bar.""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-1286","10/31/2016 20:10:25",1,"Track how many tasks a host has run ""This would enable us to easily see if hosts ever get into the pathological state of coming up, waiting, and then shutting down without running any tasks. We could log an event when this occurs. ""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-1288","11/01/2016 15:02:42",2,"Task execution data files only appear when viewing Latest ""When viewing a previous execution of a task the files associated to that execution are not visible. When viewing the Latest, all executions are visible (this may not make sense).""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-1335","11/22/2016 19:46:56",2,"Hide decommissioned hosts on Hosts page ""Can the decommissioned hosts be hidden by default on the Hosts page?  Perhaps we can have a checkbox 'Show decommissioned hosts' similar to what we do for spawned?    I don't think anyone needs to see those boxes on a daily basis, I never had a case where I needed to see or do anything with the decommissioned servers, they just take additional space on the page and make sorting and filtering more difficult.""","",0,1,0,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-1350","12/01/2016 22:05:40",1,"Document undocumented evergreen commands ""I have seen the following commands in various Evergreen config files, but none are documented on the [Project Commands|https://github.com/evergreen-ci/evergreen/wiki/Project-Commands] wiki page:  * archive.targz_pack  * expansions.fetch  * expansions.update  * git.apply_patch  * keyval.inc  * manifest.load  * s3.get  * s3Copy.copy  * shell.track  * shell.cleanup    Could these (and any *other* available commands) please be documented?    Thanks""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-1386","12/19/2016 18:19:09",2,"Set RDP Password no longer working ""I can no longer use the """"Set RDP Password"""" to set passwords on the windows spawn hosts.    The form appears to have been submitted successfully but the password is never changed, I have to login to the server over ssh and reset it manually""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-1404","01/05/2017 18:11:28",1,"Remove HTTP verb constants in evergreen package when GCCGO version moves beyond 1.4 ""The HTTP verb constants that go added after go1.4, e.g. http.MethodPut etc, are copied into the evergreen globals.go file so that we can use them in GCCGO version 1.4.     When we upgrade past this version, the constants should be removed and references to them should be replaced. ""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-1460","01/20/2017 21:30:05",2,"use --binary in git commands  ""The next chapter in the saga of the huge patch, which began in EVG-1459.    The file in question, libbson-objects.inv, is a *new* binary file that is added by the patch.    https://evergreen.mongodb.com/task/mongo_c_driver_releng_make_release_archive_340e610e019f404105aae8e2c1c12f8c85fc4c72_17_01_20_21_07_54""","   [2017/01/20 16:14:49.449] error: cannot apply binary patch to 'doc/libbson-objects.inv' without full index line   [2017/01/20 16:14:49.449] error: doc/libbson-objects.inv: patch does not apply   [2017/01/20 16:14:49.464] Command failed: Failed to apply patch: exit status 1  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-1487","01/26/2017 15:53:42",1,"build_id and task_id have a race condition for patch builds ""Recent discussions and inspection gave me the impression that expansions work roughly this way (where """"roughly"""" means I'm not trying to be specific about how reserved characters are converted to dashes or underscores or whatever):    * project' ‚Äì key for project in evergreen  * 'revision' ‚Äì SHA1 of a commit in the repo for the project  * 'build_variant' ‚Äì entry in the 'buildvariants' part of the config.yml  * 'task_name' ‚Äì task name from 'tasks' part of config.yml  * 'version_id'  ** For commits: roughly {{""""$\{project\}\_$\{revision\}""""}}  ** For patches: a unique ID  * 'build_id' ‚Äì roughly {{""""$\{project\}\_$\{build_variant\}\_$\{revision\}\_$\{TIMESTAMP\}""""}}  * 'task_id' ‚Äì roughly {{""""$\{project\}\_$\{build_variant\}\_$\{task_name\}\_$\{revision\}\_$\{TIMESTAMP\}""""}}  * 'execution' ‚Äì number of times a 'task_id' has executed (starting at 0)    My understanding is that TIMESTAMP is the commit timestamp for commits and the submission time for patches.    From this, it appears that it is possible for two patches on the same commit submitted at the same TIMESTAMP to wind up with the same 'build_id's and 'task_id's.    Without considering backwards compatibility issues, it looks like for patch builds, the 'build_id' and 'task_id' should be using the 'version_id' in place of the 'revision' field.    Alternatively, if 'version_id' for patches were 'project_<UNIQUEID>', then 'build_id' and 'task_id' could remove the 'project' and 'revision' expansions and just use 'version_id' instead, as it would include project information and a unique identifier:    * 'build_id' ‚Äì roughly {{""""$\{version_id\}\_$\{build_variant\}\_$\{TIMESTAMP\}""""}}  * 'task_id' ‚Äì roughly {{""""$\{version_id\}\_$\{build_variant\}\_$\{task_name\}\_$\{TIMESTAMP\}""""}}    It would be even more consistent, perhaps, to put timestamp after 'version_id' since that's what it's tied to, which would give you:    * 'build_id' ‚Äì roughly {{""""$\{version_id\}\_$\{TIMESTAMP\}\_$\{build_variant\}""""}}  * 'task_id' ‚Äì roughly {{""""$\{build_id\}\_$\{task_name\}""""}}    TIMESTAMP could even go first, before 'version_id', which has the added value of allowing id's to sort chronologically (e.g. listing contents of an S3 bucket):    * 'build_id' ‚Äì roughly {{""""$\{TIMESTAMP\}\_$\{version_id\}\_$\{build_variant\}""""}}  * 'task_id' ‚Äì roughly {{""""$\{build_id\}\_$\{task_name\}""""}}    Following that logic, you could add a new expansion:    * 'expansion_id' ‚Äì roughly {{""""$\{task_id\}\_$\{expansion\}""""}}    Then all the unique identifier expansions would build logically and consistently on each other.    That would simplify the job of users choosing an expansion for naming artifacts to S3:    * Need something to reuse across tasks for a build: use just 'build_id'  * Need some task output for external consumption (e.g. a release tarball): use just 'task_id'  * Need to save debugging output from a particular task run: use just 'execution_id'""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-1488","01/26/2017 16:45:32",1,"Add timestamp expansion ""If Evergreen provides a default expansion for the timestamp used to construct build_id, etc., then users can construct better build/task and ultimately S3 artifact identifiers than are currently provided by Evergreen itself.  ""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-1503","02/09/2017 16:45:30",1,"Document 'command_type' ""It's not mentioned on the wiki.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-1520","02/22/2017 19:23:48",0,"Allow projects to specify required builders for patch builds ""It would be nice if project managers could specify in a file what builders are required when sending patch builds, so the {{evergreen}} cli could read those defaults when users don't specify them.    We'd have to decide what to do when users have specified default builders in their {{.evergreen.yml}} file; probably printing a warning and honoring user's settings would be enough.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-1523","02/22/2017 23:00:49",2,"handle test result test files that are too long to index ""we need an index on this field, so we should either truncate these files or figure out some other way to handle this. ""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-1533","03/01/2017 16:37:11",2,"previously executed tasks may not be included in test history retrieval  ""The [current implementation | https://github.com/evergreen-ci/evergreen/blob/master/model/task_history.go#L415] of merging old and current tasks may exclude ones if they are sorted in different ways.     We should include tests with both tasks and archived tasks that cover both the normal archiving a task case, and one where the two may have different sets of test results. ""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-1540","03/07/2017 15:50:50",2,"adjust time zones on test-history command to support user's local timezones ""We currently support inputting only UTC, which what is stored in the DB. We should come up with a good way to support users' timezones. ""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-1560","03/10/2017 21:27:48",2,"Endpoint to report on build success rate and elapsed time within a project/variant ""For Cloud tests on Evergreen, we'd like to create custom reports that track the pass/fail rate of all tasks on a build variant and the time taken for each.    As such, we'd like a REST endpoint that only requires {project} and {variant}, can take an optional {maxResults} and {sortBy}, that returns information on the last {maxResults} of builds. We need task-level detail but not test-level.  ""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-1576","03/19/2017 21:06:59",2,"s3 operations should be more robust to networking issues ""either by more retry logic if system failures continue, or preferably by pushing tasks to doing s3 operations with their own code (or curator.) ""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-1614","04/05/2017 19:16:11",2,"dist-race tarball execs should have the same file names as standard build ""this will make it easy to drop in or deploy race-detector enabled binaries, which isn't currently possible given that the file names aren't the same as the standard builds. However, not being able to tell based on file name if an artifact has the race detector by looking at it might make builds less hygienic or easy to produce.     we could also just put symlinks in the tarball, which may or may not work more long term. ""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-1628","04/14/2017 19:46:50",1,"get rid of global lock for task cleanup on timed out heartbeats ""The global lock is used for cleaning up hosts and tasks. This will probably require some use of atomic updates.  Currently we cleanup timed out tasks and reset them.   ""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-1640","04/25/2017 01:44:08",1,"get rid of global lock for host cleanup  ""this may require having atomic updates on the host status ""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-1650","05/01/2017 23:10:34",1,"Fix (MISSING) in runner logs ""There are a lot of (MISSING) appearing in the runner logs.        Some examples:  """,":~$ grep """"(MISSING)"""" /var/log/evergreen/evg_runner.log | wc     4733  182977 2870167  [evg-runner] 2017/05/01 21:59:52 [p=info]: Remote command executing: '""""-p 22 -i xxxx.pem -o StrictHostKeyChecking=no -o BatchMode=yes -o ConnectTimeout=10 -o ProxyCommand=ssh -o StrictHostKeyChecking=no -i /xxxxxx.pem -q xxxx@xxxx nc %!h(MISSING) %!p(MISSING) xxx@xxxxx echo hi""""'    [evg-runner] 2017/05/01 21:47:07 [p=info]: Setup complete for host %!s(MISSING) sir-5sqg4x5k    [evg-runner] 2017/05/01 21:54:50 [p=info]: Directories command: '&command.RemoteCommand{Id:""""agent_mkdir-6437555143072532165"""", CmdString:""""mkdir -m 777 -p /xxxxx"""", Stdout:(*util.CappedWriter)(0xc422b0b150), Stderr:(*util.CappedWriter)(0xc422b0b150), RemoteHostName:""""xxxxx"""", User:""""xxxx"""", Options:[]string{""""-p"""", """"22"""", """"-i"""", """"xxxx.pem"""", """"-o"""", """"StrictHostKeyChecking=no"""", """"-o"""", """"BatchMode=yes"""", """"-o"""", """"ConnectTimeout=10"""", """"-o"""", """"ProxyCommand=ssh -o StrictHostKeyChecking=no -i xxxx.pem -q xxxx@xxxxx nc %!h(MISSING) %!p(MISSING)""""}, Background:false, LoggingDisabled:false, Cmd:(*exec.Cmd)(nil)}'    [evg-runner] 2017/05/01 21:44:06 [p=debug]: new instance: instance=evg_ubuntu1604-packer_20170501214405_8260689971911243266, object={i-019bc6e4aa1433fbf t1.micro us-east-1c [] {%!!(MISSING)s(int=0) pending}  {pending pending} ami-602a4d76 mci disabled {  } 2017-05-01T21:44:05.000Z  x86_64 xen aki-919dcaf8   paravirtual %!!(MISSING)s(int=0)  default   e72f41bf1e7b68416a516a46293491d35a3fe7a2fc776056a9921716cd01402b [] ebs /dev/sda1 [] %!!(MISSING)s(bool=false)       [{sg-15fe2e7e xxxx  }] [] %!!(MISSING)s(bool=false) }    [evg-runner] 2017/05/01 19:16:28 [p=error]: unable to attach tags for $s%!!(MISSING)(EXTRA string=sir-56987wng): The spot instance request ID 'sir-56987wng' does not exist (InvalidSpotInstanceRequestID.NotFound)  bash /data/infrastructure_provisioning/terraform/infrastructure_teardown.sh User:root SSHKey:mci SSHOptions:[StrictHostKeyChecking=no BatchMode=yes ConnectTimeout=10] UserData:{File: Validate:} SpawnAllowed:false Expansions:[{Key:decompress Value:tar zxvf} {Key:ps Value:ps aux} {Key:kill_pid Value:kill -- -$(ps opgid= %!v(MISSING))} {Key:scons_prune_ratio Value:0.8}]} Provider:ec2 Provisioned:false ProvisionOptions:<nil> RunningTask: Pid: TaskDispatchTime:1970-01-01 00:00:00 +0000 UTC ExpirationTime:0001-01-01 00:00:00 +0000 UTC CreationTime:2017-05-01 20:02:40.275 +0000 UTC TerminationTime:1970-01-01 00:00:00 +0000 UTC LastTaskCompletedTime:0001-01-01 00:00:00 +0000 UTC LastTaskCompleted: LastCommunicationTime:0001-01-01 00:00:00 +0000 UTC Status:starting StartedBy:mci UserHost:false AgentRevision: InstanceType:m3.large Notifications:map[] UserData: LastReachabilityCheck:0001-01-01 00:00:00 +0000 UTC UnreachableSince:0001-01-01 00:00:00 +0000 UTC}    [evg-runner] 2017/05/01 20:54:03 [p=info]: Uploading client binary to host %!s(MISSING) i-047143501124e7120",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-1662","05/05/2017 14:11:58",2,"No overflow checking on batchtime ""It is possible to set a very large batchtime (e.g.: max int64) and overflow the internal representation. The consequence is that builds will always be scheduled.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-9468","05/13/2017 20:16:48",8,"Revive Dagger Tools  ""this ticket is a place holder for work on the dagger project to make the visualizer work and import some existing work""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-1691","05/19/2017 22:28:50",2,"Don't display sub-second timings on on stats graphs ""https://evergreen.mongodb.com/task_timing/mongodb-mongo-master#/project=mongodb-mongo-master&buildVariant=enterprise-rhel-62-64-bit&taskName=compile_all&requester=gitter_request&limit=500    Doing so severely skews the visual quality of the results. The spikes to high values are harder to ignore without heuristics, but rounding down times to the nearest second seems worthwhile.""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-1692","05/22/2017 14:14:41",2,"compile_all task failing continuously for weeks without sending notifications ""You can see the failure history here:    https://evergreen.mongodb.com/task_history/mongodb-mongo-master/compile_all    But this query (which I would expect to return a BFG ticket every ~3rd day or so) instead only has one ticket:    https://jira.mongodb.org/issues/?jql=project%20in%20(BFG%2C%20BF)%20and%20cf%5B14277%5D%20%3D%20ubuntu1604-debug-ubsan%20and%20%22Failing%20Tasks%22%20%3D%20compile_all""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-1714","06/10/2017 18:32:44",2,"go test plugin should be more flexible in its parsing  ""This test shouldn't fail, and does because gccgo has a different zero time value string format, which our regex doesn't account for.     https://evergreen.mongodb.com/task/Greenbay_rhel62_gccgo_test_output_2876d0bd3a8b690c1adc411d6d7b0e7534c6750e_17_06_10_17_06_01""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-1717","06/12/2017 20:34:02",2,"Fetch a Paginated List of Distros: GET /distros ""EVG-880 implements only a portion of the distro model. We should enrich the APIDistro struct to implement the remainder of the model. Note also that EVG-880 assumes the distros list is not paginated, so this needs to be changed when the route is implemented.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-1776","06/15/2017 16:09:07",2,"Base URL for JIRA tickets is sometimes ""undefined"" instead of ""jira.mongodb.com"" ""See https://evergreen.mongodb.com/build/mongodb_mongo_master_ubuntu1604_debug_aubsan_lite_6c0e2884a22a82d57f2cef12756fc6a7609e20c9_17_06_14_21_15_31""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-1799","06/19/2017 20:27:14",1,"ETA tooltip always shows >= 1 day on patch builds ""For example, in progress tasks on https://evergreen.mongodb.com/version/594803ff2fbabe4229000a86 have a tooltip showing ETA: >= 1 day    See https://evergreen.mongodb.com/patches/project/mongodb-mongo-v3.4 for more examples.    The waterfall page isn't affected: https://evergreen.mongodb.com/waterfall/mongodb-mongo-v3.4""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-9391","06/23/2017 21:22:18",2,"On Windows curator stat process-tree --pid <> does not return complete info ""This ticket is related to incomplete process information when querying the """"http://localhost:2285/status"""" Evergreen endpoint on Windows. As requested, I've run the following curator command on Windows with the curator build {{d7616}} commit.            with output:        I do not see any """"ps_info"""" data.""","  $ ps        PID    PPID    PGID     WINPID   TTY         UID    STIME COMMAND       1372    2596    1372        516  ?         197108 19:50:23 /usr/sbin/sshd       2596    1216    2596       2380  ?         197108 19:13:20 /usr/sbin/sshd       1104    1372    1104       1204  pty1      197108 19:50:24 /usr/bin/bash        860     192     860        856  pty0      197108 19:23:14 /usr/bin/bash       1216       1    1216       1216  ?         197108 19:13:20 /usr/bin/cygrunsrv        916     860     916       2472  pty0      197108 20:18:20 /usr/bin/ps        192    2596     192       2900  ?         197108 19:23:11 /usr/sbin/sshd  ./curator stat process-tree --pid 2596  {    """"pid"""": 2596,    """"cpu"""": {      """"cpu"""": """""""",      """"user"""": 0,      """"system"""": 0,      """"idle"""": 0,      """"nice"""": 0,      """"iowait"""": 0,      """"irq"""": 0,      """"softirq"""": 0,      """"steal"""": 0,      """"guest"""": 0,      """"guestNice"""": 0,      """"stolen"""": 0    },    """"io"""": {      """"readCount"""": 0,      """"writeCount"""": 0,      """"readBytes"""": 0,      """"writeBytes"""": 0    },    """"mem"""": {      """"rss"""": 20480,      """"vms"""": 0,      """"swap"""": 0    },    """"memExtra"""": {},    """"errors"""": [      """"Couldn't find pid:‡®§"""",      """"could not get ThreadCount: could not get win32Proc: empty"""",      """"could not get CommandLine: could not get win32Proc: empty"""",      """"could not get Win32Proc: could not get win32Proc: empty""""    ],    """"metadata"""": {      """"level"""": 40,      """"hostname"""": """"WIN-3DH432IBF3A"""",      """"time"""": """"2017-06-23T19:55:55.9990884Z"""",      """"process"""": """"C:\\data\\mci\\curator""""    }  }  ",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-9510","06/24/2017 02:52:12",1,"curator compile only push tasks should depend on a full suite ""to avoid pushing in cases where a test has failed ""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-9465","06/26/2017 19:45:10",1,"greenbay tests leave detritus in home directory ""observed from test compile operation on windows, presumably elsewhere. ""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-1818","06/27/2017 21:28:49",1,"In BF project the ""diff"" link missing ""mongo"" ""eg https://jira.mongodb.org/browse/BF-5321 points to https://github.com/mongodb/commit/932c2f345598d8e1d283e8c2bb54fd8d0e11c853 ( the link misses mongo)""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-1820","06/28/2017 16:01:04",1,"static hosts should not get flagged for termination ""I have a static host that was marked as unreachable, and the monitor published a bunch of """"flagged for termination because: """" messages. Obviously the host can't be terminated though because it is static.  https://evergreen.mongodb.com/host/root@ec2-54-242-216-156.compute-1.amazonaws.com""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-1823","06/28/2017 19:52:18",1,"swap order of id/link/etc and summary as printed by evergreen patch ""The link and Id are the most important bits of info since they are always needed after submitting a patch. Unfortunately for large patches, they get scrolled off screen by the summary, which is not only less important, it is also redundant with the summary printed before submitting the patch. Also it seems to print several blank lines at the end, making this even worse.    ""","  > evergreen patch                 Enter a description for this patch (optional): woooo    .../suites/sharding_jscore_passthrough_opquery.yml |  74 +++++++++   etc/evergreen.yml                                  |  36 +++++   jstests/core/invalid_db_name.js                    |   8 +-   jstests/core/profile_insert.js                     |   3 -   src/mongo/bson/bsonobj.h                           |  12 +-   src/mongo/client/dbclient.cpp                      |  14 +-   src/mongo/client/dbclientcursor.cpp                |  18 +--   src/mongo/db/audit.h                               |   3 +-   src/mongo/db/auth/sasl_commands.cpp                |  12 +-   src/mongo/db/commands.cpp                          |  80 +++++++---   src/mongo/db/commands.h                            | 176 +++++++++++++--------   src/mongo/db/commands/SConscript                   |  14 +-   src/mongo/db/commands/apply_ops_cmd.cpp            |  14 +-   src/mongo/db/commands/apply_ops_cmd_common.cpp     |   2 +-   src/mongo/db/commands/authentication_commands.cpp  |  11 +-   src/mongo/db/commands/authentication_commands.h    |   5 +-   src/mongo/db/commands/clone.cpp                    |   5 +-   src/mongo/db/commands/clone_collection.cpp         |  14 +-   src/mongo/db/commands/collection_to_capped.cpp     |  28 ++--   src/mongo/db/commands/compact.cpp                  |  14 +-   src/mongo/db/commands/conn_pool_stats.cpp          |   5 +-   src/mongo/db/commands/conn_pool_sync.cpp           |   5 +-   src/mongo/db/commands/connection_status.cpp        |   5 +-   src/mongo/db/commands/copydb.cpp                   |  14 +-   src/mongo/db/commands/copydb_start_commands.cpp    |  28 ++--   src/mongo/db/commands/count_cmd.cpp                |  16 +-   src/mongo/db/commands/cpuload.cpp                  |   5 +-   src/mongo/db/commands/cpuprofile.cpp               |  46 +++---   src/mongo/db/commands/create_indexes.cpp           |  14 +-   src/mongo/db/commands/current_op.cpp               |   5 +-   src/mongo/db/commands/dbcommands.cpp               | 120 +++++++-------   src/mongo/db/commands/dbhash.cpp                   |  14 +-   src/mongo/db/commands/distinct.cpp                 |  16 +-   src/mongo/db/commands/driverHelpers.cpp            |  14 +-   src/mongo/db/commands/drop_indexes.cpp             |  19 ++-   src/mongo/db/commands/eval.cpp                     |  14 +-   src/mongo/db/commands/explain_cmd.cpp              |   8 +-   src/mongo/db/commands/fail_point_cmd.cpp           |  14 +-   src/mongo/db/commands/find_and_modify.cpp          |   5 +-   src/mongo/db/commands/find_cmd.cpp                 |  30 ++--   src/mongo/db/commands/fsync.cpp                    |  28 ++--   src/mongo/db/commands/generic.cpp                  |  59 +++----   src/mongo/db/commands/geo_near_cmd.cpp             |  14 +-   src/mongo/db/commands/get_last_error.cpp           |  24 ++-   src/mongo/db/commands/getmore_cmd.cpp              |   8 +-   src/mongo/db/commands/group_cmd.cpp                |   5 +-   src/mongo/db/commands/hashcmd.cpp                  |  14 +-   src/mongo/db/commands/haystack.cpp                 |  14 +-   src/mongo/db/commands/index_filter_commands.cpp    |   3 +-   src/mongo/db/commands/index_filter_commands.h      |   3 +-   src/mongo/db/commands/isself.cpp                   |   5 +-   src/mongo/db/commands/kill_op.cpp                  |   5 +-   src/mongo/db/commands/killcursors_common.cpp       |   1 -   src/mongo/db/commands/killcursors_common.h         |   5 +-   src/mongo/db/commands/list_collections.cpp         |   5 +-   src/mongo/db/commands/list_databases.cpp           |   5 +-   src/mongo/db/commands/list_indexes.cpp             |   5 +-   src/mongo/db/commands/lock_info.cpp                |   5 +-   src/mongo/db/commands/mr.cpp                       |  19 ++-   src/mongo/db/commands/oplog_note.cpp               |   5 +-   src/mongo/db/commands/parallel_collection_scan.cpp |   5 +-   src/mongo/db/commands/parameters.cpp               |  28 ++--   src/mongo/db/commands/pipeline_command.cpp         |   5 +-   src/mongo/db/commands/plan_cache_commands.cpp      |   3 +-   src/mongo/db/commands/plan_cache_commands.h        |   3 +-   src/mongo/db/commands/rename_collection_cmd.cpp    |  14 +-   src/mongo/db/commands/repair_cursor.cpp            |   5 +-   src/mongo/db/commands/server_status.cpp            |   5 +-   .../set_feature_compatibility_version_command.cpp  |   6 +-   src/mongo/db/commands/shutdown.h                   |   6 +-   src/mongo/db/commands/snapshot_management.cpp      |  10 +-   src/mongo/db/commands/test_commands.cpp            |  29 ++--   src/mongo/db/commands/top_command.cpp              |   5 +-   src/mongo/db/commands/touch.cpp                    |  14 +-   src/mongo/db/commands/user_management_commands.cpp | 100 +++++-------   src/mongo/db/commands/validate.cpp                 |  14 +-   .../db/commands/write_commands/write_commands.cpp  |  36 ++---   .../write_commands/write_commands_common.cpp       |  20 ++-   .../write_commands/write_commands_common.h         |   4 +-   src/mongo/db/dbdirectclient.cpp                    |  21 +--   src/mongo/db/exec/stagedebug_cmd.cpp               |   6 +-   src/mongo/db/ftdc/ftdc_commands.cpp                |   5 +-   src/mongo/db/ftdc/ftdc_mongod.cpp                  |  23 +--   .../write_ops_document_stream_integration_test.cpp |  35 ++++   src/mongo/db/ops/write_ops_exec.cpp                |  11 +-   src/mongo/db/repl/master_slave.cpp                 |   5 +-   src/mongo/db/repl/repl_set_command.h               |   4 +-   src/mongo/db/repl/repl_set_commands.cpp            |  18 +--   src/mongo/db/repl/repl_set_request_votes.cpp       |   1 -   src/mongo/db/repl/replication_info.cpp             |   5 +-   src/mongo/db/repl/resync.cpp                       |  14 +-   src/mongo/db/s/check_sharding_index_command.cpp    |  14 +-   src/mongo/db/s/cleanup_orphaned_cmd.cpp            |  16 +-   .../db/s/config/configsvr_add_shard_command.cpp    |   5 +-   .../config/configsvr_add_shard_to_zone_command.cpp |   5 +-   .../configsvr_commit_chunk_migration_command.cpp   |   5 +-   .../config/configsvr_control_balancer_command.cpp  |   5 +-   .../db/s/config/configsvr_merge_chunk_command.cpp  |   5 +-   .../db/s/config/configsvr_move_chunk_command.cpp   |   5 +-   .../db/s/config/configsvr_move_primary_command.cpp |   5 +-   .../configsvr_remove_shard_from_zone_command.cpp   |   5 +-   ...r_set_feature_compatibility_version_command.cpp |   5 +-   .../config/configsvr_shard_collection_command.cpp  |   5 +-   .../db/s/config/configsvr_split_chunk_command.cpp  |   5 +-   .../configsvr_update_zone_key_range_command.cpp    |   5 +-   src/mongo/db/s/get_shard_version_command.cpp       |   5 +-   src/mongo/db/s/merge_chunks_command.cpp            |  14 +-   ...gration_chunk_cloner_source_legacy_commands.cpp |  10 +-   ...gration_destination_manager_legacy_commands.cpp |  29 ++--   src/mongo/db/s/move_chunk_command.cpp              |   5 +-   src/mongo/db/s/set_shard_version_command.cpp       |  14 +-   src/mongo/db/s/sharding_state_command.cpp          |   5 +-   src/mongo/db/s/split_chunk_command.cpp             |  14 +-   src/mongo/db/s/split_vector_command.cpp            |  14 +-   src/mongo/db/s/unset_sharding_command.cpp          |   5 +-   src/mongo/db/service_entry_point_mongod.cpp        |   9 +-   .../storage/mmap_v1/journal_latency_test_cmd.cpp   |   5 +-   src/mongo/dbtests/directclienttests.cpp            |   4 +-   src/mongo/rpc/legacy_reply.cpp                     |  11 ++   src/mongo/rpc/legacy_request.cpp                   |   6 +-   src/mongo/rpc/metadata.cpp                         |  83 ++++++----   src/mongo/rpc/metadata.h                           |  11 +-   .../rpc/metadata/logical_time_metadata_test.cpp    |   8 +-   src/mongo/rpc/metadata_test.cpp                    |  82 +++++-----   src/mongo/s/client/shard_connection.cpp            |   5 +-   src/mongo/s/commands/SConscript                    |   1 +   src/mongo/s/commands/cluster_add_shard_cmd.cpp     |   5 +-   .../s/commands/cluster_add_shard_to_zone_cmd.cpp   |   5 +-   src/mongo/s/commands/cluster_apply_ops_cmd.cpp     |   5 +-   .../cluster_available_query_options_cmd.cpp        |   5 +-   src/mongo/s/commands/cluster_compact_cmd.cpp       |   5 +-   .../s/commands/cluster_control_balancer_cmd.cpp    |   5 +-   src/mongo/s/commands/cluster_count_cmd.cpp         |  21 ++-   src/mongo/s/commands/cluster_current_op.cpp        |  14 +-   src/mongo/s/commands/cluster_db_stats_cmd.cpp      |  14 +-   src/mongo/s/commands/cluster_drop_cmd.cpp          |   5 +-   src/mongo/s/commands/cluster_drop_database_cmd.cpp |   5 +-   .../s/commands/cluster_enable_sharding_cmd.cpp     |  14 +-   src/mongo/s/commands/cluster_explain_cmd.cpp       |   8 +-   .../s/commands/cluster_find_and_modify_cmd.cpp     |   5 +-   src/mongo/s/commands/cluster_find_cmd.cpp          |   5 +-   .../s/commands/cluster_flush_router_config_cmd.cpp |   5 +-   src/mongo/s/commands/cluster_fsync_cmd.cpp         |  14 +-   src/mongo/s/commands/cluster_ftdc_commands.cpp     |  14 +-   .../s/commands/cluster_get_last_error_cmd.cpp      |   5 +-   .../s/commands/cluster_get_prev_error_cmd.cpp      |  14 +-   src/mongo/s/commands/cluster_get_shard_map_cmd.cpp |   5 +-   .../s/commands/cluster_get_shard_version_cmd.cpp   |   5 +-   src/mongo/s/commands/cluster_getmore_cmd.cpp       |   5 +-   src/mongo/s/commands/cluster_index_filter_cmd.cpp  |   5 +-   src/mongo/s/commands/cluster_is_db_grid_cmd.cpp    |   5 +-   src/mongo/s/commands/cluster_is_master_cmd.cpp     |   5 +-   src/mongo/s/commands/cluster_kill_op.cpp           |   5 +-   .../s/commands/cluster_list_databases_cmd.cpp      |   5 +-   src/mongo/s/commands/cluster_list_shards_cmd.cpp   |   5 +-   src/mongo/s/commands/cluster_map_reduce_cmd.cpp    |  14 +-   src/mongo/s/commands/cluster_merge_chunks_cmd.cpp  |  14 +-   src/mongo/s/commands/cluster_move_chunk_cmd.cpp    |  14 +-   src/mongo/s/commands/cluster_move_primary_cmd.cpp  |  14 +-   src/mongo/s/commands/cluster_netstat_cmd.cpp       |   5 +-   src/mongo/s/commands/cluster_pipeline_cmd.cpp      |   5 +-   src/mongo/s/commands/cluster_plan_cache_cmd.cpp    |   6 +-   src/mongo/s/commands/cluster_profile_cmd.cpp       |  14 +-   src/mongo/s/commands/cluster_remove_shard_cmd.cpp  |   5 +-   .../cluster_remove_shard_from_zone_cmd.cpp         |   5 +-   .../s/commands/cluster_repl_set_get_status_cmd.cpp |  14 +-   src/mongo/s/commands/cluster_reset_error_cmd.cpp   |   5 +-   ...uster_set_feature_compatibility_version_cmd.cpp |   5 +-   .../s/commands/cluster_shard_collection_cmd.cpp    |   5 +-   src/mongo/s/commands/cluster_shutdown_cmd.cpp      |   1 -   src/mongo/s/commands/cluster_split_cmd.cpp         |  14 +-   .../commands/cluster_update_zone_key_range_cmd.cpp |   5 +-   .../commands/cluster_user_management_commands.cpp  |  95 +++++------   src/mongo/s/commands/cluster_whats_my_uri_cmd.cpp  |   5 +-   src/mongo/s/commands/cluster_write_cmd.cpp         |  21 +--   src/mongo/s/commands/commands_public.cpp           |  56 +++----   src/mongo/s/commands/strategy.cpp                  |  40 +----   src/mongo/s/write_ops/batched_command_request.cpp  |  31 +---   src/mongo/s/write_ops/batched_command_request.h    |   5 +-   src/mongo/s/write_ops/batched_insert_request.cpp   |   5 +-   src/mongo/shell/bulk_api.js                        |  24 +--   src/mongo/shell/collection.js                      |   4 +-   182 files changed, 1331 insertions(+), 1380 deletions(-)    bb0b94351b auditing command use OMR  464247a137 Add sharding_jscore_passthrough_opquery suite  082605fba3 upconvert now uses document sequences  077f91713e upconvertRequest shouldn't separate data and metadata  b3edb26b27 bulk_api.js should use runCommand()  a340b9e614 Auth checks get access to document sequences  65ff0b9f36 don't pass cmdobj to localHostOnlyIfNoAuth()  88e825a065 ErrmsgCommandDeprecated  8391ef9095 Get errmsg out of public Command API  7c08390439 Make BasicCommand a separate type  5fe7b8bcc8 SERVER-29731 convert all direct subclasses of Command to BasicCommand  803cfc8cca runCommandDirectly    This is a summary of the patch to be submitted. Continue? (y/n): y  Patch successfully created.          ID : 5953f7f42fbabe5e3d002018   Created : 401.02207ms ago      Description : woooo      Link : https://evergreen.mongodb.com/patch/5953f7f42fbabe5e3d002018        Finalized : No     Summary :     Base Commit : 940a6b62189bface6aec2af698e5e9c4149af258   +74 -0 buildscripts/resmokeconfig/suites/sharding_jscore_passthrough_opquery.yml   +36 -0 etc/evergreen.yml   +1 -7 jstests/core/invalid_db_name.js   +0 -3 jstests/core/profile_insert.js   +10 -2 src/mongo/bson/bsonobj.h   +1 -13 src/mongo/client/dbclient.cpp   +6 -12 src/mongo/client/dbclientcursor.cpp   +2 -1 src/mongo/db/audit.h   +4 -8 src/mongo/db/auth/sasl_commands.cpp   +59 -21 src/mongo/db/commands.cpp   +108 -68 src/mongo/db/commands.h   +13 -1 src/mongo/db/commands/SConscript   +7 -7 src/mongo/db/commands/apply_ops_cmd.cpp   +1 -1 src/mongo/db/commands/apply_ops_cmd_common.cpp   +4 -7 src/mongo/db/commands/authentication_commands.cpp   +2 -3 src/mongo/db/commands/authentication_commands.h   +2 -3 src/mongo/db/commands/clone.cpp   +7 -7 src/mongo/db/commands/clone_collection.cpp   +14 -14 src/mongo/db/commands/collection_to_capped.cpp   +7 -7 src/mongo/db/commands/compact.cpp   +2 -3 src/mongo/db/commands/conn_pool_stats.cpp   +2 -3 src/mongo/db/commands/conn_pool_sync.cpp   +2 -3 src/mongo/db/commands/connection_status.cpp   +7 -7 src/mongo/db/commands/copydb.cpp   +14 -14 src/mongo/db/commands/copydb_start_commands.cpp   +7 -9 src/mongo/db/commands/count_cmd.cpp   +2 -3 src/mongo/db/commands/cpuload.cpp   +23 -23 src/mongo/db/commands/cpuprofile.cpp   +7 -7 src/mongo/db/commands/create_indexes.cpp   +2 -3 src/mongo/db/commands/current_op.cpp   +56 -64 src/mongo/db/commands/dbcommands.cpp   +7 -7 src/mongo/db/commands/dbhash.cpp   +7 -9 src/mongo/db/commands/distinct.cpp   +7 -7 src/mongo/db/commands/driverHelpers.cpp   +9 -10 src/mongo/db/commands/drop_indexes.cpp   +7 -7 src/mongo/db/commands/eval.cpp   +4 -4 src/mongo/db/commands/explain_cmd.cpp   +7 -7 src/mongo/db/commands/fail_point_cmd.cpp   +2 -3 src/mongo/db/commands/find_and_modify.cpp   +15 -15 src/mongo/db/commands/find_cmd.cpp   +14 -14 src/mongo/db/commands/fsync.cpp   +25 -34 src/mongo/db/commands/generic.cpp   +7 -7 src/mongo/db/commands/geo_near_cmd.cpp   +11 -13 src/mongo/db/commands/get_last_error.cpp   +3 -5 src/mongo/db/commands/getmore_cmd.cpp   +2 -3 src/mongo/db/commands/group_cmd.cpp   +7 -7 src/mongo/db/commands/hashcmd.cpp   +7 -7 src/mongo/db/commands/haystack.cpp   +1 -2 src/mongo/db/commands/index_filter_commands.cpp   +1 -2 src/mongo/db/commands/index_filter_commands.h   +2 -3 src/mongo/db/commands/isself.cpp   +2 -3 src/mongo/db/commands/kill_op.cpp   +0 -1 src/mongo/db/commands/killcursors_common.cpp   +2 -3 src/mongo/db/commands/killcursors_common.h   +2 -3 src/mongo/db/commands/list_collections.cpp   +2 -3 src/mongo/db/commands/list_databases.cpp   +2 -3 src/mongo/db/commands/list_indexes.cpp   +2 -3 src/mongo/db/commands/lock_info.cpp   +9 -10 src/mongo/db/commands/mr.cpp   +2 -3 src/mongo/db/commands/oplog_note.cpp   +2 -3 src/mongo/db/commands/parallel_collection_scan.cpp   +14 -14 src/mongo/db/commands/parameters.cpp   +2 -3 src/mongo/db/commands/pipeline_command.cpp   +1 -2 src/mongo/db/commands/plan_cache_commands.cpp   +1 -2 src/mongo/db/commands/plan_cache_commands.h   +7 -7 src/mongo/db/commands/rename_collection_cmd.cpp   +2 -3 src/mongo/db/commands/repair_cursor.cpp   +2 -3 src/mongo/db/commands/server_status.cpp   +3 -3 src/mongo/db/commands/set_feature_compatibility_version_command.cpp   +3 -3 src/mongo/db/commands/shutdown.h   +4 -6 src/mongo/db/commands/snapshot_management.cpp   +13 -16 src/mongo/db/commands/test_commands.cpp   +2 -3 src/mongo/db/commands/top_command.cpp   +7 -7 src/mongo/db/commands/touch.cpp   +40 -60 src/mongo/db/commands/user_management_commands.cpp   +7 -7 src/mongo/db/commands/validate.cpp   +11 -25 src/mongo/db/commands/write_commands/write_commands.cpp   +14 -6 src/mongo/db/commands/write_commands/write_commands_common.cpp   +2 -2 src/mongo/db/commands/write_commands/write_commands_common.h   +5 -16 src/mongo/db/dbdirectclient.cpp   +2 -4 src/mongo/db/exec/stagedebug_cmd.cpp   +2 -3 src/mongo/db/ftdc/ftdc_commands.cpp   +6 -17 src/mongo/db/ftdc/ftdc_mongod.cpp   +35 -0 src/mongo/db/ops/write_ops_document_stream_integration_test.cpp   +3 -8 src/mongo/db/ops/write_ops_exec.cpp   +2 -3 src/mongo/db/repl/master_slave.cpp   +2 -2 src/mongo/db/repl/repl_set_command.h   +1 -17 src/mongo/db/repl/repl_set_commands.cpp   +0 -1 src/mongo/db/repl/repl_set_request_votes.cpp   +2 -3 src/mongo/db/repl/replication_info.cpp   +7 -7 src/mongo/db/repl/resync.cpp   +7 -7 src/mongo/db/s/check_sharding_index_command.cpp   +8 -8 src/mongo/db/s/cleanup_orphaned_cmd.cpp   +2 -3 src/mongo/db/s/config/configsvr_add_shard_command.cpp   +2 -3 src/mongo/db/s/config/configsvr_add_shard_to_zone_command.cpp   +2 -3 src/mongo/db/s/config/configsvr_commit_chunk_migration_command.cpp   +2 -3 src/mongo/db/s/config/configsvr_control_balancer_command.cpp   +2 -3 src/mongo/db/s/config/configsvr_merge_chunk_command.cpp   +2 -3 src/mongo/db/s/config/configsvr_move_chunk_command.cpp   +2 -3 src/mongo/db/s/config/configsvr_move_primary_command.cpp   +2 -3 src/mongo/db/s/config/configsvr_remove_shard_from_zone_command.cpp   +2 -3 src/mongo/db/s/config/configsvr_set_feature_compatibility_version_command.cpp   +2 -3 src/mongo/db/s/config/configsvr_shard_collection_command.cpp   +2 -3 src/mongo/db/s/config/configsvr_split_chunk_command.cpp   +2 -3 src/mongo/db/s/config/configsvr_update_zone_key_range_command.cpp   +2 -3 src/mongo/db/s/get_shard_version_command.cpp   +7 -7 src/mongo/db/s/merge_chunks_command.cpp   +4 -6 src/mongo/db/s/migration_chunk_cloner_source_legacy_commands.cpp   +13 -16 src/mongo/db/s/migration_destination_manager_legacy_commands.cpp   +2 -3 src/mongo/db/s/move_chunk_command.cpp   +7 -7 src/mongo/db/s/set_shard_version_command.cpp   +2 -3 src/mongo/db/s/sharding_state_command.cpp   +7 -7 src/mongo/db/s/split_chunk_command.cpp   +7 -7 src/mongo/db/s/split_vector_command.cpp   +2 -3 src/mongo/db/s/unset_sharding_command.cpp   +4 -5 src/mongo/db/service_entry_point_mongod.cpp   +2 -3 src/mongo/db/storage/mmap_v1/journal_latency_test_cmd.cpp   +3 -1 src/mongo/dbtests/directclienttests.cpp   +11 -0 src/mongo/rpc/legacy_reply.cpp   +2 -4 src/mongo/rpc/legacy_request.cpp   +56 -27 src/mongo/rpc/metadata.cpp   +3 -8 src/mongo/rpc/metadata.h   +5 -3 src/mongo/rpc/metadata/logical_time_metadata_test.cpp   +43 -39 src/mongo/rpc/metadata_test.cpp   +2 -3 src/mongo/s/client/shard_connection.cpp   +1 -0 src/mongo/s/commands/SConscript   +2 -3 src/mongo/s/commands/cluster_add_shard_cmd.cpp   +2 -3 src/mongo/s/commands/cluster_add_shard_to_zone_cmd.cpp   +2 -3 src/mongo/s/commands/cluster_apply_ops_cmd.cpp   +2 -3 src/mongo/s/commands/cluster_available_query_options_cmd.cpp   +2 -3 src/mongo/s/commands/cluster_compact_cmd.cpp   +2 -3 src/mongo/s/commands/cluster_control_balancer_cmd.cpp   +10 -11 src/mongo/s/commands/cluster_count_cmd.cpp   +7 -7 src/mongo/s/commands/cluster_current_op.cpp   +7 -7 src/mongo/s/commands/cluster_db_stats_cmd.cpp   +2 -3 src/mongo/s/commands/cluster_drop_cmd.cpp   +2 -3 src/mongo/s/commands/cluster_drop_database_cmd.cpp   +7 -7 src/mongo/s/commands/cluster_enable_sharding_cmd.cpp   +4 -4 src/mongo/s/commands/cluster_explain_cmd.cpp   +2 -3 src/mongo/s/commands/cluster_find_and_modify_cmd.cpp   +2 -3 src/mongo/s/commands/cluster_find_cmd.cpp   +2 -3 src/mongo/s/commands/cluster_flush_router_config_cmd.cpp   +7 -7 src/mongo/s/commands/cluster_fsync_cmd.cpp   +7 -7 src/mongo/s/commands/cluster_ftdc_commands.cpp   +2 -3 src/mongo/s/commands/cluster_get_last_error_cmd.cpp   +7 -7 src/mongo/s/commands/cluster_get_prev_error_cmd.cpp   +2 -3 src/mongo/s/commands/cluster_get_shard_map_cmd.cpp   +2 -3 src/mongo/s/commands/cluster_get_shard_version_cmd.cpp   +2 -3 src/mongo/s/commands/cluster_getmore_cmd.cpp   +2 -3 src/mongo/s/commands/cluster_index_filter_cmd.cpp   +2 -3 src/mongo/s/commands/cluster_is_db_grid_cmd.cpp   +2 -3 src/mongo/s/commands/cluster_is_master_cmd.cpp   +2 -3 src/mongo/s/commands/cluster_kill_op.cpp   +2 -3 src/mongo/s/commands/cluster_list_databases_cmd.cpp   +2 -3 src/mongo/s/commands/cluster_list_shards_cmd.cpp   +7 -7 src/mongo/s/commands/cluster_map_reduce_cmd.cpp   +7 -7 src/mongo/s/commands/cluster_merge_chunks_cmd.cpp   +7 -7 src/mongo/s/commands/cluster_move_chunk_cmd.cpp   +7 -7 src/mongo/s/commands/cluster_move_primary_cmd.cpp   +2 -3 src/mongo/s/commands/cluster_netstat_cmd.cpp   +2 -3 src/mongo/s/commands/cluster_pipeline_cmd.cpp   +2 -4 src/mongo/s/commands/cluster_plan_cache_cmd.cpp   +7 -7 src/mongo/s/commands/cluster_profile_cmd.cpp   +2 -3 src/mongo/s/commands/cluster_remove_shard_cmd.cpp   +2 -3 src/mongo/s/commands/cluster_remove_shard_from_zone_cmd.cpp   +7 -7 src/mongo/s/commands/cluster_repl_set_get_status_cmd.cpp   +2 -3 src/mongo/s/commands/cluster_reset_error_cmd.cpp   +2 -3 src/mongo/s/commands/cluster_set_feature_compatibility_version_cmd.cpp   +2 -3 src/mongo/s/commands/cluster_shard_collection_cmd.cpp   +0 -1 src/mongo/s/commands/cluster_shutdown_cmd.cpp   +7 -7 src/mongo/s/commands/cluster_split_cmd.cpp   +2 -3 src/mongo/s/commands/cluster_update_zone_key_range_cmd.cpp   +38 -57 src/mongo/s/commands/cluster_user_management_commands.cpp   +2 -3 src/mongo/s/commands/cluster_whats_my_uri_cmd.cpp   +6 -15 src/mongo/s/commands/cluster_write_cmd.cpp   +21 -35 src/mongo/s/commands/commands_public.cpp   +5 -35 src/mongo/s/commands/strategy.cpp   +7 -24 src/mongo/s/write_ops/batched_command_request.cpp   +3 -2 src/mongo/s/write_ops/batched_command_request.h   +3 -2 src/mongo/s/write_ops/batched_insert_request.cpp   +1 -23 src/mongo/shell/bulk_api.js   +2 -2 src/mongo/shell/collection.js         ",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3310","06/29/2017 10:43:05",8,"Annotations (relevant BF tickets) for trend graphs in evergreen perf plugin ""When triaging Microbenchmarks and sys-perf, it's difficult to get any historical info about historical ups and downs in the trend graphs. There may exist a Jira ticket, but when just looking at the trend graph, there's no marker or link to say that this jump 3 weeks ago is a known issue. A lot of time is then wasted by the build baron re-discovering things that are already known.    We'd like to change the display so that, in addition to displaying change points, Build Failures are also rendered onto the trend graphs.    BF tickets have 'Evergreen Project', 'Failing Buildvariants', 'Failing Tasks' and 'First Failing Revision' / 'Fix Revision' fields that can be used to link to the point in the trend graphs.    When a BF and a Change Point exist for the same revision, the BF should take precedence (as this indicates that the change is known or is being worked on).¬†""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-1827","06/29/2017 20:06:22",2,"timeouts still marked as system failures ""e.g.     https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_rhel_62_64_bit_multiversion_multistorage_engine_f0110e2682e3a787df062ee3feb7637add694978_17_06_29_14_43_19/0    EVG-1608""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-1828","06/29/2017 20:41:08",1,"avoid removing task directory after timeouts  ""turns out this removed files during the post task, and we shouldn't do that""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-1829","06/29/2017 23:00:46",1,"HTTP error handler on some pages give non-helpful error messages ""Like on the settings page, due to the browser returning a JSON object for the error but we're trying to display it verbatim.""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-1838","07/01/2017 00:47:02",1,"write application logs to files and log service ""continue only writing agent lots to log service, if possible.""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-1839","07/01/2017 17:20:32",2,"clean up/restructure log messages  ""specifically I want to use the line constructors *much* less as they're quite hard to use in a structured format. ""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-1840","07/04/2017 02:55:03",2,"implement legacy client methods for routes required by attach plugin """"","   SendTaskResults(context.Context, *task.TestResults) error   SendTestLog(context.Context, *model.TestLog) (string, error)  ",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-1841","07/04/2017 15:07:13",1,"new client getnexttask method takes a taskID/secret ""this seems like it is in error or is confusing. ""","",0,0,0,0,0,1,0,0,0,1,0,0,0,0,0
"EVG-1842","07/04/2017 15:18:09",1,"new client retryGet should handle nil responses ""the current implementation logs but doesn't error if the response is nil. (which I think should always be an error, or at least I believe that the response is never nil if the error is nil. It would be nice to prevent the implementation of the method handlers from needing to consider the possibility of a response being nil if they check the error.     would want to update/refactor the client methods accordingly as well""","",0,0,0,0,0,1,0,0,0,1,0,0,0,0,0
"EVG-1843","07/04/2017 18:20:11",1,"client.LogProducer's writer methods should accepet levels.  ""so that we can properly filter stderr messages to error""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-1844","07/04/2017 18:22:18",1,"move command package and refactor it to accept conexts  ""new package should be called subprocess ""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-1849","07/06/2017 18:42:22",2,"Instances should fail to provision if adding tags fails ""This will prevent cases like BUILD-3424, where the reaper stopped a user's spawnhost.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-1852","07/10/2017 15:38:24",1,"Hosts are not removed from DB when terminated in GCE and OpenStack ""If you spawn a host in GCE/OpenStack and then terminate it, it will still show up in the Evergreen Hosts UI because it was not removed from the DB.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-1853","07/10/2017 15:42:46",1,"GCE does not accept spaces in new instance names ""If you spawn a GCE host using the default distro name """"new distro"""", GCE returns an error: Must be a match of regex '(?:[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?)'. We should clean/validate the instance name in GCE before making an API call to spawn an instance.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-1854","07/10/2017 16:48:03",2,"handleAPIError returns wrong error status code ""Returned JSON document claims 500 status but curl -I shows 404. Problem likely exists in handleAPIError() method in rest/route/handler.go because returned error is cast to rest.APIError instead of *rest.APIError.    See:      ""","  norman@MacBook-Pro-53:~$ curl -I https://evergreen.mongodb.com/rest/v2/hosts/asdfasdf  HTTP/1.1 404 Not Found  Content-Type: text/plain; charset=utf-8  X-Content-Type-Options: nosniff  Date: Mon, 10 Jul 2017 15:37:02 GMT  Content-Length: 19    norman@MacBook-Pro-53:~$ curl https://evergreen.mongodb.com/rest/v2/hosts/asdfasdf  {""""status"""":500,""""error"""":""""host with id asdfasdf not found""""}norman@MacBook-Pro-53:~$  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-1855","07/10/2017 18:00:33",1,"OpenStack security groups are NOT optional ""The Evergreen UI indicates that security groups are an optional parameter, but the API call to create an instance will actually fail if a security group is not indicated. We need to fix the UI and also update settings validation in the provider implementation.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-1856","07/10/2017 18:04:59",1,"More informative error message when spawning hosts ""If a host fails to spawn, it will not appear in the UI, but there will still be a green info message saying """"Host spawned."""" This is confusing to users who cannot tell if their host actually spawned, nor the reason it may have failed. It can fail if, for example, the distro is configured incorrectly with an image ID that does not exist.    https://evergreen.mongodb.com/spawn""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-1860","07/11/2017 16:10:21",2,"Clean up build API routes ""Some class names in the build abort route are misnamed, and some tests are a little messy.    Ex: buildIdAbortGetHandler, AbortBuild/FindBuildById argument names""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-1861","07/11/2017 16:21:57",2,"Authenticate to a vCenter server using the VMware golang library ""This ticket involves creating a client interface to the golang library similar to in the OpenStack and GCE cloud providers. At the end, we should have an authenticated client that can be used to make more API calls to the server.  * Create an interface to the golang library with a mock for testing  * Add credentials to *evergreen.Settings structure  * Make an API call to authenticate to the server""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-1862","07/11/2017 16:23:59",2,"Implement methods for reading VMware instance attributes ""These provider methods behave the same for hosts created by Evergreen and hosts that are created with the vSphere web client, so they are possible to test before we figure out how to spawn instances using the vSphere API. This involves implementing the following methods of the cloud manager interface:  * GetInstanceStatus()  * GetDNSName()  * IsUp()""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-1864","07/12/2017 16:31:33",2,"Scrolling up on the build timeline requires scrolling down ""Scenario to reproduce:    1. Visit: https://evergreen.mongodb.com/version/performance_12568fbc406678ebd98a93d121175b1f765c4766#/0  2. Attempt to scroll up on the Build Time so you can work back to the current date. It requires you to continually scroll down and then back up to trigger a load.     While seemingly small this is really annoying for build barons investigating failures.  Expected: When you scroll up on the build timeline it loads earlier and earlier dates without requiring a scroll down.  ""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-1865","07/12/2017 20:04:46",2,"Time conversion errors in API models and pagination functions ""The conversion from service level structs to API structs is incorrect. Given a time.Time field, several API models are using naive type casting to coerce these fields into APITime fields, which truncates location data and results in off-by-4-hours errors. Instead we should be using the model.NewTime method which first converts the input time to a location of UTC before populating APITime fields.     Furthermore, the serialization of the time in the actual pagination function is also incorrect. Rather than format the next page's first time properly using time.Format, we currently use the .String() method which again improperly truncates the location data but also uses the wrong format.    Routes affected include but are not limited to build, metrics, and hosts.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-1868","07/13/2017 20:55:02",1,"Support custom machine types in Google Compute distros ""In addition to predefined machine types, Google Compute also supports custom machine types that are priced differently according to the number of vCPUs and memory used. GCE distro configuration should also support custom machine types.    {panel:title=Source: [https://cloud.google.com/compute/pricing#custommachinetypepricing]}  Create a custom machine type with a specific number of vCPUs and amount of memory if predefined machine types are not optimal for your workloads. Custom machine types also save you the cost of running on a larger, more expensive machine type if you don't need to use all the resources of that machine type.    For example, instead of using an n1-standard-8 machine type when you just need a machine type with 6 vCPUs, create a custom machine type instance with 6 vCPUs and 22.5 GB of memory. Creating a custom machine type can save you up to 40% compared to selecting a larger machine type.  {panel}  ""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-1870","07/14/2017 21:48:51",1,"Methods in rest client should not log ""They should return errors, which the caller will log.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-1876","07/15/2017 15:03:59",1,"API user and key header constants are reversed ""const (   AuthTokenCookie   = """"mci-token""""   TaskSecretHeader  = """"Task-Secret""""   HostHeader        = """"Host-Id""""   HostSecretHeader  = """"Host-Secret""""   ContentTypeHeader = """"Content-Type""""   ContentTypeValue  = """"application/json""""   APIUserHeader     = """"Api-Key""""   APIKeyHeader      = """"Api-User""""  )""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-1880","07/17/2017 21:33:58",3,"Get all revisions for a project: GET /projects/<project-id>/revisions/ ""Get all revisions for a project during a specific time period, which will be given as form values included in the http request. ""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-9488","07/18/2017 15:15:48",1,"Change granularity to duration ""Change mentions of granularity to duration in the build cost reporting tool.""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-1888","07/18/2017 20:14:34",1,"Add route to kill all agents ""this should go in the status server that runs in the agent""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-1890","07/19/2017 22:44:52",1,"Fix setup/teardown script ordering ""The order of events is:  # Copy the teardown script to the host.  # Copy the setup script to the host.  # Run the setup script.    Some setup scripts, however, mount the working directory elsewhere, which means the setup and teardown scripts are no longer present in the distro's working directory, and then Evergreen cannot run the teardown script.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-1894","07/20/2017 18:28:54",2,"Get all Tasks by Project for Cost Route: GET cost/projects/<project_id>/task  ""Include starttime and duration when filtering for relevant tasks ""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-1895","07/20/2017 21:11:25",1,"Pagination broken in the hosts route ""We should fix the fact that the data Connector to properly sort the host results so that the pagination operations make sense.    We'll address the parameter passing problem separately. ""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-1900","07/24/2017 16:40:09",2,"fetch hosts route pagination broken ""When fetching a page of hosts, we are not sorting correctly""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-1901","07/24/2017 22:26:28",2,"test-rest-model failure ""h2. [test-rest-model failed on ubuntu1604|https://evergreen.mongodb.com/task/mci_ubuntu1604_test_rest_model_patch_752543f46b1c2a22f984c3b1ce15ff88b6314696_597639282fbabe43520018ce_17_07_24_18_15_39/0]    Host: [ec2-54-224-143-176.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-9hqi78wk]  Project: [mci|https://evergreen.mongodb.com/waterfall/mci]          ~BF Ticket Generated by [~sejin.park]~  ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-1903","07/25/2017 00:21:52",1,"patches listed in version history drawer ""The two versions at the top of the list in the screenshot link to patch tasks.   Only commit tasks should be showing up there.""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-1904","07/26/2017 01:25:48",2,"schedule patch button can result in patch being scheduled multiple times  ""we ended up in a situation with duplicate tasks being created after the first invocation errored in the middle of the operation. ""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-9493","07/26/2017 15:22:52",1,"fields message triggered panic """"","  Jul 26 14:19:49 evergreenapp-1.staging.build.10gen.cc evergreen_ui_server[9575]: fatal error: concurrent map read and map write  Jul 26 14:19:49 evergreenapp-1.staging.build.10gen.cc evergreen_ui_server[9575]: goroutine 20 [running]:  Jul 26 14:19:49 evergreenapp-1.staging.build.10gen.cc evergreen_ui_server[9575]: runtime.throw(0x158fc48, 0x21)  Jul 26 14:19:49 evergreenapp-1.staging.build.10gen.cc evergreen_ui_server[9575]:         /opt/go/src/runtime/panic.go:566 +0x95 fp=0xc4205fdda8 sp=0xc4205fdd88  Jul 26 14:19:49 evergreenapp-1.staging.build.10gen.cc evergreen_ui_server[9575]: runtime.mapaccess2_faststr(0x12bed00, 0xc4206d6060, 0x1555d1c, 0x8, 0x1fe07c0, 0x148f900)  Jul 26 14:19:49 evergreenapp-1.staging.build.10gen.cc evergreen_ui_server[9575]:         /opt/go/src/runtime/hashmap_fast.go:306 +0x52b fp=0xc4205fde08 sp=0xc4205fdda8  Jul 26 14:19:49 evergreenapp-1.staging.build.10gen.cc evergreen_ui_server[9575]: github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/grip/message.(*fieldMessage).Raw(0xc420436000, 0x1f9a260, 0xc420436000)  Jul 26 14:19:49 evergreenapp-1.staging.build.10gen.cc evergreen_ui_server[9575]:         /data/mci/269e09d73d98cfec0ed8b82bd108f49e/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/grip/message/fields.go:97 +0xb9 fp=0xc4205fde90 sp=0xc4205fde08  Jul 26 14:19:49 evergreenapp-1.staging.build.10gen.cc evergreen_ui_server[9575]: github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/grip/send.(*splunkLogger).Send(0xc4201be550, 0x1f9a0e0, 0xc4205db860)  Jul 26 14:19:49 evergreenapp-1.staging.build.10gen.cc evergreen_ui_server[9575]:         /data/mci/269e09d73d98cfec0ed8b82bd108f49e/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/grip/send/splunk.go:59 +0x1ba fp=0xc4205fdf30 sp=0xc4205fde90  Jul 26 14:19:49 evergreenapp-1.staging.build.10gen.cc evergreen_ui_server[9575]: github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/grip/send.(*bufferedSender).backgroundWorker(0xc42031e380, 0xc4201c6f00, 0xc4201c6f60)  Jul 26 14:19:49 evergreenapp-1.staging.build.10gen.cc evergreen_ui_server[9575]:         /data/mci/269e09d73d98cfec0ed8b82bd108f49e/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/grip/send/buffered.go:113 +0x119 fp=0xc4205fdf98 sp=0xc4205fdf30  Jul 26 14:19:49 evergreenapp-1.staging.build.10gen.cc evergreen_ui_server[9575]: runtime.goexit()  Jul 26 14:19:49 evergreenapp-1.staging.build.10gen.cc evergreen_ui_server[9575]:         /opt/go/src/runtime/asm_amd64.s:2086 +0x1 fp=0xc4205fdfa0 sp=0xc4205fdf98  Jul 26 14:19:49 evergreenapp-1.staging.build.10gen.cc evergreen_ui_server[9575]: created by github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/grip/send.(*bufferedSender).backgroundDispatcher  Jul 26 14:19:49 evergreenapp-1.staging.build.10gen.cc evergreen_ui_server[9575]:         /data/mci/269e09d73d98cfec0ed8b82bd108f49e/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/grip/send/buffered.go:65 +0xed  Jul 26 14:19:49 evergreenapp-1.staging.build.10gen.cc evergreen_ui_server[9575]: goroutine 1 [IO wait]:  Jul 26 14:19:49 evergreenapp-1.staging.build.10gen.cc evergreen_ui_server[9575]: net.runtime_pollWait(0x7f842ac5bea8, 0x72, 0x0)  Jul 26 14:19:49 evergreenapp-1.staging.build.10gen.cc evergreen_ui_server[9575]:         /opt/go/src/runtime/netpoll.go:160 +0x59  Jul 26 14:19:49 evergreenapp-1.staging.build.10gen.cc evergreen_ui_server[9575]: net.(*pollDesc).wait(0xc4201f1b10, 0x72, 0xc4204d18b0, 0xc420012180)  Jul 26 14:19:49 evergreenapp-1.staging.build.10gen.cc evergreen_ui_server[9575]:         /opt/go/src/net/fd_poll_runtime.go:73 +0x38  Jul 26 14:19:49 evergreenapp-1.staging.build.10gen.cc evergreen_ui_server[9575]: net.(*pollDesc).waitRead(0xc4201f1b10, 0x1f93920, 0xc420012180)  Jul 26 14:19:49 evergreenapp-1.staging.build.10gen.cc evergreen_ui_server[9575]:         /opt/go/src/net/fd_poll_runtime.go:78 +0x34  Jul 26 14:19:49 evergreenapp-1.staging.build.10gen.cc evergreen_ui_server[9575]: net.(*netFD).accept(0xc4201f1ab0, 0x0, 0x1f90e60, 0xc4207ee7e0)  Jul 26 14:19:49 evergreenapp-1.staging.build.10gen.cc evergreen_ui_server[9575]:         /opt/go/src/net/fd_unix.go:419 +0x238  Jul 26 14:19:49 evergreenapp-1.staging.build.10gen.cc evergreen_ui_server[9575]: net.(*TCPListener).accept(0xc4201aca08, 0x433dce, 0xc4204d1960, 0x4d108d)  Jul 26 14:19:49 evergreenapp-1.staging.build.10gen.cc evergreen_ui_server[9575]:         /opt/go/src/net/tcpsock_posix.go:132 +0x2e  Jul 26 14:19:49 evergreenapp-1.staging.build.10gen.cc evergreen_ui_server[9575]: net.(*TCPListener).Accept(0xc4201aca08, 0x1646388, 0xc42038c200, 0x1f988a0, 0xc420193d70)  Jul 26 14:19:49 evergreenapp-1.staging.build.10gen.cc evergreen_ui_server[9575]:         /opt/go/src/net/tcpsock.go:222 +0x49  Jul 26 14:19:49 evergreenapp-1.staging.build.10gen.cc evergreen_ui_server[9575]: net/http.(*Server).Serve(0xc4204ac280, 0x1f97ae0, 0xc4201aca08, 0x0, 0x0)  Jul 26 14:19:49 evergreenapp-1.staging.build.10gen.cc evergreen_ui_server[9575]:         /opt/go/src/net/http/server.go:2273 +0x1ce  Jul 26 14:19:49 evergreenapp-1.staging.build.10gen.cc evergreen_ui_server[9575]: github.com/evergreen-ci/evergreen/vendor/gopkg.in/tylerb/graceful%2ev1.(*Server).Serve(0xc4204b9b60, 0x1f97ae0, 0xc4201aca08, 0x5, 0x1f97ae0)  Jul 26 14:19:49 evergreenapp-1.staging.build.10gen.cc evergreen_ui_server[9575]:         /data/mci/269e09d73d98cfec0ed8b82bd108f49e/gopath/src/github.com/evergreen-ci/evergreen/vendor/gopkg.in/tylerb/graceful.v1/graceful.go:197 +0x23c  Jul 26 14:19:49 evergreenapp-1.staging.build.10gen.cc evergreen_ui_server[9575]: github.com/evergreen-ci/evergreen/vendor/gopkg.in/tylerb/graceful%2ev1.(*Server).ListenAndServe(0xc4204b9b60, 0xc4204ac280, 0xc420499ba0)  Jul 26 14:19:49 evergreenapp-1.staging.build.10gen.cc evergreen_ui_server[9575]:         /data/mci/269e09d73d98cfec0ed8b82bd108f49e/gopath/src/github.com/evergreen-ci/evergreen/vendor/gopkg.in/tylerb/graceful.v1/graceful.go:110 +0xae  Jul 26 14:19:49 evergreenapp-1.staging.build.10gen.cc evergreen_ui_server[9575]: github.com/evergreen-ci/evergreen/vendor/gopkg.in/tylerb/graceful%2ev1.Run(0xc4201b7090, 0x5, 0x2540be400, 0x1f8c020, 0xc420193c20)  Jul 26 14:19:49 evergreenapp-1.staging.build.10gen.cc evergreen_ui_server[9575]:         /data/mci/269e09d73d98cfec0ed8b82bd108f49e/gopath/src/github.com/evergreen-ci/evergreen/vendor/gopkg.in/tylerb/graceful.v1/graceful.go:78 +0x10e  Jul 26 14:19:49 evergreenapp-1.staging.build.10gen.cc evergreen_ui_server[9575]: main.main()  Jul 26 14:19:49 evergreenapp-1.staging.build.10gen.cc evergreen_ui_server[9575]:         /data/mci/269e09d73d98cfec0ed8b82bd108f49e/gopath/src/github.com/evergreen-ci/evergreen/service/ui_main/ui.go:100 +0xa4b  ",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-1906","07/26/2017 17:10:26",1,"Reachability check ssh command doesn't use the same options as other ssh commands ""We started to add {{UserKnownHostsFile=/dev/null}} to ssh options in [this commit|https://github.com/evergreen-ci/evergreen/commit/8ee7f60f243acbb4fdc8f2131e10458c3def80a7#diff-6a305ad019927e85a72e8ffc3842a4b0R536] but it doesn't look like it applies to the reachability checks. And it causes issues sometimes.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-1910","07/28/2017 17:22:34",2,"Write documentation for API v2 routes related to Version and Build Cost Reporting ""Version related routes:   * EVG-1741: GET /versions/<version_id>  * EVG-1746: POST /versions/<version_id>/abort  * EVG-1747: POST /versions/version-id/restart   * EVG-1735: GET /versions/version-id/builds    Cost related routes:   * EVG-1778: GET cost/version/<version-id>  * EVG-1894: GET cost/projects/<project-id>/tasks with time info  * EVG-1878: GET cost/distro/<distro-id> with time info  ""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-1911","07/28/2017 19:58:15",1,"push sysinfo data to logs on a regular loop in all services.  ""runner and api server. ""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-1912","07/28/2017 22:26:40",1,"Provision failed status has unreadable white font ""Due to the label css class overriding the grey color we want""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-1913","07/29/2017 00:36:49",2,"set JOB_OBJECT_LIMIT_KILL_ON_JOB_CLOSE for process termination  ""on windows ""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-1920","07/31/2017 22:42:49",2,"Provide global system task status count over time via status endpoint ""This query would potentially be extremely useful to monitor. We could alert on it (maybe) or just manually check it to gauge the effects of things like network changes, infrastructure changes, or deploys.    At least # of """"system unresponsive"""" tasks in the past 30 minutes would be useful.     To add to that it would be nice to override the time period, and to list all statuses, not just system unresponsive. ""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-1921","07/31/2017 22:47:45",2,"Splunk Logging Client Creates Backpressure in Agent ""Grapes. ""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-1923","08/01/2017 11:21:10",2,"lint failures ""h2. [lint failed on race-detector|https://evergreen.mongodb.com/task/mci_race_detector_lint_1201c83d28d1e43c4baf2fe854644398d879f2f6_17_07_31_22_14_33/0]    Host: [ec2-54-160-246-44.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-2vq87b3g]  Project: [mci|https://evergreen.mongodb.com/waterfall/mci]    *lint-agent* - [Logs|] | [History|https://evergreen.mongodb.com/task_history/mci/lint#lint-agent=fail]    *lint-cli* - [Logs|] | [History|https://evergreen.mongodb.com/task_history/mci/lint#lint-cli=fail]    *lint-taskrunner* - [Logs|] | [History|https://evergreen.mongodb.com/task_history/mci/lint#lint-taskrunner=fail]    *lint-plugin* - [Logs|] | [History|https://evergreen.mongodb.com/task_history/mci/lint#lint-plugin=fail]    *lint-hostinit* - [Logs|] | [History|https://evergreen.mongodb.com/task_history/mci/lint#lint-hostinit=fail]    *lint-plugin-builtin-keyval* - [Logs|] | [History|https://evergreen.mongodb.com/task_history/mci/lint#lint-plugin-builtin-keyval=fail]    *lint-plugin-builtin-git* - [Logs|] | [History|https://evergreen.mongodb.com/task_history/mci/lint#lint-plugin-builtin-git=fail]    *lint-plugin-builtin-gotest* - [Logs|] | [History|https://evergreen.mongodb.com/task_history/mci/lint#lint-plugin-builtin-gotest=fail]    *lint-plugin-builtin-attach* - [Logs|] | [History|https://evergreen.mongodb.com/task_history/mci/lint#lint-plugin-builtin-attach=fail]    *lint-plugin-builtin-manifest* - [Logs|] | [History|https://evergreen.mongodb.com/task_history/mci/lint#lint-plugin-builtin-manifest=fail]    *lint-plugin-builtin-archive* - [Logs|] | [History|https://evergreen.mongodb.com/task_history/mci/lint#lint-plugin-builtin-archive=fail]    *lint-plugin-builtin-shell* - [Logs|] | [History|https://evergreen.mongodb.com/task_history/mci/lint#lint-plugin-builtin-shell=fail]    *lint-plugin-builtin-s3copy* - [Logs|] | [History|https://evergreen.mongodb.com/task_history/mci/lint#lint-plugin-builtin-s3copy=fail]    *lint-plugin-builtin-expansions* - [Logs|] | [History|https://evergreen.mongodb.com/task_history/mci/lint#lint-plugin-builtin-expansions=fail]    *lint-plugin-builtin-s3* - [Logs|] | [History|https://evergreen.mongodb.com/task_history/mci/lint#lint-plugin-builtin-s3=fail]    *lint-notify* - [Logs|] | [History|https://evergreen.mongodb.com/task_history/mci/lint#lint-notify=fail]    *lint-thirdparty* - [Logs|] | [History|https://evergreen.mongodb.com/task_history/mci/lint#lint-thirdparty=fail]    *lint-scheduler* - [Logs|] | [History|https://evergreen.mongodb.com/task_history/mci/lint#lint-scheduler=fail]    *lint-model* - [Logs|] | [History|https://evergreen.mongodb.com/task_history/mci/lint#lint-model=fail]    *lint-validator* - [Logs|] | [History|https://evergreen.mongodb.com/task_history/mci/lint#lint-validator=fail]    *lint-service* - [Logs|] | [History|https://evergreen.mongodb.com/task_history/mci/lint#lint-service=fail]    *lint-monitor* - [Logs|] | [History|https://evergreen.mongodb.com/task_history/mci/lint#lint-monitor=fail]    *lint-repotracker* - [Logs|] | [History|https://evergreen.mongodb.com/task_history/mci/lint#lint-repotracker=fail]    *lint-cloud-providers* - [Logs|] | [History|https://evergreen.mongodb.com/task_history/mci/lint#lint-cloud-providers=fail]    *lint-cloud-providers-vsphere* - [Logs|] | [History|https://evergreen.mongodb.com/task_history/mci/lint#lint-cloud-providers-vsphere=fail]    *lint-rest-client* - [Logs|] | [History|https://evergreen.mongodb.com/task_history/mci/lint#lint-rest-client=fail]    *lint-rest-data* - [Logs|] | [History|https://evergreen.mongodb.com/task_history/mci/lint#lint-rest-data=fail]    *lint-rest-route* - [Logs|] | [History|https://evergreen.mongodb.com/task_history/mci/lint#lint-rest-route=fail]          ~BF Ticket Generated by [~sam.kleinman]~  ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-1924","08/01/2017 13:17:27",2,"Task links on host page point only to latest execution ""Instead of linking to the execution that ran on the given host.     For example, on [the host page for host *_sir-92v86p9h_*|https://evergreen.mongodb.com/host/sir-92v86p9h], there's a link to [this task|https://evergreen.mongodb.com/task/mongodb_mongo_v3.4_enterprise_debian81_64_jsCore_auth_bca21d14a4f25d7884d1f56d2e6ff02e334c9578_17_07_27_19_10_29], which is the latest execution, and ran on *_sir-91xg5wik_*, not *_sir-92v86p9h_*. It should link to [this task|https://evergreen.mongodb.com/task/mongodb_mongo_v3.4_enterprise_debian81_64_jsCore_auth_bca21d14a4f25d7884d1f56d2e6ff02e334c9578_17_07_27_19_10_29/2] instead.""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-1927","08/01/2017 20:58:57",1,"Vendor Docker golang library ""Docker and Go have changed a lot since 2015. We've been using this library:  github.com/fsouza/go-dockerclient    We should use this fancy new official one instead:  github.com/docker/docker  f7d09a0a9bd626782e63e7295ca87690f26a1fb4    We also need this to configure Docker networking options:  github.com/docker/go-connections  3ede32e2033de7505e6500d6c868c2b9ed9f169d    The annoying thing is that when I try to import both packages as is, I get the vendoring issue that is document at [https://github.com/moby/moby/issues/28269]. A workaround I found is to remove the nested vendor dir at """"evergreen/vendor/github.com/docker/docker/vendor/github.com/docker/go-connections"""" so that imports would properly reference the dir at """"evergreen/vendor/github.com/docker/go-connections"""". Maybe there's a cleaner solution?""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-1929","08/02/2017 14:57:44",1,"remove or revive Digital Ocean Host Provider ""We're using the old API for this provider, so any requests to them return """"API v1 has reached end-of-life. Please use API v2.""""    https://developers.digitalocean.com/documentation/changelog/api-v1/api-v1-end-of-life/""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-1937","08/02/2017 19:24:33",1,"evergreen --help prints out help message twice ""Looks like there's extra logging going on.      Affects this version:  ""","  ksuarz@celadon:~/code/mongo ‚ô• evergreen --help  Usage:    evergreen [OPTIONS] <command>    Application Options:    -c, --config= path to config file (defaults to ~/.evergreen.yml)    Help Options:    -h, --help    Show this help message    Available commands:    agent           runs an evergreen agent    cancel-patch    cancel an existing patch    evaluate        display a project file's evaluated and expanded form    export          export statistics as csv or json for given options    fetch           fetch data associated with a task    finalize-patch  finalize an existing patch    get-update      fetch the latest version of this binary    last-green      return a project's most recent successful version for given variants    list            list available projects, tasks, or variants    list-patches    show existing patches    patch           submit a patch    patch-file      submit a patch using a diff file    rm-module       remove a module from an existing patch    set-module      update or add module to an existing patch    test-history    retrieve test history for a given project    validate        validate a config file    version         display version information    [evergreen] 2017/08/02 14:21:14 [p=emergency]: Usage:    evergreen [OPTIONS] <command>    Application Options:    -c, --config= path to config file (defaults to ~/.evergreen.yml)    Help Options:    -h, --help    Show this help message    Available commands:    agent           runs an evergreen agent    cancel-patch    cancel an existing patch    evaluate        display a project file's evaluated and expanded form    export          export statistics as csv or json for given options    fetch           fetch data associated with a task    finalize-patch  finalize an existing patch    get-update      fetch the latest version of this binary    last-green      return a project's most recent successful version for given variants    list            list available projects, tasks, or variants    list-patches    show existing patches    patch           submit a patch    patch-file      submit a patch using a diff file    rm-module       remove a module from an existing patch    set-module      update or add module to an existing patch    test-history    retrieve test history for a given project    validate        validate a config file    version         display version information    ksuarz@celadon:~/code/mongo ‚ô• evergreen version  2017-06-29  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-1938","08/02/2017 20:15:55",1,"APITask's TimeTaken and ExpectedDuration fields are in nanoseconds, not milliseconds ""*Problem background:* {{APITask}} defined in rest/model/task.go has fields named {{TimeTaken}} and {{ExpectedDuration}} that are of type {{time.Duration}}. The JSON tags (""""{{time_taken_ms}}"""" & """"{{expected_duration_ms}}"""") as well as the documentation describe them to be in milliseconds, but the code does not convert the values from nanoseconds to milliseconds.     1) In {{Task}} model, the values are set in nanoseconds.            - In {{func MarkEnd()}}, {{TimeTaken}} is set by doing {{t.TimeTaken = finishTime.Sub(t.StartTime)}}, which produces duration in an int64 nanosecond count.            - In {{func ExpectedTaskDuration()}}, {{ExpectedDuration}} is set by: {{expDuration := time.Duration(result.ExpectedDuration) * time.Nanosecond}}. {{result.ExpectedDuration}} is expected to be in nanoseconds, and since {{time.Nanosecond}} = 1, this does not convert the value correctly.     2) In APITask, the values from Task are carried over without conversion.          *Immediate Problem:* There is an inconsistency between the code and the JSON tag & documentation regarding time unit.     *Long-term Problem:* Since we would like {{TimeTaken}} and {{ExpectedDuration}} to be in ms instead of ns, the code should implement conversion. Moreover, in the process of data migration, existing data should also be converted accordingly.       ""","  TimeTaken:        v.TimeTaken,  ExpectedDuration: v.ExpectedDuration  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-1940","08/03/2017 22:28:55",1,"Add a log viewer with rich functionality ""Currently evergreen allow to view logs as HTML or raw text.  Server developers can benefit from the additional functionality when investigating build failures.  Such functionality may be divided into the group that  needs server support and the group that does not  the latter include features:  - regexp filters on the log lines  - regexp search  - formatting BSON objects  - bookmarking   - hide columns  of the log  (vertical filtering)  - order by contents of columns of the log    the former is   - jump to the code line that printed the log message in github repo  - connect commands that spawn multiple processes (i.e mongos -> shard -> config server -> shard) etc    There is a POC of such viewer that implements   - regexp filters on the log lines and   - jumping to the code line that printed the log message    The POC is a client side react project so it can be easily added to evergreen log view buttons as a third option.""","",0,0,0,1,0,0,0,0,0,0,0,0,0,1,0
"EVG-1941","08/04/2017 00:42:24",1,"evergreen metrics endpoints panic service ""saw this in staging after playing with the metrics endpoint: {{http: panic serving 52.21.89.200:61105: interface conversion: interface {} is route.taskMetricsArgs, not *route.taskMetricsArgs}}    ""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-1943","08/05/2017 19:50:38",1,"TestInvalidTimesAsKeyShouldError ""h2. [test-rest-route failed on ubuntu1604|https://evergreen.mongodb.com/task/mci_ubuntu1604_test_rest_route_f7b33dbc7857ab39db8d8143d235e25fc96a551c_17_08_05_18_03_38/0]    Host: [ec2-54-146-26-86.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-ie7r75ig]  Project: [mci|https://evergreen.mongodb.com/waterfall/mci]    *TestInvalidTimesAsKeyShouldError* - [Logs|] | [History|https://evergreen.mongodb.com/task_history/mci/test-rest-route#TestInvalidTimesAsKeyShouldError=fail]          ~BF Ticket Generated by [~sam.kleinman]~  ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-1944","08/07/2017 14:49:16",1,"glide.lock file has errors: upgrade testify everywhere ""Vendoring dependencies works fine using glide as of 23f6a9d8e774f597faabae8b58b8c6020b3f79ef, but errors for later versions of glide (confirmed for version 0.13.0-dev installed with brew).    {panel:title=Error Message}  [ERROR] Failed to set version on github.com/davecgh/go-spew to 260b7a32dd8770eb5ba41da17d125914ae064ef8: Unable to update checked out version  [ERROR] Failed to set version on github.com/stretchr/objx to 260b7a32dd8770eb5ba41da17d125914ae064ef8: Unable to update checked out version  [ERROR] Failed to set version on github.com/stretchr/testify to 260b7a32dd8770eb5ba41da17d125914ae064ef8: Unable to update checked out version  [ERROR] Failed to set version on github.com/stretchr/objx to 260b7a32dd8770eb5ba41da17d125914ae064ef8: Unable to update checked out version  {panel}    Specifically, the glide.lock file uses the same commit hash for the 4 codebases above, and that commit hash does not actually exist in any of the codebases. We should find and replace those hashes with real commit hashes, and check that the lock file is compatible with newer versions of glide that catch this error.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-1947","08/07/2017 21:11:54",1,"Logkeeper shouldn't make everything italic in CSS ""This makes the output harder to read.""","",0,1,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-1948","08/08/2017 22:10:54",2,"race-proto failure ""h2. [race-proto failed on race-detector|https://evergreen.mongodb.com/task/mci_race_detector_race_proto_21447c8c37c9f82b891a0f3c10a55a97de317e95_17_08_07_21_43_48/0]    Host: [ec2-54-80-90-168.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-ghw87a4j]  Project: [mci|https://evergreen.mongodb.com/waterfall/mci]          ~BF Ticket Generated by [~brian.samek]~  ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-1951","08/09/2017 15:28:43",1,"prioritize tasks that have spent more time in the queue.  ""to avoid the starvation case where tasks hang out in the middle of the queue.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-1952","08/09/2017 16:52:56",1,"force http service to timeout large requests ""to avoid leaving request workers hanging when requests timeout. ""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-1954","08/09/2017 20:53:52",2,"Git get_project command creates wrong directory before cloning module ""The git get_project command, before cloning a module, runs a {mkdir -p}} ({{os.MkdirAll(...)}}) command on the path where it will clone the module repository.    The path used for {{mkdir}} does not match the path used to clone the module repository.    The path used for {{mkdir}} is: {{conf.WorkDir/module.Prefix/module.Name/...}}.  The path used to clone the module repository is: {{conf.WorkDir/Directory/module.Prefix/module.Name/}}, {{Directory}} being the directory where the project repository was cloned.    This does not impact the cloning of the module repository, but it leaves an unexpected empty path (e.g. {{mongo/db/modules/enterprise/}}) in the project directory that causes a error when trying to copy the {{mongo}} binary into the project directory.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-1959","08/10/2017 19:58:45",1,"A GET requests to /rest/v2/tasks/{task-id}/tests endpoint is returning 404 ""Even though there are tests for a given task, this REST endpoint returns 404. For example:      This 404 error is returned in patch and mainline builds.""","  {""""status"""":404,""""error"""":""""tests for task with taskId 'mongodb_mongo_master_enterprise_rhel_62_64_bit_dbg_off_sharding_MMAPv1_patch_9f2e54384d90ab0c533c6d311337d6bcc8fb5679_598ac2b3e3c331791100003b_17_08_09_08_08_28' not found""""}  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-1962","08/11/2017 02:11:47",1,"increase batchtime massively for osx/zap builds ""also disable stepback for these variants. ""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-1965","08/11/2017 21:06:07",2,"Modify Each Existing Runner Process to Check Flags Before Each Run ""Include each runner process listed in runner/registry.go as well as stopping task dispatching. ""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-1975","08/11/2017 21:25:41",1,"Add button to admin page to restart tasks that failed/system failed during the degraded period ""Expand on the functionality for bulk restarting of tasks that exists for versions and builds today.""","",1,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-1978","08/14/2017 03:13:34",1,"services should log to standard out if no log file is configured ""(e.g. let the sytemd journal take everything, not have to log rotate on boxes) ""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-1979","08/14/2017 03:20:31",2,"create ""service"" subcommand to start UI or API srever ""- could create symlinks or shell wrappers in the tarball, so we could begin the merged binary transition sooner.  - see if its easy to get rid of EVGHOME  ""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-1984","08/14/2017 16:12:03",1,"Build Baron Jira plugin not working ""In the build baron plugin on a given evergreen task page, the plugin always returns """"No results found matching task or tests"""" rather than a list of related tickets.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-1986","08/14/2017 18:39:56",2,"TestSubtreeCleanup ""h2. [test-subprocess failed on ubuntu1604|https://evergreen.mongodb.com/task/mci_ubuntu1604_test_subprocess_55bd39c7c3cbca05713203c10b07fd269ec80ab6_17_08_14_16_33_22/0]    Host: [ec2-54-227-224-67.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-a91i7sqh]  Project: [mci|https://evergreen.mongodb.com/waterfall/mci]    *TestSubtreeCleanup* - [Logs|] | [History|https://evergreen.mongodb.com/task_history/mci/test-subprocess#TestSubtreeCleanup=fail]          ~BF Ticket Generated by [~sam.kleinman]~  ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-1987","08/14/2017 22:42:29",1,"Agent is hitting max open files on static boxes ""Even though max open files limit is high, I see evergreen agent hitting it      lsof output looks like this      agent logs""","$ sudo cat /proc/16647/limits  Limit                     Soft Limit           Hard Limit           Units  Max cpu time              unlimited            unlimited            seconds  Max file size             unlimited            unlimited            bytes  Max data size             unlimited            unlimited            bytes  Max stack size            8388608              unlimited            bytes  Max core file size        0                    unlimited            bytes  Max resident set          unlimited            unlimited            bytes  Max processes             64000                64000                processes  Max open files            64000                64000                files  Max locked memory         1048576              1048576              bytes  Max address space         unlimited            unlimited            bytes  Max file locks            unlimited            unlimited            locks  Max pending signals       261347               261347               signals  Max msgqueue size         819200               819200               bytes  Max nice priority         0                    0  Max realtime priority     0                    0  Max realtime timeout      unlimited            unlimited            us  $ ps -ef | grep 16647  mci-exec  3139 16647  0 12:41 ?        00:00:00 [sh] <defunct>  mci-exec  3142 16647  0 12:41 ?        00:00:00 [sh] <defunct>  mci-exec  3144 16647  0 12:41 ?        00:00:00 [sh] <defunct>  mci-exec  9404 16647  0 10:10 ?        00:00:00 [sh] <defunct>  mci-exec  9407 16647  0 10:10 ?        00:00:00 [sh] <defunct>  mci-exec  9410 16647  0 10:10 ?        00:00:00 [sh] <defunct>  mci-exec 10857 16647  0 10:46 ?        00:00:00 [sh] <defunct>  mci-exec 10859 16647  0 10:46 ?        00:00:00 [sh] <defunct>  mci-exec 10861 16647  0 10:46 ?        00:00:00 [sh] <defunct>  mci-exec 11010 16647  0 11:28 ?        00:00:00 [sh] <defunct>  mci-exec 11012 16647  0 11:28 ?        00:00:00 [sh] <defunct>  mci-exec 11015 16647  0 11:28 ?        00:00:00 [sh] <defunct>  mci-exec 11698 16647  0 18:41 ?        00:00:00 [sh] <defunct>  mci-exec 11704 16647  0 18:41 ?        00:00:04 [sh] <defunct>  mci-exec 16647     1 56 Aug13 ?        14:02:00 /data/mci/evergreen agent --api_server=https://evergreen.mongodb.com --host_id=ubuntu1604-ppc-3.pic.build.10gen.cc --host_secret=xxxxxxxxxxxxxxxxx --log_prefix=/data/mci/agent  mci-exec 18854 16647  0 17:29 ?        00:00:00 [sh] <defunct>  mci-exec 18860 16647  0 17:29 ?        00:00:00 [sh] <defunct>  mci-exec 19959 16647  0 13:39 ?        00:00:00 [sh] <defunct>  mci-exec 19964 16647  0 13:39 ?        00:00:08 [sh] <defunct>  mci-exec 19968 16647  0 13:39 ?        00:00:00 [sh] <defunct>  mci-exec 20095 16647  0 07:37 ?        00:00:00 [sh] <defunct>  mci-exec 20096 16647  0 07:37 ?        00:00:00 [sh] <defunct>  mci-exec 20098 16647  0 07:37 ?        00:00:00 [sh] <defunct>  mci-exec 20408 16647  0 08:24 ?        00:00:00 [sh] <defunct>  mci-exec 20410 16647  0 08:24 ?        00:00:00 [sh] <defunct>  mci-exec 20412 16647  0 08:24 ?        00:00:00 [sh] <defunct>  mci-exec 23931 16647  0 17:19 ?        00:00:00 [sh] <defunct>  mci-exec 23939 16647  0 17:19 ?        00:00:00 [sh] <defunct>  mci-exec 23948 16647  0 12:11 ?        00:00:00 [sh] <defunct>  mci-exec 23952 16647  0 12:11 ?        00:00:00 [sh] <defunct>  mci-exec 23956 16647  0 12:11 ?        00:00:00 [sh] <defunct>  mci-exec 25007 16647  0 12:57 ?        00:00:00 [sh] <defunct>  mci-exec 25011 16647  0 12:57 ?        00:00:00 [sh] <defunct>  mci-exec 25013 16647  0 12:57 ?        00:00:00 [sh] <defunct>  mci-exec 25687 16647  0 16:57 ?        00:00:00 [sh] <defunct>  mci-exec 25692 16647  0 16:57 ?        00:00:00 [sh] <defunct>  mci-exec 27358 16647  0 08:52 ?        00:00:00 [sh] <defunct>  mci-exec 27360 16647  0 08:52 ?        00:00:01 [sh] <defunct>  mci-exec 27362 16647  0 08:52 ?        00:00:00 [sh] <defunct>  mci-exec 28300 16647  0 16:58 ?        00:00:00 [sh] <defunct>  mci-exec 28306 16647  0 16:58 ?        00:00:00 [sh] <defunct>  mci-exec 28692 16647  0 08:28 ?        00:00:00 [sh] <defunct>  mci-exec 28694 16647  0 08:28 ?        00:00:00 [sh] <defunct>  mci-exec 28697 16647  0 08:28 ?        00:00:00 [sh] <defunct>  mci-exec 29280 16647  0 09:36 ?        00:00:00 [sh] <defunct>  mci-exec 29282 16647  0 09:36 ?        00:00:00 [sh] <defunct>  mci-exec 29285 16647  0 09:36 ?        00:00:00 [sh] <defunct>  mci-exec 31626 16647  0 08:29 ?        00:00:00 [sh] <defunct>  mci-exec 31628 16647  0 08:29 ?        00:00:00 [sh] <defunct>  mci-exec 31632 16647  0 08:29 ?        00:00:00 [sh] <defunct>  mci-exec 32726 16647  0 08:30 ?        00:00:00 [sh] <defunct>  mci-exec 32728 16647  0 08:30 ?        00:00:00 [sh] <defunct>  mci-exec 32731 16647  0 08:30 ?        00:00:00 [sh] <defunct>  mci-exec 33826 16647  0 17:45 ?        00:00:00 [sh] <defunct>  mci-exec 33832 16647  0 17:45 ?        00:00:00 [sh] <defunct>  mci-exec 33836 16647  0 18:09 ?        00:00:00 [sh] <defunct>  mci-exec 33846 16647  0 18:09 ?        00:00:00 [sh] <defunct>  mci-exec 36753 16647  0 11:49 ?        00:00:00 [sh] <defunct>  mci-exec 36757 16647  0 11:49 ?        00:00:00 [sh] <defunct>  mci-exec 36759 16647  0 11:49 ?        00:00:00 [sh] <defunct>  mci-exec 36804 16647  0 07:46 ?        00:00:00 [sh] <defunct>  mci-exec 36806 16647  0 07:46 ?        00:00:00 [sh] <defunct>  mci-exec 36808 16647  0 07:46 ?        00:00:00 [sh] <defunct>  mci-exec 37101 16647  0 10:24 ?        00:00:00 [sh] <defunct>  mci-exec 37104 16647  0 10:24 ?        00:00:00 [sh] <defunct>  mci-exec 37106 16647  0 10:24 ?        00:00:00 [sh] <defunct>  mci-exec 37231 16647  0 07:47 ?        00:00:00 [sh] <defunct>  mci-exec 37233 16647  0 07:47 ?        00:00:00 [sh] <defunct>  mci-exec 37236 16647  0 07:47 ?        00:00:00 [sh] <defunct>  mci-exec 40357 16647  0 10:58 ?        00:00:00 [sh] <defunct>  mci-exec 40360 16647  0 10:58 ?        00:00:01 [sh] <defunct>  mci-exec 40362 16647  0 10:58 ?        00:00:00 [sh] <defunct>  $ sudo lsof | grep 16647 | wc  3904183 42881522 398226910evergreen 16647 16661   mci-exec 8121u     sock                0,8       0t0  139932354 protocol: TCP  evergreen 16647 16661   mci-exec 8122u     sock                0,8       0t0  139936364 protocol: TCP  evergreen 16647 16661   mci-exec 8123u     sock                0,8       0t0  139951587 protocol: TCP  evergreen 16647 16661   mci-exec 8124u     sock                0,8       0t0  139935422 protocol: TCP  evergreen 16647 16661   mci-exec 8125u     sock                0,8       0t0  139958379 protocol: TCP  evergreen 16647 16661   mci-exec 8126u     sock                0,8       0t0  139944428 protocol: TCP  evergreen 16647 16661   mci-exec 8127u     sock                0,8       0t0  139951657 protocol: TCP  evergreen 16647 16661   mci-exec 8128u     sock                0,8       0t0  139936395 protocol: TCP  evergreen 16647 16661   mci-exec 8129u     sock                0,8       0t0  139948536 protocol: TCP  evergreen 16647 16661   mci-exec 8130u     sock                0,8       0t0  139918209 protocol: TCP  evergreen 16647 16661   mci-exec 8131u     sock                0,8       0t0  139951665 protocol: TCP  evergreen 16647 16661   mci-exec 8132u     sock                0,8       0t0  139942495 protocol: TCP  evergreen 16647 16661   mci-exec 8133u     sock                0,8       0t0  139946359 protocol: TCP  evergreen 16647 16661   mci-exec 8134u     sock                0,8       0t0  139959383 protocol: TCP  evergreen 16647 16661   mci-exec 8135u     sock                0,8       0t0  139946360 protocol: TCP  evergreen 16647 16661   mci-exec 8136u     sock                0,8       0t0  139951626 protocol: TCP  evergreen 16647 16661   mci-exec 8137u     sock                0,8       0t0  139951694 protocol: TCP[evg-agent] 2017/08/14 21:40:36 [p=notice]: json: unsupported value: NaN  [evg-agent] 2017/08/14 21:40:36 [p=debug]:  [evg-agent] 2017/08/14 21:40:36 [p=notice]: json: unsupported value: NaN  [evg-agent] 2017/08/14 21:40:36 [p=notice]: Post https://evergreen.mongodb.com/api/2/task/cloud_automation_profiling_ubuntu16_power_LinuxTestGroup18_1edf3a6027fad776944a7dc45cb9f99645dcbafb_17_08_14_20_30_24/process_info: dial tcp: lookup evergreen.mongodb.com on 8.8.8.8:53: dial udp 8.8.8.8:53: socket: too many open files  [evg-agent] 2017/08/14 21:40:36 [p=notice]: Post https://evergreen.mongodb.com/api/2/task/cloud_automation_profiling_ubuntu16_power_LinuxTestGroup18_1edf3a6027fad776944a7dc45cb9f99645dcbafb_17_08_14_20_30_24/process_info: dial tcp: lookup evergreen.mongodb.com on 8.8.8.8:53: dial udp 8.8.8.8:53: socket: too many open files  [evg-agent] 2017/08/14 21:40:36 [p=notice]: Post https://evergreen.mongodb.com/api/2/task/cloud_automation_profiling_ubuntu16_power_LinuxTestGroup18_1edf3a6027fad776944a7dc45cb9f99645dcbafb_17_08_14_20_30_24/process_info: dial tcp: lookup evergreen.mongodb.com on 8.8.8.8:53: dial udp 8.8.8.8:53: socket: too many open files  [evg-agent] 2017/08/14 21:40:37 [p=notice]: Post https://evergreen.mongodb.com/api/2/task/cloud_automation_profiling_ubuntu16_power_LinuxTestGroup18_1edf3a6027fad776944a7dc45cb9f99645dcbafb_17_08_14_20_30_24/process_info: dial tcp: lookup evergreen.mongodb.com on 8.8.8.8:53: dial udp 8.8.8.8:53: socket: too many open files  [evg-agent] 2017/08/14 21:40:38 [p=notice]: json: unsupported value: NaN",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-1988","08/14/2017 23:49:05",2,"Junit errors must include system-out field ""The JUnit parser should include {{<system-out>}} from the test as well as the error.     For example, when you click the """"HTML"""" or """"Raw"""" for the failing test here: https://evergreen.mongodb.com/task/mms_int_INT_JAVA_MMS_027f21ea449448e16c29d4f8ffd8d5559badbc0b_17_08_14_14_21_29     You see only the {{<error>}} in https://evergreen.mongodb.com/test_log/mms_int_INT_JAVA_MMS_027f21ea449448e16c29d4f8ffd8d5559badbc0b_17_08_14_14_21_29/0/com.xgen.svc.mms.api.res.ApiUsersResourceIntTests.testDeleteUser not the {{<system-out>}}    Appending the {{<system-out>}} to the error output would be greatly useful. ""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-1991","08/16/2017 15:19:24",2,"Can't spawn hosts with a new key from the UI ""Saved keys work, and you can spawn with a new key from the CLI""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-1997","08/18/2017 17:16:34",2,"Allow authenticated users to reconfigure other people's patches ""Every so often we have patches for WiredTiger drops or custom builds that need to have a variant or two added for testing or delivery purposes. When this happens, if the original author of the patch is not around we need an admin to do it.    I think it should be ok for users to reconfigure other people's patches.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-1999","08/21/2017 21:07:35",1,"Avoid removing task directory before the post-tasks run. ""I noticed that when a task gets aborted, the agent removes the task directory before the post-tasks run so if something in post-tasks tries to use a file or folder in the task directory, it will logically fail and the task will be marked as failed instead of aborted.    Example - https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_rhel_62_64_bit_aggregation_WT_ese_27c4847e65a0162897ad72a3a39636ac7bd3cf67_17_08_14_21_52_45    It's not clear that this task was aborted though because of EVG-55, I just happen to know that the entire build was indeed aborted.""","",0,0,0,0,0,0,1,0,0,1,0,0,0,0,0
"EVG-2002","08/22/2017 17:23:26",2,"improve cancelation of runners  ""use more contexts""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2003","08/22/2017 20:49:43",2,"log recent task statuses ""like /api/status/recent_tasks but to the log.     in the runner.     some reasonable task status ""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2005","08/24/2017 15:22:40",1,"add ability to abort build while unscheduling ""We already have this feature for versions; it would be nice to have it for builds as well.""","",1,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-2009","08/25/2017 16:52:42",2,"test-proto failure "" h2. [test-proto failed on ubuntu1604|https://evergreen.mongodb.com/task/mci_ubuntu1604_test_proto_115cd9f9e9a6328579240810dc85839e2fbfb28e_17_08_25_00_27_39/0]  Host: [ec2-54-161-255-88.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-4av87v5h] Project: [mci|https://evergreen.mongodb.com/waterfall/mci]     ~BF Ticket Generated by [~brian.samek]~ ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-2014","08/25/2017 22:05:32",2,"Task history endpoint needs to do limits last in its query ""  {code:json}  [              {                  """"$match"""" : {                      """"branch"""" : """"mongodb-mongo-master"""",                      """"r"""" : """"gitter_request"""",                      """"$or"""" : [                          {                              """"details.timed_out"""" : {                                  """"$ne"""" : true                              },                              """"details.type"""" : {                                  """"$ne"""" : """"system""""                              },                              """"status"""" : {                                  """"$in"""" : [                                      """"failed""""                                  ]                              }                          }                      ],                      """"test_results.test_file"""" : {                          """"$in"""" : [                              """"jstests/sharding/config_version_rollback.js""""                          ]                      },                      """"start_time"""" : {                          """"$gte"""" : ISODate(""""2017-08-01T00:00:00Z"""")                      },                  }              },              {                  """"$limit"""" : 10              },              {                  """"$project"""" : {                      """"status"""" : 1,                      """"test_results"""" : 1,                      """"start_time"""" : 1,                      """"details"""" : 1,                      """"display_name"""" : 1,                      """"build_variant"""" : 1,                      """"execution"""" : 1,                      """"order"""" : 1,                      """"old_task_id"""" : 1,                      """"branch"""" : 1,                      """"gitspec"""" : 1,                      """"_id"""" : 1                  }              },              {                  """"$unwind"""" : """"$test_results""""              },              {                  """"$match"""" : {                      """"test_results.status"""" : {                          """"$in"""" : [                              """"fail""""                          ]                      },                      """"test_results.test_file"""" : {                          """"$in"""" : [                              """"jstests/sharding/config_version_rollback.js""""                          ]                      }                  }              },              {                  """"$sort"""" : {                      """"order"""" : -1,                      """"test_results.test_file"""" : -1                  }              },              {                  """"$project"""" : {                      """"lid"""" : """"$test_results.log_id"""",                      """"tdt"""" : """"$details.type"""",                      """"test_status"""" : """"$test_results.status"""",                      """"task_status"""" : """"$status"""",                      """"st"""" : """"$test_results.start"""",                      """"et"""" : """"$test_results.end"""",                      """"to"""" : """"$details.timed_out"""",                      """"tid"""" : """"$_id"""",                      """"r"""" : """"$gitspec"""",                      """"p"""" : """"$branch"""",                      """"tn"""" : """"$display_name"""",                      """"ex"""" : """"$execution.execution"""",                      """"url"""" : """"$test_results.url"""",                      """"tf"""" : """"$test_results.test_file"""",                      """"otid"""" : """"$old_task_id"""",                      """"url_r"""" : """"$test_results.url_raw"""",                      """"bv"""" : """"$build_variant""""                  }              }          ]  {code}  ""","  [              {                  """"$match"""" : {                      """"branch"""" : """"mongodb-mongo-master"""",                      """"r"""" : """"gitter_request"""",                      """"$or"""" : [                          {                              """"details.timed_out"""" : {                                  """"$ne"""" : true                              },                              """"details.type"""" : {                                  """"$ne"""" : """"system""""                              },                              """"status"""" : {                                  """"$in"""" : [                                      """"failed""""                                  ]                              }                          }                      ],                      """"test_results.test_file"""" : {                          """"$in"""" : [                              """"jstests/sharding/config_version_rollback.js""""                          ]                      },                      """"start_time"""" : {                          """"$gte"""" : ISODate(""""2017-08-01T00:00:00Z"""")                      },                  }              },              {                  """"$limit"""" : 10              },              {                  """"$project"""" : {                      """"status"""" : 1,                      """"test_results"""" : 1,                      """"start_time"""" : 1,                      """"details"""" : 1,                      """"display_name"""" : 1,                      """"build_variant"""" : 1,                      """"execution"""" : 1,                      """"order"""" : 1,                      """"old_task_id"""" : 1,                      """"branch"""" : 1,                      """"gitspec"""" : 1,                      """"_id"""" : 1                  }              },              {                  """"$unwind"""" : """"$test_results""""              },              {                  """"$match"""" : {                      """"test_results.status"""" : {                          """"$in"""" : [                              """"fail""""                          ]                      },                      """"test_results.test_file"""" : {                          """"$in"""" : [                              """"jstests/sharding/config_version_rollback.js""""                          ]                      }                  }              },              {                  """"$sort"""" : {                      """"order"""" : -1,                      """"test_results.test_file"""" : -1                  }              },              {                  """"$project"""" : {                      """"lid"""" : """"$test_results.log_id"""",                      """"tdt"""" : """"$details.type"""",                      """"test_status"""" : """"$test_results.status"""",                      """"task_status"""" : """"$status"""",                      """"st"""" : """"$test_results.start"""",                      """"et"""" : """"$test_results.end"""",                      """"to"""" : """"$details.timed_out"""",                      """"tid"""" : """"$_id"""",                      """"r"""" : """"$gitspec"""",                      """"p"""" : """"$branch"""",                      """"tn"""" : """"$display_name"""",                      """"ex"""" : """"$execution.execution"""",                      """"url"""" : """"$test_results.url"""",                      """"tf"""" : """"$test_results.test_file"""",                      """"otid"""" : """"$old_task_id"""",                      """"url_r"""" : """"$test_results.url_raw"""",                      """"bv"""" : """"$build_variant""""                  }              }          ]  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2186","08/28/2017 16:07:13",1,"On Windows a GET request to Evergreen /status endpoint consistently returns after > 40 seconds.  ""As part of the buildscripts/collect_resource_info.py script to collect system resource usage info, we make a GET request to the /status Evergreen endpoint every 5 seconds. We expect this call to return immediately, however, based on our testing on Windows, it shows the request consistently takes over 40 seconds to return. Here is an example:    https://evergreen.mongodb.com/task/mongodb_mongo_master_windows_64_2k8_debug_off_replica_sets_initsync_static_jscore_passthrough_MMAPv1_patch_5dcaad5f137eebc1915c0fc7b5078da4aa86f915_59a0b8b8c9ec440568014edd_17_08_25_23_54_46#/log/S    In the {{System Resource Info - Execution 0}} link I've added a {{duration}} field to each document returned. This measures the time in seconds between sending the GET request and receiving the response.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2015","08/28/2017 17:26:31",2,"/tasks/<task_id>/tests endpoint does not form previous page correctly ""When querying for the previous page, we do a pipeline like this, which does not return the document that we want to start on within the results (in this case we started on TestGetDNSNameAPICall)        This returns the following document (the exact results of the previous query)  { """"line_num"""" : 1, """"exit_code"""" : 0, """"log_id"""" : """"598be3eb9dbe3244ba0000ab"""", """"test_file"""" : """"TestConfigureAPICall"""", """"start"""" : 1502340075, """"end"""" : 1502340075, """"status"""" : """"pass"""" }    However this gets filtered out by this block of code, so we never create the previous page      ""","  [     {      """"$match"""" : {       """"_id"""" : """"mci_rhel62_gccgo_test_cloud_providers_openstack_cea29ff7ceb60a2b4ed7e52223be5a213ec6588c_17_08_09_22_12_28""""      }     },     {      """"$unwind"""" : """"$test_results""""     },     {      """"$project"""" : {       """"line_num"""" : """"$test_results.line_num"""",       """"exit_code"""" : """"$test_results.exit_code"""",       """"url"""" : """"$test_results.url"""",       """"_id"""" : 0,       """"log_id"""" : """"$test_results.log_id"""",       """"test_file"""" : """"$test_results.test_file"""",       """"url_raw"""" : """"$test_results.url_raw"""",       """"start"""" : """"$test_results.start"""",       """"end"""" : """"$test_results.end"""",       """"status"""" : """"$test_results.status""""      }     },     {      """"$match"""" : {       """"test_file"""" : {        """"$lte"""" : """"TestGetDNSNameAPICall""""       }      }     },     {      """"$sort"""" : {       """"test_file"""" : 1      }     },     {      """"$limit"""" : 1     }    ]     if testFilename != """""""" {    found := false    for _, t := range res {     if t.TestFile == testFilename {      found = true      break     }    }    if !found {     grip.Info(testFilename)     return []task.TestResult{}, &rest.APIError{      StatusCode: http.StatusNotFound,      Message:    fmt.Sprintf(""""test with filename %s not found"""", testFilename),     }    }   }  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2018","08/28/2017 21:27:13",1,"lint-proto "" h2. [lint failed on race-detector|https://evergreen.mongodb.com/task/mci_race_detector_lint_c7175f35bd1976630705b06f8cdad85b46ed4735_17_08_28_13_45_50/0]  Host: [ec2-54-145-89-248.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-fvn869bh] Project: [mci|https://evergreen.mongodb.com/waterfall/mci]  *lint-proto* - [Logs|] | [History|https://evergreen.mongodb.com/task_history/mci/lint#lint-proto=fail]     ~BF Ticket Generated by [~brian.samek]~ ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-9612","08/28/2017 22:13:54",2,"describe periodic job for cost reporting collection ""might involve application with mongodb backed amboy queue. ""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-9651","08/28/2017 22:26:58",1,"build system and test helpers for anser  ""e.g. port the makefile""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-2019","08/29/2017 00:05:15",1,"Test Timeouts showing up as System Failures ""Test timeouts seem to still be showing up as purple after the changes [this commit|https://github.com/evergreen-ci/evergreen/commit/83b35bf8ccf358a0774ff32ff52943abb04cd689] (EVG-1872, EVG-1608)    https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_rhel_62_64_bit_replica_sets_WT_ese_cee116558d7771b520c0fd4dd239c0a987dcc2ec_17_08_28_15_41_52    It's happening mostly with the the {{initial_sync_with_write_load.js}} test and seems to have started around August 23rd on RHEL 6 (but I haven't looked at enough data points to confirm this)""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2024","08/30/2017 16:21:07",1,"isprod flag in Evergreen settings file doesn't work ""The UI server is always setting it to true""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-2027","08/31/2017 16:16:59",2,"Version errors (and probably warnings) don't display in UI ""On https://evergreen.mongodb.com/version/sys_perf_9a41a9d7cb22c29986fc3d66bb0a284c0b7c6c50#/0 the errors are supposed to display under the count of errors, but don't for some reason""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-9584","09/06/2017 20:54:59",1,"TestSingleWorkerSuite ""h2. [race-pool failed on race-detector|https://evergreen.mongodb.com/task/amboy_race_detector_race_pool_91247c9ebc9bd4e33d44e920b3e44363777435ef_17_08_11_16_08_36/0]    Host: [ec2-54-197-120-146.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-43bi5jyg]  Project: [amboy|https://evergreen.mongodb.com/waterfall/amboy]    *TestSingleWorkerSuite* - [Logs|] | [History|https://evergreen.mongodb.com/task_history/amboy/race-pool#TestSingleWorkerSuite=fail]          ~BF Ticket Generated by [~sam.kleinman]~  ""","",0,0,0,0,1,0,0,0,0,0,0,0,1,0,0
"EVG-2032","09/08/2017 18:36:51",1,"test-rest-client failure ""h2. [test-rest-client failed on ubuntu1604|https://evergreen.mongodb.com/task/mci_ubuntu1604_test_rest_client_f645d805a3830c2a5ea747bb2a682d7e72e2f3bf_17_09_08_15_45_52/0]    Host: [ec2-54-211-227-89.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-x96r4qnj]  Project: [mci|https://evergreen.mongodb.com/waterfall/mci]          ~BF Ticket Generated by [~john.liu]~  ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-2033","09/08/2017 19:05:44",2,"rest/v2/ endpoint for tasks by status in a recent time period ""default to 30m""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2034","09/08/2017 19:07:10",1,"remove shell script shims from evergreen deploy toolchain ""our deployed environments no longer depend upon them, so we should clean up the indirection. ""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-2036","09/08/2017 21:57:10",2,"race-proto failure ""h2. [race-proto failed on race-detector|https://evergreen.mongodb.com/task/mci_race_detector_race_proto_779d1fd69cb92952c1d5364b0050d7e5512a139a_17_09_08_19_59_14/0]    Host: [ec2-54-198-104-119.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-v3sg7mmk]  Project: [mci|https://evergreen.mongodb.com/waterfall/mci]          ~BF Ticket Generated by [~brian.samek]~  ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-2038","09/09/2017 03:14:00",2,"evergreen web service should host api and ui routes ""we can have a single service listen on more than one port for now and later remove one of the ports. ""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-2041","09/11/2017 14:50:39",2,"s3 command takes longer in new agent ""For example, [test-alerts took 20 seconds|https://evergreen.mongodb.com/task/mci_ubuntu1604_test_alerts_cfbbe9b69bf097768e136a70abc6ad6dd62a7311_17_09_08_21_08_15] to run with the old agent but [2 minutes 22 seconds|https://evergreen.mongodb.com/task/mci_ubuntu1604_test_alerts_7677ed72f6b91917629f50c40ae142b6c29346e3_17_09_09_02_54_17] to run with the new agent. The increase comes from the s3 puts:  ""","  [2017/09/11 09:41:02.783] Script execution complete.  [2017/09/11 09:41:02.783] Finished 'shell.exec' in """"run-make"""" in 31.006304265s  [2017/09/11 09:41:02.783] Finished running task commands in 39.265331464s.  [2017/09/11 09:41:02.831] Finished 'gotest.parse_files' in 45.061582ms  [2017/09/11 09:41:03.381] retrying after error during putting to s3 bucket: <nil>  [2017/09/11 09:41:08.409] retrying after error during putting to s3 bucket: <nil>  [2017/09/11 09:41:13.642] retrying after error during putting to s3 bucket: <nil>  [2017/09/11 09:41:24.391] retrying after error during putting to s3 bucket: <nil>  [2017/09/11 09:41:47.258] retrying after error during putting to s3 bucket: <nil>  [2017/09/11 09:41:47.258] Finished 's3.put' in 44.427181114s  [2017/09/11 09:41:47.270] retrying after error during putting to s3 bucket: <nil>  [2017/09/11 09:41:52.286] retrying after error during putting to s3 bucket: <nil>  [2017/09/11 09:42:01.637] retrying after error during putting to s3 bucket: <nil>  [2017/09/11 09:42:21.089] retrying after error during putting to s3 bucket: <nil>  [2017/09/11 09:42:46.105] retrying after error during putting to s3 bucket: <nil>  [2017/09/11 09:42:46.105] Finished 's3.put' in 58.846715583s  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-9675","09/11/2017 23:19:10",2,"create model for aggregated/summation of bcr data  ""potentially directly from the database, rather than against the API to avoid credentials issues. ""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-2049","09/11/2017 23:40:48",2,"select a default project if specified project name does not exist ""sites must default to *some* project. if the config file specifies a """"wrong"""" project, then we should pick the first project (or something similar.) ""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-2067","09/12/2017 20:00:36",1,"Messages written to the task logs don't have leading whitespace preserved ""I suspect the new Evergreen agent is doing something like calling {{strings.Trim()}} or {{strings.TrimSpace()}} instead of {{strings.TrimRight()}}.        https://evergreen.mongodb.com/task_log_raw/mongodb_mongo_master_enterprise_rhel_62_64_bit_aggregation_33cb4a950c5de3c1c783b25ecf0fd4454cce844a_17_09_12_17_37_00/0?type=T&text=true        https://evergreen.mongodb.com/task_log_raw/mongodb_mongo_master_enterprise_rhel_62_64_bit_aggregation_c31e309846609b4309a72868db7eafc189f839ca_17_09_01_21_51_14/0?type=T&text=true""","  [2017/09/12 18:20:49.294] [resmoke] 2017-09-12T18:20:49.288+0000 YAML configuration of suite aggregation  [2017/09/12 18:20:49.294] test_kind: js_test  [2017/09/12 18:20:49.294] selector:  [2017/09/12 18:20:49.294] roots:  [2017/09/12 18:20:49.294] - jstests/aggregation/*.js  [2017/09/12 18:20:49.294] - jstests/aggregation/bugs/*.js  [2017/09/12 18:20:49.294] - jstests/aggregation/expressions/*.js  [2017/09/12 18:20:49.294] - jstests/aggregation/sources/*/*.js  [2017/09/12 18:20:49.294] - jstests/aggregation/variables/*.js    [2017/09/01 23:22:05.730] [resmoke] 2017-09-01T23:22:05.729+0000 YAML configuration of suite aggregation  [2017/09/01 23:22:05.731] test_kind: js_test  [2017/09/01 23:22:05.731] selector:  [2017/09/01 23:22:05.731]   roots:  [2017/09/01 23:22:05.731]   - jstests/aggregation/*.js  [2017/09/01 23:22:05.731]   - jstests/aggregation/bugs/*.js  [2017/09/01 23:22:05.731]   - jstests/aggregation/expressions/*.js  [2017/09/01 23:22:05.731]   - jstests/aggregation/sources/*/*.js  [2017/09/01 23:22:05.731]   - jstests/aggregation/variables/*.js  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2070","09/12/2017 22:36:30",1,"Intermittent s3.put failures for optional uploads ""In the sqlproxy project, we have been observing occasional s3.put failures for files marked as optional. See [here|https://evergreen.mongodb.com/task/sqlproxy_single_variant__os_single_variant~debian81_sign_0ffa9f806c9f9f07cdf653799d0e86b5821519fd_17_09_11_20_02_29] for an example.    [~adinoyi.omuya] took a look at the recent changes, and noted this:    it looks like taking the attach file logic out of the retry loop made it so that when a local file doesn't exist, an s3.put operation now fails:  see https://github.com/evergreen-ci/evergreen/blob/master/command/s3_put.go#L261 (what retry logic used to do)""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2071","09/13/2017 00:08:26",1,"TestCommandTestSuite, TestShellExec ""h2. [test-proto failed on ubuntu1604|https://evergreen.mongodb.com/task/mci_ubuntu1604_test_proto_a4f9cf75b2e2d9e51faba4d900730d82857e00d9_17_09_12_21_31_20/0]    Host: [ec2-54-211-4-223.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-9vcg7kjh]  Project: [mci|https://evergreen.mongodb.com/waterfall/mci]    *TestCommandTestSuite* - [Logs|] | [History|https://evergreen.mongodb.com/task_history/mci/test-proto#TestCommandTestSuite=fail]    *TestShellExec* - [Logs|] | [History|https://evergreen.mongodb.com/task_history/mci/test-proto#TestShellExec=fail]          ~BF Ticket Generated by [~sam.kleinman]~  ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-2073","09/13/2017 12:53:34",2,"add s390/POWER/ARM tests that use cross compiled binaries ""support for this *mostly* exists in the form of dist-test, but there's some CI changes that we'd need to make to make this a reality. ""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-2074","09/13/2017 13:57:58",2,"New Evergreen agent isn't performing task timeouts ""I noticed on the Evergreen waterfall page that there were fuzzer tasks taking 4 hours to run, but were considered """"failures"""" rather """"timeouts"""".        https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_debian71_64_jstestfuzz_sharded_WT_27471dc703ea0144ce4419d0bb59a4d092877d24_17_09_12_18_06_18        https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_windows_64_2k8_jstestfuzz_concurrent_replication_c5e038cb5e25cfdd4037534d34ce0d4e11f5c1ec_17_09_12_21_40_29    The """"jstestfuzz*"""" Evergreen tasks [set their {{exec_timeout_secs}} to 4 hours|https://github.com/mongodb/mongo/blob/27471dc703ea0144ce4419d0bb59a4d092877d24/etc/evergreen.yml#L138] and [set their {{timeout_secs}} to 30 minutes|https://github.com/mongodb/mongo/blob/27471dc703ea0144ce4419d0bb59a4d092877d24/etc/evergreen.yml#L131].    # It doesn't appear that the idle timeout is being triggered after 30 minutes of not seeing resmoke.py write anything to its stdout pipe.  # It doesn't appear that the """"timeout"""" section of the Evergreen project configuration file is being executed.""","  [2017/09/12 22:37:01.924] [resmoke] 2017-09-12T22:37:01.923+0000 YAML configuration of suite jstestfuzz_replication  ...  [2017/09/12 22:39:07.482] [executor:js_test:job0] 2017-09-12T22:39:07.480+0000 Writing output of 72f2-mdb_c5e0-ent_42ab-qa_a6ce-1505255760149-02 to https://logkeeper.mongodb.org/build/014c4377fbee859bfe80696908dfdc6d/test/59b8620b904130379d01d545.  [2017/09/13 02:34:44.612] Task completed - FAILURE.    [2017/09/12 21:41:16.253] [resmoke] 2017-09-12T21:41:16.177+0000 YAML configuration of suite jstestfuzz_sharded  ...  [2017/09/12 21:55:56.708] [executor:js_test:job0] 2017-09-12T21:55:56.708+0000 Writing output of 72f2-mdb_2747-ent_42ab-qa_a6ce-1505252399046-084 to https://logkeeper.mongodb.org/build/59d45a90ad759db6b43d9785fcd774ca/test/59b857ec54f248607807fce0.  [2017/09/13 01:39:40.751] Task completed - FAILURE.  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2076","09/13/2017 21:00:46",1,"evergreen patch should link to tasks when -f is given ""Currently, when you run an evergreen patch with the finalize option it gives you a link to the patch. Once you click on the link you are taken to a page which says:        Which is not what you really want if you are giving the --finalize flag. It should instead just link you directly to the tasks status page.""","  Tasks for this patch have already been scheduled.  Modifying the configuration will update the patch to include additional tasks and variants.  View Existing Tasks‚Ä¶  ",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2083","09/15/2017 14:09:52",1,"TestDirectoryCleanup ""h2. [test-agent failed on ubuntu1604|https://evergreen.mongodb.com/task/mci_ubuntu1604_test_agent_28483b573e858d2164715f948b82c831bb86e2e9_17_09_14_23_01_10/0]    Host: [ec2-54-224-201-86.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-fy7g4nkg]  Project: [mci|https://evergreen.mongodb.com/waterfall/mci]    *TestDirectoryCleanup* - [Logs|] | [History|https://evergreen.mongodb.com/task_history/mci/test-agent#TestDirectoryCleanup=fail]          ~BF Ticket Generated by [~brian.samek]~  ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-2084","09/15/2017 15:59:50",1,"TestFetchEBSPricing, TestEBSPriceCaching ""h2. [test-cloud-providers-ec2 failed on ubuntu1604|https://evergreen.mongodb.com/task/mci_ubuntu1604_test_cloud_providers_ec2_cd6d70d2c248a96b3fa1f2a21ba025d536af5b16_17_09_15_13_41_22/0]    Host: [ec2-54-158-120-3.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-1fg86i1h]  Project: [mci|https://evergreen.mongodb.com/waterfall/mci]    *TestFetchEBSPricing* - [Logs|] | [History|https://evergreen.mongodb.com/task_history/mci/test-cloud-providers-ec2#TestFetchEBSPricing=fail]    *TestEBSPriceCaching* - [Logs|] | [History|https://evergreen.mongodb.com/task_history/mci/test-cloud-providers-ec2#TestEBSPriceCaching=fail]          ~BF Ticket Generated by [~sam.kleinman]~  ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-2085","09/15/2017 19:03:47",2,"TestCommandTestSuite ""h2. [race-agent failed on race-detector|https://evergreen.mongodb.com/task/mci_race_detector_race_agent_ce89b33b74493e60b49a3b85720f9c0e8b5ed397_17_09_15_15_01_53/0]    Host: [ec2-54-158-79-112.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-q79r7sth]  Project: [mci|https://evergreen.mongodb.com/waterfall/mci]    *TestCommandTestSuite* - [Logs|] | [History|https://evergreen.mongodb.com/task_history/mci/race-agent#TestCommandTestSuite=fail]          ~BF Ticket Generated by [~sam.kleinman]~  ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-2086","09/15/2017 19:29:35",1,"hang_analyzer doesn't appear to run in Windows ""Test suite timed out after running for ~6hrs    https://evergreen.mongodb.com/task/mongodb_mongo_master_windows_64_2k8_debug_sharding_patch_fe125855b6b3e8feb9d7d666338a7f2d29d301ad_59b9960ce3c3316a9e024b4a_17_09_13_20_33_28/0    There appears to be on output for hang analyzer and there was also no evidence that an attempt was made.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2088","09/15/2017 20:42:53",1,"shell.exec should fail if directory does not exist ""I have the following in an EVG config:    {{post:      - command: shell.exec      params:        working_dir: mms/server        script: |           ...  }}    Some tasks however don't have the folder {{mms/server}}. As such they fail to run this post task and they hang for 15m before EVG shuts them down. We should see some error output and the next post task should run. See https://evergreen.mongodb.com/task/mms_unit_js_GITHUB_PR_START_3c19e4f2cf774c9c2dab6506cca89a7a45a286cd_17_09_15_17_55_02""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2091","09/15/2017 23:16:21",2,"Host list is very slow ""https://evergreen.mongodb.com/hosts is very slow to load and respond when searching""","",0,0,0,0,0,0,1,0,0,0,1,0,0,0,0
"EVG-2092","09/18/2017 15:26:01",2,"Command timeout is being set after command finishes and is sometimes not set ""The original symptom of this problem is that the sys-perf project has purple instead of red tasks. The db has json.send in run test (step 4.2 of 6) as the last command run, but in fact steps 5, 6.1, and 6.2 succeeded. Step 6.3 failed.    Here is an example from the Evergreen self-tests.        Setting command timeout, which also sets the current command, should happen immediately after we log """"Running command %v (step..."""" and before we run the command. There may be a race between startIdleTimeoutWatch() and checkIn(), since startIdleTimeoutWatch() calls checkIn(). startIdleTimeoutWatch() sends on the same channel it's listening on, which could conceivably cause unpredictable behavior. Since checkIn() uses a non-blocking send, a deadlock could cause it not to set tc.currentCommand. ""","  [2017/09/16 15:03:31.938] Finished 'shell.exec' in """"run-make"""" in 4m48.034997766s  [2017/09/16 15:03:31.938] Command timeout set to 2h0m0s  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2094","09/18/2017 16:02:14",1,"remove legacy logger and loggingwriter ""which will let us get rid of our last slogger dependency. ""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2095","09/18/2017 16:02:51",1,"avoid global mutable string variables in the global.go file ""there are a few, we should avoid this ""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2098","09/18/2017 16:48:17",2,"Pushing to a GitHub pull request should unschedule older patch builds ""(for that pull request, of the automatically configured kind.)    Maybe also only if they've not been modified. ""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2099","09/18/2017 19:15:20",1,"Address race detector failures in agent tests ""h2. [coverage failed on race-detector|https://evergreen.mongodb.com/task/mci_race_detector_coverage_61502934324cd17f6db77e5294fb91f37a94fd78_17_09_16_18_54_13/0]    Host: [ec2-54-198-34-242.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-ig7r634j]  Project: [mci|https://evergreen.mongodb.com/waterfall/mci]          ~BF Ticket Generated by [~brian.samek]~  ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-2100","09/18/2017 20:39:33",1,"New Evergreen agent appears not to normalize Windows CRLF line endings ""There's an extra blank line after each line of output from {{wmic}}.        https://evergreen.mongodb.com/task_log_raw/mongodb_mongo_master_windows_64_2k8_debug_aggregation_WT_e49cbf575a9f8a867280d0a21c3da622700dc3f5_17_09_18_16_55_14/0?type=S&text=true""","  [2017/09/18 18:04:32.450] Running wmic process list /format:list; wmic os get /format:list  [2017/09/18 18:04:32.593]    [2017/09/18 18:04:32.593]    [2017/09/18 18:04:32.593] CommandLine=    [2017/09/18 18:04:32.593] CSName=WIN-H67KGNQHGVV    [2017/09/18 18:04:32.593] Description=System Idle Process    [2017/09/18 18:04:32.593] ExecutablePath=    [2017/09/18 18:04:32.593] ExecutionState=    [2017/09/18 18:04:32.593] Handle=0  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2103","09/19/2017 20:46:38",2,"Add endpoint for host statistics ""This came out of a post-mortem of EVG-1990. This endpoint should provide host statistics so that the status page can alert for incidents of this type.""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-9400","09/19/2017 21:05:11",1,"It's possible for grip to panic when trying to send a long message ""At around 10 pm last night, the taskrunner kept hitting panics when trying to log a large error string related to starting agents:        From what I could see from splunk, it was trying to start agents on about 100 hosts (though it's possible only a fraction of those errored). I tried to reproduce this with grip logging 50000 lines to stdout but was unsuccessful""","  journal error: write unixgram @->/run/systemd/journal/socket: write: message too long  panic: runtime error: invalid memory address or nil pointer dereference  [signal SIGSEGV: segmentation violation code=0x1 addr=0x0 pc=0x986bbf]    goroutine 28 [running]:  panic(0x14167a0, 0xc420012090)      /opt/go/src/runtime/panic.go:500 +0x1a1  log.(*Logger).Output(0x0, 0x2, 0xc43227eb40, 0x60, 0x0, 0x0)      /opt/go/src/log/log.go:147 +0x6f  log.(*Logger).Printf(0x0, 0xc43227e5a0, 0x60, 0x0, 0x0, 0x0)      /opt/go/src/log/log.go:173 +0x7e  github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/grip/send.(*nativeLogger).Send(0xc42028e760, 0x2206de0, 0xc429824310)      /data/mci/126f28333fbc9152cb4171e0127c6f87/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/grip/send/native.go:123 +0x11a  github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/grip/send.ErrorHandlerFromSender.func1(0x21f7520, 0xc421ff99a0, 0x2206ea0, 0xc429824070)      /data/mci/126f28333fbc9152cb4171e0127c6f87/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/grip/send/error_handler.go:32 +0x7f  github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/grip/send.(*Base).ErrorHandler(0xc4201b00f0, 0x21f7520, 0xc421ff99a0, 0x2206ea0, 0xc429824070)      /data/mci/126f28333fbc9152cb4171e0127c6f87/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/grip/send/base.go:115 +0x95  github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/grip/send.(*systemdJournal).Send(0xc42028e780, 0x2206ea0, 0xc429824070)      /data/mci/126f28333fbc9152cb4171e0127c6f87/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/grip/send/systemd.go:60 +0x14a  github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/grip/send.(*multiSender).Send(0xc42027e5a0, 0x2206ea0, 0xc429824070)      /data/mci/126f28333fbc9152cb4171e0127c6f87/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/grip/send/multi.go:127 +0xb2  github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/grip/logging.(*Grip).Error(0xc4200133a0, 0x144cd60, 0xc430d83110)      /data/mci/126f28333fbc9152cb4171e0127c6f87/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/grip/logging/general.go:85 +0x66  github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/grip.Error(0x144cd60, 0xc430d83110)      /data/mci/126f28333fbc9152cb4171e0127c6f87/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/grip/loggers.go:97 +0x4c  github.com/evergreen-ci/evergreen/taskrunner.(*Runner).Run(0x224db20, 0x7f75831fca60, 0xc42001adc0, 0xc42006a700, 0xc4201900d0, 0x2)      /data/mci/126f28333fbc9152cb4171e0127c6f87/gopath/src/github.com/evergreen-ci/evergreen/taskrunner/runner.go:50 +0x965  github.com/evergreen-ci/evergreen/cli.runnerBackgroundWorker(0x7f75831fca60, 0xc42001adc0, 0x2201760, 0x224db20, 0xc42006a700, 0x1bf08eb000, 0xc42028e910)      /data/mci/126f28333fbc9152cb4171e0127c6f87/gopath/src/github.com/evergreen-ci/evergreen/cli/runner.go:204 +0x2e7  created by github.com/evergreen-ci/evergreen/cli.startRunners      /data/mci/126f28333fbc9152cb4171e0127c6f87/gopath/src/github.com/evergreen-ci/evergreen/cli/runner.go:156 +0x301  ",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-2104","09/19/2017 21:29:30",1,"display Build URL in evergreen patch summary only for finalized patches ""For unfinalized submitted patches, the Build URL simply links to a page with the text """"not found"""" and so isn't useful.  Putting the Build URL next to the Configure [patch] URL makes it harder to click on them.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2105","09/20/2017 17:21:13",2,"Logkeeper inserts test and global logs with wrong start time ""A [commit|https://github.com/evergreen-ci/logkeeper/commit/4d1eecad89a349fcadf765690cbdc877fee99d57#diff-100d281dce5be5551efb680a8617d493] to fix lint errors changed this function:        to this:        In the changed example, Go's zero value for time, January 1, year 1, is always returned, because earliest starts at this zero value, and no time can be earlier than this. This function sets the value of the started field in the log document. There is a 365 day TTL index on this field, so the documents were successfully inserted and then deleted by MongoDB, since the value in the started field was older than 365 days.""","  func earliestLogTime(logs []LogLine) *time.Time {   var earliest *time.Time   earliest = nil   for _, v := range logs {    if earliest == nil || v.Time().Before(*earliest) {     t := v.Time()     earliest = &t    }   }   return earliest  }    func earliestLogTime(logs []LogLine) *time.Time {   var earliest time.Time   for _, v := range logs {    if v.Time().Before(earliest) {     earliest = v.Time()    }   }   return &earliest  }  ",0,0,1,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-2107","09/20/2017 18:33:15",1,"notification banner should be dismissable ""and remember that i dismissed it in localStorage or a cookie or something""","",1,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-2109","09/21/2017 17:24:09",1,"EVG does not give a useful error message when aws_key/aws_secret are blank ""This came up as part of the timezone project, where an evergreen project was created to publish a timelib build artifact to the s3 bucket downloads.mongodb.org. A sample patch build is below, where the s3.put task appears to complete successfully yet the files do not get pushed:    https://evergreen.mongodb.com/task/mongodb_olsen_timezones_linux_64_compile_patch_20f042bac80a25384ed877ea032f84cdd694a1da_59c2a736e3c33124a8001a2f_17_09_20_17_37_46""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2110","09/21/2017 17:26:43",1,"Agent panics on zSeries when getting error response from api server ""We've seen this problem across all the zSeries boxes (rhel6/7, sles11/12, ubuntu1604) in the past few days.    Agent panics from time to time and the last line in logs is error response from api server like this      As [~brian.samek] suggested, I run the agent in the foreground to get more details and I see this runtime error now      This is from a rhel67-z box.""","[evergreen.agent] 2017/09/21 16:09:36 [p=warning]: error response from api server: Post https://evergreen.mongodb.com/api/2/task/mongodb_mongo_master_enterprise_rhel_67_s390x_sharding_jscore_op_query_passthrough_WT_55586df431096badb7a8dc56b2281cd590e183d3_17_09_18_13_57_53/process_info: dial tcp: lookup evergreen.mongodb.com on 64.6.64.6:53: dial udp 64.6.64.6:53: i/o timeout (attempt 1 of 10)[evergreen.agent] 2017/09/21 16:09:36 [p=warning]: error response from api server: Post https://evergreen.mongodb.com/api/2/task/mongodb_mongo_master_enterprise_rhel_67_s390x_sharding_jscore_op_query_passthrough_WT_55586df431096badb7a8dc56b2281cd590e183d3_17_09_18_13_57_53/process_info: dial tcp: lookup evergreen.mongodb.com on 64.6.64.6:53: dial udp 64.6.64.6:53: i/o timeout (attempt 1 of 10)  panic: runtime error: invalid memory address or nil pointer dereference  [signal SIGSEGV: segmentation violation code=0x1 addr=0x0 pc=0x11b77e]    goroutine 56 [running]:  panic(0x1258540, 0xc420010090)          /opt/go/src/runtime/panic.go:500 +0x408  github.com/evergreen-ci/evergreen/rest/client.(*communicatorImpl).retryRequest(0xc420333ae0, 0x3fffd40d740, 0xc42046cac0, 0x153fb06, 0x4, 0xc420e0f6b0, 0xa2, 0x15419ce, 0x6, 0xc420bb8990, ...)          /data/mci/c9b32294cf542d53df8b15c2621d3680/gopath/src/github.com/evergreen-ci/evergreen/rest/client/request.go:152 +0x62e  github.com/evergreen-ci/evergreen/rest/client.(*communicatorImpl).SendProcessInfo(0xc420333ae0, 0x3fffd40d740, 0xc42046cac0, 0xc420088000, 0x90, 0xc42026b360, 0x20, 0x0, 0xc4204cc200, 0x1a, ...)          /data/mci/c9b32294cf542d53df8b15c2621d3680/gopath/src/github.com/evergreen-ci/evergreen/rest/client/methods.go:580 +0x1b8  github.com/evergreen-ci/evergreen/agent.(*metricsCollector).processInfoCollector(0xc42046cb80, 0x3fffd40d740, 0xc42046cac0, 0x12a05f200, 0x2540be400, 0x1e)          /data/mci/c9b32294cf542d53df8b15c2621d3680/gopath/src/github.com/evergreen-ci/evergreen/agent/metrics.go:73 +0x2b4  created by github.com/evergreen-ci/evergreen/agent.(*metricsCollector).start          /data/mci/c9b32294cf542d53df8b15c2621d3680/gopath/src/github.com/evergreen-ci/evergreen/agent/metrics.go:44 +0x122",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2111","09/21/2017 18:03:43",2,"command timeout appears to not work ""In a task that was run the command did not timeout after two hours of idle output. The command only timed out after the task hit the 6 hour task timeout.    +Expected Result:+  After the command did not log any lines to evergreen for 2 hours, the command would be terminated.    Task: https://evergreen.mongodb.com/task/mongodb_mongo_master_windows_64_2k8_debug_auth_48cdb7d69246339e097bf23ec0e6b9187a3f9221_17_09_21_06_03_29/0  Log File: https://evergreen.mongodb.com/task_log_raw/mongodb_mongo_master_windows_64_2k8_debug_auth_48cdb7d69246339e097bf23ec0e6b9187a3f9221_17_09_21_06_03_29/0?type=T&text=true    +Selected log lines:+      References  https://jira.mongodb.org/browse/BF-6631""","  [2017/09/21 02:55:53.180] Task logger initialized (agent revision: f42fecc5d6f4cbb89a3dd3deb12ed2572e0ca835).  [2017/09/21 02:55:53.389] Starting task mongodb_mongo_master_windows_64_2k8_debug_auth_48cdb7d69246339e097bf23ec0e6b9187a3f9221_17_09_21_06_03_29, execution 0.  ...Trimmed...  [2017/09/21 03:26:15.936] [executor:js_test:job0] 2017-09-21T07:26:15.936+0000 cluster_ip_whitelist.js ran in 38.85 seconds.  [2017/09/21 03:26:36.145] [executor:js_test:job2] 2017-09-21T07:26:36.144+0000 copyauth_between_shards.js ran in 172.68 seconds.  [2017/09/21 08:55:53.389] Running task-timeout commands.  [2017/09/21 08:55:53.389] Running command 's3.get' in """"fetch debugsymbols archive"""" (step 1 of 3)  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2112","09/22/2017 17:00:37",1,"Upgrade angular version to 1.6.6 ""current version is 1.3.9""","",0,0,0,1,0,0,0,0,0,0,1,0,0,0,0
"EVG-2113","09/22/2017 17:52:39",2,"golang: Single test failure marks all other tests with same name as failed ""See: https://evergreen.mongodb.com/task/stitch_cloud_prod_linux_64_tests_without_cloud_c217911122ce24c6446811aa3da471378e9741b0_17_09_22_16_39_58    The {{TestStageMetrics}} test only failed for our twilio service but other services that use the same name passed but are marked as failed.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2114","09/22/2017 21:49:06",1,"lint failure ""h2. [lint failed on race-detector|https://evergreen.mongodb.com/task/mci_race_detector_lint_1ac5afb5168e9d565fb732bfaeae96d5925da84d_17_09_21_19_38_19/0]    Host: [ec2-54-205-80-112.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-4ybi5agj]  Project: [mci|https://evergreen.mongodb.com/waterfall/mci]          ~BF Ticket Generated by [~brian.samek]~  ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-2115","09/25/2017 21:47:29",2,"add terminate spawnhost route to new api and refactor cli accordingly ""the spawnhost termination route is only in the UI server because it depends on the settings object (which rest/v2 doesn't have access to.)     we should make sure that we have enough ways to populate routes that we can get access to this if we need to.     I think we should wait to do this until later when the settings object is loadable from the database, and we have moved to a middleware-based security model (I think this will be true when we start using gimlet and have an anser-like Environment concept). ""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-2116","09/26/2017 14:22:04",1,"Recent tasks rest v2 endpoint returns null tasks in verbose mode ""https://evergreen.mongodb.com/rest/v2/status/recent_tasks?minutes=15 works, but https://evergreen.mongodb.com/rest/v2/status/recent_tasks?minutes=15&verbose=true does not.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2117","09/26/2017 17:14:29",2,"Some tasks have incomplete system logs ""I've noticed that some tasks have incomplete system logs like no ps, df output.    It's inconsistent though, same task can be ok on one commit and miss system logs on the other.  I also don't see a correlation between this problem and a task being green or red.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2118","09/26/2017 18:40:15",1,"s3.put times out after many hours without any diagnostic information ""toolchain-builder tasks are timing out while running     +Task+  https://evergreen.mongodb.com/task/toolchain_builder_debian71_compile_8bee304eec313fd501bc673c13321446a4154653_17_09_20_16_03_07    +Task Logs:+:      +Agent Logs+      This is also occuring on other tasks:  https://evergreen.mongodb.com/task/toolchain_builder_debian81_compile_8bee304eec313fd501bc673c13321446a4154653_17_09_20_16_03_07  https://evergreen.mongodb.com/task/toolchain_builder_rhel62_compile_8bee304eec313fd501bc673c13321446a4154653_17_09_20_16_03_07""","  [2017/09/25 13:26:17.983] Running command 's3.put' (step 6 of 6)  [2017/09/25 17:06:52.322] Task completed - FAILURE.  [2017/09/25 17:06:52.324] Running post-task commands.    [2017/09/25 13:26:17.841] Finished 'shell.exec' in 2h19m24.572941823s  [2017/09/25 13:26:17.841] Current command set to '' ()  [2017/09/25 17:06:52.322] Hit exec timeout  [2017/09/25 17:06:52.324] Preparing script...  [2017/09/25 17:06:52.324] Executing script with : set -o errexit  ",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-2123","09/27/2017 16:18:28",1,"Unable to spawn hosts and currently spawned hosts are not showing ""When I go to to spawn a host I have an empty public key in the dropdown and see this message:    {quote}  You cannot spawn a host because there are no spawnable distros.  {quote}    I have a spawned host currently running from this morning, but it doesn't show up on the spawn host page:    ec2-54-81-41-251.compute-1.amazonaws.com""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-2124","09/27/2017 19:06:34",1,"setupReadyHosts runs only a handful of times per hour at peak load ""Overnight setupReadyHosts runs every 20 seconds, but during the day it can take more than 30 minutes between runs. This is presumably causing delays in spawnhost creation. It can also cause hosts to be reaped by Evergreen because they are not set up quickly enough.""","",0,0,0,0,0,0,1,0,0,1,0,0,0,0,0
"EVG-2126","09/27/2017 20:55:01",2,"zombie task invasion ""https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_rhel_62_64_bit_jstestfuzz_sharded_session_WT_patch_7765cbafc5ab73262ce8d233c2410194b6bba1d7_59cbeaf4e3c3312ab20012c2_17_09_27_18_16_41""","",0,0,0,0,0,0,1,0,0,1,0,0,0,0,0
"EVG-2128","09/28/2017 12:45:15",1,"use standard library contexts, and remove legacy contexts  ""this also means we can remove gorilla contexts""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-2129","09/28/2017 14:26:52",1,"lint failure ""h2. [lint failed on race-detector|https://evergreen.mongodb.com/task/mci_race_detector_lint_5574d71c7305785f9574b167f99e5bce6ed4494e_17_09_27_21_16_12/0]    Host: [ec2-54-224-255-41.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-krkg4hik]  Project: [mci|https://evergreen.mongodb.com/waterfall/mci]          ~BF Ticket Generated by [~brian.samek]~  ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-2130","09/28/2017 14:41:35",1,"json.send command is failing ""A number of the tests are failing due to system failures with a 'System Timed out' status.    For example, one of the task logs contains:     ""","  [2017/09/27 23:16:22.466] Running command 'json.send' in """"run test"""" (step 4.2 of 6)  [2017/09/28 01:06:36.677] Task completed - FAILURE.  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2132","09/29/2017 12:27:20",2,"Evergreen overdelivering notifications ""Since the recent change to simplify the logic around notification delivery it looks like we're generating notifications in cases where we should not be.  Looking at this query:    https://jira.mongodb.org/issues/?jql=project%20%3D%20BFG%20AND%20text%20~%20%22%5C%22multiversion_auth%20on%20~%20ASAN%20Enterprise%20SSL%20Ubuntu%2016.04%20DEBUG%20(downgrade_replset.js)%5C%22%22    All of these notifications are for the same task, same test, same buildvariant and different commits.  Given that the logic is supposed to send only one notification every 48 hours for such a combination, the fact that we are sending upwards of 10 per day seems like a bug.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2134","09/29/2017 20:41:29",2,"Accessing resources that can be filtered via direct URL is broken ""When I want to view certain distros on the hosts page by opening a direct URL like https://evergreen.mongodb.com/hosts#/filter/rhel70-small, I get redirected to https://evergreen.mongodb.com/hosts#!/filter/#%2Ffilter%2Frhel70-small page that loads all the hosts.  It applies to all the distros, not just rhel70-small.    I normally jump to those urls from https://evergreen.mongodb.com/task_queue where each distro has """"view hosts"""" shortcut.    Same problem occurs when trying to jump from a scheduled task to the task queue it's in by clicking the """"Nth in queue"""" link on the task's page.  For example, URL it's taking me to is https://evergreen.mongodb.com/task_queue#/#mongodb_mongo_master_ubuntu1604_debug_ubsan_tool_e977f79fb37f7c6608bcfa7df81932b302285a57_17_09_29_13_40_59 and I get redirected https://evergreen.mongodb.com/task_queue/#!#%2F%23mongodb_mongo_master_ubuntu1604_debug_ubsan_tool_e977f79fb37f7c6608bcfa7df81932b302285a57_17_09_29_13_40_59 and it loads the entire page without taking me to the exact task like it used.    P.S. I had hard time coming up with the ticket summary, feel free to change to something that makes sense. ""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-2137","09/30/2017 12:52:31",2,"slow provisioning should use AWS started time not created_time ""created_time is subject to fluctuations in runner throughput and inter-runner interaction, and being too aggressive here can lead to hosts getting terminated too soon. ""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-2139","09/30/2017 13:03:37",2,"subprocess.RemoteCommand's wait may not work.  ""We observe commands hitting the time out and then, when we call """"kill"""" on the command (to prevent zombie ssh sessions,) we report that the command is not running, and then when trying to reproduce commands we find that commands that take ~minutes in evergreen take 10s of seconds manually.     RemoteCommand isn't (well?) tested (we don't have a suitable integration environment, it's difficult to mock this component. It may make sense to replace it, or replace its internals, entirely. ""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-2144","10/02/2017 14:45:20",1,"Evergreen smoke test ""This smoke test will run as part of our test suite in Evergreen. It will:  # Start the runner and the web service.  # Start a container for the agent.  # Insert some data into the database.  # Run a project config containing a minimal example of each command.""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2145","10/02/2017 14:45:35",2,"Fix time picker on admin settings page ""It was removed in EVG-2123""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-2146","10/02/2017 17:41:07",1,"Evergreen /task_history page modifies window.location.hash in a way that makes URL non-copyable from location bar ""Clicking the {{server8070.js}} link on [this task page|https://evergreen.mongodb.com/task/mongodb_mongo_master_rollback_3dot4_rhel_62_replica_sets_ac9d5702568845898659dfee662ce05320ce13e7_17_10_02_13_37_58] links to https://evergreen.mongodb.com/task_history/mongodb-mongo-master/replica_sets?revision=ac9d5702568845898659dfee662ce05320ce13e7#server8070.js=fail; however, after the page loads the {{window.location.hash}} is modified to be """"\!#server8070.js=fail"""" and is interpreted as highlighting cases where the {{\!#server8070.js}} test failed upon reload.""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-2149","10/02/2017 19:18:34",1,"test-cli failure ""h2. [test-cli failed on ubuntu1604|https://evergreen.mongodb.com/task/mci_ubuntu1604_test_cli_70b94443c8afabb6f2bcf3c27b8882e895dadb05_17_10_02_17_54_19/0]    Host: [ec2-54-81-214-176.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-3gi87mng]  Project: [mci|https://evergreen.mongodb.com/waterfall/mci]          ~BF Ticket Generated by [~brian.samek]~  ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-2150","10/02/2017 19:20:01",1,"TestS3CopyPluginExecution ""h2. [test-command failed on ubuntu1604|https://evergreen.mongodb.com/task/mci_ubuntu1604_test_command_70b94443c8afabb6f2bcf3c27b8882e895dadb05_17_10_02_17_54_19/0]    Host: [ec2-54-166-203-175.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-jfir4mvj]  Project: [mci|https://evergreen.mongodb.com/waterfall/mci]    *TestS3CopyPluginExecution* - [Logs|] | [History|https://evergreen.mongodb.com/task_history/mci/test-command#TestS3CopyPluginExecution=fail]          ~BF Ticket Generated by [~brian.samek]~  ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-2151","10/02/2017 19:21:04",1,"TestSetupReadyHosts ""h2. [test-hostinit failed on ubuntu1604|https://evergreen.mongodb.com/task/mci_ubuntu1604_test_hostinit_70b94443c8afabb6f2bcf3c27b8882e895dadb05_17_10_02_17_54_19/0]    Host: [ec2-54-80-104-127.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-fwkg4yek]  Project: [mci|https://evergreen.mongodb.com/waterfall/mci]    *TestSetupReadyHosts* - [Logs|] | [History|https://evergreen.mongodb.com/task_history/mci/test-hostinit#TestSetupReadyHosts=fail]          ~BF Ticket Generated by [~brian.samek]~  ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-2152","10/02/2017 22:26:21",2,"Hang analyzer no longer runs for hanged tasks/missing hang analyzer output ""While trying to diagnose BF-5821, I noticed that the hanged tasks were missing their hang analyzer output in the task log: https://evergreen.mongodb.com/task/mongodb_mongo_master_ubuntu1604_debug_asan_multiversion_multistorage_engine_4f5ec27ba25abb13e554721d65aa1c91100bca5e_17_09_29_22_38_23. I also noticed that the hang analyzer only ran for 57 microseconds, which seems like far too few microseconds let alone seconds to actually analyze the hang.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2154","10/03/2017 15:03:56",1,"lint failure ""h2. [lint failed on race-detector|https://evergreen.mongodb.com/task/mci_race_detector_lint_c660df7721c3a2cd04d29ce3126bf9fe5d4035aa_17_09_28_14_50_08/0]    Host: [ec2-54-198-160-83.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-995847nh]  Project: [mci|https://evergreen.mongodb.com/waterfall/mci]          ~BF Ticket Generated by [~brian.samek]~  ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-2155","10/03/2017 16:25:27",2,"Evergreen should be more robust to disabled projects ""* The next_task endpoint should not return tasks for projects which are missing or disabled  * The scheduler shouldn't enqueue tasks from missing or disabled projects""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2159","10/03/2017 19:57:25",1,"Add debug build to Evergreen Makefile ""Update Makefile to add a debug build option that will  * leave debug symbols (remove """"-w"""" from ldflags)  * Disable inlining and optimisations: (Add to go build: -gcflags """"-N -l"""")  for debugging with GDB.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2161","10/03/2017 22:16:18",1,"change notify email presentation type ""make them actually text emails; remove the <@ from the subject line; etc.    (these are the internal emails""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-2162","10/03/2017 22:30:04",1,"Agent still cleaning up .ssh directory on Windows ""https://evergreen.mongodb.com/host/sir-2rm87wfh    problem running taskrunner: problem starting agent on host sir-2rm87wfh: error prepping remote host sir-2rm87wfh: error creating directories on remote machine: Warning: Permanently added 'ec2-54-166-21-78.compute-1.amazonaws.com,54.166.21.78' (RSA) to the list of known hosts.  Permission denied (publickey,gssapi-keyex,gssapi-with-mic).  : exit status 255  problem starting agent on host sir-rbfg6yvh: error prepping remote host sir-rbfg6yvh: error creating directories on remote machine: ssh: connect to host ec2-54-162-206-86.compute-1.amazonaws.com port 22: Connection timed out  : exit status 255  problem starting agent on host sir-p5ir6d2k: error prepping remote host sir-p5ir6d2k: error creating directories on remote machine: ssh: connect to host ec2-54-166-129-183.compute-1.amazonaws.com port 22: Connection timed out  : exit status 255""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2164","10/03/2017 22:58:34",1,"Rename distro.Distro.Id's JSON field name from '_id' ""Change '_id' to a more appropriate name.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2165","10/03/2017 23:06:43",1,"""raw"" logs aren't working properly ""e.g.    https://evergreen.mongodb.com/test_log/59d3d30b2a60ed21b400070e?raw=1    Renders like this:   !image-2017-10-03-18-02-45-006.png|thumbnail!     It looks like the response headers have Content-type: text/html,   but it should be text/plain.""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-2167","10/04/2017 04:05:22",2,"application environment accessors ""wrap existing settings options     anser/sink style""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-2169","10/04/2017 13:03:46",2,"Agent was unable to kill running process ""2 tasks within a patch build timed out. I don't believe that either should have hit the time limit.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2171","10/04/2017 19:56:26",1,"Please reduce the default tag expiration time for hosts from 90 days to 10 days ""90 days seems to be too much in excess for host expiration and would like to reduce it to a more reasonable number.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-2174","10/04/2017 21:27:07",2,"Correctly handle scenarios where EC2 cancels spot requests ""The spot instance request ID 'sir-rbfg6yvh' does not exist (InvalidSpotInstanceRequestID.NotFound)  github.com/evergreen-ci/evergreen/cloud/providers/ec2.(*EC2SpotManager).describeSpotRequest   /data/mci/3c3159ed41cb07b22be02ed0dd51e90f/gopath/src/github.com/evergreen-ci/evergreen/cloud/providers/ec2/ec2spot.go:373  github.com/evergreen-ci/evergreen/cloud/providers/ec2.(*EC2SpotManager).GetInstanceStatus   /data/mci/3c3159ed41cb07b22be02ed0dd51e90f/gopath/src/github.com/evergreen-ci/evergreen/cloud/providers/ec2/ec2spot.go:161  github.com/evergreen-ci/evergreen/cloud.(*CloudHost).GetInstanceStatus   /data/mci/3c3159ed41cb07b22be02ed0dd51e90f/gopath/src/github.com/evergreen-ci/evergreen/cloud/cloud.go:191  github.com/evergreen-ci/evergreen/monitor.checkHostReachability   /data/mci/3c3159ed41cb07b22be02ed0dd51e90f/gopath/src/github.com/evergreen-ci/evergreen/monitor/host_monitoring.go:97  github.com/evergreen-ci/evergreen/monitor.monitorReachability.func1   /data/mci/3c3159ed41cb07b22be02ed0dd51e90f/gopath/src/github.com/evergreen-ci/evergreen/monitor/host_monitoring.go:58  runtime.goexit   /opt/go/src/runtime/asm_amd64.s:2086  failed to get spot request info for sir-rbfg6yvh  github.com/evergreen-ci/evergreen/cloud/providers/ec2.(*EC2SpotManager).GetInstanceStatus   /data/mci/3c3159ed41cb07b22be02ed0dd51e90f/gopath/src/github.com/evergreen-ci/evergreen/cloud/providers/ec2/ec2spot.go:163  github.com/evergreen-ci/evergreen/cloud.(*CloudHost).GetInstanceStatus   /data/mci/3c3159ed41cb07b22be02ed0dd51e90f/gopath/src/github.com/evergreen-ci/evergreen/cloud/cloud.go:191  github.com/evergreen-ci/evergreen/monitor.checkHostReachability   /data/mci/3c3159ed41cb07b22be02ed0dd51e90f/gopath/src/github.com/evergreen-ci/evergreen/monitor/host_monitoring.go:97  github.com/evergreen-ci/evergreen/monitor.monitorReachability.func1   /data/mci/3c3159ed41cb07b22be02ed0dd51e90f/gopath/src/github.com/evergreen-ci/evergreen/monitor/host_monitoring.go:58  runtime.goexit   /opt/go/src/runtime/asm_amd64.s:2086 ""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2177","10/05/2017 14:00:48",2,"migrate periodic background jobs to amboy services internally ""this is mostly to just reduce the nubmber of random one-off background threads, and to help us build confidence in amboy within evergreen.     I'm mostly thinking about the data collection threads that log recent task statuses to splunk along with application and system statistics collection ""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-2188","10/09/2017 03:55:10",2,"gopsutil doesn't collect io_counters on OS X ""{quote}  * Collect system resource usage data for all supported host types (e.g. ZaP and Intel; Windows, Solaris, Linux and Darwin)  * Collect CPU, IO, and Memory usage for all processes spawned by a task, stored on a per-process level, (for tasks that spawn many processes).  ** The parent process ID of each process spawned by the task will also be included in this information.  {quote}    The """"writeBytes"""" field for all processes on OS X is being reported as 0, so I don't think the work for collecting this metric happened. There was an idea of taking the code for the automation agent and upstreaming it to {{gopsutil}}.    http://evergreen.mongodb.com/api/rest/v2/tasks/mongodb_mongo_master_osx_1010_debug_aggregation_WT_155db509a8e376211095cec062f7aa5be1b7707e_17_10_08_00_36_06/metrics/process?start_at=%222006-01-02T15:04:05.000Z%22""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2189","10/09/2017 04:20:21",2,"gopsutil doesn't collect cpu_times on Windows ""{quote}  * Collect system resource usage data for all supported host types (e.g. ZaP and Intel; Windows, Solaris, Linux and Darwin)  * Collect CPU, IO, and Memory usage for all processes spawned by a task, stored on a per-process level, (for tasks that spawn many processes).  ** The parent process ID of each process spawned by the task will also be included in this information.  {quote}    The """"cpu"""" field for all processes on Windows is being reported as an object containing all 0's, so I don't think the work for collecting this metric happened. There was an idea of taking the code for the automation agent and upstreaming it to {{gopsutil}}.    http://evergreen.mongodb.com/api/rest/v2/tasks/mongodb_mongo_master_windows_64_2k8_debug_sharding_WT_155db509a8e376211095cec062f7aa5be1b7707e_17_10_08_00_36_06/metrics/process?start_at=%222006-01-02T15:04:05.000Z%22""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2193","10/10/2017 14:44:44",1,"Evergreen isn't respecting timeout_secs as part of command settings ""The {{concurrency*}} tasks run a JavaScript test that runs other JavaScript tests. Since resmoke.py won't produce output until the outer JavaScript test finishes, we've increased the {{timeout_secs}} setting to what we'd ordinarily use for the entire task. For example, [the """"idle timeout"""" for the {{concurrency_sharded_with_stepdowns_and_balancer_WT}} is set to 6 hours|https://github.com/mongodb/mongo/blob/f74896d9aae90d0b31eeb06f37f59ca386c03570/etc/evergreen.yml#L3603].    {code:yaml}  - <<: *task_template    name: concurrency_sharded_with_stepdowns_and_balancer_WT    commands:    - func: """"do setup""""    - func: """"run tests""""      timeout_secs: 21600 # 6 hour timeout for each test      vars:        resmoke_args: --suites=concurrency_sharded_with_stepdowns_and_balancer --storageEngine=wiredTiger  {code}    However, the Evergreen tasks are timing after running for 2 hours without resmoke.py producing any output.    {quote}  2h 5m 7s  Started on Oct 10, 2017 1:07:21 am  Finished on Oct 10, 2017 3:12:29 am    https://evergreen.mongodb.com/task/mongodb_mongo_master_windows_64_2k8_debug_concurrency_sharded_with_stepdowns_and_balancer_WT_63a1ed132fce92bca57845879f4bb25e44c92874_17_10_10_00_23_21  {quote}    The [task timing for the {{concurrency_sharded_with_stepdowns_and_balancer_WT}} task|https://evergreen.mongodb.com/task_timing/mongodb-mongo-master#/project=mongodb-mongo-master&buildVariant=windows-64-2k8-debug&taskName=concurrency_sharded_with_stepdowns_and_balancer_WT&requester=gitter_request&limit=100&onlySuccessful=false] shows that it started to time out after the deploy from Oct 5th that includes the changes from EVG-2152. [~sam.kleinman] and I did some debugging Oct 9th together and identified a line in {{agent/command.go}} that was always setting the command's timeout to {{defaultIdleTimeout}} (= 2 hours); however, even with [Sam's changes|https://github.com/evergreen-ci/evergreen/commit/886d894ef477d37afccda47cff3d1b5ee7fb5e35], the {{timeout_secs}} still appears to not be getting respected.    h6. Agent logs    The """"agent logs"""" show that the Evergreen agent is incorrectly setting the command timeout to 2 hours.    ""","  - <<: *task_template    name: concurrency_sharded_with_stepdowns_and_balancer_WT    commands:    - func: """"do setup""""    - func: """"run tests""""      timeout_secs: 21600 # 6 hour timeout for each test      vars:        resmoke_args: --suites=concurrency_sharded_with_stepdowns_and_balancer --storageEngine=wiredTiger    [2017/10/10 01:08:26.116] Current command set to ''shell.exec' in """"run tests""""' (test)  [2017/10/10 01:08:26.116] Set command timeout for ''shell.exec' in """"run tests""""' (test) to 2h0m0s  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2195","10/10/2017 18:18:50",2,"'evergreen test-history' returning old data ""Running this command:        Gives me the following results:        I would have expected some of the more recent failures (like any of these: BF-5239) to show up in this command.    It seems like either I'm inputting the wrong command here (and there's a sort which isn't listed in the --help?) or that this command is sorting the wrong way?""","  evergreen test-history -p mongodb-mongo-master --test jstests/gle/gle_sharded_wc.js --limit 10    Start Time                Duration(ms)    Variant                                 Task Name                                Test File                                URL  Tue Jul 15 19:04:44 2014  40s             rhel70                                  gle_auth                                 jstests/gle/gle_sharded_wc.js            http://buildlogs.mongodb.org/build/53c57215d2a60f29980002b0/test/53c57b4cd2a60f2f640001e7/  Tue Jul 15 18:34:06 2014  2m0s            rhel70                                  gle_auth_write_cmd                       jstests/gle/gle_sharded_wc.js            http://buildlogs.mongodb.org/build/53c57394d2a60f2a6500081f/test/53c5741ed2a60f2aad000af6/  Tue Jul 15 19:31:45 2014  5m7s            ubuntu1404                              gle_auth_write_cmd                       jstests/gle/gle_sharded_wc.js            http://buildlogs.mongodb.org/build/53c56fe6d2a60f26f900093a/test/53c581a1d2a60f32b80001b3/  Tue Jul 15 19:31:43 2014  46s             rhel70                                  gle_auth                                 jstests/gle/gle_sharded_wc.js            http://buildlogs.mongodb.org/build/53c58104d2a60f3256000176/test/53c5819fd2a60f32b90001aa/  Fri Jun 20 23:05:38 2014  10m28s          osx-108                                 gle_auth_write_cmd                       jstests/gle/gle_sharded_wc.js            http://buildlogs.mongodb.org/build/53a4b6ded2a60f3587000870/test/53a4be42d2a60f3a3b000300/  Fri Jun 20 23:34:28 2014  10m27s          osx-108                                 gle_auth                                 jstests/gle/gle_sharded_wc.js            http://buildlogs.mongodb.org/build/53a4bd9cd2a60f3983000a1d/test/53a4c504d2a60f3b820006c7/  Fri Jun 20 23:45:53 2014  10m26s          linux-64                                gle_auth                                 jstests/gle/gle_sharded_wc.js            http://buildlogs.mongodb.org/build/53a4c050d2a60f3a0e00086a/test/53a4c7b2d2a60f3be0000d4e/  Fri Jun 20 23:45:58 2014  10m26s          linux-64                                gle_auth_write_cmd                       jstests/gle/gle_sharded_wc.js            http://buildlogs.mongodb.org/build/53a4c056d2a60f3a3b000800/test/53a4c7b6d2a60f3c9000026b/  Sat Jun 21 00:09:56 2014  10m25s          ubuntu1404                              gle_auth_write_cmd                       jstests/gle/gle_sharded_wc.js            http://buildlogs.mongodb.org/build/53a4c5f6d2a60f3b620009b4/test/53a4cd53d2a60f3dc4000cce/  Sat Jun 21 01:23:28 2014  10m25s          ubuntu1404                              gle_auth                                 jstests/gle/gle_sharded_wc.js            http://buildlogs.mongodb.org/build/53a4d733d2a60f42a20004b6/test/53a4de90d2a60f46eb0003b8/  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2196","10/10/2017 19:29:56",1,"test-agent failure ""h2. [test-agent failed on windows|https://evergreen.mongodb.com/task/mci_windows_test_agent_d57aa60195b8cfb0e03a19a7f0430cdd639db8aa_17_10_10_15_44_43/0]    Host: [ec2-54-197-96-19.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-se5i7mpg]  Project: [mci|https://evergreen.mongodb.com/waterfall/mci]          ~BF Ticket Generated by [~brian.samek]~  ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-2197","10/10/2017 19:31:27",1,"race-agent failure ""h2. [race-agent failed on race-detector|https://evergreen.mongodb.com/task/mci_race_detector_race_agent_d57aa60195b8cfb0e03a19a7f0430cdd639db8aa_17_10_10_15_44_43/0]    Host: [ec2-54-166-157-83.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-zs1g5kkj]  Project: [mci|https://evergreen.mongodb.com/waterfall/mci]          ~BF Ticket Generated by [~brian.samek]~  ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-2201","10/11/2017 08:58:06",1,"add alert for underwater distro schedule ""log alert if expected runtime for a distro at maxhosts is more than day (more than a week for statics?) ""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-2204","10/11/2017 18:55:33",1,"lint failure ""h2. [lint failed on race-detector|https://evergreen.mongodb.com/task/mci_race_detector_lint_ca6ea0c0879d9ac5489e094e67d8fe6daad6803b_17_10_11_14_47_30/0]    Host: [ec2-54-205-214-155.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-btai4dwj]  Project: [mci|https://evergreen.mongodb.com/waterfall/mci]          ~BF Ticket Generated by [~brian.samek]~  ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-2206","10/11/2017 21:53:48",1,"Taskrunner should log when it is dispatching an agent to an uncommunicative host ""[Currently|https://github.com/evergreen-ci/evergreen/blob/85790be675d892f39a74d66b2204f67aad053fa7/taskrunner/task_runner.go#L44], we do not make a distinction between three cases:  # Hosts which have never had an agent running.  # Agents which have aborted gracefully (because, for example, we have upgraded Evergreen).  # Agents which have not checked in in greater than MaxLCTInterval.    In the third case we should log that this has happened, as it indicates that an agent may have exited due to an unexpected error or panic.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2208","10/12/2017 16:38:37",1,"race-agent failure ""h2. [race-agent failed on race-detector|https://evergreen.mongodb.com/task/mci_race_detector_race_agent_69487ae236457d78fd37f604464f442eb2766c27_17_10_12_14_19_23/0]    Host: [ec2-54-161-145-173.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-y9mg7vrj]  Project: [mci|https://evergreen.mongodb.com/waterfall/mci]          ~BF Ticket Generated by [~brian.samek]~  ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-2209","10/13/2017 16:35:30",1,"race-agent failures ""h2. [race-agent failed on race-detector|https://evergreen.mongodb.com/task/mci_race_detector_race_agent_27f512e14a34247d213456c605bb547f06467879_17_10_13_04_12_42/0]    Host: [ec2-54-205-148-172.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-kmdi744h]  Project: [mci|https://evergreen.mongodb.com/waterfall/mci]    *TestAgentIntegrationSuite* - [Logs|] | [History|https://evergreen.mongodb.com/task_history/mci/race-agent#TestAgentIntegrationSuite=fail]    *TestAgentIntegrationSuite* - [Logs|] | [History|https://evergreen.mongodb.com/task_history/mci/race-agent#TestAgentIntegrationSuite=fail]    *TestAgentIntegrationSuite* - [Logs|] | [History|https://evergreen.mongodb.com/task_history/mci/race-agent#TestAgentIntegrationSuite=fail]    *TestAgentIntegrationSuite* - [Logs|] | [History|https://evergreen.mongodb.com/task_history/mci/race-agent#TestAgentIntegrationSuite=fail]    *TestRunTask* - [Logs|] | [History|https://evergreen.mongodb.com/task_history/mci/race-agent#TestRunTask=fail]    *TestRunTask* - [Logs|] | [History|https://evergreen.mongodb.com/task_history/mci/race-agent#TestRunTask=fail]    *TestRunTask* - [Logs|] | [History|https://evergreen.mongodb.com/task_history/mci/race-agent#TestRunTask=fail]    *TestRunTask* - [Logs|] | [History|https://evergreen.mongodb.com/task_history/mci/race-agent#TestRunTask=fail]    *TestAgentIntegrationSuite* - [Logs|] | [History|https://evergreen.mongodb.com/task_history/mci/race-agent#TestAgentIntegrationSuite=fail]    *TestRunTask* - [Logs|] | [History|https://evergreen.mongodb.com/task_history/mci/race-agent#TestRunTask=fail]          ~BF Ticket Generated by [~brian.samek]~  ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-2214","10/15/2017 19:48:53",1,"Runners should log when they finish running ""We alert if a runner has not run in the last 10 minutes based on logging that each runner does when it starts. We should also log when each runner process finishes so that we can detect stalls or panics in the middle of an agent run. ""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2218","10/18/2017 18:21:41",1,"Make trend view the default view for performance patch builds (sys-perf and microbenchmarks) ""Can we make the trend view the default for patch builds in the perf plugin? The trend view makes it easier to see if the change due to the patch is significant or not based on historical data. ""","",0,0,0,1,0,0,0,0,0,0,0,1,0,0,0
"EVG-2228","10/19/2017 22:39:27",1,"Can't decommission hosts from hosts page ""Clicking the button appears to noop.""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-2230","10/20/2017 16:46:12",2,"Agent should heartbeat before starting the heartbeat ticker ""Otherwise, it will not heartbeat during tasks that take less than 30 seconds. If it runs many of these in a row, it may never heartbeat.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2232","10/20/2017 21:28:43",1,"Populate git hash field in BF and BFG jira projects ""I added a """"Git Hash"""" field to the BF and BFG projects - can we make sure this gets populated with the git hash ID when a ticket gets generated?    cc [~max.hirschhorn] [~david.daly] Would it be best to use the short or long git hash ID?""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-2239","10/24/2017 17:03:44",2,"TestEnvironmentSuite, TestLoadingConfig ""h2. [test-evergreen failed on ubuntu1604|https://evergreen.mongodb.com/task/mci_ubuntu1604_test_evergreen_20af791587220d4de3e5e52d7191808d8ed82716_17_10_24_14_12_33/0]    Host: [ec2-54-204-104-120.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-f3k845tk]  Project: [mci|https://evergreen.mongodb.com/waterfall/mci]    *TestEnvironmentSuite* - [Logs|] | [History|https://evergreen.mongodb.com/task_history/mci/test-evergreen#TestEnvironmentSuite=fail]    *TestLoadingConfig* - [Logs|] | [History|https://evergreen.mongodb.com/task_history/mci/test-evergreen#TestLoadingConfig=fail]          ~BF Ticket Generated by [~sam.kleinman]~  ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-2240","10/24/2017 17:04:01",2,"TestSetupReadyHosts ""h2. [test-hostinit failed on ubuntu1604|https://evergreen.mongodb.com/task/mci_ubuntu1604_test_hostinit_20af791587220d4de3e5e52d7191808d8ed82716_17_10_24_14_12_33/0]    Host: [ec2-54-161-232-14.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-xmdr743k]  Project: [mci|https://evergreen.mongodb.com/waterfall/mci]    *TestSetupReadyHosts* - [Logs|] | [History|https://evergreen.mongodb.com/task_history/mci/test-hostinit#TestSetupReadyHosts=fail]          ~BF Ticket Generated by [~brian.samek]~  ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-2241","10/24/2017 17:05:25",2,"TestParserOnRealTests ""{color:red}colored text{color}h2. [test-command failed on ubuntu1604|https://evergreen.mongodb.com/task/mci_ubuntu1604_test_command_20af791587220d4de3e5e52d7191808d8ed82716_17_10_24_14_12_33/0]    Host: [ec2-54-204-66-74.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-vj9r43bj]  Project: [mci|https://evergreen.mongodb.com/waterfall/mci]    *TestParserOnRealTests* - [Logs|] | [History|https://evergreen.mongodb.com/task_history/mci/test-command#TestParserOnRealTests=fail]          ~BF Ticket Generated by [~brian.samek]~  ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-2265","10/25/2017 16:48:34",2,"add direct-to-slack logger for Alert/Emergency messages ""we'll need to get bot credentials""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2258","10/25/2017 18:50:05",1,"Nil pointer when viewing first execution of a 1 execution task ""  ""","  net/http.(*conn).serve.func1(0xc4204c6960)   /usr/local/Cellar/go/1.9.1/libexec/src/net/http/server.go:1697 +0xd0  panic(0x519a2a0, 0x619e930)   /usr/local/Cellar/go/1.9.1/libexec/src/runtime/panic.go:491 +0x283  github.com/evergreen-ci/evergreen/service.(*UIServer).taskPage(0xc420428900, 0x68b2950, 0xc42000e070, 0xc4203fc000)   /Users/johnliu/go/src/github.com/evergreen-ci/evergreen/service/task.go:171 +0x4ba  github.com/evergreen-ci/evergreen/service.(*UIServer).(github.com/evergreen-ci/evergreen/service.taskPage)-fm(0x68b2950, 0xc42000e070, 0xc4203fc000)   /Users/johnliu/go/src/github.com/evergreen-ci/evergreen/service/ui.go:147 +0x48  github.com/evergreen-ci/evergreen/service.(*UIServer).loadCtx.func1(0x68b2950, 0xc42000e070, 0xc420ba3400)   /Users/johnliu/go/src/github.com/evergreen-ci/evergreen/service/middleware.go:234 +0x1b5  net/http.HandlerFunc.ServeHTTP(0xc4201d17c0, 0x68b2950, 0xc42000e070, 0xc420ba3400)   /usr/local/Cellar/go/1.9.1/libexec/src/net/http/server.go:1918 +0x44  github.com/evergreen-ci/evergreen/vendor/github.com/gorilla/mux.(*Router).ServeHTTP(0xc4202dc050, 0x68b2950, 0xc42000e070, 0xc420ba3400)   /Users/johnliu/go/src/github.com/evergreen-ci/evergreen/vendor/github.com/gorilla/mux/mux.go:114 +0xdc  github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni.Wrap.func1(0x68b2950, 0xc42000e070, 0xc420ba3200, 0xc420c932a0)   /Users/johnliu/go/src/github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni/negroni.go:46 +0x4d  github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni.HandlerFunc.ServeHTTP(0xc4206c4440, 0x68b2950, 0xc42000e070, 0xc420ba3200, 0xc420c932a0)   /Users/johnliu/go/src/github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni/negroni.go:29 +0x4e  github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni.middleware.ServeHTTP(0x6166a20, 0xc4206c4440, 0xc4206c44c0, 0x68b2950, 0xc42000e070, 0xc420ba3200)   /Users/johnliu/go/src/github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni/negroni.go:38 +0xa5  github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni.(middleware).ServeHTTP-fm(0x68b2950, 0xc42000e070, 0xc420ba3200)   /Users/johnliu/go/src/github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni/negroni.go:38 +0x60  github.com/evergreen-ci/evergreen/service.UserMiddleware.func1(0x68b2950, 0xc42000e070, 0xc420ba3000, 0xc420c92f80)   /Users/johnliu/go/src/github.com/evergreen-ci/evergreen/service/middleware.go:399 +0x224  github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni.HandlerFunc.ServeHTTP(0xc4206c43a0, 0x68b2950, 0xc42000e070, 0xc420ba3000, 0xc420c92f80)   /Users/johnliu/go/src/github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni/negroni.go:29 +0x4e  github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni.middleware.ServeHTTP(0x6166a20, 0xc4206c43a0, 0xc4206c44a0, 0x68b2950, 0xc42000e070, 0xc420ba3000)   /Users/johnliu/go/src/github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni/negroni.go:38 +0xa5  github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni.(middleware).ServeHTTP-fm(0x68b2950, 0xc42000e070, 0xc420ba3000)   /Users/johnliu/go/src/github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni/negroni.go:38 +0x60  github.com/evergreen-ci/evergreen/service.(*Logger).ServeHTTP(0xc420564040, 0x68b2950, 0xc42000e070, 0xc420ba3000, 0xc420c92f20)   /Users/johnliu/go/src/github.com/evergreen-ci/evergreen/service/middleware.go:451 +0x3d5  github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni.middleware.ServeHTTP(0x615f2a0, 0xc420564040, 0xc4206c4480, 0x68b2950, 0xc42000e070, 0xc420ba3000)   /Users/johnliu/go/src/github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni/negroni.go:38 +0xa5  github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni.(middleware).ServeHTTP-fm(0x68b2950, 0xc42000e070, 0xc420ba3000)   /Users/johnliu/go/src/github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni/negroni.go:38 +0x60  github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni.(*Static).ServeHTTP(0xc4205d2480, 0x68b2950, 0xc42000e070, 0xc420ba3000, 0xc420c92f00)   /Users/johnliu/go/src/github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni/static.go:53 +0x6f2  github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni.middleware.ServeHTTP(0x615fd20, 0xc4205d2480, 0xc4206c4460, 0x68b2950, 0xc42000e070, 0xc420ba3000)   /Users/johnliu/go/src/github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni/negroni.go:38 +0xa5  github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni.(*Negroni).ServeHTTP(0xc4205d2450, 0x616d0e0, 0xc420ba4e00, 0xc420ba3000)   /Users/johnliu/go/src/github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni/negroni.go:86 +0xf5  net/http.serverHandler.ServeHTTP(0xc420a2a000, 0x616d0e0, 0xc420ba4e00, 0xc420ba3000)   /usr/local/Cellar/go/1.9.1/libexec/src/net/http/server.go:2619 +0xb4  net/http.(*conn).serve(0xc4204c6960, 0x616df60, 0xc420409a40)   /usr/local/Cellar/go/1.9.1/libexec/src/net/http/server.go:1801 +0x71d  created by net/http.(*Server).Serve   /usr/local/Cellar/go/1.9.1/libexec/src/net/http/server.go:2720 +0x288  ",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-2260","10/25/2017 20:59:02",1,"avoid running second mkdir if there is no setup script ""in taskrunner/host_gateway.go""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2262","10/25/2017 22:50:55",1,"lint-cli, lint-model-task, lint-taskrunner ""h2. [lint failed on race-detector|https://evergreen.mongodb.com/task/mci_race_detector_lint_ebf6771fae3f87e6f859fe300ca63d5b903209d5_17_10_24_21_47_56/0]    Host: [ec2-54-204-243-118.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-x9y84pbk]  Project: [mci|https://evergreen.mongodb.com/waterfall/mci]    *lint-cli* - [Logs|] | [History|https://evergreen.mongodb.com/task_history/mci/lint#lint-cli=fail]    *lint-model-task* - [Logs|] | [History|https://evergreen.mongodb.com/task_history/mci/lint#lint-model-task=fail]    *lint-taskrunner* - [Logs|] | [History|https://evergreen.mongodb.com/task_history/mci/lint#lint-taskrunner=fail]          ~BF Ticket Generated by [~sam.kleinman]~  ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-2266","10/26/2017 18:18:14",2,"Evergreen spawned host failed to load task artifacts ""I spawned a Windows hosts from the this task (twice) and selected to load the artifacts. The host came up without the artifacts:  ""","  $ ls -R /data  /data:  db  mci  tmp    /data/db:    /data/mci:    /data/tmp:    ",0,0,0,0,0,0,1,0,0,1,0,0,0,0,0
"EVG-2268","10/26/2017 18:47:06",1,"terminate idle linux ephemeral hosts more quickly ""given secondly billing, and the fact that starting hosts is now much quicker, keeping idle hosts around for longer doesn't feel particularly useful.""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2275","10/27/2017 02:51:11",1,"Teardown fails to trigger teardown of DSI cluster ""I don't know how to prove this one way or the other - but this is an example of a machine that was torn down but the DSI infrastructure was not torn down:    https://evergreen.mongodb.com/host/i-02a8b54c1e6d5fffa    [~david.daly]    If this is in fact an Evergreen issue then we need to move this over to Evergreen. ""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2278","10/28/2017 15:54:11",2,"audit and cleanup evergreen service/runner application process  ""to avoid interactions with other processes:   - loggers should be setup first and have teardown last (maybe move them into the environment.)   - potentially wait for some period of time for the local queue to drain.   ""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-9367","10/30/2017 19:36:56",1,"amboy/anser should use mongodb's mgo fork  ""so that we can support change streams ""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-2286","11/01/2017 02:48:55",1,"Cleanup util/spawn/remote packages ""There's a bunch of dead code that misses the linter's because it's public, this ticket is a cleanup bucket. ""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2291","11/01/2017 19:23:41",1,"task runner should add an event to the hosts event log when it deploys a new agent ""including the hash""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-9513","11/02/2017 15:49:16",1,"Curator process and system resource monitoring should not require AWS credentials ""We are using curator just for system and process resource monitoring.    When started on a non-Evergreen launched node, the following message shows up in stdout:  ""","  [curator] 2017/11/02 14:54:30 [p=warning]: Couldn't parse AWS credentials file  ",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-9331","11/02/2017 15:51:45",1,"Curator warings/errors should be logged to stderr ""See MAKE-290 for how a warning gets generated. When a warning is produced it ends up in stdout/JSON file, it should go to stderr.""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-9542","11/02/2017 15:53:54",2,"Curator --file option should handle existing file better ""Logging the ouput of curator with the --file option will overwrite an existing file. It should append to it. Perhaps another option could control this behavior.""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-9544","11/02/2017 15:57:02",2,"Capability to monitor all processes on Windows ""Curator has the capability ot monitor all processes on Linux using      For Windows this cannot be done. It would be better having a new option to monitor all processes, perhaps {{curator stat process --all-pid}}.""","  curator stat process-tree --pid 1  ",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-2297","11/02/2017 20:32:25",1,"race-agent failures ""h2. [race-agent failed on race-detector|https://evergreen.mongodb.com/task/mci_race_detector_race_agent_8d1cd0f9dbb7a744edbb9cdc1a379f8cf59a85db_17_11_02_18_25_58/0]    Host: [ec2-54-221-151-108.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-wm9r7w3h]  Project: [mci|https://evergreen.mongodb.com/waterfall/mci]    *TestAgentSuite* - [Logs|] | [History|https://evergreen.mongodb.com/task_history/mci/race-agent#TestAgentSuite=fail]    *TestAgentEndTaskShouldExit* - [Logs|] | [History|https://evergreen.mongodb.com/task_history/mci/race-agent#TestAgentEndTaskShouldExit=fail]    *TestAgentSuite* - [Logs|] | [History|https://evergreen.mongodb.com/task_history/mci/race-agent#TestAgentSuite=fail]    *TestAgentEndTaskShouldExit* - [Logs|] | [History|https://evergreen.mongodb.com/task_history/mci/race-agent#TestAgentEndTaskShouldExit=fail]    *TestAgentSuite* - [Logs|] | [History|https://evergreen.mongodb.com/task_history/mci/race-agent#TestAgentSuite=fail]    *TestAgentEndTaskShouldExit* - [Logs|] | [History|https://evergreen.mongodb.com/task_history/mci/race-agent#TestAgentEndTaskShouldExit=fail]    *TestAgentSuite* - [Logs|] | [History|https://evergreen.mongodb.com/task_history/mci/race-agent#TestAgentSuite=fail]    *TestAgentEndTaskShouldExit* - [Logs|] | [History|https://evergreen.mongodb.com/task_history/mci/race-agent#TestAgentEndTaskShouldExit=fail]    *TestAgentSuite* - [Logs|] | [History|https://evergreen.mongodb.com/task_history/mci/race-agent#TestAgentSuite=fail]    *TestAgentEndTaskShouldExit* - [Logs|] | [History|https://evergreen.mongodb.com/task_history/mci/race-agent#TestAgentEndTaskShouldExit=fail]          ~BF Ticket Generated by [~brian.samek]~  ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-2298","11/02/2017 20:56:00",1,"Some spawn hosts are not provisioning ""Debian and Amazon spawnhosts, and possibly others, are failing to provision. setup.sh is correctly being placed in the user's home directory. However, Evergreen attempts to run the setup script in _root's_ home directory. This presumably only affects spawnhosts because running the setup script uses a different code path for build hosts.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2300","11/03/2017 16:57:06",2,"monitor should flag hosts that encounter system failures more than 3 times ""we should definitely flag/report these?  potentially also be able to turn it off so we don't end up terminating hosts too often when there's a bad commit afoot. ""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-2303","11/03/2017 19:35:54",1,"race-scheduler failure ""h2. [race-scheduler failed on race-detector|https://evergreen.mongodb.com/task/mci_race_detector_race_scheduler_59a6190a0c5afed01051cd42e547adbc1d16994d_17_11_03_17_57_13/0]    Host: [ec2-54-227-88-100.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-4gsr6vqh]  Project: [mci|https://evergreen.mongodb.com/waterfall/mci]          ~BF Ticket Generated by [~john.liu]~  ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-9439","11/04/2017 22:29:33",2,"amboy queue backed grip.Sender implementation  ""let's put this in a new repo in the evergreen-ci org, as its reasonably general use.     the idea is that we want a sender that wraps a queue and sends messages as possible but gets us out of needing to use the buffered sender (which centers on a capped buffer used in combination with a message batching type,) and is not suitable for some use cases.     ""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-9579","11/04/2017 22:33:24",1,"add ability for jobs to be local-queue only ""versions set to -1 or something on the job type document""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-9507","11/06/2017 15:43:26",1,"remove level setting options from logger interface ""just set levels via the sender ""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-2307","11/06/2017 18:37:44",1,"race-rest-data failures ""h2. [race-rest-data failed on race-detector|https://evergreen.mongodb.com/task/mci_race_detector_race_rest_data_dbecd8bb7a03f60240497048299bebfa701130ae_17_11_06_17_30_06/0]    Host: [ec2-54-146-155-98.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-tp386iij]  Project: [mci|https://evergreen.mongodb.com/waterfall/mci]    *TestMockConnectorSuite* - [Logs|] | [History|https://evergreen.mongodb.com/task_history/mci/race-rest-data#TestMockConnectorSuite=fail]    *TestMockConnectorSuite* - [Logs|] | [History|https://evergreen.mongodb.com/task_history/mci/race-rest-data#TestMockConnectorSuite=fail]    *TestMockConnectorSuite* - [Logs|] | [History|https://evergreen.mongodb.com/task_history/mci/race-rest-data#TestMockConnectorSuite=fail]    *TestMockConnectorSuite* - [Logs|] | [History|https://evergreen.mongodb.com/task_history/mci/race-rest-data#TestMockConnectorSuite=fail]    *TestMockConnectorSuite* - [Logs|] | [History|https://evergreen.mongodb.com/task_history/mci/race-rest-data#TestMockConnectorSuite=fail]          ~BF Ticket Generated by [~john.liu]~  ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-9653","11/06/2017 21:59:33",1,"remote ordered queue may serialize migrations  ""maybe the queue implementation is too naive or the dependencies are too strict.  ""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-2311","11/07/2017 01:06:55",2,"Panic in monitor when running teardown script on hosts ""Nov 07 00:56:03 evergreenapp-2.build.10gen.cc evergreen[2346]: RemoteCommand(teardown-i-09abec83f62eae9cc-6037277636045730342) killing process 2575  Nov 07 00:56:03 evergreenapp-2.build.10gen.cc evergreen[2346]: panic: runtime error: invalid memory address or nil pointer dereference  Nov 07 00:56:03 evergreenapp-2.build.10gen.cc evergreen[2346]: [signal SIGSEGV: segmentation violation code=0x1 addr=0x20 pc=0x76dce9]  Nov 07 00:56:03 evergreenapp-2.build.10gen.cc evergreen[2346]: goroutine 991 [running]:  Nov 07 00:56:03 evergreenapp-2.build.10gen.cc evergreen[2346]: panic(0x15a5ba0, 0xc420012080)  Nov 07 00:56:03 evergreenapp-2.build.10gen.cc evergreen[2346]:         /opt/go/src/runtime/panic.go:500 +0x1a1  Nov 07 00:56:03 evergreenapp-2.build.10gen.cc evergreen[2346]: github.com/evergreen-ci/evergreen/monitor.runHostTeardown(0x246b0a0, 0xc420244f40, 0xc4afe97ab8, 0xc43e4ec570, 0xc4bb136630, 0xc42a764cf0)  Nov 07 00:56:03 evergreenapp-2.build.10gen.cc evergreen[2346]:         /data/mci/9641710e6fdec15649cd1d40233e0409/gopath/src/github.com/evergreen-ci/evergreen/monitor/hosts.go:206 +0x289  Nov 07 00:56:03 evergreenapp-2.build.10gen.cc evergreen[2346]: github.com/evergreen-ci/evergreen/monitor.terminateHost(0x246b0a0, 0xc420244f40, 0xc4afe97ab8, 0xc420234000, 0x180001, 0x0)  Nov 07 00:56:03 evergreenapp-2.build.10gen.cc evergreen[2346]:         /data/mci/9641710e6fdec15649cd1d40233e0409/gopath/src/github.com/evergreen-ci/evergreen/monitor/hosts.go:177 +0x3b3  Nov 07 00:56:03 evergreenapp-2.build.10gen.cc evergreen[2346]: github.com/evergreen-ci/evergreen/monitor.terminateHosts.func1.1(0xc4b78a6c00, 0x615c4d)  Nov 07 00:56:03 evergreenapp-2.build.10gen.cc evergreen[2346]:         /data/mci/9641710e6fdec15649cd1d40233e0409/gopath/src/github.com/evergreen-ci/evergreen/monitor/hosts.go:120 +0x48  Nov 07 00:56:03 evergreenapp-2.build.10gen.cc evergreen[2346]: github.com/evergreen-ci/evergreen/util.RunFunctionWithTimeout.func1(0xc43326b440, 0xc43e4ec540)  Nov 07 00:56:03 evergreenapp-2.build.10gen.cc evergreen[2346]:         /data/mci/9641710e6fdec15649cd1d40233e0409/gopath/src/github.com/evergreen-ci/evergreen/util/func.go:24 +0x27  Nov 07 00:56:03 evergreenapp-2.build.10gen.cc evergreen[2346]: created by github.com/evergreen-ci/evergreen/util.RunFunctionWithTimeout  Nov 07 00:56:03 evergreenapp-2.build.10gen.cc evergreen[2346]:         /data/mci/9641710e6fdec15649cd1d40233e0409/gopath/src/github.com/evergreen-ci/evergreen/util/func.go:25 +0x7c""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2314","11/07/2017 17:13:27",1,"TestAgentIntegrationSuite ""h2. [test-agent failed on ubuntu1604|https://evergreen.mongodb.com/task/mci_ubuntu1604_test_agent_e1bfc1f450e177ecbe3d52134c264550806c8dca_17_11_07_15_53_24/0]    Host: [ec2-54-90-171-120.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-wqyg55qg]  Project: [mci|https://evergreen.mongodb.com/waterfall/mci]    *TestAgentIntegrationSuite* - [Logs|] | [History|https://evergreen.mongodb.com/task_history/mci/test-agent#TestAgentIntegrationSuite=fail]          ~BF Ticket Generated by [~john.liu]~  ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-2316","11/07/2017 20:10:06",1,"fuzz start of runner tasksb ""so that there isn't a big hit when the runner restarts""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-2317","11/08/2017 14:32:57",1,"Missing Test Summary from Previous Test Executions ""There seems to have been a behavior change in restarting tasks introduced in the past week where the sidebar stops showing information for previous executions. I was able to reproduce this behavior in my patch builds and when manually restarting a task on mainline mongodb-master.    I've attached screenshots of a patch build that I ran last week with a before and after comparison. The side bar showed information on the 4th and 5th executions from last week. But when I restarted the task again with a 6th execution just now, test information on the 5th execution (and all other executions) disappeared.""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-2321","11/09/2017 15:19:52",2,"Remove legacy taskfind methods ""* Remove """"NoMerge"""" methods  * FindOne and FindOneOld should not merge by default  * Remove the test results field from the task struct  * Create a test results method""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2324","11/10/2017 00:17:06",1,"Tag EBS volumes ""Can we apply the same tags to EBS volumes that we do to EC2 instances?     It's very helpful for spending analysis to have tags on AWS entities that Evergreen manages, such as EC2 instances, which Evergreen launches and terminates directly. The EBS volumes attached to those instances are only used for the launched EC2 instances, but have no tags, so can't be accounted for as easily for billing-wise.""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2325","11/10/2017 15:47:21",1,"Log teardown script output ""The sys-perf project has been leaking resources recently. It appears that the teardown script isn't being called. For instance, see this [host|https://evergreen.mongodb.com/host/i-0dc091d289bd98e76]. When the host was terminated, it says the teardown script ran successfully, but there is no output from the teardown script, and it ran suspiciously fast. For reference, here's a [host|https://evergreen.mongodb.com/host/i-0d622c42b5addd18e] from last week that was successfully torn down.     This failure is causing us to leak resources, which in turn causes us to hit AWS limits on our sys-perf account, which in turn leads to purple tasks. We're having to do a lot of cleanup by hand to keep things working. ""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-9648","11/13/2017 16:15:19",2,"reduce exported surface area of amboy/queue package ""also merge in the driver package.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-2330","11/13/2017 16:51:30",1,"Evergreen CLI should not log debug messages """"","  $ evergreen get-update  [evergreen] 2017/11/13 11:47:36 [p=debug]: [command='attach.results' message='registering command']  [evergreen] 2017/11/13 11:47:36 [p=debug]: [command='attach.xunit_results' message='registering command']  [evergreen] 2017/11/13 11:47:36 [p=debug]: [command='gotest.parse_files' message='registering command']  [evergreen] 2017/11/13 11:47:36 [p=debug]: [command='json.get' message='registering command']  [evergreen] 2017/11/13 11:47:36 [p=debug]: [command='s3Copy.copy' message='registering command']  [evergreen] 2017/11/13 11:47:36 [p=debug]: [command='json.send' message='registering command']  [evergreen] 2017/11/13 11:47:36 [p=debug]: [command='keyval.inc' message='registering command']  [evergreen] 2017/11/13 11:47:36 [p=debug]: [command='shell.exec' message='registering command']  [evergreen] 2017/11/13 11:47:36 [p=debug]: [command='setup.initial' message='registering command']  [evergreen] 2017/11/13 11:47:36 [p=debug]: [command='archive.targz_pack' message='registering command']  [evergreen] 2017/11/13 11:47:36 [p=debug]: [command='archive.targz_unpack' message='registering command']  [evergreen] 2017/11/13 11:47:36 [p=debug]: [command='expansions.update' message='registering command']  [evergreen] 2017/11/13 11:47:36 [p=debug]: [command='git.apply_patch' message='registering command']  [evergreen] 2017/11/13 11:47:36 [p=debug]: [command='json.get_history' message='registering command']  [evergreen] 2017/11/13 11:47:36 [p=debug]: [command='s3.put' message='registering command']  [evergreen] 2017/11/13 11:47:36 [p=debug]: [command='shell.cleanup' message='registering command']  [evergreen] 2017/11/13 11:47:36 [p=debug]: [command='shell.track' message='registering command']  [evergreen] 2017/11/13 11:47:36 [p=debug]: [command='expansions.fetch_vars' message='registering command']  [evergreen] 2017/11/13 11:47:36 [p=debug]: [command='git.get_project' message='registering command']  [evergreen] 2017/11/13 11:47:36 [p=debug]: [command='manifest.load' message='registering command']  [evergreen] 2017/11/13 11:47:36 [p=debug]: [command='s3.get' message='registering command']  Binary is already up to date at revision 2017-09-14 - not updating.  ",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2332","11/13/2017 19:04:12",1,"Cannot apply patch that deletes binary file ""I deleted some files, including a binary file called """"paper\-100k.pdf"""", and submitted the change for a patch test with """"evergreen patch \-\- \-\-binary"""":    https://evergreen.mongodb.com/task/mongo_c_driver_releng_link_with_cmake_mac_patch_760dbf8f60306dd4775c1690d3f1936b03431efe_5a09d242c9ec446c07006e6e_17_11_13_17_11_30    It logs:    ... and proceeds to test the unpatched source.""","   [2017/11/13 12:27:03.680] git reset --hard '760dbf8f60306dd4775c1690d3f1936b03431efe'   [2017/11/13 12:27:03.759] git apply --check --whitespace=fix '/var/folders/9t/3_c20f0d03b063ys2_vyvk_c0000gm/T/mcipatch_093536943'   [2017/11/13 12:27:03.822] error: patch failed: src/snappy-1.1.3/testdata/paper-100k.pdf:1   [2017/11/13 12:27:03.822] error: src/snappy-1.1.3/testdata/paper-100k.pdf: patch does not apply   [2017/11/13 12:27:03.840] mongoc  HEAD is now at 760dbf8 CDRIVER-2331 implement delete_one/many   [2017/11/13 12:27:03.840] cd mongoc; git reset --hard 760dbf8f60306dd4775c1690d3f1936b03431efe   [2017/11/13 12:27:03.840] HEAD is now at 760dbf8 CDRIVER-2331 implement delete_one/many   [2017/11/13 12:27:03.840] Command failed: Failed to apply patch: exit status 1   [2017/11/13 12:27:03.840] Running command 'git.apply_patch' in """"fetch source"""" (step 1.2 of 5)   [2017/11/13 12:27:03.840] git.apply_patch is deprecated. Patches are applied in git.get_project.  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-9395","11/14/2017 15:11:35",1,"ConvertToComposer does not set log level on a fieldMessage on calls after the first ""We are logging startHosts success messages at Error but should be logging them at Info.    https://github.com/evergreen-ci/evergreen/blob/master/hostinit/runner.go#L84 has the side effect of setting the message type to Error even though it doesn't log, so when the next line runs, it logs at the Error level even though it should lot at Info.    I think this is because fieldMessage.setup() sets the metadata field to &Base only if it is not already set https://github.com/mongodb/grip/blob/master/message/fields.go#L117. As a result, ConvertToComposer, which is called by all *When methods even if they noop, only sets the level of a fieldMessage the first time it runs.""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-2335","11/14/2017 18:29:05",1,"Hosts that fail to provision do not have logs to explain why ""E.g., https://evergreen.mongodb.com/host/sir-82qr4fyk""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2341","11/15/2017 23:27:41",1,"run longer tasks first ""all other things being equal, this should shorten makespan""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2342","11/16/2017 16:35:37",2,"remove unreachable static hosts from host pool  ""seems reasonable to quarantine unreachable hosts to prevent putting pressure on the taskrunner until we can increase the taskrunner capacity.""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2343","11/16/2017 16:57:03",2,"unschedule tasks older than a threshold ""to avoid forcing the scheduler to continually reconsider tasks that are underwater?    we should define an underwater threshold, but one or two weeks is probably correct. ""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2355","11/17/2017 21:44:27",1,"logkeeper app logging improvements ""- slack  - panic handlers""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2349","11/19/2017 22:42:24",1,"reduce taskrunner alert frequency.  ""- alert only if a host fails 5 times in a row.   - provide more context about an alert (provider/distro)   ""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2350","11/20/2017 14:04:09",2,"expand scope of host event log ""- queries/helpers to support: last n host events in order (by kind).  - query to support: events (in order) in the last time period.  - add event logs connectivity issues.  - add event logs taskrunner errors.  ""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2352","11/20/2017 16:15:35",1,"task_lifecycle.go incorrectly calculates that build is ""finished"" when 1 task remains ""I observed via the v2 build endpoint that when a build still has 1 task remaining, it believes that all tasks are complete and therefore calculates the finished time, make span, etc. This might be effecting the experience in the UI but is definitely confusing api users. The suspect line of code is here:    https://github.com/evergreen-ci/evergreen/blob/9dd90b01cda9824688c287408a680901db0d60a1/model/task_lifecycle.go#L459    ""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2354","11/20/2017 21:53:29",2,"Tooltips + filtering not working on history page ""As an example, if you look at this page:    https://evergreen.mongodb.com/task_history/mongodb-mongo-master/noPassthrough_WT#/backup_restore_stop_start.js=fail&buildVariants=    Hovering over failing tasks does not show the failing tests in the tooltip.  In addition, the filter on the right side of the page no longer works.    While not a blocker, this is still a pretty bad one for us.""","",0,1,0,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-2359","11/28/2017 19:50:49",1,"Misconfigured (?) alerts can cause API server to panic ""{     """"action"""":""""aborted"""",     """"duration"""":99758786,     """"metadata"""":{        """"level"""":80,        """"hostname"""":""""evergreenapp-3.build.10gen.cc"""",        """"time"""":""""2017-11-28T19:06:30.279939625Z"""",        """"process"""":""""/srv/evergreen/current/clients/linux_amd64/evergreen"""",        """"pid"""":23697     },     """"panic"""":""""invalid memory address or nil pointer dereference"""",     """"path"""":""""/api/2/task/mms_e2e_local_with_daemon_E2E_Local_ATM_GSSAPI_Auth_39af01bba94eb8e94d772555ee352baf2bfe88b0_17_11_28_15_38_10/end"""",     """"request"""":317538,     """"span"""":""""99.759063ms"""",     """"stack"""":{        """"message"""":""""[runtime/asm_amd64.s:510] """",        """"frames"""":[           {              """"function"""":""""runtime.call64"""",              """"file"""":""""/usr/lib/go/src/runtime/asm_amd64.s"""",              """"line"""":510           },           {              """"function"""":""""runtime.gopanic"""",              """"file"""":""""/usr/lib/go/src/runtime/panic.go"""",              """"line"""":491           },           {              """"function"""":""""runtime.panicmem"""",              """"file"""":""""/usr/lib/go/src/runtime/panic.go"""",              """"line"""":63           },           {              """"function"""":""""runtime.sigpanic"""",              """"file"""":""""/usr/lib/go/src/runtime/signal_unix.go"""",              """"line"""":367           },           {              """"function"""":""""github.com/evergreen-ci/evergreen/alerts.TaskFailTransition.ShouldExecute"""",              """"file"""":""""/home/tychoish/goprojects/src/github.com/evergreen-ci/evergreen/alerts/project_triggers.go"""",              """"line"""":157           },           {              """"function"""":""""github.com/evergreen-ci/evergreen/alerts.(*TaskFailTransition).ShouldExecute"""",              """"file"""":""""\u003cautogenerated\u003e"""",              """"line"""":1           },           {              """"function"""":""""github.com/evergreen-ci/evergreen/alerts.getActiveTaskFailureTriggers"""",              """"file"""":""""/home/tychoish/goprojects/src/github.com/evergreen-ci/evergreen/alerts/alerts_activation.go"""",              """"line"""":159           },           {              """"function"""":""""github.com/evergreen-ci/evergreen/alerts.RunTaskFailureTriggers"""",              """"file"""":""""/home/tychoish/goprojects/src/github.com/evergreen-ci/evergreen/alerts/alerts_activation.go"""",              """"line"""":57           },           {              """"function"""":""""github.com/evergreen-ci/evergreen/service.(*APIServer).EndTask"""",              """"file"""":""""/home/tychoish/goprojects/src/github.com/evergreen-ci/evergreen/service/api_task.go"""",              """"line"""":174           },           {              """"function"""":""""github.com/evergreen-ci/evergreen/service.(*APIServer).EndTask-fm"""",              """"file"""":""""/home/tychoish/goprojects/src/github.com/evergreen-ci/evergreen/service/api.go"""",              """"line"""":768           },           {              """"function"""":""""github.com/evergreen-ci/evergreen/service.(*APIServer).checkHost.func1"""",              """"file"""":""""/home/tychoish/goprojects/src/github.com/evergreen-ci/evergreen/service/api.go"""",              """"line"""":259           },           {              """"function"""":""""github.com/evergreen-ci/evergreen/service.(*APIServer).checkTask.func1"""",              """"file"""":""""/home/tychoish/goprojects/src/github.com/evergreen-ci/evergreen/service/api.go"""",              """"line"""":170           },           {              """"function"""":""""net/http.HandlerFunc.ServeHTTP"""",              """"file"""":""""/usr/lib/go/src/net/http/server.go"""",              """"line"""":1918           },           {              """"function"""":""""github.com/evergreen-ci/evergreen/vendor/github.com/gorilla/mux.(*Router).ServeHTTP"""",              """"file"""":""""/home/tychoish/goprojects/src/github.com/evergreen-ci/evergreen/vendor/github.com/gorilla/mux/mux.go"""",              """"line"""":114           },           {              """"function"""":""""github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni.Wrap.func1"""",              """"file"""":""""/home/tychoish/goprojects/src/github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni/negroni.go"""",              """"line"""":46           },           {              """"function"""":""""github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni.HandlerFunc.ServeHTTP"""",              """"file"""":""""/home/tychoish/goprojects/src/github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni/negroni.go"""",              """"line"""":29           },           {              """"function"""":""""github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni.middleware.ServeHTTP"""",              """"file"""":""""/home/tychoish/goprojects/src/github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni/negroni.go"""",              """"line"""":38           },           {              """"function"""":""""github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni.(middleware).ServeHTTP-fm"""",              """"file"""":""""/home/tychoish/goprojects/src/github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni/negroni.go"""",              """"line"""":38           },           {              """"function"""":""""github.com/evergreen-ci/evergreen/service.UserMiddleware.func1"""",              """"file"""":""""/home/tychoish/goprojects/src/github.com/evergreen-ci/evergreen/service/middleware.go"""",              """"line"""":399           },           {              """"function"""":""""github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni.HandlerFunc.ServeHTTP"""",              """"file"""":""""/home/tychoish/goprojects/src/github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni/negroni.go"""",              """"line"""":29           },           {              """"function"""":""""github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni.middleware.ServeHTTP"""",              """"file"""":""""/home/tychoish/goprojects/src/github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni/negroni.go"""",              """"line"""":38           },           {              """"function"""":""""github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni.(middleware).ServeHTTP-fm"""",              """"file"""":""""/home/tychoish/goprojects/src/github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni/negroni.go"""",              """"line"""":38           },           {              """"function"""":""""github.com/evergreen-ci/evergreen/service.(*RecoveryLogger).ServeHTTP"""",              """"file"""":""""/home/tychoish/goprojects/src/github.com/evergreen-ci/evergreen/service/middleware.go"""",              """"line"""":472           },           {              """"function"""":""""github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni.middleware.ServeHTTP"""",              """"file"""":""""/home/tychoish/goprojects/src/github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni/negroni.go"""",              """"line"""":38           },           {              """"function"""":""""github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni.(*Negroni).ServeHTTP"""",              """"file"""":""""/home/tychoish/goprojects/src/github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni/negroni.go"""",              """"line"""":86           },           {              """"function"""":""""net/http.serverHandler.ServeHTTP"""",              """"file"""":""""/usr/lib/go/src/net/http/server.go"""",              """"line"""":2619           },           {              """"function"""":""""net/http.(*conn).serve"""",              """"file"""":""""/usr/lib/go/src/net/http/server.go"""",              """"line"""":1801           },           {              """"function"""":""""runtime.goexit"""",              """"file"""":""""/usr/lib/go/src/runtime/asm_amd64.s"""",              """"line"""":2337           }        ],        """"time"""":""""2017-11-28T19:06:30.279914551Z""""     }  }""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2360","11/28/2017 20:48:25",2,"JUnit parser omits errors in tests ""When the JUnit was parsed from https://evergreen.mongodb.com/task/mms_unit_java_UNIT_JAVA_MMS_patch_b13b9850dc1d66bb326b41c893b416446bcaaada_5a1db5ece3c3315c910004c4_17_11_28_19_15_56 - the error in {{com.xgen.svc.mms.svc.deployment.DeploymentDiffSvcUnitTests}} was not found.     See attached XML file.     If a JUnit file has {{errors>0}} in the {{<testsuite>}} block, then EVG must mark the test as failed and include the text from the {{<error>}} element for the reason.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2362","11/29/2017 16:00:32",1,"Add parameter to expansions.update to ignore missing file ""The command {{expansions.update}} is used to update the expansion macros based on YML file. Sometimes this is done conditionally that the YML file may or may not be created. In this case the update fails, Perhaps a param could be added to suppress the error if the YML {{file}} does not exist.    This is the case where it would be useful to have:  {code}    """"copy EC2 artifacts"""":      - command: shell.exec        params:          shell: bash          working_dir: src          script: |            if [ -z """"${ec2_artifacts}"""" ]; then              exit 0            fi            ...      - command: expansions.update        params:          file: src/${aws_ec2_yml}  {code}    The function {{""""copy EC2 artifacts""""}} is invoked, but only should continue under certain conditions. Maybe an alternate method is to exit the function early, but I do not know how that can be done in {{evergreen.yml}}    Resulting output:    ""","    """"copy EC2 artifacts"""":      - command: shell.exec        params:          shell: bash          working_dir: src          script: |            if [ -z """"${ec2_artifacts}"""" ]; then              exit 0            fi            ...      - command: expansions.update        params:          file: src/${aws_ec2_yml}    [2017/11/29 10:13:09.130] Running command 'expansions.update' in """"copy EC2 artifacts"""" (step 2.2 of 33)  [2017/11/29 10:13:09.130] Updating expansions with keys from file: src/  [2017/11/29 10:13:09.130] Command failed: read /data/mci/bbdeae674b4db3eb5d4989b897658e52/src: is a directory  ",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-9403","12/01/2017 16:01:52",1,"configure socket timeout in anserdb interface ""might make sense to also set this by default in the migration app to something reasonable? ""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-9353","12/01/2017 16:02:46",2,"rate limiting pool smoke test suite ""- expand coverage  - improve logging    (anecdotally it appears to not be working""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-2387","12/04/2017 16:47:29",2,"Look into why JIRA tickets were created for ops alerts over the weekend ""The two alerts:    Host: sles12-z-2.maristisv.build.10gen.cc  Distro: suse12-zseries-test  jira_error  ----------------  jira authentication error: Auth at JIRA instance failed (HTTP(S) request). Post /rest/auth/1/session: unsupported protocol scheme    and    Host: sles12-z-1.maristisv.build.10gen.cc  Distro: suse12-zseries-build  jira_error  ----------------  jira authentication error: Auth at JIRA instance failed (HTTP(S) request). Post /rest/auth/1/session: unsupported protocol scheme""","",0,0,0,0,0,0,0,1,0,1,0,0,0,0,0
"EVG-2389","12/06/2017 20:46:49",2,"Expansions update caused files to not be found after deploy ""See https://evergreen.mongodb.com/task/sqlproxy_full_matrix__os_full_matrix~windows_mongodb_version~latest_mongodb_topology~standalone_tdvt_patch_9a4997e9cd86d24ef206b8c0b29e5ccc6340b567_5a285085c9ec4467ae0000b9_17_12_06_20_18_14/0#/%23%257B%2522compare%2522%253A%255B%257B%2522hash%2522%253A%25229a4997e9cd86d24ef206b8c0b29e5ccc6340b567%2522%257D%255D%257D#%257B%2522compare%2522%253A%255B%257B%2522hash%2522%253A%25229a4997e9cd86d24ef206b8c0b29e5ccc6340b567%2522%257D%255D%257D""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2398","12/11/2017 17:44:49",1,"Logkeeper logs some messages at too high a level ""We should investigate and change them to the appropriate levels""","",0,0,1,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-2400","12/11/2017 21:12:44",2,"update vendored migration tools ""- revendor amboy and anser   - update migrations entry point to use new application structure   - add new command for command line?  - import any local changes to the migration utility ""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2401","12/11/2017 23:19:10",2,"simple.exec command ""no shell just:  - working directory,   - envvar   - args that we run shlex split on.""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2402","12/11/2017 23:56:12",2,"add flag to files structure for filtering download ""- the default should be to download the file.  - name: """"ignore_for_reproduction"""" ""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2404","12/11/2017 23:59:12",2,"new attach.resources command ""- should work like attach.results,  - allow file globbing,   - use existing attach artifacts results. ""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2407","12/13/2017 17:15:05",1,"archive.targz_unpack cannot find file ""{{ls}} confirms the file is present, and yet:      I don't see any cases of anyone actually using this command, so it's possible it's been broken for a while, but no one has noticed, or I may be using it incorrectly. I noticed this when I was trying to use the command in EVG-2377.    We should probably add it to the smoke test when it's fixed.""","  Command failed: error opening tar file archive.tgz for reading: open archive.tgz: no such file or directory  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-9545","12/13/2017 17:58:40",1,"Add githash to curator version ""Print the githash as part of the curator version when {{--version}} is specified.""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-2408","12/13/2017 18:19:37",2,"Extend Rest v2 API to include patch alias ""Extend patches to include """"Alias"""". The __github alias indicates use of github pull request testing.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-9678","12/13/2017 20:55:01",2,"grip.message.CollectAllProcesses() is slow on OS X 10.12 ""CollectAllProcesses() can take ~32 seconds to get list of running processes.    See https://evergreen.mongodb.com/task/mci_osx_test_command_ac87c5d1aed2ec4a80f93b992e5c3e53c11427d2_17_12_12_17_01_28    Log from test on My computer:   rsamuels ÓÇ∞ ‚ãØ ÓÇ± github.com ÓÇ± evergreen-ci ÓÇ± evergreen ÓÇ∞ make test-command RUN_TEST=""""TestShellExecuteCommand/TestCancellingContextShouldCancelCommand"""" RUN_COUNT=50  go test -ldflags=""""-w -s -X=github.com/evergreen-ci/evergreen.BuildRevision=a82e9e00278d27efcea7b509e3663798bbd4939c"""" -c -o bin/test.command ./command  EVGHOME=/Users/rsamuels/go/src/github.com/evergreen-ci/evergreen SETTINGS_OVERRIDE=/Users/rsamuels/mongo/creds.yml ./bin/test.command -test.v -test.run='TestShellExecuteCommand/TestCancellingContextShouldCancelCommand' -test.count='50' -test.timeout=10m 2>&1 | tee bin/output.command.test  === RUN   TestShellExecuteCommand  === RUN   TestShellExecuteCommand/TestCancellingContextShouldCancelCommand  --- PASS: TestShellExecuteCommand (30.61s)      --- PASS: TestShellExecuteCommand/TestCancellingContextShouldCancelCommand (30.60s)  === RUN   TestShellExecuteCommand  === RUN   TestShellExecuteCommand/TestCancellingContextShouldCancelCommand  --- PASS: TestShellExecuteCommand (31.17s)      --- PASS: TestShellExecuteCommand/TestCancellingContextShouldCancelCommand (31.17s)  === RUN   TestShellExecuteCommand  === RUN   TestShellExecuteCommand/TestCancellingContextShouldCancelCommand  --- PASS: TestShellExecuteCommand (31.23s)      --- PASS: TestShellExecuteCommand/TestCancellingContextShouldCancelCommand (31.22s)  === RUN   TestShellExecuteCommand  === RUN   TestShellExecuteCommand/TestCancellingContextShouldCancelCommand  --- PASS: TestShellExecuteCommand (31.87s)      --- PASS: TestShellExecuteCommand/TestCancellingContextShouldCancelCommand (31.87s)  === RUN   TestShellExecuteCommand  === RUN   TestShellExecuteCommand/TestCancellingContextShouldCancelCommand  --- PASS: TestShellExecuteCommand (32.11s)      --- PASS: TestShellExecuteCommand/TestCancellingContextShouldCancelCommand (32.11s)  === RUN   TestShellExecuteCommand  === RUN   TestShellExecuteCommand/TestCancellingContextShouldCancelCommand  --- PASS: TestShellExecuteCommand (31.22s)      --- PASS: TestShellExecuteCommand/TestCancellingContextShouldCancelCommand (31.22s)  === RUN   TestShellExecuteCommand  === RUN   TestShellExecuteCommand/TestCancellingContextShouldCancelCommand  --- PASS: TestShellExecuteCommand (32.12s)      --- PASS: TestShellExecuteCommand/TestCancellingContextShouldCancelCommand (32.12s)  === RUN   TestShellExecuteCommand  === RUN   TestShellExecuteCommand/TestCancellingContextShouldCancelCommand  --- PASS: TestShellExecuteCommand (31.69s)      --- PASS: TestShellExecuteCommand/TestCancellingContextShouldCancelCommand (31.69s)  === RUN   TestShellExecuteCommand  === RUN   TestShellExecuteCommand/TestCancellingContextShouldCancelCommand  --- PASS: TestShellExecuteCommand (31.83s)      --- PASS: TestShellExecuteCommand/TestCancellingContextShouldCancelCommand (31.83s)  === RUN   TestShellExecuteCommand  === RUN   TestShellExecuteCommand/TestCancellingContextShouldCancelCommand  --- PASS: TestShellExecuteCommand (30.88s)      --- PASS: TestShellExecuteCommand/TestCancellingContextShouldCancelCommand (30.87s)  === RUN   TestShellExecuteCommand  === RUN   TestShellExecuteCommand/TestCancellingContextShouldCancelCommand  --- PASS: TestShellExecuteCommand (31.98s)      --- PASS: TestShellExecuteCommand/TestCancellingContextShouldCancelCommand (31.98s)  === RUN   TestShellExecuteCommand  === RUN   TestShellExecuteCommand/TestCancellingContextShouldCancelCommand  --- PASS: TestShellExecuteCommand (31.78s)      --- PASS: TestShellExecuteCommand/TestCancellingContextShouldCancelCommand (31.77s)  === RUN   TestShellExecuteCommand  === RUN   TestShellExecuteCommand/TestCancellingContextShouldCancelCommand  --- PASS: TestShellExecuteCommand (31.94s)      --- PASS: TestShellExecuteCommand/TestCancellingContextShouldCancelCommand (31.94s)  === RUN   TestShellExecuteCommand  === RUN   TestShellExecuteCommand/TestCancellingContextShouldCancelCommand  --- PASS: TestShellExecuteCommand (32.67s)      --- PASS: TestShellExecuteCommand/TestCancellingContextShouldCancelCommand (32.66s)  === RUN   TestShellExecuteCommand  === RUN   TestShellExecuteCommand/TestCancellingContextShouldCancelCommand  --- PASS: TestShellExecuteCommand (32.44s)      --- PASS: TestShellExecuteCommand/TestCancellingContextShouldCancelCommand (32.44s)  === RUN   TestShellExecuteCommand  === RUN   TestShellExecuteCommand/TestCancellingContextShouldCancelCommand  --- PASS: TestShellExecuteCommand (33.81s)      --- PASS: TestShellExecuteCommand/TestCancellingContextShouldCancelCommand (33.80s)  === RUN   TestShellExecuteCommand  === RUN   TestShellExecuteCommand/TestCancellingContextShouldCancelCommand  --- PASS: TestShellExecuteCommand (34.15s)      --- PASS: TestShellExecuteCommand/TestCancellingContextShouldCancelCommand (34.15s)  === RUN   TestShellExecuteCommand  === RUN   TestShellExecuteCommand/TestCancellingContextShouldCancelCommand  --- PASS: TestShellExecuteCommand (34.45s)      --- PASS: TestShellExecuteCommand/TestCancellingContextShouldCancelCommand (34.45s)  === RUN   TestShellExecuteCommand  === RUN   TestShellExecuteCommand/TestCancellingContextShouldCancelCommand  panic: test timed out after 10m0s""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-9376","12/13/2017 22:21:16",1,"Time from ""curator stat"" on Windows is incorrect ""The time reported by curator for {{stat}} is incorrect, and always the same on Windows:  ""","  """"metadata"""":{""""level"""":40,""""time"""":""""0001-01-01T00:00:00Z""""}  ",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-2410","12/13/2017 23:05:07",1,"Smoke test failing due to address already in use ""    https://evergreen.mongodb.com/task_log_raw/mci_ubuntu1604_smoke_test_783f92be62e7d0877d86e2d0bc80f498b853b328_17_12_13_22_42_43/1?type=T&text=true""","  [2017/12/13 17:59:26.704] [web.service] 2017/12/13 22:59:26 [p=trace]: listen tcp :8080: bind: address already in use  [2017/12/13 17:59:26.704] [web.service] 2017/12/13 22:59:26 [p=trace]: listen tcp :9090: bind: address already in use  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-9341","12/14/2017 22:26:51",2,"Curator cannot write to an existing file ""I am using the following command. When issuing it a second time (after the file has been closed (system rebooted), it fails to write to the file and provides the result to stdout.      Resulting output:  ""","  ./curator stat system --file system.json    [curator.stats]2017/12/14 17:24:15 logging error: write system.json: bad file descriptor  ",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-2417","12/14/2017 22:53:12",2,"new manifests should populate the branch field  ""they use the project rather than the project_ref.     in service/api_plugin_manifest.go""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2423","12/18/2017 15:21:24",2,"Smoke test should load data itself instead of doing it in bash in self-tests.yml ""This will also allow us to generate the agent secret dynamically.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2451","12/19/2017 20:16:10",2,"improve handling of logging errors ""particularly around the deco-host alert""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-2436","12/20/2017 14:48:04",1,"Large display tasks have some visual issues ""https://evergreen-staging.corp.mongodb.com/task/mci_race_detector_display_lint_patch_0cc8e73995b8c9ea86632b8cb97de262b76c502e_5a3999f59dbe32091a00000a_17_12_19_23_00_25""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-2438","12/20/2017 16:19:16",5,"Improved performance chart analysis by controlling y axis range and scale ""In order to make it easier to for engineers to analyze charts, it would be helpful to be able to toggle the y-axis to control:  1. Linear vs Logarithmic scale  2. Origin (0) based vs Zoomed in    Acceptance Criteria:  1. Ability to toggle linear vs logarithmic on performance chart page that will update all charts  2. Ability to toggle Origin vs Zoomed In for y-axis starting off point  3. Preference are maintained for the duration of the session  4. Default is Linear, Zoomed  5. Toggle should float so you can access it anywhere (regardless of scrolling)""","",0,1,0,0,0,0,0,0,0,0,1,1,0,0,0
"EVG-2439","12/20/2017 16:31:10",2,"Queries in model/scheduler_stats.go should skip display tasks ""These queries rely on task metadata (like scheduled and started) that are not set for display tasks.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2440","12/20/2017 16:38:12",2,"Finishing a display task causes visual bug for its box ""https://evergreen.mongodb.com/task/mci_race_detector_display_lint_bff5658ca3ec9e21b1e84b63bc909d3c0ad924e8_17_12_20_16_29_50      {     """"id"""" : """"mci_race_detector_dist_bff5658ca3ec9e21b1e84b63bc909d3c0ad924e8_17_12_20_16_29_50"""",     """"d"""" : """"dist"""",     """"s"""" : """"failed"""",     """"ed"""" : {      """"status"""" : """"failed"""",      """"type"""" : """"test"""",      """"desc"""" : """"'shell.exec' in \""""run-make\""""""""     },     """"st"""" : ISODate(""""2017-12-20T16:33:50.946Z""""),     """"tt"""" : NumberLong(""""60353534749""""),     """"a"""" : true    },""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-2444","12/20/2017 19:48:31",1,"Specify --index in git apply for patch builds ""This would allow us to be able to apply patches from the {{.gitmodules}} file. See an example build here where we currently do not do this and fail a patch because of it https://evergreen.mongodb.com/task/stitch_ios_sdk_linux_64_run_tests_patch_aebe6ea5306136c6a284ddc6bfd7bcb0968fbfb1_5a39c1dfe3c33112c4001acc_17_12_20_01_50_23.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2446","12/21/2017 03:07:13",1,"fix and reenable underwater task pruning ""we turned it off with a feature flag, because the query is backwards. ""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-2447","12/21/2017 15:31:01",1,"Remove size field from distro mount points ""We do not use this field, and it is not supported by aws-sdk-go. After EVG-2416, we should remove this field from the UI.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-2450","12/24/2017 02:21:52",2,"make subprocess.Command implementations private ""it looks like we mostly use the literal constructors, which we'll need to replace.     additionally the ssh and scp implementations can be refactored and simplified given the use of the CommandContext constructor. ""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-2453","12/27/2017 16:07:06",1,"Sorting by time taken on Evergreen task page doesn't sort correctly ""For example, see https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_osx_1010_mmapv1_jstestfuzz_replication_resync_3949ed24bfe7e936384120a785c1e6ad627bc1bd_17_12_13_03_41_35/0.    !Screen Shot 2017-12-27 at 10.52.42 AM.png|thumbnail!    In https://evergreen.mongodb.com/task/mongodb_mongo_v3.6_enterprise_osx_1010_mmapv1_replica_sets_initsync_jscore_passthrough_b5cdf38ac7a01e4abd519d8a8019c47cfaf8b7e0_17_12_18_21_19_09/0, {{views_all_commands.js}} ran for 23 minutes, but appears towards the bottom.    !Screen Shot 2017-12-27 at 10.55.49 AM.png|thumbnail!""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-2456","12/27/2017 21:33:04",2,"Something set a task to priority to < 0 ""This caused the task to show status """"Blacklisted"""". Since this is not possible to set with the UI, something set this task to have a negative priority. Setting the priority via the UI to non-negative fixed this particular task, but we should figure out what set this priority.    https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_rhel_62_64_bit_sharding_jscore_passthrough_WT_patch_43b1a2984a4c7b9d1fbc9e4d0d6596c6f626ffda_5a43de53e3c33137e1004d18_17_12_27_17_55_10""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2457","12/28/2017 19:56:43",1,"scripts/all_configs.go is broken ""    Most likely because evergreen/cli was removed in https://github.com/evergreen-ci/evergreen/commit/01ee03317c369b5663637be7dda2891bd3c7fc2b""","$ go build scripts/all_configs.go  scripts/all_configs.go:21:2: cannot find package """"github.com/evergreen-ci/evergreen/cli"""" in any of:  ....",0,0,0,0,0,0,1,0,0,1,0,0,0,0,0
"EVG-2461","12/29/2017 16:31:07",1,"Add degraded mode flag to prevent CLI from updating ""For cases where we know the CLI is known to be broken.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2462","12/29/2017 19:21:15",1,"smoke-test-endpoints failure ""h2. [smoke-test-endpoints failed on ubuntu1604|https://evergreen.mongodb.com/task/mci_ubuntu1604_smoke_test_endpoints_0e61f0b474edc2ba483df93a1b3985786163c2ba_17_12_29_18_17_15/0]     Host: [ec2-54-92-156-27.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-8d587wmh]   Project: [mci|https://evergreen.mongodb.com/waterfall/mci]          ~BF Ticket Generated by [~brian.samek]~  ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-2463","12/29/2017 20:51:53",2,"Task page continuously requests the task logs ""When on a task page, the full task logs are requested and downloaded every few seconds by the browser.  This happens even after the task has ended and the logs no longer change.""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-2464","01/01/2018 21:12:38",2,"Automatically retry jobs that fail due to host termination ""I've investigated several test failures that turned out to be due to a host termination - for example BF-7103. It would reduce the amount of noise in the Evergreen test results if jobs that fail due to a host being terminated were automatically retried.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2473","01/02/2018 17:18:45",1,"call repotracker function in webhook handler for push events ""- in amboy job""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-2474","01/02/2018 17:19:43",2,"test-cloud failure ""h2. [race-cloud failed on race-detector|https://evergreen.mongodb.com/task/mci_race_detector_race_cloud_ca50b345db53a9eaae5f55f56e9d564d8a25a0f5_18_01_02_16_53_00/0]     Host: [ec2-54-221-22-58.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-apci7chh]   Project: [mci|https://evergreen.mongodb.com/waterfall/mci]          ~BF Ticket Generated by [~brian.samek]~  ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-2480","01/03/2018 16:07:31",1,"Rename simple.exec to subprocess.exec ""Subprocess.exec has been implemented but under another name. Since it is not yet used, we can simply rename it in the commands package.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-2482","01/03/2018 16:10:07",2,"Define generate.tasks model ""Define the model that describes the JSON document which will be passed to the generate.tasks command.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-2485","01/03/2018 16:14:38",2,"Create task_group model ""This model will be used to parse the evergreen configuration file.""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2486","01/03/2018 16:15:29",2,"Make changes to task model for task_group ""Add any task_group metadata that we will need to hold onto.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-2487","01/03/2018 16:16:24",2,"Add last_task_group field to host model ""Add a previous_task_group field. Do not change running_task, as this is used to determine if a host can be assigned a task.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-2489","01/03/2018 16:18:43",2,"Design interface for next task discovery ""This is to support 3 other tickets:    Implement a mock for next task discovery.  Implement discovering the next task for a task_group.  Implement discovering the next task for tasks not in task groups.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-2490","01/03/2018 16:23:00",2,"Implement task removal from queue ""We need to support removing a task from the middle of the queue, and determine when we will need to do this.""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2491","01/03/2018 16:24:35",1,"Implement mock for next task discovery ""Implement the interface for testing.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-2493","01/03/2018 16:29:30",2,"Implement next task discovery for tasks not in task groups ""Tasks not in a task_group are in a task_group of 1.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-2494","01/03/2018 16:31:56",2,"Modify agent GetNextTask logic to take into account task groups ""The agent needs to handle the additional data it will receive, i.e., setup and teardown logic.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-2496","01/03/2018 16:33:48",2,"Add task_group setup/teardown test logic to agent ""This setup/teardown runs before and after each task in a task_group. Certain commands, like attach.artifacts, should be illegal here.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-2497","01/03/2018 16:34:29",2,"Add timeout handler for task_group ""This will run if a task in a task group times out. If it does not exist the top-level timeout handler will run.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-2498","01/03/2018 16:35:16",2,"Change pre/post to use task_group setup/teardown handlers ""The implementation for this is that tasks not in a task_group are in a task_group of 1. The difference is that their setup and teardown is in fact pre and post.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-2505","01/03/2018 17:41:46",1,"Able to edit patch alias name to be blank ""# Create a patch alias  # Save it  # Delete the alias name field  # Save again    What should happen: Save fails with an error messages.  What actually happens: Save succeeds.""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-2507","01/03/2018 21:22:32",1,"Don't step back lint tasks ""since they take a long time and it's not that important""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2509","01/03/2018 22:58:12",1,"left nav on jscore very slow to load ""See for example: https://evergreen.mongodb.com/task/mongodb_mongo_v3.6_enterprise_rhel_62_64_bit_jsCore_a6a3056ce0833e969665380e0eca7ed2aca42742_18_01_03_21_21_01    Any jscore passthrough is similarly impacted.  Takes about 23.49s to load the left nav.  This nav is essential for identifying when a test started failing.""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-2514","01/04/2018 21:02:29",2,"Lobster line numbers should always be visible ""Since line numbers are needed for bookmarking, They should always stay on the left side of the page no matter how far you scroll to the right.""","",0,1,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-2533","01/05/2018 16:49:20",1,"hostinit should log errors at a higher level ""     if ready, err := init.IsHostReady(&h); !ready {        m := message.Fields{         """"GUID"""":    init.GUID,         """"message"""": """"host not ready for setup"""",         """"hostid"""":  h.Id,         """"DNS"""":     h.Host,         """"runner"""":  RunnerName,        }          if err != nil {         m[""""error""""] = err.Error()        }          grip.Info(m)        continue       }""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2538","01/05/2018 20:26:09",1,"UI server panics if you try to view a task execution that doesn't exist ""https://evergreen-staging.corp.mongodb.com/task/mci_race_detector_race_hostinit_959673cc5c242f1a5669171a353f8dc4bb1b9058_18_01_04_19_33_08/5    (switched to a staging link to we panic prod by clicking this)""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-2544","01/08/2018 16:28:48",1,"test-command failure ""h2. [test-command failed on ubuntu1604|https://evergreen.mongodb.com/task/mci_ubuntu1604_test_command_055bf72a82de7ae4e0551bc097a524ccd6cc654a_18_01_08_15_39_50/0]     Host: [ec2-54-144-148-137.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-mchr7t9j]   Project: [mci|https://evergreen.mongodb.com/waterfall/mci]          ~BF Ticket Generated by [~brian.samek]~  ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-2545","01/08/2018 17:24:47",2,"Expansions for Patches created by Github Pull Requests ""github_pr_number  github_org  github_repo  github_author""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-2546","01/08/2018 18:26:52",1,"test-cloud failure ""h2. [test-cloud failed on ubuntu1604|https://evergreen.mongodb.com/task/mci_ubuntu1604_test_cloud_0ecf2db50c3df64e0db5e1ccab40e016d5ff2ecc_18_01_08_17_20_28/0]     Host: [ec2-54-196-16-165.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-fm3r4jrh]   Project: [mci|https://evergreen.mongodb.com/waterfall/mci]          ~BF Ticket Generated by [~brian.samek]~  ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-2548","01/08/2018 22:07:42",2,"Write additional integration tests for new ec2 host provider ""There is currently one for spot, but not for on-demand. There may also be an opportunity to improve the spot integration test, and to add integration tests for features other than spawn.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2549","01/08/2018 22:16:28",1,"race-cloud failure ""h2. [race-cloud failed on race-detector|https://evergreen.mongodb.com/task/mci_race_detector_race_cloud_adac48ce22826cb6a33202d38184a3f3566e6bff_18_01_08_21_01_25/0]     Host: [ec2-54-211-48-14.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-46ni524k]   Project: [mci|https://evergreen.mongodb.com/waterfall/mci]          ~BF Ticket Generated by [~brian.samek]~  ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-2551","01/09/2018 14:44:12",1,"test-command failure ""h2. [test-command failed on windows|https://evergreen.mongodb.com/task/mci_windows_test_command_adac48ce22826cb6a33202d38184a3f3566e6bff_18_01_08_21_01_25/0]     Host: [ec2-54-147-219-159.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-mvci6gwj]   Project: [mci|https://evergreen.mongodb.com/waterfall/mci]          ~BF Ticket Generated by [~brian.samek]~  ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-2554","01/09/2018 15:29:26",2,"Display task in which all execution tasks are green is red ""https://evergreen.mongodb.com/task/mci_race_detector_display_lint_1d9ce86c998861e2980ea0f8cf72e950e62fee46_18_01_09_14_15_14""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2557","01/09/2018 15:50:40",1,"Display tasks should list number of execution tasks they contain ""It's not obvious in the screenshot that the lint task contains 38 tasks, of which only 37 have run. It would be nice to add the number to the """"This task contains:"""" line, like """"This task contains 38 tasks:"""".""","",0,1,0,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-2559","01/09/2018 16:47:24",1,"lint-spawn failure ""h2. [lint-spawn failed on race-detector|https://evergreen.mongodb.com/task/mci_race_detector_lint_spawn_1d9ce86c998861e2980ea0f8cf72e950e62fee46_18_01_09_14_15_14/0]     Host: [ec2-54-205-156-199.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-cg686e1h]   Project: [mci|https://evergreen.mongodb.com/waterfall/mci]          ~BF Ticket Generated by [~john.liu]~  ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-2563","01/10/2018 15:22:13",2,"lobster search malfunctions for 1-hit searches ""If you type in a search in lobster for a search string that only has one hit, you cannot subsequently redo the search.  That is, after typing the search string and clicking """"Find"""", and then scrolling the window around, you cannot then click on """"Next"""" or """"Previous"""" (or even """"Find"""") and have the window re-center on the search term again.  Instead, you must edit the search string and search for something else, and then put the original search term back in and search again.  Ideally, clicking on """"Find"""" would re-do the search.    I've also on occasion managed to gum up the searcher such that the viewport on the webpage is no longer updated.  That is, when I scroll the web page, the only text visible is the original text in the viewport, and the rest of the webpage is blank.  I'm not sure what would cause this or how to diagnose the problem (I ended up reloading the entire page to fix it.).""","",0,0,1,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-2565","01/10/2018 17:14:34",2,"Add Ability to Approve External Pull Request Patches ""WiredTiger would like the ability for an authorized internal user to approve patches from the community for running in evergreen.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-9349","01/10/2018 18:48:29",2,"message.WrapStack type  ""that can wrap a composer (or similar.) ""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-9458","01/10/2018 18:49:29",2,"make conditional logging a composer feature.  ""rather than a property of the journaling level.""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-2566","01/10/2018 18:58:54",1,"Github PR Testing Degraded Mode should not prevent status updates for running patches. ""Github status API updates should have their own degraded mode flag.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-2568","01/10/2018 20:55:07",1,"Add flag to allow individual projects to use Github webhooks to track pushes, instead of repotracker polling ""We currently poll GitHub for new commits. This is becoming unsustainable. We currently use more than 80% of our hourly GitHub wait limit. We should allow projects to opt in to using webhooks.    The repotracker runner should exclude projects with this flag enabled.""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2569","01/10/2018 20:55:52",1,"Increase infrequent runner interval to 3 minutes ""This is currently set at 2 minutes. The infrequent runners are alerts, notify, and repotracker. We need to reduce this interval because the repotracker is getting close to using up our GitHub rate limit. We hope to fix this by moving projects to EVG-2568.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-2581","01/11/2018 15:02:03",1,"Provide additional data dumps for perf visualization development ""In order for Ruslan to get a representative set of data to validate his changes, we need to get him some additional workloads. Here are the ones that are unique and currently generate bugs:    Sys Perf Core Workloads:  https://evergreen.mongodb.com/task/sys_perf_linux_3_node_replSet_core_workloads_WT_852ff9f97b6b92f5c3a88d0e070fe9c0f90ef175_17_11_30_16_44_10    Mongo Perf:  https://evergreen.mongodb.com/task/performance_linux_mmap_standalone_insert_37cb7ea09393e88662e3139bd20fa29e59f2a1a3_18_01_11_00_01_36""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-2575","01/11/2018 15:15:40",1,"race-agent failure ""h2. [race-agent failed on race-detector|https://evergreen.mongodb.com/task/mci_race_detector_race_agent_0bbb82ca2a64b921cf851aefdd213dbe6e401f7b_18_01_10_22_53_43/0]     Host: [ec2-54-163-164-130.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-1ji8764j]   Project: [mci|https://evergreen.mongodb.com/waterfall/mci]          ~BF Ticket Generated by [~john.liu]~  ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-2585","01/12/2018 21:29:37",1,"Host reachability check should not return error if context is canceled ""error:  error checking if host sir-z6fr7rxh is reachable: reachability command encountered error for sir-z6fr7rxh: signal: killed       extended:  signal: killed  github.com/evergreen-ci/evergreen/subprocess.(*remoteCmd).Run   /Users/brian/go/src/github.com/evergreen-ci/evergreen/subprocess/remote_command.go:66  github.com/evergreen-ci/evergreen/hostutil.CheckSSHResponse   /Users/brian/go/src/github.com/evergreen-ci/evergreen/hostutil/host_status.go:61  github.com/evergreen-ci/evergreen/cloud.(*ec2SpotManager).IsSSHReachable   /Users/brian/go/src/github.com/evergreen-ci/evergreen/cloud/ec2_spot.go:174  github.com/evergreen-ci/evergreen/cloud.(*CloudHost).IsSSHReachable   /Users/brian/go/src/github.com/evergreen-ci/evergreen/cloud/cloud_host.go:45  github.com/evergreen-ci/evergreen/hostinit.(*HostInit).IsHostReady   /Users/brian/go/src/github.com/evergreen-ci/evergreen/hostinit/setup.go:367  github.com/evergreen-ci/evergreen/hostinit.(*HostInit).setupReadyHosts.func1   /Users/brian/go/src/github.com/evergreen-ci/evergreen/hostinit/setup.go:223  runtime.goexit   /usr/local/Cellar/go/1.9.2/libexec/src/runtime/asm_amd64.s:2337  reachability command encountered error for sir-z6fr7rxh  github.com/evergreen-ci/evergreen/hostutil.CheckSSHResponse   /Users/brian/go/src/github.com/evergreen-ci/evergreen/hostutil/host_status.go:71  github.com/evergreen-ci/evergreen/cloud.(*ec2SpotManager).IsSSHReachable   /Users/brian/go/src/github.com/evergreen-ci/evergreen/cloud/ec2_spot.go:174  github.com/evergreen-ci/evergreen/cloud.(*CloudHost).IsSSHReachable   /Users/brian/go/src/github.com/evergreen-ci/evergreen/cloud/cloud_host.go:45  github.com/evergreen-ci/evergreen/hostinit.(*HostInit).IsHostReady   /Users/brian/go/src/github.com/evergreen-ci/evergreen/hostinit/setup.go:367  github.com/evergreen-ci/evergreen/hostinit.(*HostInit).setupReadyHosts.func1   /Users/brian/go/src/github.com/evergreen-ci/evergreen/hostinit/setup.go:223  runtime.goexit   /usr/local/Cellar/go/1.9.2/libexec/src/runtime/asm_amd64.s:2337  github.com/evergreen-ci/evergreen/cloud.(*ec2SpotManager).IsSSHReachable   /Users/brian/go/src/github.com/evergreen-ci/evergreen/cloud/ec2_spot.go:182  github.com/evergreen-ci/evergreen/cloud.(*CloudHost).IsSSHReachable   /Users/brian/go/src/github.com/evergreen-ci/evergreen/cloud/cloud_host.go:45  github.com/evergreen-ci/evergreen/hostinit.(*HostInit).IsHostReady   /Users/brian/go/src/github.com/evergreen-ci/evergreen/hostinit/setup.go:367  github.com/evergreen-ci/evergreen/hostinit.(*HostInit).setupReadyHosts.func1   /Users/brian/go/src/github.com/evergreen-ci/evergreen/hostinit/setup.go:223  runtime.goexit   /usr/local/Cellar/go/1.9.2/libexec/src/runtime/asm_amd64.s:2337  error checking if host sir-z6fr7rxh is reachable  github.com/evergreen-ci/evergreen/hostinit.(*HostInit).IsHostReady   /Users/brian/go/src/github.com/evergreen-ci/evergreen/hostinit/setup.go:369  github.com/evergreen-ci/evergreen/hostinit.(*HostInit).setupReadyHosts.func1   /Users/brian/go/src/github.com/evergreen-ci/evergreen/hostinit/setup.go:223  runtime.goexit   /usr/local/Cellar/go/1.9.2/libexec/src/runtime/asm_amd64.s:2337 ""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2586","01/12/2018 21:58:51",1,"GitHub PR testing does not appear to unschedule patches after PR is merged ""https://github.com/evergreen-ci/evergreen/pull/577""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2589","01/12/2018 22:41:37",2,"Add way to see intersection of filters, rather than union in lobster ""Currently if you have one filter active and then add another, the set of log lines returned grows - you see logs that match *any* of your active filters.  It'd be nice to add a toggle so that you could only see lines that match *all* of your active filters.""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-2590","01/16/2018 14:07:32",1,"Log manual host status changes in the event log ""I think just add usernames to log ""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2592","01/16/2018 15:44:36",1,"Increase number of system failures required to quarantine hosts from 3 to 6 ""Per in-person conversation.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-2593","01/16/2018 17:23:24",1,"test-cloud failure ""h2. [test-cloud failed on osx|https://evergreen.mongodb.com/task/mci_osx_test_cloud_2ee67df2bf21df26b8529b12ebd700c14bd39564_18_01_12_21_50_43/0]     Host: [macos-1012-46.macstadium.build.10gen.cc|https://evergreen.mongodb.com/host/macos-1012-46.macstadium.build.10gen.cc]   Project: [mci|https://evergreen.mongodb.com/waterfall/mci]          ~BF Ticket Generated by [~brian.samek]~  ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-2594","01/16/2018 17:25:58",1,"test-agent failure ""h2. [test-agent failed on osx|https://evergreen.mongodb.com/task/mci_osx_test_agent_2ee67df2bf21df26b8529b12ebd700c14bd39564_18_01_12_21_50_43/0]     Host: [macos-1012-30.macstadium.build.10gen.cc|https://evergreen.mongodb.com/host/macos-1012-30.macstadium.build.10gen.cc]   Project: [mci|https://evergreen.mongodb.com/waterfall/mci]          ~BF Ticket Generated by [~brian.samek]~  ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-2596","01/16/2018 19:28:04",0,"Clean up Evergreen CLI update routes/data structures ""Don't do this before EVG-2461 has been deployed to production for around a month. Evergreen users need enough time to update to new version, with the new api.    # Remove json metadata from evergreen.ClientConfig and it's substructures  # Remove """"/update/"""" route (as.getUpdate) from service/api.go""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2597","01/16/2018 22:02:52",1,"Unscheduled task not in queue shows itself as 1st in queue on task page ""https://evergreen.mongodb.com/task/bson_ruby_tests_special_os__special_os~rhel55_32_latest_stable_rubies~ruby_2.4.2_test_4233ec5714033dffd901b3e9dc6645aa95b2705a_18_01_16_10_00_28""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-2599","01/17/2018 11:08:07",2,"Dates displayed in the performance waterfall as the run time dates. ""The new date functionality displays the run rather than the commit date.    As a result, the date labels can be out of order (although the order of commits is still correct). ""","",0,0,1,0,0,0,0,0,0,0,1,1,0,0,0
"EVG-2601","01/17/2018 15:33:02",2,"Patch alias does not support display tasks ""- You can select part of a display task with an alias  - Selecting all tasks in a display task with an alias does not select the display task""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2602","01/17/2018 15:40:45",2,"Project aliases should use own collection ""We have code in project_aliases.go to do this already.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-2604","01/17/2018 17:58:58",1,"Spawn hosts have bad behavior when provisioning fails ""There are two problematic cases:  1. If a spawn host fails to provision, it will simply disappear from the user's page.  2. If the binary fails to fetch artifacts, the user will still receive the spawn host with missing artifacts.    Hosts fail to provision 3-5% of the time. However, with build hosts, if a host fails, we simply start another one. For spawn hosts we either do not give the user a spawn host or we give them one in a bad state. We should fix this. We could, for example, not give the user a spawn host until we are sure it is in a good state, and keep the UI element in the in progress state until then, even if we need to throw away a host that failed to provision.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2612","01/18/2018 19:43:45",1,"Taskrunner puts agent on host even though setup script failed to run ""https://evergreen.mongodb.com/host/sir-f4d86fzg""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2613","01/19/2018 14:22:47",2,"Add individual task execution data support in the REST v2 API  ""Current Behavior: When requesting task data via the /tasks or /build/xyz/tasks endpoint - only the latest task execution is provided.    Requested Behavior: When requesting task data via the /tasks or /build/xyz/tasks endpoint - either all task executions are provided or by default only the latest is provided with some option to get the whole list.    This is necessary when trying to analyze historical results from New Relic and other data ingestion frameworks.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2617","01/19/2018 16:07:15",2,"Lobster mis-colors sharded passthroughs and mongos ""All primaries are given the same color, regardless of which shard/configsvr they're from.  Ex: https://logkeeper.mongodb.org/lobster/build/657b16b8eac8676156b6eb494e1fac5a/test/5a610b6fbe07c42d9b0ce29b?bookmarks=0%2C24011""","",0,0,1,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-2618","01/19/2018 20:03:07",1,"The Lobster ""Details"" toolbar dropdown should be hidden by default ""In my workflow I find that I rarely use the tools exposed in the details drop down but have to click """"Hide Details"""" every time I launch as it is overlays log content.""","",0,1,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-2622","01/22/2018 14:26:38",1,"Attached artifacts not associating links to task ""The evergreen command {{attach.artifacts}} is not displaying the associated artifacts.    This is because the artifacts are not being associated to task (in the DB).""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-2623","01/22/2018 14:31:48",2,"Task history page doesn't highlight boxes that match test filter ""The task history page used to make the boxes larger and a different color if they matched the test filter. This isn't happening anymore and the changes from EVG-2354 don't seem to have addressed this.    https://evergreen.mongodb.com/task_history/mongodb-mongo-master/sharding_last_stable_mongos_and_mixed_shards?revision=42c264630fa1e7d5924c291a9eeac6522d70f31e#/coll_epoch_test1.js=fail""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-2624","01/22/2018 14:43:06",1,"Sorting test results by ""sequence"" causes them to display in reverse execution order ""Sorting test results by """"sequence"""" previously would sort with the first test executed by resmoke.py job #0, to the second test executed by resmoke.py job #0, ..., to the first test executed by resmoke.py job #1, etc. The test results are currently being displayed as the last test executed by resmoke.py's last job, etc.    https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_rhel_62_64_bit_sharding_last_stable_mongos_and_mixed_shards_42c264630fa1e7d5924c291a9eeac6522d70f31e_18_01_20_02_50_28#/sort=Sequence    I suspect this is fallout from the changes from [1f09198|https://github.com/evergreen-ci/evergreen/commit/1f09198b40a03f62233ea382ff8836cc7d4dc359] as part of EVG-2453, where potentially sorting by the empty string previously wouldn't respect {{reverse=true}}. I suspect it is sufficient to change [the {{reverse=true}} line|https://github.com/evergreen-ci/evergreen/blob/3a9201a2c06f318cdffb068c02569a8c12c855ee/public/static/js/task.js#L343] to {{reverse=false}} in order to restore the old behavior.""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-2634","01/23/2018 21:21:05",1,"New Cloud spot provider panics ""https://gist.github.com/bsamek/c46c94a89c76629cf97bc6d116d95816""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-9514","01/24/2018 18:34:38",2,"add time to amboy.Job ""for """"created"""" """"start after"""" time.    implementation entirely in Base.    pushed up to interchange. ""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-2637","01/24/2018 20:10:20",1,"Errors are logged for unreachable hosts """"","  { [-]       DNS:  ec2-34-228-199-71.compute-1.amazonaws.com       GUID:  dcc82768226ef6154894e2bada42fe6b       distro:  rhel62-test       error:  error checking if host sir-teqr6fnh is reachable: reachability command encountered error for sir-teqr6fnh: exit status 255       extended:  exit status 255  github.com/evergreen-ci/evergreen/subprocess.(*remoteCmd).Run   /data/mci/3214f7994cffca2c1967cb2d129fd831/gopath/src/github.com/evergreen-ci/evergreen/subprocess/remote_command.go:66  github.com/evergreen-ci/evergreen/hostutil.CheckSSHResponse   /data/mci/3214f7994cffca2c1967cb2d129fd831/gopath/src/github.com/evergreen-ci/evergreen/hostutil/host_status.go:61  github.com/evergreen-ci/evergreen/cloud.(*ec2SpotManager).IsSSHReachable   /data/mci/3214f7994cffca2c1967cb2d129fd831/gopath/src/github.com/evergreen-ci/evergreen/cloud/ec2_spot.go:174  github.com/evergreen-ci/evergreen/cloud.(*CloudHost).IsSSHReachable   /data/mci/3214f7994cffca2c1967cb2d129fd831/gopath/src/github.com/evergreen-ci/evergreen/cloud/cloud_host.go:45  github.com/evergreen-ci/evergreen/hostinit.(*HostInit).IsHostReady   /data/mci/3214f7994cffca2c1967cb2d129fd831/gopath/src/github.com/evergreen-ci/evergreen/hostinit/setup.go:369  github.com/evergreen-ci/evergreen/hostinit.(*HostInit).setupReadyHosts.func1   /data/mci/3214f7994cffca2c1967cb2d129fd831/gopath/src/github.com/evergreen-ci/evergreen/hostinit/setup.go:225  runtime.goexit   /opt/go1.8/go/src/runtime/asm_amd64.s:2197  reachability command encountered error for sir-teqr6fnh  github.com/evergreen-ci/evergreen/hostutil.CheckSSHResponse   /data/mci/3214f7994cffca2c1967cb2d129fd831/gopath/src/github.com/evergreen-ci/evergreen/hostutil/host_status.go:75  github.com/evergreen-ci/evergreen/cloud.(*ec2SpotManager).IsSSHReachable   /data/mci/3214f7994cffca2c1967cb2d129fd831/gopath/src/github.com/evergreen-ci/evergreen/cloud/ec2_spot.go:174  github.com/evergreen-ci/evergreen/cloud.(*CloudHost).IsSSHReachable   /data/mci/3214f7994cffca2c1967cb2d129fd831/gopath/src/github.com/evergreen-ci/evergreen/cloud/cloud_host.go:45  github.com/evergreen-ci/evergreen/hostinit.(*HostInit).IsHostReady   /data/mci/3214f7994cffca2c1967cb2d129fd831/gopath/src/github.com/evergreen-ci/evergreen/hostinit/setup.go:369  github.com/evergreen-ci/evergreen/hostinit.(*HostInit).setupReadyHosts.func1   /data/mci/3214f7994cffca2c1967cb2d129fd831/gopath/src/github.com/evergreen-ci/evergreen/hostinit/setup.go:225  runtime.goexit   /opt/go1.8/go/src/runtime/asm_amd64.s:2197  github.com/evergreen-ci/evergreen/cloud.(*ec2SpotManager).IsSSHReachable   /data/mci/3214f7994cffca2c1967cb2d129fd831/gopath/src/github.com/evergreen-ci/evergreen/cloud/ec2_spot.go:182  github.com/evergreen-ci/evergreen/cloud.(*CloudHost).IsSSHReachable   /data/mci/3214f7994cffca2c1967cb2d129fd831/gopath/src/github.com/evergreen-ci/evergreen/cloud/cloud_host.go:45  github.com/evergreen-ci/evergreen/hostinit.(*HostInit).IsHostReady   /data/mci/3214f7994cffca2c1967cb2d129fd831/gopath/src/github.com/evergreen-ci/evergreen/hostinit/setup.go:369  github.com/evergreen-ci/evergreen/hostinit.(*HostInit).setupReadyHosts.func1   /data/mci/3214f7994cffca2c1967cb2d129fd831/gopath/src/github.com/evergreen-ci/evergreen/hostinit/setup.go:225  runtime.goexit   /opt/go1.8/go/src/runtime/asm_amd64.s:2197  error checking if host sir-teqr6fnh is reachable  github.com/evergreen-ci/evergreen/hostinit.(*HostInit).IsHostReady   /data/mci/3214f7994cffca2c1967cb2d129fd831/gopath/src/github.com/evergreen-ci/evergreen/hostinit/setup.go:371  github.com/evergreen-ci/evergreen/hostinit.(*HostInit).setupReadyHosts.func1   /data/mci/3214f7994cffca2c1967cb2d129fd831/gopath/src/github.com/evergreen-ci/evergreen/hostinit/setup.go:225  runtime.goexit   /opt/go1.8/go/src/runtime/asm_amd64.s:2197       hostid:  sir-teqr6fnh       message:  host not ready for setup       metadata: { [+]      }       runner:  hostinit   }  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2639","01/25/2018 16:10:52",1,"Do not run reachability checks over SSH for EC2 hosts ""We should verify that the reachability check is not essential for dynamic hosts to receive a new agent. If getting/starting an agent after first launch and after agents exit does not depend on the reachability check, and if dynamic hosts will be reaped if they are idle, then we may be able to restrict reachability checks for static hosts. This will prevent us from reaping dynamic hosts due to ephemeral networking problems.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-2641","01/26/2018 16:21:35",2,"Evergreen claims Github PR patches completed in negative times "" ‚Äú31 succeeded, 1 failed, 7 other in -2562047h47m16.854775808s‚Äù    Steps:  1. Rerun failing task in a github PR patch  2. push another change.     I noticed that ubuntu1604 had several unfinished/unstarted tasks at this time, so the update for the evergreen context never should have been posted.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2642","01/26/2018 16:22:01",1,"js-test failure "" h2. [js-test failed on ubuntu1604|https://evergreen.mongodb.com/task/mci_ubuntu1604_js_test_f03f3cc35188c90c9bcbb8d086664023907acbf4_18_01_26_14_19_31/0]   Host: [ec2-34-228-162-89.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-9t187bbj]  Project: [mci|https://evergreen.mongodb.com/waterfall/mci]     ~BF Ticket Generated by [~john.liu]~ ""","",0,0,0,0,1,0,0,0,0,0,1,0,0,0,0
"EVG-2644","01/26/2018 17:18:24",1,"Use VPCs in cloud tests ""Switch to using VPC in cloud integration test and switch instance type to t2.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2651","01/28/2018 22:06:42",2,"Display tasks do not show color for previous execution in patches, task history drawer ""https://evergreen.mongodb.com/version/5a6e487ce3c3314e5c002a39  https://evergreen.mongodb.com/task/mci_race_detector_display_lint_caa84e43680cee15e7d6014f6a14eb6484c19ec6_18_01_26_22_18_28""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-2653","01/29/2018 14:53:18",1,"dist-test failure ""h2. [dist-test failed on ubuntu1604-arm64|https://evergreen.mongodb.com/task/mci_ubuntu1604_arm64_dist_test_3ae4e4d120b090ad4e258863c72e207f501acdd3_18_01_29_03_14_42/1]     Host: [ec2-107-21-12-112.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-6x6g574h]   Project: [mci|https://evergreen.mongodb.com/waterfall/mci]          ~BF Ticket Generated by [~brian.samek]~  ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-2667","01/29/2018 18:30:17",1,"Commit including a binary on GitHub fails to apply in patch ""We are beta testing the new GitHub PR to EVG patch feature, and I pushed a binary commit to an existing PR.    Unfortunately, every task that checks out our source fails with:    {{{+ git apply --stat /tmp/mcipatch_282431706  [2018/01/29 13:25:47.622] + git apply --binary --whitespace=fix --index  [2018/01/29 13:25:47.629] <stdin>:18: new blank line at EOF.  [2018/01/29 13:25:47.629] +  [2018/01/29 13:25:47.629] error: cannot apply binary patch to 'onprem-setup-setup-onprem_FAILURE.png' without full index line  [2018/01/29 13:25:47.630] error: onprem-setup-setup-onprem_FAILURE.png: patch does not apply}}    See https://evergreen.mongodb.com/version/5a6f6485c9ec447e020004f2""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2669","01/29/2018 19:19:38",1,"test-cloud failure ""h2. [test-cloud failed on ubuntu1604|https://evergreen.mongodb.com/task/mci_ubuntu1604_test_cloud_bcc0a55519c7a7d47898afdc344e71dd2aaf39fc_18_01_29_18_57_11/0]     Host: [ec2-52-91-111-249.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-zt6r7qdk]   Project: [mci|https://evergreen.mongodb.com/waterfall/mci]          ~BF Ticket Generated by [~brian.samek]~  ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-2670","01/29/2018 20:27:50",2,"Allow users to reconfigure tasks for patch builds created through GitHub PR testing ""Dependency: For Performance team, this would be useful if we can trigger sys-perf patch build (head of master) from a PR to 10gen/dsi.    In sys-perf, we have quite a few tasks and some of them run for a long time. We would like to add a couple smoke test tasks, like ycsb_short and mongoshell_short, and configure those to always be triggered automatically when one posts a PR.    But, if I know that my patch is in fact related to the initialsync_logkeeper_WT task, then I should be able to go into the patch build page and schedule that task in addition to the automatically scheduled ones. It should also be possible for a reviewer to do so. (Basically, any MongoDB Inc engineer.)    I'm torn on the question whether it should be allowed to unschedule the automatically added ones. A possible answer is that it should be allowed to do so in evergreen, but if a repo is configured to require certain tests to pass, then failing to run said tests would of course block ability to merge the PR.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2673","01/30/2018 15:37:40",1,"prevent evergreen from running empty updatealls ""or try at least ""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2675","01/30/2018 15:39:58",1,"distro page should deco hosts option has incorrect query form  ""Fix issue introduced in EVG-1128""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2676","01/30/2018 15:43:27",1,"clean up middleware  ""we have dropped support for pre-go1.7 which means we can remove some code and do some clean up""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2677","01/30/2018 15:43:28",1,"Log ""X-Cluster-Client-Ip"" header of API calls to Evergreen ""This came out of a discussion with [~cristopher.stauffer]. He had a script running against Evergreen but wasn't sure where it was running. There may be other cases where we would like the IP address of a host making API calls against Evergreen. The load balancer inserts this IP address as the """"X-Cluster-Client-Ip"""". We should include this IP address in the Splunk logs.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2690","01/30/2018 17:04:04",1,"cli host terminate ""panic: terminate flag redefined: h"" ""  ""","  [gabriel@earthshaker mongo]$ cli host  terminate i-07b2f0164fd56f35f  terminate flag redefined: h  panic: terminate flag redefined: h    goroutine 1 [running]:  flag.(*FlagSet).Var(0xc4200764e0, 0x2b95a60, 0xc42012412f, 0x1cfa546, 0x1, 0x1cfde89, 0x9)          /opt/go1.8/go/src/flag/flag.go:793 +0x420  flag.(*FlagSet).BoolVar(0xc4200764e0, 0xc42012412f, 0x1cfa546, 0x1, 0x4d0000, 0x1cfde89, 0x9)          /opt/go1.8/go/src/flag/flag.go:566 +0x70  flag.(*FlagSet).Bool(0xc4200764e0, 0x1cfa546, 0x1, 0x0, 0x1cfde89, 0x9, 0x1)          /opt/go1.8/go/src/flag/flag.go:579 +0x7f  github.com/evergreen-ci/evergreen/vendor/github.com/urfave/cli.BoolFlag.Apply.func1(0x1cfa546, 0x1)          /data/mci/ab7e25a7975a6f98a3e0a2d103064034/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/urfave/cli/flag.go:283 +0xa7  github.com/evergreen-ci/evergreen/vendor/github.com/urfave/cli.eachName(0x1cfa540, 0x7, 0xc4204f2a70)          /data/mci/ab7e25a7975a6f98a3e0a2d103064034/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/urfave/cli/flag.go:63 +0xb5  github.com/evergreen-ci/evergreen/vendor/github.com/urfave/cli.BoolFlag.Apply(0x1cfa540, 0x7, 0x1cfde89, 0x9, 0x0, 0x0, 0x0, 0x0, 0xc4200764e0)          /data/mci/ab7e25a7975a6f98a3e0a2d103064034/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/urfave/cli/flag.go:284 +0x101  github.com/evergreen-ci/evergreen/vendor/github.com/urfave/cli.(*BoolFlag).Apply(0xc42020d640, 0xc4200764e0)          <autogenerated>:21 +0x66  github.com/evergreen-ci/evergreen/vendor/github.com/urfave/cli.flagSet(0x1cfe0d2, 0x9, 0xc420133b40, 0x2, 0x2, 0xc420133b40)          /data/mci/ab7e25a7975a6f98a3e0a2d103064034/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/urfave/cli/flag.go:54 +0x7d  github.com/evergreen-ci/evergreen/vendor/github.com/urfave/cli.Command.Run(0x1cfe0d2, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1d34652, 0x1c, 0x0, ...)          /data/mci/ab7e25a7975a6f98a3e0a2d103064034/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/urfave/cli/command.go:89 +0xd6  github.com/evergreen-ci/evergreen/vendor/github.com/urfave/cli.(*App).RunAsSubcommand(0xc42009a180, 0xc4200de280, 0x0, 0x0)          /data/mci/ab7e25a7975a6f98a3e0a2d103064034/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/urfave/cli/app.go:356 +0xa1f  github.com/evergreen-ci/evergreen/vendor/github.com/urfave/cli.Command.startApp(0x1cf5fa4, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1d53564, 0x26, 0x0, ...)          /data/mci/ab7e25a7975a6f98a3e0a2d103064034/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/urfave/cli/command.go:273 +0x81b  github.com/evergreen-ci/evergreen/vendor/github.com/urfave/cli.Command.Run(0x1cf5fa4, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1d53564, 0x26, 0x0, ...)          /data/mci/ab7e25a7975a6f98a3e0a2d103064034/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/urfave/cli/command.go:74 +0x142c  github.com/evergreen-ci/evergreen/vendor/github.com/urfave/cli.(*App).Run(0xc42009a000, 0xc420010240, 0x4, 0x4, 0x0, 0x0)          /data/mci/ab7e25a7975a6f98a3e0a2d103064034/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/urfave/cli/app.go:236 +0x5d6  main.main()          /data/mci/ab7e25a7975a6f98a3e0a2d103064034/gopath/src/github.com/evergreen-ci/evergreen/main/evergreen.go:28 +0x53  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2691","01/30/2018 18:46:35",1,"periodically check to activate tasks if batchtime elapses  ""I think we need to:   - refactor out the code that checks to see if tasks need to be activated and run it in its own loop, reasonably regularly, every minute or two.)   - could do this with a very well formed amboy job. ""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2693","01/31/2018 14:58:45",2,"Finish Time is earlier than Start Time for a task ""For the given task, the finish time is before the start time. Additionally, the time taken field appears to have suffered from some rollover miscalculation and the UI does not display the time values.      https://evergreen.mongodb.com/api/rest/v2/tasks/mms_int_INT_JAVA_ATM_patch_5ea54aa42725ca59ac8952f55d54a6e41edf7c69_5a70f937e3c3317d9b001fae_18_01_30_23_01_12""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2697","01/31/2018 15:09:32",1,"Allow tasks to log their post group ""I'm adding this as a placeholder for determining how/if we should log post group commands.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-2698","01/31/2018 15:31:18",2,"Highlighted text in lobster moves when scrolling ""When you highlight text in lobster, then scroll, the highlighted selection changes.""","",0,0,1,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-2699","01/31/2018 16:57:45",1,"Agent tests are panicking on Windows ""{{{""""message"""":""""hit panic; adding error"""",""""metadata"""":{""""level"""":90,""""hostname"""":""""WIN-LMHFULM2L27"""",""""time"""":""""2018-01-31T16:40:08.8624204Z"""",""""process"""":""""C:\\data\\mci\\95573c9ad530edf932b8b7f41c654bc2\\gopath\\src\\github.com\\evergreen-ci\\evergreen\\bin\\test.agent"""",""""pid"""":5740},""""operation"""":""""running task"""",""""panic"""":""""runtime error: invalid memory address or nil pointer dereference"""",""""stack"""":{""""context"""":{""""message"""":"""""""",""""metadata"""":{""""time"""":""""0001-01-01T00:00:00Z""""}},""""frames"""":[{""""function"""":""""github.com/evergreen-ci/evergreen/agent.(*Agent).runTask.func1"""",""""file"""":""""C:/data/mci/95573c9ad530edf932b8b7f41c654bc2/gopath/src/github.com/evergreen-ci/evergreen/agent/agent.go"""",""""line"""":170},{""""function"""":""""runtime.call32"""",""""file"""":""""c:/go1.8/go/src/runtime/asm_amd64.s"""",""""line"""":514},{""""function"""":""""runtime.gopanic"""",""""file"""":""""c:/go1.8/go/src/runtime/panic.go"""",""""line"""":489},{""""function"""":""""runtime.panicmem"""",""""file"""":""""c:/go1.8/go/src/runtime/panic.go"""",""""line"""":63},{""""function"""":""""runtime.sigpanic"""",""""file"""":""""c:/go1.8/go/src/runtime/signal_windows.go"""",""""line"""":161},{""""function"""":""""github.com/evergreen-ci/evergreen/agent.(*Agent).runPostTaskCommands"""",""""file"""":""""C:/data/mci/95573c9ad530edf932b8b7f41c654bc2/gopath/src/github.com/evergreen-ci/evergreen/agent/agent.go"""",""""line"""":319},{""""function"""":""""github.com/evergreen-ci/evergreen/agent.(*Agent).finishTask"""",""""file"""":""""C:/data/mci/95573c9ad530edf932b8b7f41c654bc2/gopath/src/github.com/evergreen-ci/evergreen/agent/agent.go"""",""""line"""":274},{""""function"""":""""github.com/evergreen-ci/evergreen/agent.(*Agent).runTask"""",""""file"""":""""C:/data/mci/95573c9ad530edf932b8b7f41c654bc2/gopath/src/github.com/evergreen-ci/evergreen/agent/agent.go"""",""""line"""":213},{""""function"""":""""github.com/evergreen-ci/evergreen/agent.(*Agent).loop"""",""""file"""":""""C:/data/mci/95573c9ad530edf932b8b7f41c654bc2/gopath/src/github.com/evergreen-ci/evergreen/agent/agent.go"""",""""line"""":118},{""""function"""":""""github.com/evergreen-ci/evergreen/agent.(*AgentSuite).TestAgentEndTaskShouldExit"""",""""file"""":""""C:/data/mci/95573c9ad530edf932b8b7f41c654bc2/gopath/src/github.com/evergreen-ci/evergreen/agent/agent_test.go"""",""""line"""":111},{""""function"""":""""runtime.call32"""",""""file"""":""""c:/go1.8/go/src/runtime/asm_amd64.s"""",""""line"""":514},{""""function"""":""""reflect.Value.call"""",""""file"""":""""c:/go1.8/go/src/reflect/value.go"""",""""line"""":434},{""""function"""":""""reflect.Value.Call"""",""""file"""":""""c:/go1.8/go/src/reflect/value.go"""",""""line"""":302},{""""function"""":""""github.com/evergreen-ci/evergreen/vendor/github.com/stretchr/testify/suite.Run.func2"""",""""file"""":""""C:/data/mci/95573c9ad530edf932b8b7f41c654bc2/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/stretchr/testify/suite/suite.go"""",""""line"""":102},{""""function"""":""""testing.tRunner"""",""""file"""":""""c:/go1.8/go/src/testing/testing.go"""",""""line"""":657},{""""function"""":""""runtime.goexit"""",""""file"""":""""c:/go1.8/go/src/runtime/asm_amd64.s"""",""""line"""":2197}]}}}}""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-2703","01/31/2018 19:31:02",1,"smoke-test-task failure ""h2. [smoke-test-task failed on ubuntu1604|https://evergreen.mongodb.com/task/mci_ubuntu1604_smoke_test_task_e3402f013c5d431442436be3fb303b6a497c98f2_18_01_31_16_44_37/0]     Host: [ec2-54-91-92-164.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-1mar75nh]   Project: [mci|https://evergreen.mongodb.com/waterfall/mci]          ~BF Ticket Generated by [~brian.samek]~  ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-2704","01/31/2018 20:59:28",1,"Ignore shouldExit if next task is in the same task group as previous ""This potentially should only apply to a task group with 1 host.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-9593","02/01/2018 22:47:37",1,"lint failure ""h2. [lint failed on race-detector|https://evergreen.mongodb.com/task/amboy_race_detector_lint_06ba2f6774cb462f34131a041e60dafcedfccff8_18_02_01_18_21_25/0]     Host: [ec2-34-227-59-90.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-jkyg6qth]   Project: [amboy|https://evergreen.mongodb.com/waterfall/amboy]          ~BF Ticket Generated by [~sam.kleinman]~  ""","",0,0,0,0,1,0,0,0,0,0,0,0,1,0,0
"EVG-2706","02/02/2018 15:08:33",1,"Attach.artifacts always logs that it attaches 1 file ""https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_rhel_62_64_bit_jsCore_patch_06b9e9ebf9778293b8425093ada0aa1eb83b594e_5a623652e3c331768300087f_18_01_19_18_18_06""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2708","02/02/2018 17:18:47",1,"UnscheduleStaleUnderwaterTasks may blacklist old tasks recently scheduled by users ""Max scheduled https://evergreen.mongodb.com/task/mongodb_mongo_master_windows_64_2k8_ssl_noPassthrough_WT_77fbada9b93dfa474d41216baa19f556e75bc8ca_17_11_10_22_58_32, and it was blacklisted, potentially by UnscheduleStaleUnderwaterTasks, because this function only takes into account the task's create time. This means that users who wish to schedule tasks older than two weeks must also reset their priority.    We could potentially fix this by filtering out tasks with a non-empty """"activated_by"""" field.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2710","02/03/2018 20:34:24",1,"Add link to host page in decommissioned host jira description ""For example in a ticket associated with host ubuntu1604-ppc-3.pic.build.10gen.cc, it would be useful to include a link to https://evergreen.mongodb.com/host/ubuntu1604-ppc-3.pic.build.10gen.cc for quickly seeing what the host has been doing and to adjust its status.     Less obviously useful, and a separate request, but still perhaps worth doing, if it's easy, would be making the distro text in the description a link to the distro page (""""ubuntu1604-power8-test"""" could link to https://evergreen.mongodb.com/distros##ubuntu1604-power8-test)""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2711","02/03/2018 20:56:13",0,"Uptime in decommissioned host jira text shows strangely formatted incorrect time ""For example, one ticket shows """"2562047h47m16.854775807s"""" for ubuntu1604-ppc-3.pic.build.10gen.cc. It would be nice if it could 1) use correct uptime (the host has been up for """"1 day,  1 hour and 2 minutes"""" right now, 2) not show so much precision for the seconds, and 3) include days, not just hours, so something like """"1d1h2m30s"""" or something similar. ""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2714","02/05/2018 14:16:57",1,"lobster is no longer usable in Firefox ""It used to look just like Chrome's rendering, but now it looks all wrong; the buttons are spaced incorrectly, the font is the wrong size, and the """"details"""" are always missing -- the pane vanishes immediately after you click """"Show Details"""".""","",0,0,1,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-2715","02/05/2018 14:50:43",1,"colapse ""task_scheduled"" events in event-log UI ""we run the scheduler often and it probably ends up obscuring lots of useful data. ""","",1,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-2717","02/05/2018 15:54:43",1,"remove patch.Intent type from the amboy job for patch intent creation ""You can't (easily) roundtrip a struct that has an field with an interface type, so if (when?) we ever move patchIntentProcessors to using the remote queue, we end up with a sticky situation.     It's not critical, but we should do this soon. ""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2718","02/05/2018 16:40:07",1,"Monitor attempted to terminate intent host ""Feb 05 16:31:34 evergreenapp-2.build.10gen.cc evergreen[23088]: [message='Error cleaning up hosts' runner='monitor']: error terminating host: error terminating host evg-rhel62-small-20180205161616-1618972814792567608: error terminating host evg-rhel62-small-20180205161616-1618972814792567608: after 10 retries, operation failed: InvalidInstanceID.Malformed: Invalid id: """"evg-rhel62-small-20180205161616-1618972814792567608"""" (expecting """"i-..."""")""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2719","02/05/2018 18:15:25",2,"Investigate whether we should apply patches with --whitespace=fix ""We found a case where the patch process fixing whitespace locally on the Evergreen host caused our linting task to miss whitespace errors that otherwise would have kept the code from being merged into master. What happens is that then the code can be merged, but the next person to open a PR off of that base will cause our linting task to fail because the whitespace issues won't have been fixed.    It would be better for the patch process to not fix whitespace so that we can catch it on our own in our lint tasks.    Re: https://mongodb.slack.com/archives/C0V896UV8/p1517849650000072  Example: https://evergreen.mongodb.com/task/mms_unit_js_UNIT_JS_LINT_patch_2d46f5d9caf3d38537766f163377eeb840dbcb82_5a720430e3c3317d9b004258_18_01_31_18_00_17""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2720","02/05/2018 18:48:16",1,"avoid static host decomissioning loops ""- don't decommission static hosts for consistent system failures  - move from 6 consecutive failures back to 3  - continue to decomission for taskrunner errors  ""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2722","02/05/2018 21:52:25",1,"Display Task Behaviour around Execution tasks is wrong ""It's currently possible to  1. Create a patch with a single execution task of a display task  2. Create a tag which only contains part of an execution tag, that only activates the tagged tasks.       If a tag includes 1 or more execution tasks from a display the task, every task from the display task should be included.   In all other situations, execution tasks should be invisible to the user. (including aliases task regexes, and task requests from the command line.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-9594","02/07/2018 17:02:43",2,"test-rest failure ""h2. [test-rest failed on ubuntu1604|https://evergreen.mongodb.com/task/amboy_ubuntu1604_test_rest_8f3592813cce537dd0fba0b61ecb3e85a3d0b38d_18_02_06_01_24_26/0]     Host: [ec2-34-228-185-201.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-9j2843pg]   Project: [amboy|https://evergreen.mongodb.com/waterfall/amboy]          ~BF Ticket Generated by [~sam.kleinman]~  ""","",0,0,0,0,1,0,0,0,0,0,0,0,1,0,0
"EVG-9345","02/07/2018 17:28:21",2,"store more concise errors in jobs, log more in pools ""- log errors in the pools so we can see when/where things go wrong.  - avoid pushing stack traces in job documents""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-2731","02/07/2018 19:48:16",1,"manifest override for ""always fetch latest"" ""be able to specify modules with """"always fetch latest"""" semantics to avoid the manifest pinning for things like the fuzzer/sysperf/etc.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2732","02/07/2018 19:48:18",2,"test_history REST endpoint does not return successful tasks info ""When retrieving task information from the {{/rest/v1/projects/<project_id>/test_history}} endpoint.  The results do not contain successful tasks when {{taskStatuses}} includes """"success"""".    Some additional tests showed a related issue: while timeout results are returned when {{taskStatuses='timeout'}} they are not returned when {{taskStatuses='timeout,failed'}}. Only the failed tasks results are returned.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2733","02/07/2018 20:43:23",2,"Improve logkeeper logging ""There were a few changes made to logkeeper logging so we could send logs to splunk that turned out to make it more difficult to troubleshoot load related issues.  IIRC, we stopped logging good requests and only log errors.    Right now, logs look like this:      What would help us is:  * Have access logs (http method, path, status) for all requests  * Log client ip (I believe it's available as one of the header fields)  * Log some details for 'Internal Server Error'    Perhaps we can split access logs and logkeeper logs and don't send some of them to splunk?""","Feb  7 20:10:26 logkeeperapp-0 logkeeper[25019]: [logkeeper] 2018/02/07 20:10:26 [p=error]: [error='inserting test with id ObjectIdHex(""""5a7b5d3290413061bb015a89"""") took 1.387978ms' requestID='0']  Feb  7 20:10:26 logkeeperapp-0 logkeeper[25019]: [logkeeper] 2018/02/07 20:10:26 [p=error]: [error='inserting test with id ObjectIdHex(""""5a7b5d3290413061bb015a8a"""") took 1.554176ms' requestID='0']  Feb  7 20:10:26 logkeeperapp-0 logkeeper[25019]: [logkeeper] 2018/02/07 20:10:26 [p=error]: [error='finding build with id df420f183a2766fccd7a8f5f5c04621a took 1.172723ms' requestID='0']  Feb  7 20:10:26 logkeeperapp-0 logkeeper[25019]: [logkeeper] 2018/02/07 20:10:26 [p=error]: [error='inserting test with id ObjectIdHex(""""5a7b5d3290413061bb015a8b"""") took 2.16831ms' requestID='0']  Feb  7 20:10:26 logkeeperapp-0 logkeeper[25019]: [logkeeper] 2018/02/07 20:10:26 [p=error]: [error='finding build with id 9ec113d71c4efb9f8c96a1a004e2f7ba took 1.215577ms' requestID='0']  Feb  7 20:10:26 logkeeperapp-0 logkeeper[25019]: [logkeeper] 2018/02/07 20:10:26 [p=error]: [error='inserting test with id ObjectIdHex(""""5a7b5d3290413061bb015a8c"""") took 1.290326ms' requestID='0']  Feb  7 20:10:26 logkeeperapp-0 logkeeper[25019]: [logkeeper] 2018/02/07 20:10:26 [p=error]: [error='finding build with id 0b06d371fe4ba134e28e2984658c2fa5 took 1.263711ms' requestID='0']",0,1,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-2734","02/07/2018 21:01:06",1,"Evergreen cannot apply mailbox-style patches which create new files, and moves them in a later commit ""Maybe a bug maybe user error, although I don't think I did anything interesting with git here.    https://evergreen.mongodb.com/build/dsi_linux_runner_patch_c48251e93c6b82523444f689e276a1c1e9252487_5a7b67c7c9ec4420de328f67_18_02_07_20_55_35    From this PR:  https://github.com/10gen/dsi/pull/20    Filing in case it's interesting - I'm gonna try working around it in the mean-time.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2737","02/07/2018 23:15:02",2,"ensure isolation during task creation ""- derive date for version create time from github rather than system time   - sort tasks and builds before insertion so that we're always inserting in the same order ""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2738","02/08/2018 14:44:14",1,"smoke-test-task failure ""h2. [smoke-test-task failed on ubuntu1604|https://evergreen.mongodb.com/task/mci_ubuntu1604_smoke_test_task_66dd4be6aba9503f99316e5045378019eca86543_18_02_07_19_54_28/0]     Host: [ec2-34-226-193-185.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-xghg6pxj]   Project: [mci|https://evergreen.mongodb.com/waterfall/mci]          ~BF Ticket Generated by [~brian.samek]~  ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-2739","02/08/2018 15:40:30",1,"Create Report for Expected Duration versus Actual Duration  ""auto log to splunk/etc. ""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2742","02/08/2018 19:41:41",1,"avoid creating tickets for successive build failures ""we're not decoing these hosts, but we are creating tickets, we shouldn't. ""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2743","02/08/2018 19:56:00",1,"remove cost reporting go routine in task end ""make it an amboy job!""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2745","02/09/2018 14:56:35",2,"Command attach.artifacts should not error if the file is missing ""The behavior of {{attach.artifacts}} should either have an option to ignore missing files or not error if a file is missing from the {{files}} param.""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-9574","02/09/2018 18:32:36",1,"Add flag to only print failed tests on greenbay run ""Currently the output is a bit too noisy for large projects. I really only care about failed tests.""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-2753","02/10/2018 17:52:20",2,"Combine Host Reachability and LastCommunication Time Values into ""LastContactTime"" ""or similar, there's no meaningful difference between these values at the moment, but the monitor/hostinit/taskrunner handle them differently. ""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2755","02/12/2018 01:41:46",1,"remove ""generic-linux-distors"" from self-tests.yml  ""differences in configuration between machines lead to build failures that are not needed.     pool sizes should be large enough on 16.04""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2756","02/12/2018 02:26:30",1,"deprecate and warn support for tasks that run on more than one distro ""In the medium term we would like to remove the ability to specify more than one distro. Historically it was useful in using static hosts and dynamic hosts in related pools, but that's not been a reality of our deployment recently.     At the same time the logic to support allowing tasks to appear in more than one task queue makes task dispatching and scheduling much more complicated than it might be.     In the future we can add a layer inbetween distros, which describe host configurations, and the distros which represent queues, using some sort of pooling or grouping system, which will provide more flexibility as it will be an application wide configuration, and not specific to task definitions.     This deprecation and warning is the first step in this process.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2764","02/12/2018 16:14:11",1,"Move all documentation from repo into wiki ""./plugin/builtin/buildbaron/README.md  ./plugin/builtin/perfdash/README.md  ./service/REST_README.md  ./docs/using-degraded-mode.rst  ./rest/how_to.rst  ./rest/usage.rst""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2767","02/12/2018 19:07:56",2,"Restart Task in UI doesn't close restart window/can spawn duplicate tasks ""1. clicking yes doesn't close the window.  2. The user can click Yes multiple times and have it create multiple tasks.""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-9590","02/12/2018 19:15:31",1,"lint failure ""h2. [lint failed on race-detector|https://evergreen.mongodb.com/task/amboy_race_detector_lint_d2da6d14e40c46ce82dc497c01301d6da8302010_18_02_12_16_06_14/0]     Host: [ec2-34-229-19-196.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-jc986kpj]   Project: [amboy|https://evergreen.mongodb.com/waterfall/amboy]          ~BF Ticket Generated by [~sam.kleinman]~  ""","",0,0,0,0,1,0,0,0,0,0,0,0,1,0,0
"EVG-2772","02/12/2018 23:37:47",2,"set content-length header in agent post requests ""so we can log better in the API server ""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2773","02/13/2018 02:02:20",1,"make sure repotracker catchup jobs respect the github api limit ""in the case that the queue gets backed up, we don't want to blow through limit when we start working the queue. ""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2774","02/13/2018 14:02:09",1,"log local queue stats on web servers  ""also drop local job listing in queue report""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2775","02/13/2018 14:46:11",2,"Lobster given undefined url for all logs view ""From the """"job logs"""": https://logkeeper.mongodb.org/build/63b3fc51e56a2e15bc96d26685c0e020  If you click """"Complete logs for all"""" you get: https://logkeeper.mongodb.org/lobster/build/63b3fc51e56a2e15bc96d26685c0e020/test/undefined?bookmarks=0%2C11018  Which has """"undefined"""" as the test id. It should say """"all"""" instead of """"test/undefined"""": https://logkeeper.mongodb.org/lobster/build/63b3fc51e56a2e15bc96d26685c0e020/all?bookmarks=0%2C11018""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-2779","02/13/2018 16:45:49",1,"tune runner parallelism ""in the post reachability-check world, we should tune things up a bit:    - reexamine threads running taskrunner (as more of the retry waiting for a host to get ready is happening here)   - more threads running host provisioning in hostinit (because this ends up retrying)   - terminate hosts loop in the monitor.  - timeout for host termination operation  - timing of the interval for hostinit/taskrunner/monitor""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2782","02/13/2018 19:39:38",1,"Passing --large to the patch command doesn't enable large patches ""because NewRequestReader has a 16MB limit. We should remove --large, or make a bigger reader.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2783","02/13/2018 20:19:34",1,"Panic in GetDNSName """"","  { [{github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/grip/recovery.LogStackTraceAndContinue /data/mci/f04cd0c71429b9ef0145c7465a42925a/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/grip/recovery/recovery.go 70} {runtime.call32 /opt/go1.8/go/src/runtime/asm_amd64.s 514} {runtime.gopanic /opt/go1.8/go/src/runtime/panic.go 489} {runtime.panicmem /opt/go1.8/go/src/runtime/panic.go 63} {runtime.sigpanic /opt/go1.8/go/src/runtime/signal_unix.go 290} {github.com/evergreen-ci/evergreen/cloud.(*ec2Manager).GetDNSName /data/mci/f04cd0c71429b9ef0145c7465a42925a/gopath/src/github.com/evergreen-ci/evergreen/cloud/ec2.go 660} {github.com/evergreen-ci/evergreen/hostinit.(*HostInit).IsHostReady /data/mci/f04cd0c71429b9ef0145c7465a42925a/gopath/src/github.com/evergreen-ci/evergreen/hostinit/setup.go 346} {github.com/evergreen-ci/evergreen/hostinit.(*HostInit).setupReadyHosts.func1 /data/mci/f04cd0c71429b9ef0145c7465a42925a/gopath/src/github.com/evergreen-ci/evergreen/hostinit/setup.go 218} {runtime.goexit /opt/go1.8/go/src/runtime/asm_amd64.s 2197}]}  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2786","02/13/2018 22:31:28",1,"Fix Lint Errors in rest/model ""    The BuildFromService /ToService functions are copying the send.SlackOptions object from evergreen/SlackConfig. This means it's copying a mutex, and generating a mutex error. I can't reproduce this in evergreen, but both Brian and I can repro locally.""","  rest/model/admin.go:1047::error: function call copies lock value: github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/grip/send.SlackOptions contains sync.RWMutex (vet)  rest/model/admin.go:1061::error: assignment copies lock value to options: github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/grip/send.SlackOptions contains sync.RWMutex (vet)  ",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-9526","02/14/2018 11:35:36",2,"improve string format of stack traces  ""particularly for panics that we log to splunk""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-2789","02/14/2018 14:05:14",1,"Panic in agent when enforcing callback timeouts ""{{https://evergreen.mongodb.com/host/sir-5v887hak}}""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2794","02/14/2018 21:19:20",1,"Panic when running CLI commands that communicate with API with invalid key ""Johns-MacBook-Pro-2:evergreen johnliu$ ./evergreen host list --all  runtime error: invalid memory address or nil pointer dereference""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2796","02/15/2018 15:03:36",2,"git checkout fails if the mongo diff is empty ""https://evergreen.mongodb.com/task/sys_perf_3.2_linux_standalone_compile_patch_ba20ef3dc5e82459f9c7ddbce4a055b3d32aab74_5a856c25e3c331600b270c14_18_02_15_11_21_56    * This is a common use case in performance, most of our diffs are against the modules  * This has happens from time to time, please consider adding a unit test for protecting this use case""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-2797","02/15/2018 16:54:53",2,"Fix zero dates in versions ""Perf depends on valid create_time in versions, so we should go back and correct these.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-2798","02/15/2018 18:41:35",0,"add TTL index on task event log  ""this log only has data for tasks, including system metrics data.     ttl to six months ""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2799","02/16/2018 01:12:08",2,"report on host idle time upon termination.  ""just as we do for task-end-stats, we can and should collect host-termination-stats when we terminate a host.    long term, stats may include:  - total up time,   - total idle time.  - time for tasks,   - cost of host,  - number of tasks run  - ""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2800","02/16/2018 03:31:30",1,"remove excess monitor logging  ""it logs a lot, and very little of it is useful. ""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2801","02/16/2018 14:24:38",2,"time out tasks when heartbeats expire in amboy job ""there is only one task flagging function in the monitor which times out/ends tasks when the heartbeats expire. We should move this functionality into an amboy job, and remove it and it's complicated machinery from the monitor""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2802","02/16/2018 14:26:17",2,"move cloud status change detection  ""there is one """"hostMonitoringFunction"""" with the sole function of detecting when hosts are terminated externally (e.g. spot-host-termination) we should move this functionality out of the monitor and into an independent amboy job. ""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2815","02/20/2018 20:09:44",2,"`go test` failure shown when negative time printed ""`go test` sometimes mistakenly prints out a negative time. We recently got this output in our output:        We use the command `gotest.parse_files` to display which test cases succeed or fail for a given task. For the above test case, it showed this as a failure and therefore reported the task as a failure even though `go test` exited successfully. I assume this is due to the parsing logic doesn't expect a negative run time for a test.    Evergreen task: https://evergreen.mongodb.com/task/mongo_go_driver_tests__version~3.4_os~osx_test_standalone_noauth_nossl_patch_c0d49e37272a4a5a31ac5ce84e453d5c9a31415e_5a8c71e3e3c331479c35c023_18_02_20_19_07_34    Log file: https://evergreen.mongodb.com/test_log/5a8c79022fbabe102183dd6a?raw=1""","      --- PASS: TestHeartbeatInterval/mongodb://localhost/?heartbeatIntervalMS=10 (-0.00s)  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2816","02/20/2018 20:45:35",2,"Don't Make Patches with no Build Variants or Tasks ""Like this one: https://evergreen-staging.corp.mongodb.com/version/5a8522cb9dbe327d22aec3c5""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2823","02/21/2018 19:30:42",1,"avoid negative values for cost ""validate time range to make sure its positive.    wrap the logic of CostForDuration""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2826","02/21/2018 21:42:36",1,"The `get-update` command fails due to version mismatch ""When running the {{evergreen.exe get-update}} command on Windows I am getting the following error:      My current version is:      If I run the file, which {{evergreen get-update}} downloaded I get this version:  ""","  E:\workspace\mongo>evergreen get-update  A new version is available. Run 'evergreen get-update' to fetch it.  Update to version 2018-02-09 found at https://evergreen.mongodb.com/clients/windows_amd64/evergreen  Fetching update from https://evergreen.mongodb.com/clients/windows_amd64/evergreen  Upgraded binary downloaded to C:\Users\kaloi\AppData\Local\Temp\257184635 - verifying  [evergreen] 2018/02/21 16:35:51 [p=emergency]: Update failed - expected new binary to have version 2018-02-09, but got 2017-06-29 instead    E:\workspace\mongo>evergreen --version  evergreen version 2018-01-31    E:\workspace\mongo>C:\Users\kaloi\AppData\Local\Temp\257184635 version  2017-06-29  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-9661","02/22/2018 16:12:27",2,"driver should have an ID() and this should be propogated to the locker ""so that the """"owner"""" in a job reflects (somehow) the id of the machine/instance that is running it""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-2828","02/22/2018 16:31:18",1,"use continue on error semantics when canceling stale patches from PRs  ""e.g. when you close requests or push new builds just so things don't straggle. ""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-2829","02/22/2018 16:55:31",1,"race-rest-client failure ""h2. [race-rest-client failed on race-detector|https://evergreen.mongodb.com/task/mci_race_detector_race_rest_client_272f89c1db8467057a17bdb13eca2099dd6b0a7a_18_02_22_14_57_58/1]     Host: [ec2-54-87-242-248.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-76v87v8j]   Project: [mci|https://evergreen.mongodb.com/waterfall/mci]          ~BF Ticket Generated by [~brian.samek]~  ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-9684","02/23/2018 14:26:34",1,"add annotate method for message composer.  ""have method that we can use to add arbitrary (quasi structured data) to any message composer. We'll mostly add it to the base type, but may override (particularly for fieldsMessage) in some implementations.    The main use case, initially would be to be able to use existing messages but also write logging helpers that add request ids for better traceability in request logging. ""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-2836","02/23/2018 15:24:29",1,"Inactive display task has odd UI color ""CC [~john.liu]""","",0,0,0,1,0,0,0,0,0,0,1,0,0,0,0
"EVG-2837","02/23/2018 16:02:56",2,"Timeout / error when getting history of the failures ""```https://evergreen.mongodb.com/rest/v1/projects/mongodb-mongo-master/test_history?sort=latest&tasks=sharding_auth&tests=jstests%2Fsharding%2Fconvert_to_and_from_sharded.js&taskStatuses=failed&limit=1```  returns  """"The service is temporarily unavailable. Please try again later."""" error  ""","",0,0,0,0,0,0,1,0,0,1,0,0,0,0,0
"EVG-2841","02/23/2018 18:34:34",1,"Agents that get 409s for task secrets should get another task, not exit ""Two hosts https://evergreen.mongodb.com/host/sir-xbpr7eek and https://evergreen.mongodb.com/host/sir-sfqr542j, got the same task from the next task endpoint. The latter got 409s, the agent exited, and then the host was reaped. Instead the latter should instead stop task execution and get another task. However, we may need to make a distinction between a 409 because the host secret is wrong (in which case getting a new agent is the right thing to do) versus if the task secret is wrong (in which case the agent should ask for another task).""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2850","02/26/2018 18:44:07",2,"enterprise module patch not always being applied. ""I have some work that has changes in both the community and enterprise repos.  I noticed that I was getting inconsistent results patch-building the them. Sometimes it appeared that while the enterprise module was added, the patch on it was not applied.    https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_rhel_62_64_bit_compile_patch_9c65faa1ea24b92d86f846abd38909b4ef2fe5bc_5a90936be3c33134821ce592_18_02_23_22_19_55##%257B%2522compare%2522%253A%255B%257B%2522hash%2522%253A%25229c65faa1ea24b92d86f846abd38909b4ef2fe5bc%2522%257D%252C%257B%2522hash%2522%253A%25229c65faa1ea24b92d86f846abd38909b4ef2fe5bc%2522%257D%255D%257D    In this patch-build, on the first execution the enterprise patch was not applied and the compile failed, then later when I rescheduled it, the enterprise patch was applied and the compile succeeded.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2853","02/26/2018 22:22:47",1,"API V1 Task History fails to return correct results for various inputs ""Example: https://evergreen.mongodb.com/rest/v1/tasks/compile/history?project=mongodb-mongo-master    What am I doing wrong?""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2854","02/26/2018 22:35:37",2,"Support aliases for groups of distros ""Users might have a task that can run on any Linux, for example. We should provide a way of specifying groups of distros which allows tasks to run on whichever queue they are at the head of first.""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2856","02/27/2018 16:47:04",1,"Show more task/version history drawer commit text ""Problem:  Often I want to see the commit summaries to figure out which commits between a test passes and failing might be related to the issue I'm seeing. Currently, I hover over each commit to see the full text, which is slow and cumbersome.    Proposed Solution:  Could we add allow allow the commit side bar to take up more side space to it can display the complete commit summaries and then users could or change the size as they need? ""","",0,1,0,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-2858","02/27/2018 18:02:20",1,"When creating a new distro certain validators never return true ""https://github.com/evergreen-ci/evergreen/blob/master/public/static/js/distros.js#L374    When creating a new distro the settings key is not defined so the validators linked above throw 'is_vpc' is not defined essentially crashing the validation of the form. When this happens you are unable to click Save Configuration and thus cannot make a new distro.    Note that copying an existing distro works as expected.""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-2875","02/27/2018 18:47:07",2,"Add flag to patch/patch-file CLI commands to apply default subscriptions to patch ""Patch creation route should be modified to creation subscriptions at this time""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-2879","02/27/2018 18:50:19",2,"Use github <-> crowd mapping to associate Github PR patches with the actual user that created it ""Refactor patch intents to use Github UID number""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-2897","02/27/2018 19:06:40",2,"Document commands missing in wiki ""https://github.com/evergreen-ci/evergreen/wiki/Project-Commands""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2898","02/27/2018 19:50:14",1,"Fetching Patched Project Configurations can Fail for Github PR Requests ""Fetching patch projects uses the Github diffs, instead reaching out the pulls ref.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2899","02/27/2018 22:17:55",1,"Error when using ""Decommission hosts of this distro for this update"" checkbox in Distros UI ""error unmarshaling request: json: cannot unmarshal object into Go struct field Distro.user_data of type string""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2902","02/28/2018 18:32:58",1,"test-rest-client failure ""h2. [test-rest-client failed on ubuntu1604|https://evergreen.mongodb.com/task/mci_ubuntu1604_test_rest_client_b0b8a79ff37ba3d0e654ba4726b05b7dcd3aed52_18_02_28_18_26_31/0]     Host: [ec2-34-228-145-51.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-xsi84qrk]   Project: [mci|https://evergreen.mongodb.com/waterfall/mci]          ~BF Ticket Generated by [~brian.samek]~  ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-2903","02/28/2018 19:55:02",1,"Copying project copies git history ""This is a hard one to describe -     I copied one project to another, carefully not hitting the save button until the fields were all updated. The new project and old project have nothing to do with each other (they don't share repos). They do share admins.     As soon as I hit save, it popped up an error message saying it couldn't find the base commit, so I entered the latest one from the new project repo branch.     The waterfall page shows all the history from the old project with weird 404 errors when I click on the github links pointing to commit hashes from the old project but under the new project's repo. ""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2907","02/28/2018 22:06:38",1,"Panic when retrieving config ""    error:  error retrieving admin settings: error populating section alerts: error retrieving section alerts: reflect: call of reflect.Value.Type on zero Value       extended:  error populating section alerts: error retrieving section alerts: reflect: call of reflect.Value.Type on zero Value  github.com/evergreen-ci/evergreen.GetConfig   /data/mci/60739af262bc9d09b433b1c3b884b7cb/gopath/src/github.com/evergreen-ci/evergreen/config.go:935  github.com/evergreen-ci/evergreen/service.(*APIServer).NextTask   /data/mci/60739af262bc9d09b433b1c3b884b7cb/gopath/src/github.com/evergreen-ci/evergreen/service/api_task.go:438  github.com/evergreen-ci/evergreen/service.(*APIServer).NextTask-fm   /data/mci/60739af262bc9d09b433b1c3b884b7cb/gopath/src/github.com/evergreen-ci/evergreen/service/api.go:771  github.com/evergreen-ci/evergreen/service.(*APIServer).checkHost.func1   /data/mci/60739af262bc9d09b433b1c3b884b7cb/gopath/src/github.com/evergreen-ci/evergreen/service/api.go:256  net/http.HandlerFunc.ServeHTTP   /opt/go1.8/go/src/net/http/server.go:1942  github.com/evergreen-ci/evergreen/vendor/github.com/gorilla/mux.(*Router).ServeHTTP   /data/mci/60739af262bc9d09b433b1c3b884b7cb/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/gorilla/mux/mux.go:114  github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni.Wrap.func1   /data/mci/60739af262bc9d09b433b1c3b884b7cb/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni/negroni.go:46  github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni.HandlerFunc.ServeHTTP   /data/mci/60739af262bc9d09b433b1c3b884b7cb/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni/negroni.go:29  github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni.middleware.ServeHTTP   /data/mci/60739af262bc9d09b433b1c3b884b7cb/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni/negroni.go:38  github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni.(middleware).ServeHTTP-fm   /data/mci/60739af262bc9d09b433b1c3b884b7cb/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni/negroni.go:38  github.com/evergreen-ci/evergreen/service.UserMiddleware.func1   /data/mci/60739af262bc9d09b433b1c3b884b7cb/gopath/src/github.com/evergreen-ci/evergreen/service/middleware.go:401  github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni.HandlerFunc.ServeHTTP   /data/mci/60739af262bc9d09b433b1c3b884b7cb/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni/negroni.go:29  github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni.middleware.ServeHTTP   /data/mci/60739af262bc9d09b433b1c3b884b7cb/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni/negroni.go:38  github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni.(middleware).ServeHTTP-fm   /data/mci/60739af262bc9d09b433b1c3b884b7cb/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni/negroni.go:38  github.com/evergreen-ci/evergreen/service.(*RecoveryLogger).ServeHTTP   /data/mci/60739af262bc9d09b433b1c3b884b7cb/gopath/src/github.com/evergreen-ci/evergreen/service/middleware.go:478  github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni.middleware.ServeHTTP   /data/mci/60739af262bc9d09b433b1c3b884b7cb/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni/negroni.go:38  github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni.(*Negroni).ServeHTTP   /data/mci/60739af262bc9d09b433b1c3b884b7cb/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni/negroni.go:86""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2909","03/01/2018 12:16:18",1,"json/tag and json/commit apis return different data for the same params ""For some reason, json/commit api does not return data for some versions. These two calls should be equivalent, however they doesn't:  This works: https://evergreen.mongodb.com/plugin/json/tag/performance-3.6/3.6.1-Baseline/linux-mmap-repl/misc/perf  This doesn't: https://evergreen.mongodb.com/plugin/json/commit/performance-3.6/025d4f4fe61efd1fb6f0005be20cb45a004093d1/linux-mmap-repl/misc/perf  The bug affects several pages of evergreen. At least performance discovery and task page (the page with trend charts). Going to use json/tag api for perf discovery right now, because it's critical.  CC: [~john.liu], [~sam.kleinman], [~jim.oleary]""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2910","03/01/2018 15:01:37",1,"Private project variables are deleted on page save ""Repro steps:  1. Make a private project variable. Save the page.  2. Make another project variable, either private or not. Save the page.    What happens:  The private variable from the first step will be set to the empty string in the database.""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-2911","03/01/2018 21:18:25",2,"smoke test fails if a commit is pushed to github during the test ""h2. [smoke-test-task failed on ubuntu1604|https://evergreen.mongodb.com/task/mci_ubuntu1604_smoke_test_task_8906dca1975e308582f4604169998a715767f314_18_03_01_21_05_07/1]     Host: [ec2-54-221-34-35.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-4axr4ezk]   Project: [mci|https://evergreen.mongodb.com/waterfall/mci]          ~BF Ticket Generated by [~richard.samuels]~  ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-2913","03/02/2018 15:13:11",2,"Code refactoring for REST V1 API: waterfall versions ""The waterfall versions API, which was written for perf. discovery, should be moved to rest api v2, which requires code refactoring and unit test writing.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2919","03/05/2018 15:55:19",2,"Test results exceeds maximum document size on grid page ""https://evergreen.mongodb.com/grid/mongodb-mongo-master:  ""","  Error fetching builds: Total size of documents in testresults matching { $match: { $and: [ { task_id: { $eq: """"mongodb_mongo_master_linux_64_repeated_execution_jsCore_1cf874bd73ebb13f753840bb6eea63207076c438_18_03_04_23_25_57"""" } }, {} ] } } exceeds maximum document size  ",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-2984","03/05/2018 18:07:51",2,"Runner hangs indefinitely during deploys ""The runner has hung during several recent deploys, and we had to kill -9 it to continue the deploy. We should figure out why it is hanging.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2921","03/05/2018 21:15:19",2,"s3.put with local_files_include_filter to non-existent bucket does not fail task ""in the following task:    https://evergreen.mongodb.com/task/cloud_automation_master_builddebian12deb_Automation_Agent_Generic_25348cb36b8d3bd3a0938fe6d1a73b0adeedddec_18_03_05_17_22_04    We are trying to upload files (with a filter, so that we can't use the optional as described in the docs - https://github.com/evergreen-ci/evergreen/wiki/Project-Commands#s3put) to a non existent s3 bucket. Since we know the bucket doesn't exist, we expected the task to fail.     Files failed to upload (as expected) but the task was not marked as failed.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2922","03/05/2018 21:37:47",2,"Cleanup UpdateBuildAndVersionStatusForTask Database interactions ""The bit of code makes a large number of unnecessary db fetches ""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2924","03/06/2018 15:07:10",2,"Display tasks square is grey after completion  ""https://evergreen.mongodb.com/build/mci_race_detector_patch_3214a9f6e5553b626192ce15de72fd486398fbdb_5a99959f2a60ed0765bd4d58_18_03_02_18_19_17""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-2925","03/06/2018 15:15:50",1,"Small number of EC2 errors logged ""At around 10 am today           error:     error checking DNS name for host sir-r64847zh: spot instance does not yet have an instanceId             extended:     spot instance does not yet have an instanceId  github.com/evergreen-ci/evergreen/cloud.(*ec2Manager).GetDNSName      /Users/johnliu/go/src/github.com/evergreen-ci/evergreen/cloud/ec2.go:667  github.com/evergreen-ci/evergreen/hostinit.(*HostInit).IsHostReady      /Users/johnliu/go/src/github.com/evergreen-ci/evergreen/hostinit/setup.go:358  github.com/evergreen-ci/evergreen/hostinit.(*HostInit).setupReadyHosts.func1      /Users/johnliu/go/src/github.com/evergreen-ci/evergreen/hostinit/setup.go:220  runtime.goexit      /usr/local/Cellar/go/1.9.2/libexec/src/runtime/asm_amd64.s:2337  github.com/evergreen-ci/evergreen/cloud.(*ec2Manager).GetDNSName      /Users/johnliu/go/src/github.com/evergreen-ci/evergreen/cloud/ec2.go:667  github.com/evergreen-ci/evergreen/hostinit.(*HostInit).IsHostReady      /Users/johnliu/go/src/github.com/evergreen-ci/evergreen/hostinit/setup.go:358  github.com/evergreen-ci/evergreen/hostinit.(*HostInit).setupReadyHosts.func1      /Users/johnliu/go/src/github.com/evergreen-ci/evergreen/hostinit/setup.go:220  runtime.goexit      /usr/local/Cellar/go/1.9.2/libexec/src/runtime/asm_amd64.s:2337  error checking DNS name for host sir-r64847zh  github.com/evergreen-ci/evergreen/hostinit.(*HostInit).IsHostReady      /Users/johnliu/go/src/github.com/evergreen-ci/evergreen/hostinit/setup.go:360  github.com/evergreen-ci/evergreen/hostinit.(*HostInit).setupReadyHosts.func1      /Users/johnliu/go/src/github.com/evergreen-ci/evergreen/hostinit/setup.go:220  runtime.goexit      /usr/local/Cellar/go/1.9.2/libexec/src/runtime/asm_amd64.s:2337  ""","",0,0,0,0,0,0,0,1,0,1,0,0,0,0,0
"EVG-2926","03/06/2018 15:53:20",2,"Enforce requirement for all projects to specify a branch ""Projects can omit branch, and parts of evergreen assume master. This breaks PR testing.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-9364","03/06/2018 20:40:58",2,"Investigate Blockages with Amboy Remote Queues ""Amboy queues are occasionally getting blocked as in MCI-2772.    This is especially true on hard restarts of Evergreen.""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-2929","03/06/2018 21:13:52",1,"Attach generate.tasks json files as artifacts ""This will help a user debug their generated tasks and provide more visibility.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-2934","03/07/2018 13:58:14",1,"Cannot use a macro expansion in s3.put optional parameter ""The following is not valid:      The {{optional}} parameter cannot use a macro expansion.""","      - command: s3.put        params:          optional: ${is_patch|false}          aws_key: ${aws_key}          aws_secret: ${aws_secret}          local_file: src/distsrc.${ext|tgz}          remote_file: ${project}/${build_variant}/${revision}/sources/mongo-src-${build_id}.${ext|tgz}          bucket: mciuploads          permissions: public-read          content_type: ${content_type|application/x-gzip}          display_name: Source tarball          # We only need to upload the source tarball from one of the build variants          # because it should be the same everywhere, so just use linux-64/windows-64-2k8.          build_variants: [ linux-64, windows-64-2k8-ssl ]  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2936","03/07/2018 15:43:42",1,"Remove dead code for form data in submitPatch in api_patch.go ""I added a logging statement so we can verify in Splunk that the code is never hit.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-9555","03/08/2018 14:23:30",2,"support autodetection of distribution  ""the {{artifacts}} subcommand currently detects what architecture we are on, but not the distribution (when run on linux). There are presently a number of varied approaches to doing this in drivers-specific code paths, most notably in the [download-mongodb.sh|https://github.com/mongodb-labs/drivers-evergreen-tools/blob/master/.evergreen/download-mongodb.sh#L8-L42] script used by most drivers running on evergreen. If this were handled by curator, we could _completely_ drop the {{download-mongodb.sh}} script. ""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-2939","03/08/2018 14:46:53",1,"reduce frequency of process tree collection ""we currently collect proc tree info in the agent every 5 seconds for the first minute before dropping to once every 10 seconds. We should remove the special casing of the first period.     We might also consider dropping this to once every 15 seconds to reduce the data volume. ""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-2940","03/08/2018 15:20:28",1,"pass -i to go build to cache dependencies  ""also improve the clean target to clean GOPATH/pkg/""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-2945","03/08/2018 20:21:50",1,"numnewreporevisionstofetch not respected for new projects ""Instead of downloading 10 revisions for new projects (""""numnewreporevisionstofetch"""") Evergreen downloads 500 (""""maxreporevisionstosearch"""").""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2947","03/08/2018 22:54:00",2,"Task failed but failure output was not logged ""https://evergreen.mongodb.com/task/mci_ubuntu1604_js_test_ff04b3c3a109e85b980a6430d64258345aaaebbd_18_03_08_21_59_10/0    should have   08 03 2018 17:41:28.366:INFO [karma]: Karma v2.0.0 server started at http://0.0.0.0:9876/  08 03 2018 17:41:28.370:INFO [launcher]: Launching browser PhantomJS with unlimited concurrency  08 03 2018 17:41:28.375:INFO [launcher]: Starting browser PhantomJS  08 03 2018 17:41:29.240:INFO [PhantomJS 2.1.1 (Mac OS X 0.0.0)]: Connected on socket DcdSb01aM2ON7l7aAAAA with id 21142958  PhantomJS 2.1.1 (Mac OS X 0.0.0) ERROR    {      """"message"""": """"SyntaxError: Expected an identifier but found 'url' instead\nat js/services/rest.js:358:0"""",      """"str"""": """"SyntaxError: Expected an identifier but found 'url' instead\nat js/services/rest.js:358:0""""    }      make: *** [js-test] Error 1""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2949","03/09/2018 14:42:19",2,"When many commits are pushed at once, run the latest one ""I pushed a batch of commits, but it chose to run one of the earlier ones, rather than the top of the stack.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2966","03/12/2018 17:34:46",2,"Cache versions in task groups in scheduler ""Large numbers of task groups in the queue can potentially slow the scheduler, since there will be n*log n calls to EarlierInTaskGroup per task group, where n is the number of tasks in the task group in the queue. EarlierInTaskGroup queries for a version and unmarshalls its yaml.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2978","03/14/2018 19:27:13",1,"Using aliases is overly verbose ""When I upload a patch using an alias, it logs every task it's going to run.  This doesn't happen when not using an alias, and floods my terminal with unuseful noise.        vs    ""","  >  evergreen patch -p mongodb-mongo-master -f -d """"without alias""""   jstests/noPassthrough/readConcern_atClusterTime.js | 10 ++++++++++   src/mongo/db/read_concern.cpp                      | 16 ++++++++++------   2 files changed, 20 insertions(+), 6 deletions(-)    d8cf907cef SERVER-33798 Fail atClusterTime reads at times newer than the current cluster time    This is a summary of the patch to be submitted. Continue? (y/n): y  Patch successfully created.                 ID : 5aa976c62fbabe4336f81f3f          Created : 2018-03-14 19:23:50.671 +0000 UTC      Description : without alias            Build : https://evergreen.mongodb.com/version/5aa976c62fbabe4336f81f3f        Finalized : Yes    > evergreen patch -p mongodb-mongo-master -f -a required -d """"with alias""""               jstests/noPassthrough/readConcern_atClusterTime.js | 10 ++++++++++   src/mongo/db/read_concern.cpp                      | 16 ++++++++++------   2 files changed, 20 insertions(+), 6 deletions(-)    d8cf907cef SERVER-33798 Fail atClusterTime reads at times newer than the current cluster time    This is a summary of the patch to be submitted. Continue? (y/n): y  activated tasks on 5 variants...    tasks for variant enterprise-windows-64-2k8:  audit  jsCore  dbtest  jstestfuzz_replication  sharding_auth_audit  jsCore_decimal  external_auth  compile_benchmarks  ese  jstestfuzz_sharded  ssl  sslSpecial  jsCore_ese  jstestfuzz_concurrent_replication  compile  compile_all  jsCore_auth  burn_in_tests  benchmarks_orphaned  aggregation_fuzzer  jstestfuzz  auth_audit  snmp  replica_sets_auth  sasl  sharding_ese  jstestfuzz_concurrent  replica_sets_ese  sharding_auth  jstestfuzz_concurrent_sharded    tasks for variant linux-64-debug:  sharding_jscore_op_query_passthrough  bulk_gle_passthrough  dbtest  concurrency_simultaneous  change_streams  aggregation_sharded_collections_passthrough  read_only  write_concern_majority_passthrough  replica_sets_auth  sharding_jscore_passthrough  slow1  parallel_compatibility  concurrency_sharded_with_stepdowns  integration_tests_standalone  aggregation  jsCore_compatibility  concurrency_sharded_with_stepdowns_and_balancer  jsonSchema  aggregation_read_concern_majority_passthrough  integration_tests_sharded  causally_consistent_jscore_passthrough  compile_all  mongosTest  replica_sets_initsync_static_jscore_passthrough  concurrency  change_streams_mongos_passthrough  causally_consistent_jscore_passthrough_auth  replica_sets_jscore_passthrough  replica_sets_initsync_jscore_passthrough  concurrency_replication  noPassthrough  change_streams_sharded_collections_passthrough  sharding  integration_tests_replset  failpoints_auth  retryable_writes_jscore_passthrough  aggregation_facet_unwind_passthrough  disk_wiredtiger  read_only_sharded  compile  jsCore_auth  concurrency_sharded  retryable_writes_jscore_stepdown_passthrough  sharding_auth  replica_sets_kill_secondaries_jscore_passthrough  concurrency_sharded_causal_consistency  noPassthroughWithMongod  tool  read_concern_linearizable_passthrough  read_concern_majority_passthrough  replica_sets  session_jscore_passthrough  sharded_causally_consistent_jscore_passthrough  sharding_jscore_passthrough_wire_ops  jsCore_decimal  auth  sharded_collections_jscore_passthrough  aggregation_mongos_passthrough  failpoints  aggregation_one_shard_sharded_collections  concurrency_sharded_causal_consistency_and_balancer  jsCore  parallel  aggregation_auth  serial_run    tasks for variant enterprise-ubuntu1604-clang-3.8-libcxx:  compile  compile_all    tasks for variant ubuntu1604-debug-aubsan-lite:  jsCore  compile_all  compile  watchdog_wiredtiger  dbtest    tasks for variant enterprise-rhel-62-64-bit:  noPassthroughWithMongod  concurrency_sharded_with_stepdowns  aggregation  aggregation_auth  mongosTest  package  gle_auth_basics_passthrough_write_cmd  sharded_collections_jscore_passthrough  jstestfuzz_concurrent_replication  sharding_gle_auth_basics_passthrough  slow1  sharding_jscore_passthrough_wire_ops  jstestfuzz  bulk_gle_passthrough  concurrency_sharded_with_stepdowns_and_balancer  sharding_op_query  sharding_ese  read_only_sharded  sharding_csrs_continuous_config_stepdown  aggregation_fuzzer  aggregation_one_shard_sharded_collections  concurrency_sharded_causal_consistency_and_balancer  rollback_fuzzer  jstestfuzz_concurrent_sharded  multiversion  sharded_causally_consistent_jscore_passthrough  change_streams_secondary_reads  concurrency  write_concern_majority_passthrough  retryable_writes_jscore_passthrough  gle_auth_basics_passthrough  jstestfuzz_sharded  multiversion_auth  sharding_last_stable_mongos_and_mixed_shards  read_concern_linearizable_passthrough  concurrency_replication  auth  compile  jstestfuzz_sharded_continuous_stepdown  read_only  aggregation_ese  replica_sets_initsync_static_jscore_passthrough  jsCore_decimal  concurrency_sharded  jstestfuzz_concurrent_sharded_continuous_stepdown  dbtest  jstestfuzz_concurrent_sharded_causal_consistency  aggregation_mongos_passthrough  gle_auth_write_cmd  replica_sets_jscore_passthrough  sharding  tool  aggregation_sharded_collections_passthrough  ese  rlp  compile_all  update_fuzzer  jstestfuzz_replication  jsCore_ese  aggregation_facet_unwind_passthrough  change_streams_mongos_passthrough  sharding_jscore_op_query_passthrough  jsCore  integration_tests_standalone  ssl  jstestfuzz_sharded_causal_consistency  audit  change_streams  concurrency_sharded_causal_consistency  integration_tests_replset  jsCore_op_query  serial_run  multiversion_multistorage_engine  parallel  sslSpecial  jstestfuzz_sharded_session  read_concern_majority_passthrough  sharding_jscore_passthrough  jstestfuzz_concurrent  burn_in_tests  lint  compile_benchmarks  benchmarks_orphaned  retryable_writes_jscore_stepdown_passthrough  aggregation_read_concern_majority_passthrough  failpoints_auth  replica_sets_auth  sharding_auth_audit  replica_sets_initsync_jscore_passthrough  noPassthrough  parallel_compatibility  replica_sets_ese  causally_consistent_jscore_passthrough  jstestfuzz_replication_initsync  jsonSchema  session_jscore_passthrough  change_streams_sharded_collections_passthrough  concurrency_simultaneous  failpoints  gle_auth  replica_sets  snmp  disk_wiredtiger  jsCore_minimum_batch_size  idl_tests  jstestfuzz_concurrent_replication_session  integration_tests_sharded  sasl  sharding_gle_auth_basics_passthrough_write_cmd  replica_sets_kill_secondaries_jscore_passthrough  jstestfuzz_replication_session  jstestfuzz_concurrent_sharded_session  auth_audit  causally_consistent_jscore_passthrough_auth  jsCore_auth  sharding_auth  update_fuzzer_replication  jsCore_compatibility    Patch successfully created.                 ID : 5aa976db2fbabe4336f81f44          Created : 2018-03-14 19:24:11.539 +0000 UTC      Description : with alias            Build : https://evergreen.mongodb.com/version/5aa976db2fbabe4336f81f44        Finalized : Yes  ",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-2979","03/14/2018 22:01:20",1,"race-service failure ""h2. [race-service failed on race-detector|https://evergreen.mongodb.com/task/mci_race_detector_race_service_3083938e219bb79558affa23445b04be49554e85_18_03_14_20_00_18/0]     Host: [ec2-52-201-88-193.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-85kr56vg]   Project: [mci|https://evergreen.mongodb.com/waterfall/mci]          ~BF Ticket Generated by [~brian.samek]~  ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-2980","03/14/2018 23:43:49",1,"Waterfall needs a color for system-* statuses ""https://evergreen.mongodb.com/task/mci_race_detector_display_lint_3083938e219bb79558affa23445b04be49554e85_18_03_14_20_00_18""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-2981","03/15/2018 10:31:38",1,"Perf. discovery - ratio value representation and normalization ""Currently, ratio vaulue is calculated as Sa / Sb, where Sa and Sb are speeds of 'compare from/to' revisions. This approach produces abnormal values distribution. For example, ratio 1/3 is closer to 1 than ratio 3/1.  To fix this issue we could use different approaches:  * apply log function: log(Sa / Sb). In this case log(1/3) = -log(3/1) and also log(1/1) = 0 (I think it fits the best for charts, for example trend chart)  * or modify existing function, so we could keep percentages: (sign(Sa / Sb) * max(Sa. Sb) / min(Sa, Sb) -1. For example for 3 / 1 it will give 2 (or 200%), for 1 /3 it will give -2 (or -200%), for 1 / 1 it will give 0(%).    Both approaches will produce normal distribution with peak near 0.""","",0,0,1,0,0,0,0,0,0,0,0,1,0,0,0
"EVG-2986","03/15/2018 15:39:28",2,"test-util failure ""h2. [test-util failed on windows|https://evergreen.mongodb.com/task/mci_windows_test_util_32b7ae3e8f4ab2da14c7ecfb333eb300dd772bd7_18_03_15_15_06_09/0]     Host: [ec2-54-221-3-232.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-3iai7f5g]   Project: [mci|https://evergreen.mongodb.com/waterfall/mci]          ~BF Ticket Generated by [~richard.samuels]~  ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-2991","03/16/2018 14:09:59",1,"Links in Event log to JIRA use a hostname of ""undefined"" ""See: https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_windows_64_2k8_aggregation_fuzzer_54dc55063a25fdcae65356c2515e55768181dc80_18_03_15_22_10_50#/log/EV    Under the event: Mar 15, 2018 7:08:50 pmCreated Jira Alert BFG-57288.    BFG-57288 links to:  https://undefined/browse/BFG-57288""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-2995","03/18/2018 19:23:16",2,"race-service failure ""h2. [race-service failed on race-detector|https://evergreen.mongodb.com/task/mci_race_detector_race_service_c109c8d2ecaf550a05223cbcaaae5d96d4f158c7_18_03_16_15_28_32/1]     Host: [ec2-35-173-204-177.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-aj985ajk]   Project: [mci|https://evergreen.mongodb.com/waterfall/mci]          ~BF Ticket Generated by [~richard.samuels]~  ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-2996","03/19/2018 14:07:03",2,"Add support for read preference to Evergreen settings ""During a primary failover, we received this error      We set write concern in the Evergreen settings but not read preference. We could set read preference to primaryPreferred to avoid this error.""","  error retrieving section from DB: error retrieving section service_flags: no reachable servers  ",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3004","03/19/2018 19:21:19",1,"error: no dispatchable task found in the queue """"","      error:  no dispatchable task found in the queue       extended:  no dispatchable task found in the queue  github.com/evergreen-ci/evergreen/service.assignNextAvailableTask   /data/mci/902a7d0a69432902700828156aeeb289/gopath/src/github.com/evergreen-ci/evergreen/service/api_task.go:304  github.com/evergreen-ci/evergreen/service.(*APIServer).NextTask   /data/mci/902a7d0a69432902700828156aeeb289/gopath/src/github.com/evergreen-ci/evergreen/service/api_task.go:516  github.com/evergreen-ci/evergreen/service.(*APIServer).NextTask-fm   /data/mci/902a7d0a69432902700828156aeeb289/gopath/src/github.com/evergreen-ci/evergreen/service/api.go:688  github.com/evergreen-ci/evergreen/service.(*APIServer).checkHost.func1   /data/mci/902a7d0a69432902700828156aeeb289/gopath/src/github.com/evergreen-ci/evergreen/service/api.go:186  net/http.HandlerFunc.ServeHTTP   /opt/go1.8/go/src/net/http/server.go:1942  github.com/evergreen-ci/evergreen/vendor/github.com/gorilla/mux.(*Router).ServeHTTP   /data/mci/902a7d0a69432902700828156aeeb289/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/gorilla/mux/mux.go:114  github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni.Wrap.func1   /data/mci/902a7d0a69432902700828156aeeb289/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni/negroni.go:46  github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni.HandlerFunc.ServeHTTP   /data/mci/902a7d0a69432902700828156aeeb289/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni/negroni.go:29  github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni.middleware.ServeHTTP   /data/mci/902a7d0a69432902700828156aeeb289/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni/negroni.go:38  github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni.(middleware).ServeHTTP-fm   /data/mci/902a7d0a69432902700828156aeeb289/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni/negroni.go:38  github.com/evergreen-ci/evergreen/service.UserMiddleware.func1   /data/mci/902a7d0a69432902700828156aeeb289/gopath/src/github.com/evergreen-ci/evergreen/service/middleware.go:402  github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni.HandlerFunc.ServeHTTP   /data/mci/902a7d0a69432902700828156aeeb289/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni/negroni.go:29  github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni.middleware.ServeHTTP   /data/mci/902a7d0a69432902700828156aeeb289/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni/negroni.go:38  github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni.(middleware).ServeHTTP-fm   /data/mci/902a7d0a69432902700828156aeeb289/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni/negroni.go:38  github.com/evergreen-ci/evergreen/service.(*RecoveryLogger).ServeHTTP   /data/mci/902a7d0a69432902700828156aeeb289/gopath/src/github.com/evergreen-ci/evergreen/service/middleware.go:479  github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni.middleware.ServeHTTP   /data/mci/902a7d0a69432902700828156aeeb289/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni/negroni.go:38  github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni.(*Negroni).ServeHTTP   /data/mci/902a7d0a69432902700828156aeeb289/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni/negroni.go:86  net/http.serverHandler.ServeHTTP   /opt/go1.8/go/src/net/http/server.go:2568  net/http.(*conn).serve   /opt/go1.8/go/src/net/http/server.go:1825  runtime.goexit   /opt/go1.8/go/src/runtime/asm_amd64.s:2197  github.com/evergreen-ci/evergreen/service.(*APIServer).NextTask   /data/mci/902a7d0a69432902700828156aeeb289/gopath/src/github.com/evergreen-ci/evergreen/service/api_task.go:518  github.com/evergreen-ci/evergreen/service.(*APIServer).NextTask-fm   /data/mci/902a7d0a69432902700828156aeeb289/gopath/src/github.com/evergreen-ci/evergreen/service/api.go:688  github.com/evergreen-ci/evergreen/service.(*APIServer).checkHost.func1   /data/mci/902a7d0a69432902700828156aeeb289/gopath/src/github.com/evergreen-ci/evergreen/service/api.go:186  net/http.HandlerFunc.ServeHTTP   /opt/go1.8/go/src/net/http/server.go:1942  github.com/evergreen-ci/evergreen/vendor/github.com/gorilla/mux.(*Router).ServeHTTP   /data/mci/902a7d0a69432902700828156aeeb289/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/gorilla/mux/mux.go:114  github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni.Wrap.func1   /data/mci/902a7d0a69432902700828156aeeb289/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni/negroni.go:46  github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni.HandlerFunc.ServeHTTP   /data/mci/902a7d0a69432902700828156aeeb289/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni/negroni.go:29  github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni.middleware.ServeHTTP   /data/mci/902a7d0a69432902700828156aeeb289/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni/negroni.go:38  github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni.(middleware).ServeHTTP-fm   /data/mci/902a7d0a69432902700828156aeeb289/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni/negroni.go:38  github.com/evergreen-ci/evergreen/service.UserMiddleware.func1   /data/mci/902a7d0a69432902700828156aeeb289/gopath/src/github.com/evergreen-ci/evergreen/service/middleware.go:402  github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni.HandlerFunc.ServeHTTP   /data/mci/902a7d0a69432902700828156aeeb289/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni/negroni.go:29  github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni.middleware.ServeHTTP   /data/mci/902a7d0a69432902700828156aeeb289/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni/negroni.go:38  github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni.(middleware).ServeHTTP-fm   /data/mci/902a7d0a69432902700828156aeeb289/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni/negroni.go:38  github.com/evergreen-ci/evergreen/service.(*RecoveryLogger).ServeHTTP   /data/mci/902a7d0a69432902700828156aeeb289/gopath/src/github.com/evergreen-ci/evergreen/service/middleware.go:479  github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni.middleware.ServeHTTP   /data/mci/902a7d0a69432902700828156aeeb289/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni/negroni.go:38  github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni.(*Negroni).ServeHTTP   /data/mci/902a7d0a69432902700828156aeeb289/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/urfave/negroni/negroni.go:86  net/http.serverHandler.ServeHTTP   /opt/go1.8/go/src/net/http/server.go:2568  net/http.(*conn).serve   /opt/go1.8/go/src/net/http/server.go:1825  runtime.goexit   /opt/go1.8/go/src/runtime/asm_amd64.s:2197   ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3005","03/19/2018 20:14:20",2,"teardown_group did not run in task group ""Test results should be visible here https://evergreen.mongodb.com/task/mci_race_detector_display_lint_patch_ddf48e044c307e3f8734279be95f2d9d7134410f_5ab00b2e2a60ed6c7b037ac7_18_03_19_19_10_39.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3006","03/19/2018 20:18:54",1,"Add query parameter to retrieve test results for any task execution in REST API v2 ""The {{/tasks/<task_id>/tests}} endpoint returns the test results for the latest execution.    A query parameter should be added to be able to request the results for a specific execution.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3007","03/19/2018 20:26:25",1,"Include project id in the task resource of the REST API v2 ""In the rest API v2, the task resource returned from the {{/tasks/<task_id>}} endpoint should contain the {{project_id}}.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3010","03/20/2018 14:24:34",2,"CLI list aliases command does not list tags """"","  ~ evergreen list --aliases -p mci  __github        ^ubuntu1604$    ^test-.*  __github        ^windows$       ^test-.*  __github        .*      smoke.*  smoke   .*  test    ^ubuntu1604$  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3014","03/20/2018 18:06:30",2,"Ability to have patch-only variants ""The opposite of {{patchable: false}} to have variants that will only run if specifically patched against.""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3015","03/20/2018 18:15:38",2,"Github PR testing erroring with 404 not founds from Github and not creating patch documents ""See [here|https://mongodb.splunkcloud.com/en-US/app/search/search?q=search%20source%3Dhttp%3Aevergreen%20%22patch-intent-processor-github-d3628430-2c68-11e8-9d11-9b2e5bd22849%22&display.page.search.mode=verbose&dispatch.sample_ratio=1&earliest=-24h%40h&latest=now&sid=1521569644.1325457] for an example of such a failure.    Github is returning 404 not found on the commits url, in the case of [this|https://github.com/evergreen-ci/evergreen/pull/899] PR the URL was https://api.github.com/repos/evergreen-ci/evergreen/pulls/899/commits.     We're not sure if this is a Github issue, but it seems to be associated with increase of 502 errors for github.    Possibilities:  1. Retry  2. small delay before initial request  3. -Creating patch documents anyway?-""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3020","03/21/2018 17:43:25",1,"EC2 price caching should retry ""To avoid test failures like https://evergreen.mongodb.com/task/mci_ubuntu1604_test_cloud_patch_e8acfa358074c70be806067e192335f4142f5ab4_5ab289e82a60ed6c7b2a6519_18_03_21_16_35_53""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3024","03/21/2018 20:30:26",2,"schedule tasks that have generate.tasks commands ahead of tasks that don't ""these tasks, in effect, have dependencies, but the scheduler won't necessarily put them at the head of the line, which will increase time-to-completion metrics. ""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3026","03/22/2018 17:10:20",1,"reduce interface service for http client pool ""maybe maintain more than one pool. ""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3027","03/22/2018 17:11:12",1,"pass contexts through validator.  ""remove some/all github context.TODO cases ""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3028","03/22/2018 18:56:12",1,"lint failure ""h2. [lint failed on race-detector|https://evergreen.mongodb.com/task/mci_race_detector_display_lint_54f99531f11ad4784886294cfa45ff01fde0d154_18_03_22_17_51_02/0]      Project: [mci|https://evergreen.mongodb.com/waterfall/mci]          ~BF Ticket Generated by [~richard.samuels]~  ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-3031","03/23/2018 14:41:40",2,"task restarts in dispatching state lead to stuck hosts.  ""I think we should just monitor for tasks that have been dispatched for more than ~2 minutes that haven't been restarted and if they're stuck in that state, we should undispatch them, and force the hosts to retry the next-task process.    This happened to [this host|https://evergreen.mongodb.com/host/sir-xmpi7gvj], and [this task|https://evergreen.mongodb.com/task/mci_race_detector_lint_model_alert_patch_54f99531f11ad4784886294cfa45ff01fde0d154_5ab3fd192fbabe3354bd9d23_18_03_22_18_59_38/0] which was restarted quickly by pull request testing, which probably has tighter timings that this aspect of the system can tolerate. ""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3033","03/23/2018 19:30:26",1,"race-util failure "" h2. [race-util failed on race-detector|https://evergreen.mongodb.com/task/mci_race_detector_race_util_eed9d34f04f673ba3e5b0b399754a6739bcb1f13_18_03_23_17_35_32/0]   Host: [ec2-18-232-114-219.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-1e3g54sg]  Project: [mci|https://evergreen.mongodb.com/waterfall/mci]     ~BF Ticket Generated by [~john.liu]~ ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-3034","03/26/2018 22:07:52",1,"incremental improvements to all config options. ""- in the admin command not the deploy command  - have the ability to exclude deactivated projects""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3035","03/26/2018 22:10:43",1,"Organize UI code ""so that adding a new test file doesn't require listing it in karma.conf.js""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-3036","03/27/2018 15:51:45",1,"lint failure ""h2. [lint failed on race-detector|https://evergreen.mongodb.com/task/mci_race_detector_display_lint_5fa703014758d18a7fb7474cb88d50910061c861_18_03_26_18_03_02/0]      Project: [mci|https://evergreen.mongodb.com/waterfall/mci]          ~BF Ticket Generated by [~richard.samuels]~  ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-3037","03/27/2018 16:35:14",2,"remove notify runner. ""I don't believe that the runner as such is being used, but several runners use the {{notify.NotifyAdmins}} function to send error messages, but otherwise this package is entirely unused. I think we can provide a more reasonable interface for """"sending admin email"""" and remove most of this legacy code now. ""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3038","03/27/2018 18:12:33",1,"Project page should not have .evergreen.yml as ghost text ""This implies that is the default, but there is no default""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-3041","03/28/2018 16:36:06",1,"Have DescribeSpotInstanceRequests handle errors where spot instance doesn't exist anymore ""Don't retry for these        args: { [-]         DryRun:  null         Filters:  null         SpotInstanceRequestIds: [ [+]        ]      }       client:  *cloud.awsClientImpl       error:  InvalidSpotInstanceRequestID.NotFound: The spot instance request ID 'sir-gv6g5dvg' does not exist   status code: 400, request id: ae7051ba-ecef-47e6-8880-f9c61f1b9d5e       message:  error running DescribeSpotInstanceRequests       metadata: { [+] ""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3049","03/29/2018 18:31:00",1,"smoke-test-task failure ""h2. [smoke-test-task failed on ubuntu1604|https://evergreen.mongodb.com/task/mci_ubuntu1604_smoke_test_task_patch_19955d487142d8a07cf9954d5c59b97ec66b7a2a_5abd13b3c9ec445137470d67_18_03_29_16_26_27/0]     Host: [ec2-54-91-51-128.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-ijwr6jwk]   Project: [mci|https://evergreen.mongodb.com/waterfall/mci]          ~BF Ticket Generated by [~brian.samek]~  ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-3050","03/29/2018 19:42:01",1,"move repotracker jobs to remote queue ""as a safer, step towards using the local queues less, let's move all local queue operations related to the repotracker to the remote queue.     this will involve flattening some nested jobs in patch intent processing. ""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3051","03/29/2018 19:42:51",2,"move stats collection jobs to the remote queue ""more delicately, we should see if we can merge host-idle and task-start into a single job, to reduce the overhead.  ""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3055","03/30/2018 16:19:12",1,"move project activation code out of repotracker ""it doesn't depend on any repotracker functionality, and should probably live in the models package. ""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8818","03/30/2018 18:02:36",1,"test-queue failure ""h2. [test-queue failed on ubuntu1604|https://evergreen.mongodb.com/task/amboy_ubuntu1604_test_queue_96e18b98692c7576a3cce6b9b4281898e7ff558b_18_03_29_22_01_31/0]     Host: [ec2-54-158-142-207.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-yfcg7kfh]   Project: [amboy|https://evergreen.mongodb.com/waterfall/amboy]          ~BF Ticket Generated by [~sam.kleinman]~  ""","",0,0,0,0,1,0,0,0,0,0,0,0,1,0,0
"EVG-5518","03/30/2018 18:28:00",1,"'Compare' delta calculations seem wrong for latency tests ""The delta calculations are actually correct but with small numbers, rounding is used and the scale is misleading. Precision makes a huge difference when numbers are as tiny as these. Look at the example below:    (0.003 - 0.002) / 0.002 = 0.5  (0.0034 - 0.0017) / 0.0017 = 1     \|(0.002 - 0.003)\| / 0.002 = .334  \|(0.0017 - 0.0034)\| / 0.0017 = 0.5    When I first looked at the graph below, I thought the calculations were wrong (since they are rounded and the rounded numbers' deltas are very different from the more precise numbers' delta that is used the actual calculation). I then zoomed in and realized the imprecision of the displayed numbers was causing my confusion.""","",0,0,1,0,0,0,0,0,0,0,0,1,0,0,0
"EVG-3061","03/30/2018 18:54:06",1,"Remove legacy event unmarshaller ""Cannot be done until October 2018    Pipe the following into the mongo shell; if it returns nothing it is safe to do this ticket::      Search the repo for """"//TODO: EVG-3061"""" to find code blocks to remove""","  use mci  rs.slaveOk()  db.task_event_log.find({r_id: {$exists: true}, """"data.r_type"""": {$exists: true}}).limit(1)  ",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-3063","03/30/2018 20:25:53",1,"nil pointer exception in build route """"","  runtime/asm_amd64.s:515 [action='aborted' duration='81.643382ms' panic='runtime error: invalid memory address or nil pointer dereference' path='/build/mongodb_mongo_master_osx_108_db7b5a93e9bdfee1826a91b94a9f8b904be89813_14_02_13_03_03_10' request='3108' span='81.643569ms']  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3068","04/02/2018 20:18:43",1,"rest v2 metrics endpoint 400 ""http://evergreen.mongodb.com/api/rest/v2/tasks/dsi_linux_runner_lint_python_scripts_823c7fd3d5881c2ebfe615e088512002593fde5d_18_04_02_16_04_17/metrics/system    ""","  {  status: 400,  error: """"problem parsing time from '' (parsing time """""""" as """"""""2006-01-02T15:04:05.000Z"""""""": cannot parse """""""" as """""""""""")""""  }  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3069","04/02/2018 22:43:10",1,"getEBSCost calls getInstanceInfo with spot instance request id """"","  { """"_id"""" : """"host-termination-job.sir-wf9g6zhj"""", """"job"""" : { """"metadata"""" : { """"errors"""" : [ """"error fetching ebs cost: error getting instance info: id appears to be a spot instance request ID, not a host ID (sir-wf9g6zhj)"""" ] } } }  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8667","04/03/2018 02:19:40",2,"configurable email message type  ""sufficent functionality to replace notify package in evergreen, needs configurable subjects and other features the current smtp settings don't permit. ""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-3074","04/03/2018 17:02:13",1,"Better handle monitor flagging the same host for termination twice ""problem saving new job host-termination-job.sir-t9ng7mkk.2018-04-03.16-00-00: E11000 duplicate key error collection: amboy.evg.service.jobs index: _id_ dup key: { : """"host-termination-job.sir-t9ng7mkk.2018-04-03.16-00-00"""" }""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8783","04/03/2018 21:58:52",1,"Allow sending slack messages to users in Grip ""The slack sender currently only allows sending messages to channels.""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-3087","04/03/2018 22:01:10",2,"Convert existing Github PR Status API code to use event driven notifications ""Also, after finalizing a version, also create a subscription to the outcome of that version""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-3088","04/03/2018 22:08:03",2,"Write migration or script to populate Github <-> Crowd mapping  ""*carefully* iterate the users in the org, and populate their github uid numbers (see model/user.GithubUser)     -Given that we employ ~1000 people, throttle this operation over a couple of hours so we avoid exhausting our API limits.-    [Dashboard|https://mongodb.splunkcloud.com/en-US/app/search/evergreen_github_monitoring] shows we don't drop below 4k anymore, so don't worry about throttling""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-8828","04/03/2018 22:12:22",1,"test-queue failure ""h2. [test-queue failed on ubuntu1604|https://evergreen.mongodb.com/task/amboy_ubuntu1604_test_queue_3b410354187d914a8dca37ba4f95ec767b8b836c_18_04_03_21_04_27/0]     Host: [ec2-107-22-74-78.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-yksr59xj]   Project: [amboy|https://evergreen.mongodb.com/waterfall/amboy]          ~BF Ticket Generated by [~sam.kleinman]~  ""","",0,0,0,0,1,0,0,0,0,0,0,0,1,0,0
"EVG-3089","04/03/2018 22:18:22",2,"Add build-break subscriptions ""Automatically create subscriptions on the outcome trigger to repotracker created versions based on the project's build-break notification configuration.    Search """"build-break"""" in design document for details""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-3090","04/03/2018 22:22:55",2,"Add implicit patch subscriptions ""Create subscriptions to patches automatically based on the user's patch settings.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-3091","04/03/2018 22:29:58",0,"Increase Github status API timeout ""increasing to 60s due to recent timeouts.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-3094","04/04/2018 18:14:53",2,"Entire task group should be able to depend on a task outside the task group ""If a single task in a task group depends on a task outside the task group, this task may not be scheduled with the rest of the task group. We should support task group-level dependencies for the case where a user wishes a task group not to run until some task outside of the group runs.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3095","04/04/2018 19:23:33",1,"write migration function+generator for perf data migrations ""the JS we used in the shell to do this is, we should also have a mode that does this, but sets from/to project and leaves variant alone.     ""","  var copy_baseline = function(tag, project, from_variant, to_variant){      var from_query = {tag: tag, project_id: project, variant: from_variant};      var to_query = {tag: tag, project_id: project, variant: to_variant};      var docs = db.json.find(from_query).toArray();        docs.forEach(function(d){          delete d._id;   d.variant = to_variant          db.json.insert(d);      });  }  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3099","04/04/2018 22:09:39",1,"Link to first execution of a display task 404s ""This URL https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_rhel_62_64_bit_display_unittests!_patch_d1b3c0a0a4dd31e1d1b37ed21cf00a92e59f276e_5ac52230e3c3314977acedf2_18_04_04_19_07_23/0##%257B%2522compare%2522%253A%255B%257B%2522hash%2522%253A%2522d1b3c0a0a4dd31e1d1b37ed21cf00a92e59f276e%2522%257D%255D%257D links to this URL https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_rhel_62_64_bit_compile_unittests_patch_d1b3c0a0a4dd31e1d1b37ed21cf00a92e59f276e_5ac52230e3c3314977acedf2_18_04_04_19_07_23_0 for compile_unittests, which 404s. I believe the task execution number is being passed incorrectly to the URL by the UI code.""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-3101","04/05/2018 14:16:22",1,"Type must be on-demand or spot error """"","  type must be on-demand or spot  github.com/evergreen-ci/evergreen/cloud.(*ec2Manager).GetInstanceStatus      /data/mci/779275dd6bf73b6695674a625ae2db8d/gopath/src/github.com/evergreen-ci/evergreen/cloud/ec2.go:456  github.com/evergreen-ci/evergreen/cloud.(*CloudHost).GetInstanceStatus      /data/mci/779275dd6bf73b6695674a625ae2db8d/gopath/src/github.com/evergreen-ci/evergreen/cloud/cloud_host.go:53  github.com/evergreen-ci/evergreen/units.(*hostTerminationJob).Run      /data/mci/779275dd6bf73b6695674a625ae2db8d/gopath/src/github.com/evergreen-ci/evergreen/units/host_termination.go:127  github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool.runJob      /data/mci/779275dd6bf73b6695674a625ae2db8d/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool/helpers.go:23  github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool.worker      /data/mci/779275dd6bf73b6695674a625ae2db8d/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool/helpers.go:61  github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool.(*localWorkers).Start.func1      /data/mci/779275dd6bf73b6695674a625ae2db8d/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool/local.go:84  runtime.goexit      /opt/go1.8/go/src/runtime/asm_amd64.s:2197  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3102","04/05/2018 15:23:11",1,"UI shows an undefined error in certain host status changes ""Two cases this has been observed in:  - When trying to change a static host to `decommissioned`  - When trying to update the status with an invalid status""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-3103","04/05/2018 16:40:34",2,"Github PRs pushed in close succession result in unscheduled tasks in most recent patch ""https://evergreen.mongodb.com/version/5ac4e71ac9ec446bd998d117 was the most recent commit, but we had to manually schedule windows.    The previous commit, https://evergreen.mongodb.com/version/5ac4e788c9ec446bd998d66e, worked fine.    Note that both had the same patch time.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-3104","04/05/2018 19:55:07",1,"Panic in repotracker ""https://mongodb.slack.com/archives/C866SR2LR/p1522954349000579""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3105","04/05/2018 20:01:23",1,"No reservation found for instance id ""https://mongodb.slack.com/archives/C866SR2LR/p1522954408000535""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3107","04/06/2018 00:48:34",1,"avoid terminating slow hosts that have provisioned ""currently we have an absolute cutoff for a host to go from started->running a task, and it leasds to some frustrating cases where we successfully provision hosts that then get killed before the host gets an agent.     We should:   - when flagging slow provisioning hosts for termination we should make sure that they're actually not-yet-provisioned.  - have the timer reset when the host gets provisioned so """"waiting for agent"""" is tracked separately rather than having a single timeout for everything.    - right now the """"is this host idle and should be terminated"""" is in 2 files and at 3-4 functions/statements, that should be centralized. It would be great if this could be expressed in a way that could be queried for from mongodb rather than filtered at the application level.   - for better traceability, we should log a reason for flagging a host for termination in the event log or at least in splunk when we terminate it. ""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3111","04/06/2018 14:03:31",1,"Panic in host termination job ""pool/helpers.go:36 runtime/asm_amd64.s:515 runtime/panic.go:489 runtime/panic.go:63 runtime/signal_unix.go:290 units/host_termination.go:85 pool/helpers.go:23 pool/helpers.go:61 pool/local.go:84 runtime/asm_amd64.s:2197""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3113","04/06/2018 18:04:44",2,"Pagination of /rest/v2/tasks/<task_id>/tests isn't compatible with running tests multiple times ""In the {{mongodb\-mongo\-*}} Evergreen projects we run test suites using resmoke.py with {{\-\-repeat=10}} on [the Linux Repeated Execution builder|https://evergreen.mongodb.com/task/mongodb_mongo_master_linux_64_repeated_execution_jsCore_4644d79d8cc42f2dd343fbab2f1d54fe80e2e2ea_18_03_01_15_02_40]. This causes the {{report.json}} we upload to Evergreen to have the same JavaScript test mentioned multiple times. Attempting to use pagination to iterate over the test results leads to (1) certain results being returned multiple times, and more noticably (2) an infinite loop. I think the {{/rest/v2/tasks/<task_id>/tests}} endpoint should be changed to either (a) ignore the {{limit}} parameter and return all executions of a test in its response, or (b) paginate using a unique value - for example, the _id of the document in the {{mci.tests}} collection.    ""","  Fetching test results https://evergreen.mongodb.com/api/rest/v2/tasks/mongodb_mongo_master_linux_64_repeated_execution_jsCore_4644d79d8cc42f2dd343fbab2f1d54fe80e2e2ea_18_03_01_15_02_40/tests?limit=1000  Fetching test results https://evergreen.mongodb.com/api/rest/v2/tasks/mongodb_mongo_master_linux_64_repeated_execution_jsCore_4644d79d8cc42f2dd343fbab2f1d54fe80e2e2ea_18_03_01_15_02_40/tests?limit=1000&start_at=collection_info_cache_race%3AValidateCollections  Fetching test results https://evergreen.mongodb.com/api/rest/v2/tasks/mongodb_mongo_master_linux_64_repeated_execution_jsCore_4644d79d8cc42f2dd343fbab2f1d54fe80e2e2ea_18_03_01_15_02_40/tests?limit=1000&start_at=drop_index%3AValidateCollections  ...  Fetching test results https://evergreen.mongodb.com/api/rest/v2/tasks/mongodb_mongo_master_linux_64_repeated_execution_jsCore_4644d79d8cc42f2dd343fbab2f1d54fe80e2e2ea_18_03_01_15_02_40/tests?limit=1000&start_at=pull_or%3AValidateCollections  Fetching test results https://evergreen.mongodb.com/api/rest/v2/tasks/mongodb_mongo_master_linux_64_repeated_execution_jsCore_4644d79d8cc42f2dd343fbab2f1d54fe80e2e2ea_18_03_01_15_02_40/tests?limit=1000&start_at=sort10%3AValidateCollections  Fetching test results https://evergreen.mongodb.com/api/rest/v2/tasks/mongodb_mongo_master_linux_64_repeated_execution_jsCore_4644d79d8cc42f2dd343fbab2f1d54fe80e2e2ea_18_03_01_15_02_40/tests?limit=481&start_at=update_multi5%3AValidateCollections  Fetching test results https://evergreen.mongodb.com/api/rest/v2/tasks/mongodb_mongo_master_linux_64_repeated_execution_jsCore_4644d79d8cc42f2dd343fbab2f1d54fe80e2e2ea_18_03_01_15_02_40/tests?limit=3&start_at=write_result%3AValidateCollections  Skipping https://evergreen.mongodb.com/api/rest/v2/tasks/mongodb_mongo_master_linux_64_repeated_execution_jsCore_4644d79d8cc42f2dd343fbab2f1d54fe80e2e2ea_18_03_01_15_02_40/tests?limit=3&start_at=write_result%3AValidateCollections because we'd otherwise infinite loop  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3117","04/09/2018 21:11:39",2,"Unable to run anser from a directory outside the clients directory if EVGHOME is unset ""john.liu@evergreenapp-1:/srv/evergreen/current/clients/linux_amd64$ ./evergreen service deploy anser --id admin_map_restructure --dry-run --url $DB  [evergreen] 2018/04/09 19:58:57 [p=info]: creating new remote job queue with 32 workers  [evergreen] 2018/04/09 19:58:57 [p=info]: job server running  [evergreen] 2018/04/09 19:58:57 [p=error]: EVGHOME is unset  [evergreen] 2018/04/09 19:58:57 [p=warning]: client directory 'clients' does not exist, creating empty directory and continuing with caution  [evergreen] 2018/04/09 19:58:57 [p=error]: mkdir clients: permission denied  [evergreen] 2018/04/09 19:58:57 [p=emergency]: problem configuring application environment: problem finding client binaries: lstat clients: no such file or directory""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3120","04/10/2018 02:02:14",1,"ValidateHost should always validate host secret ""https://github.com/evergreen-ci/evergreen/blob/9c9ad23589805c8a7c8c6b327f014b341156d4a3/model/validate.go#L71-L74""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3122","04/10/2018 16:52:23",1,"Finalizing a patch from the CLI fails if display task and task group are both present """"","  (venv) [jonathan@CAP-JA mongo]$ evergreen patch -y -d """"Min task_group config #4"""" -v linux-64 -t """"task1,task2!,task3,task4"""" -f  Unexpected reply from server (500 Internal Server Error): error processing patch: patch has no build variants or tasks  (venv) [jonathan@CAP-JA mongo]$ evergreen patch -y -d """"Min task_group config #4"""" -v linux-64 -t """"task1,task2!,task3,task4""""  Patch successfully created.             ID : 5accd87bc9ec44776407faf6      Created : 2018-04-10 15:30:04.421 +0000 UTC      Description : Min task_group config #4        Build : https://evergreen.mongodb.com/patch/5accd87bc9ec44776407faf6        Finalized : No  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3123","04/10/2018 17:10:18",1,"Allow admins to add a reason when quarantining a host ""When I quarantine a host it should prompt to add a reason which should be free form text. This allows for someone else to go back to troubleshoot these hosts and they can see a clear reason why the host was manually quarantined. This message should be displayed in the event log under the """"Additional Details""""""","",1,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-3137","04/10/2018 21:53:48",2,"Tasks with same task group but different build are out of order in queue ""https://evergreen.mongodb.com/build/mongodb_mongo_master_enterprise_windows_64_2k8_openssl_patch_d1b3c0a0a4dd31e1d1b37ed21cf00a92e59f276e_5acd1fe6c9ec443f0213179b_18_04_10_20_35_51""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3128","04/11/2018 15:46:29",2,"add flag to disable distro without removing it. ""effect should be:   - do not generate new schedules for it.   - do not start new hosts for it.   - disable spawning.     should be ok to let existing hosts run and work through the existing queue. ""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-3129","04/11/2018 15:47:30",2,"admin rest route to clear a schedule for a specific distro ""should be able to clear a persisted schedule, effectively preventing new tasks from being dispatched on that distro (until the scheduler runs again.) ""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-3133","04/11/2018 16:23:29",1,"Windows task restarts itself after completion ""This task ran to completion on windows, then restarted and ran again, 9 times.  It even finished uploading artifacts before restarting (though the upload portion is missing from the log).  The uploading of artifacts is a """"post"""", so the task finished successfully.     https://evergreen.mongodb.com/task/mongo_odbc_driver_win32_build_patch_a1013a7e247e05e347a03e04bdf146140bb4f720_5ace13f6e3c3311b1673eb37_18_04_11_13_56_37""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3134","04/11/2018 17:05:50",1,"remove configuration MergeToggle configuration  ""(doesn't make sense any more.) ""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-9227","04/12/2018 16:18:43",1,"Grip SMTP sender not sending correctly formatted RCPT command/not handling STARTTLS command ""Grip does this:  {code}    addr := target.String()    if err = o.client.Rcpt(addr); err != nil {  {code}  So addr is formatted like a RFC 5322, but the RFC says it should just be the (""""mailbox and domain"""" (that is addr.Address)    See quote from [here|https://tools.ietf.org/html/rfc5321]      ""","    addr := target.String()    if err = o.client.Rcpt(addr); err != nil {    The second step in the procedure is the RCPT command.  This step of     the procedure can be repeated any number of times.          RCPT TO:<forward-path> [ SP <rcpt-parameters> ] <CRLF>       The first or only argument to this command includes a forward-path     (normally a mailbox and domain, always surrounded by """"<"""" and """">""""     brackets) identifying one recipient.  ",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-3136","04/12/2018 17:46:23",1,"Add more retries to the host provisioning step ""We're seeing problems with some hosts taking a bit longer than usual to start the ssh service so we run into provisioning problems (like https://evergreen.mongodb.com/host/sir-tbs87y1g).    It looks like ssh becomes available within the minute after we stop retrying, so adding more retries would help.    We'll also look into ways to make ssh start faster.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3140","04/13/2018 14:40:19",1,"Add Newer/Older buttons at bottom of patches list ""When searching through a list of patches for a specific patch run, my typical UX flow is to scan each entry from top to bottom to see if the one I want is on that page. If it's not, I have to scroll back to the top to click the """"Older"""" button to get to the next page. It would be useful to have the newer/older links additionally displayed at the bottom to avoid this inconvenience.""","",0,1,0,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-3141","04/13/2018 18:04:11",1,"lobster next/prev does not notice changes in search term ""If you start a search in lobster by typing a search term and then clicking Find, and then you change (edit) the search term, the Prev and Next buttons continue the former search, instead of searching for the new term.""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-3143","04/15/2018 21:44:54",2,"Add Evergreen command to serialize all expansions into a YAML file ""One of the reasons that the Server team's {{etc/evergreen.yml}} project configuration file makes so much use of embedded {{shell.exec}} scripts is because the string substitution for expansions is syntactically convenient. There are many advantages (esp. around testability) to moving these embedded scripts out of the Evergreen project configuration but we'd like to be able to avoid a bunch of options processing boilerplate in Python when we'd go to convert them. Having an Evergreen command able to generate the YAML file so all the of the scripts could take the same command line inputs was an idea that came up between [~david.bradford] and myself as a way to address this.""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3145","04/16/2018 16:31:31",2,"Error restarting PyMongo build ""Clicking """"restart build"""" here fails:    https://evergreen.mongodb.com/version/mongo_python_driver_04de1697cb1f1d877023942f7ce620415ee08b60    Furthermore there's no error message, only """"undefined"""".    I hypothesize that Evergreen times out restarting a build with 1449 tasks, and there's a second bug that prevents it from displaying an informative error.""","",0,0,0,0,0,0,1,0,0,1,0,0,0,0,0
"EVG-3148","04/17/2018 14:26:30",1,"Intra-task group dependencies should be a validation warning ""Tasks will not run serially if some tasks have dependencies while others do not, since the scheduler must run to schedule a task whose dependencies have just become satisfied.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3150","04/17/2018 17:49:51",1,"Function names are not validated ""The following will pass {{evergreen validate}}:    ""","  ...   - func: """"no function defined""""  ...  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3158","04/17/2018 22:47:47",1,"Make it possible for project admins to blacklist tasks/builds/versions for their projects ""Prior to EVG-913 this was possible by any authenticated user but is now something that can only be done by Evergreen admins.""","",0,1,0,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-3159","04/18/2018 15:05:50",1,"test-agent failure ""h2. [test-agent failed on ubuntu1604|https://evergreen.mongodb.com/task/mci_ubuntu1604_test_agent_0ed622d13a7b0861c70f7a2e7942c8e6f5285521_18_04_17_21_32_26/0]     Host: [ec2-54-86-109-55.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-d9vg5qhj]   Project: [mci|https://evergreen.mongodb.com/waterfall/mci]          ~BF Ticket Generated by [~john.liu]~  ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-3161","04/18/2018 15:46:08",1,"Display task shows date of ""Dec 31, 0000"" ""https://evergreen.mongodb.com/task/mci_ubuntu1604_display_lint_9cc8da404f24023cd24e6a5e727cd37ed91565ec_18_04_18_14_41_08""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-3162","04/18/2018 16:28:01",2,"Duplicated/missing patch aliases in the UI ""The workloads project had two {{.* .*}} GitHub patch aliases.  The Evergreen project was missing its {{test.*}} alias.""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-3171","04/19/2018 16:35:43",1,"Waterfall - collapsed view for search ""Perf team wants to improve UX of waterfall when working with build variants that have different schedule. For example for sys-perf project 'Linux 3-Shard Cluster' variant executed on weekly basis and an performance engineer have to scroll several pages to see the run results.  As a good starting point it would be nice to have the same collapsed view when using search with variant name. Currently, the search doesn't show collapsed results, because it executed on UI.  This happens because search works on client side only. In order to implement new behavior we should send search term to backend and also modify DB query to use it.  Acceptance criteria:  * Users have similar UX (collapsed view) when looking at all results (currently done) and when looking at search results (todo)""","",0,1,0,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-3174","04/19/2018 17:59:49",1,"Display tasks with multiple executions do not have previous_executions when requested via api ""Example:    https://evergreen.mongodb.com/api/rest/v2/builds/mci_race_detector_041f5d87b3d9609bef48a4a21e32606242e8638b_18_04_17_20_01_00/tasks?fetch_all_executions=1    Expected: In the above case where execution=1 for the latest run, there should be a previous_executions element with execution=0 data.    Actual: previous_executions is missing""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3178","04/19/2018 21:15:58",1,"create host provisioning background job  ""with timeouts, and a sustainable periodicity.    this is half of the hostinit process. ""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-3179","04/19/2018 21:33:56",2,"Link icons in HTML logs inoperative ""The """"link"""" icons at the beginning of each line of the HTML logs seem to not be working.     Example:  https://evergreen.mongodb.com/task/dot_net_driver_tests__version~2.6_os~windows_64_topology~replicaset_auth~auth_ssl~nossl_test_patch_b6a9c2675a5eeb887e8103b262e8f25d5a564d00_5ad8df43e3c33109168f2959_18_04_19_18_26_12    Possibly related to the following error message: """"Refused to execute script from 'https://evergreen.mongodb.com/static/js/jquery.js' because its MIME type ('text/plain') is not executable, and strict MIME type checking is enabled.""""    Visiting """"https://evergreen.mongodb.com/static/js/jquery.js"""" yields a 404 page.""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-3184","04/20/2018 16:47:23",2,"move host creation to background job ""this is the component that calls start-hosts in the cloud APIs""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-3186","04/20/2018 16:48:42",2,"run background job creation operation on multiple systems  ""but maybe not every system, use an environment variable to flag this on some systems. ""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-3189","04/20/2018 19:36:18",1,"make smoke-start-server fails locally on OS X """"","  [web.service] 2018/04/20 14:33:14 [p=trace]: [evergreen] 2018/04/20 14:33:14 [p=emergency]: problem configuring application environment: Failed to setup email logger: dial tcp [::1]:25: connect: connection refused  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3191","04/20/2018 21:07:05",1,"Intermittent TestAbort failures in test-agent ""h2. [test-agent failed on ubuntu1604|https://evergreen.mongodb.com/task/mci_ubuntu1604_test_agent_patch_662c9afe7d4298a40dfe3ce43d1521699f76edd8_5ada419ac9ec441366fe38c8_18_04_20_19_38_06/0]     Host: [ec2-18-232-166-76.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-a8ar77rk]   Project: [mci|https://evergreen.mongodb.com/waterfall/mci]          ~BF Ticket Generated by [~brian.samek]~  ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-3204","04/23/2018 19:56:07",2,"Build Failure Links for Performance Discovery ""Given a revision/patch is selected that contains tests with associated open Build Failures  When I scroll down the page  Then I see a list of BF's listed in a """"Failures"""" column that are open and that were created after the reference point (baseline tag, patch id, or revision)    Given a revision/patch is selected that contains tests with associated open Build Failures  When I click on a Build Failure Link  Then I'm taken to that build failure in JIRA""","",0,1,0,0,0,0,0,0,0,0,0,1,0,0,0
"EVG-3252","04/24/2018 22:21:33",2,"Windows task restarted, likely due to agent panic """"","  [2018/04/24 15:13:57.794] Task logger initialized (agent revision: 854f0bcf9c94208871ddbf3616d545071dfd0bfc).  [2018/04/24 15:13:58.050] Starting task mongodb_mongo_master_windows_64_2k8_ssl_powercycle_fcv3.6_patch_fc8096229e6ba7745431f77ec985eb65ee0541af_5adf7a02e3c33152d0e8bdca_18_04_24_18_40_36, execution 0.  [2018/04/24 15:13:58.174] Running pre-task commands.  [2018/04/24 15:13:58.501] Running command 'shell.exec' in """"kill processes"""" (step 1 of 5)  [2018/04/24 15:13:58.606] Running command 'shell.exec' in """"cleanup environment"""" (step 2 of 5)  [2018/04/24 15:13:58.638]   rm -rf src /data/db/* mongo-diskstats* mongo-*.tgz ~/.aws ~/.boto venv  ...  [2018/04/24 15:48:09.783] 2018-04-24 19:47:39,841 INFO System was last booted 2018-04-24 19:44:52.000000, up 167 seconds  [2018/04/24 15:48:09.783] 2018-04-24 19:47:39,841 INFO Operations to perform ['crash_server']  [2018/04/24 15:48:09.783] Connection reset by 10.122.1.15 port 22  [2018/04/24 15:53:39.027] Task logger initialized (agent revision: 854f0bcf9c94208871ddbf3616d545071dfd0bfc).  [2018/04/24 15:53:39.261] Starting task mongodb_mongo_master_windows_64_2k8_ssl_powercycle_fcv3.6_patch_fc8096229e6ba7745431f77ec985eb65ee0541af_5adf7a02e3c33152d0e8bdca_18_04_24_18_40_36, execution 0.  [2018/04/24 15:53:39.387] Running pre-task commands.  [2018/04/24 15:53:39.673] Running command 'shell.exec' in """"kill processes"""" (step 1 of 5)  [2018/04/24 15:53:39.848] Running command 'shell.exec' in """"cleanup environment"""" (step 2 of 5)  [2018/04/24 15:53:39.888]   rm -rf src /data/db/* mongo-diskstats* mongo-*.tgz ~/.aws ~/.boto venv  ...  [2018/04/24 16:21:01.837] 2018-04-24 20:20:32,608 INFO Operations to perform ['crash_server']  [2018/04/24 16:21:01.837] Connection reset by 10.122.15.99 port 22  [2018/04/24 16:26:38.510] Task logger initialized (agent revision: 854f0bcf9c94208871ddbf3616d545071dfd0bfc).  [2018/04/24 16:26:38.736] Starting task mongodb_mongo_master_windows_64_2k8_ssl_powercycle_fcv3.6_patch_fc8096229e6ba7745431f77ec985eb65ee0541af_5adf7a02e3c33152d0e8bdca_18_04_24_18_40_36, execution 0.  [2018/04/24 16:26:38.827] Running pre-task commands.  [2018/04/24 16:26:39.081] Running command 'shell.exec' in """"kill processes"""" (step 1 of 5)  [2018/04/24 16:26:39.408] Running command 'shell.exec' in """"cleanup environment"""" (step 2 of 5)  [2018/04/24 16:26:39.461]   rm -rf src /data/db/* mongo-diskstats* mongo-*.tgz ~/.aws ~/.boto venv  ...  [2018/04/24 16:47:37.378] 2018-04-24 20:47:04,755 INFO System was last booted 2018-04-24 20:44:24.000000, up 160 seconds  [2018/04/24 16:47:37.378] 2018-04-24 20:47:04,755 INFO Operations to perform ['crash_server']  [2018/04/24 16:47:37.378] Connection reset by 10.122.0.170 port 22  [2018/04/24 16:53:08.819] Task logger initialized (agent revision: 854f0bcf9c94208871ddbf3616d545071dfd0bfc).  [2018/04/24 16:53:09.347] Starting task mongodb_mongo_master_windows_64_2k8_ssl_powercycle_fcv3.6_patch_fc8096229e6ba7745431f77ec985eb65ee0541af_5adf7a02e3c33152d0e8bdca_18_04_24_18_40_36, execution 0.  [2018/04/24 16:53:09.451] Running pre-task commands.  [2018/04/24 16:53:09.748] Running command 'shell.exec' in """"kill processes"""" (step 1 of 5)  [2018/04/24 16:53:10.106] Running command 'shell.exec' in """"cleanup environment"""" (step 2 of 5)  [2018/04/24 16:53:10.153]   rm -rf src /data/db/* mongo-diskstats* mongo-*.tgz ~/.aws ~/.boto venv  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3253","04/24/2018 23:45:49",1,"REST /v1/tasks/task_id endpoint broken for split tasks ""In particular the test_results object is empty. I use this for a script that shows me all failing tests across all tasks in a patch build.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3261","04/25/2018 15:17:13",1,"Validate that execution tasks in a display task are not named display_* ""This may cause task IDs to collide.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3262","04/25/2018 15:41:41",1,"Evergreen /build page should show wall-clock time for display tasks listed in the ""Tasks"" sidebar ""For example, the {{sharding}} task reports that it takes 1h25m but that is the cumulative time and not the wall-clock time after it has been subdivided into {{sharding_1}}, {{sharding_2}}, etc. I'd like to be able to use the """"Tasks"""" sidebar to identify the long-running Evergreen tasks so I think displaying the wall-clock time instead of the cumulative time would be more helpful.    [https://evergreen.mongodb.com/build/mongodb_mongo_master_enterprise_rhel_62_64_bit_db80e9fbd16df2ef3b357bad4c4c7d9212e57dcf_18_04_25_09_28_08]   [https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_rhel_62_64_bit_display_sharding_db80e9fbd16df2ef3b357bad4c4c7d9212e57dcf_18_04_25_09_28_08]""","",0,1,0,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-3263","04/25/2018 15:44:14",2,"Evergreen /build page should provide some way to expand display tasks in the ""Tasks"" sidebar into their constituent execution tasks ""The table below the """"This task contains 16 execution tasks"""" section that's shown on [this task page|https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_rhel_62_64_bit_display_sharding_db80e9fbd16df2ef3b357bad4c4c7d9212e57dcf_18_04_25_09_28_08] would be beneficial to be able to visualize inline on the /build page in the """"Tasks"""" sidebar as a way to compare across Evergreen tasks how long the execution units take to run.""","",0,1,0,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-3265","04/25/2018 16:53:16",1,"Panic in ec2 host provider ""https://github.com/evergreen-ci/evergreen/blob/fede5eb386db11f5911149464c9f8d9dbbbdba28/cloud/ec2.go#L616    stack  pool/helpers.go:36 runtime/asm_amd64.s:515 runtime/panic.go:489 runtime/panic.go:63 runtime/signal_unix.go:290 cloud/ec2.go:616 hostinit/setup.go:121 hostinit/setup.go:277 hostinit/wrapper.go:64 units/provisioning_setup_host.go:78 pool/helpers.go:23 pool/helpers.go:61 pool/local.go:84 runtime/asm_amd64.s:2197""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3266","04/25/2018 16:58:04",1,"Display ""Files"" section for failed execution tasks on the display task's /task page ""This request came out of a Slack conversation [~milkie] would wishes to avoid needing to click through to the execution task when he wants to view the artifacts associated with the particular task failure.    https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_rhel_62_64_bit_display_replica_sets_auth_patch_b57eee5a295ede1fd67299dc9990c272c1f66ea3_5ae08618e3c33152d0fc8b41_18_04_25_13_44_15""","",0,1,0,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-3267","04/25/2018 17:05:49",1,"Reduce API calls in collect-task-end-data and collect-host-idle-data jobs ""getEC2Cost seems to make an unnecessary call to GetInstanceInfo. This causes us to exceed our API limits when > 1000 tasks finish in < 10 minutes. I think the data we need from this API call can be cached and we may be able to drastically reduce the API calls we make for these jobs.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3269","04/25/2018 21:10:23",1,"Log total queue length in a stats job ""For the historical dashboard, which currently has a graph with no data.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-3270","04/25/2018 21:43:40",1,"SetupHost should not attempt to set up a host if another job is there first ""We saw a case where the queues were backed up, and many provisioning-setup-host jobs attempted to run on a single host, causing it to become decommissioned while it was running a task. It's also conceivable this could happen if a job has not finished by the time the job creation job runs.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3273","04/26/2018 15:47:55",1,"Run create host more, setup host less ""In this commit https://github.com/evergreen-ci/evergreen/commit/e4da95da76f03a2611e0226e966ec29b738e9ca4 we throttled hostinit on the theory that it is the cause of us hitting AWS API limits. However, from Splunk graphs from a period where we started 300 new hosts in 10 minutes, it's clear that the biggest user of the API is setup host. Since we pay up front for a minute, and since it may take that long for hosts to spawn, we should run setup host at the same rate that we run create host.    See link to graph in comment.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3277","04/27/2018 16:15:56",1,"Error when restarting display task led to multiple restarts and some tasks with no task logs ""When I had click the restart button for https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_rhel_62_64_bit_display_sharding_auth_patch_7cd83e5486cfb3383c2e4e5671ae9602be297547_5ae2b03c2fbabe28b01ee4db_18_04_27_05_08_24, there was some error that was reported (no screenshot, sorry). Refreshing the page shows that the task had actually restarted but clicking through to the execution tasks showed that the task had effectively been restarted multiple times.    https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_rhel_62_64_bit_display_sharding_auth_patch_7cd83e5486cfb3383c2e4e5671ae9602be297547_5ae2b03c2fbabe28b01ee4db_18_04_27_05_08_24/3 is marked as """"System unresponsive"""" because some tasks (e.g. https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_rhel_62_64_bit_sharding_auth_19_patch_7cd83e5486cfb3383c2e4e5671ae9602be297547_5ae2b03c2fbabe28b01ee4db_18_04_27_05_08_24/3) are saying that they are running when in fact [the host|https://evergreen.mongodb.com/host/sir-wn2r7dhg] has been terminated already.""","",0,0,0,0,0,0,1,0,0,0,1,0,0,0,0
"EVG-3278","04/27/2018 16:21:08",1,"Goroutine leak in agent ""goroutine 146625 [chan send, 1370 minutes]:  github.com/evergreen-ci/evergreen/agent.(*Agent).runCommands.func2.1(0xc42084d380, 0xc420edc7c0)      /data/mci/2c983fd2b509e3982e50ec453047eecc/gopath/src/github.com/evergreen-ci/evergreen/agent/command.go:87 +0x160  github.com/evergreen-ci/evergreen/agent.(*Agent).runCommands.func2(0xc42084d380, 0xc420edc7c0, 0x29438e0, 0xc420ffa0c0, 0xc4203862a0, 0xc420adc9a0)      /data/mci/2c983fd2b509e3982e50ec453047eecc/gopath/src/github.com/evergreen-ci/evergreen/agent/command.go:91 +0xf2  created by github.com/evergreen-ci/evergreen/agent.(*Agent).runCommands      /data/mci/2c983fd2b509e3982e50ec453047eecc/gopath/src/github.com/evergreen-ci/evergreen/agent/command.go:91 +0x6e2""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3279","04/27/2018 16:55:54",1,"Task page from a task in a display_group needs a navigation back to the display_group ""When navigating from a display_group to a task there is no link on the task page back to the display group.""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-3280","04/27/2018 21:31:24",1,"race-agent failure ""h2. [race-agent failed on race-detector|https://evergreen.mongodb.com/task/mci_race_detector_race_agent_df2949c03cd3c2af3af4f7c968ecaf8147095f1a_18_04_27_15_21_34/0]     Host: [ec2-54-152-68-147.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-anmi6qtk]   Project: [mci|https://evergreen.mongodb.com/waterfall/mci]          ~BF Ticket Generated by [~richard.samuels]~  ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-3281","04/27/2018 22:34:00",1,"Populate 'Failing Tests' field in BFG/BF tickets with failing tests ""See summary.""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-3282","04/28/2018 06:41:30",1,"Cannot save project that has PR testing enabled ""The https://evergreen.mongodb.com/projects##stitch-cloud-prod project cannot be saved right now because the stitch-cloud-qa project also tracks master as it should but it does not have PR testing due to the restriction.    The error I get saving on stitch-cloud-prod is """"Couldn't save project: Cannot enable PR Testing in this repo, must disable in 'stitch-cloud-prod' first""""""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3283","04/28/2018 19:32:43",1,"Add files links to REST V2 /tasks/{task_id} endpoint for exec tasks in a display task ""https://evergreen.mongodb.com/rest/v1/tasks/mongodb_mongo_master_enterprise_rhel_62_64_bit_coverage_display_unittests!_5891912b5622eed300b11b05cd3269be580e086c_18_04_27_11_55_41 reports \{{""""files"""": null}}.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3284","04/30/2018 04:14:58",1,"Add pprof endpoint to agent ""In EVG-3276, in order to get the stack trace for a running agent, we had to attach to its stdout and then send it SIGQUIT. We currently have pprof on the runner and web service. It should also be exposed on the agent.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-3286","04/30/2018 17:00:35",2,"Add support for force terminating multiple hosts ""EVG-68 added support for terminating one.""","",0,0,0,1,0,0,0,0,0,0,1,0,0,0,0
"EVG-3290","04/30/2018 23:18:17",1,"fetchDiffFromGithub should retry ""We hit this error:  ""","  failed to fetch diff from github: Expected 200 OK, got 404 Not Found  patch document should have 1 patch, found 0 ",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-3291","04/30/2018 23:23:30",2,"Host termination UI ran teardown script in infinite loop ""I terminated the host in the DB to stop it.    https://evergreen.mongodb.com/host/sir-bi2g7aph""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3296","05/01/2018 15:07:11",1,"Tasks restart job panics at the end log statement ""pool/helpers.go:36 runtime/asm_amd64.s:515 runtime/panic.go:489 runtime/panic.go:63 runtime/signal_unix.go:290 units/tasks_restart.go:70 pool/helpers.go:23 pool/helpers.go:61 pool/local.go:84 runtime/asm_amd64.s:2197""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3300","05/02/2018 03:13:53",1,"UpdateRunningTask should check host health ""[UpdateRunningTask|https://github.com/evergreen-ci/evergreen/blob/eca5f65b497c2b4325b6a71fe24d85ffde3a5629/model/host/host.go#L406]¬†may attempt to assign a task to a host that has been decommissioned or terminated, because iterating over the queue can take some time, and while this is happening the host may change state. Before assigning a task to a host, we should check host health once more, like the beginning of¬†[NextTask|https://github.com/evergreen-ci/evergreen/blob/eca5f65b497c2b4325b6a71fe24d85ffde3a5629/service/api_task.go#L366] does.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3301","05/02/2018 03:23:59",2,"Cache expected task durations between scheduler runs ""Cache the results of [GetExpectedDurations|https://github.com/evergreen-ci/evergreen/blob/eca5f65b497c2b4325b6a71fe24d85ffde3a5629/scheduler/task_duration_estimator.go#L15]¬†between scheduler runs. Also, ensure this query is covered by an index.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3303","05/02/2018 15:16:51",1,"Eradicate IsNil from auth.User interface ""In rest/route/authenticator.go, the return values from GetUser need to be nil checked. This lets us remove the IsNil method.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-3309","05/02/2018 20:18:51",1,"BFG tickets are not being created for some Evergreen failures ""This was first reported to me by [~esha.maharishi]. [Here|https://evergreen.mongodb.com/task/mongodb_mongo_master_ubuntu1604_debug_asan_sharding_ese_c50a57061af31f92c1c6aab09b1417ab127fed0c_18_04_25_19_45_49] is an example of a task that did not generate a BFG ticket. It's been failing on every commit, but only now has someone noticed the failure. I'm unsure if every one of those failures are missing a BFG, or if it's just some of them.    After speaking with [~robert.guo], I'm marking this as P1 because it's crunch time for the 4.0 release and we need clear visibility as to what is failing. It would be nice if we could run an analysis of  * all the failures in Evergreen  * all the tickets created in the BFG project  for the past 7 days or so, so we can correlate them and see what percentage of Evergreen failures are missing a BFG ticket. If the percentage is low, we can drop the priority.""","",0,0,0,0,0,0,1,0,0,1,0,0,0,0,0
"EVG-3313","05/03/2018 18:13:32",1,"An offline server shown as running ""I see https://evergreen.mongodb.com/host/sles12-z-3.maristisv.build.10gen.cc is in running state and claiming that Last Reachability Check ran a few seconds ago, but we know that it's down right now and not reachable.""","",0,0,0,0,0,0,1,0,0,1,0,0,0,0,0
"EVG-3316","05/04/2018 14:55:19",1,"Search is not being updated after changing case sensitive toggle ""Go here:  https://logkeeper.mongodb.org/lobster/build/6851102e2debb777c24bf4cc37f82461/test/5aebe84a54f24812c008f808?bookmarks=0%2C19723    Type """"numberLong"""" in the Search bar and click Find twice.  (should be at hit 2 of 891)  Now change the search to """"numberLong("""" and turn on Case Sensitive search, then click Next.  The browser will hang as the search script never returns.""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-3318","05/04/2018 17:46:19",1,"Some task history queries do not return results ""https://evergreen.mongodb.com/task_history/mongodb-mongo-master/unittests?revision=11d837751b0da2cf7948ee17e2f6438f38c93693#/decorable_test=fail""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3319","05/04/2018 18:13:19",1,"Escape Jira reserved characters in build baron plugin ""[https://confluence.atlassian.com/jiracoreserver073/search-syntax-for-text-fields-861257223.html]    ¬†    [https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_rhel_67_s390x_display_unittests!_11d837751b0da2cf7948ee17e2f6438f38c93693_18_05_04_03_57_22]¬†""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8940","05/04/2018 18:16:12",1,"Grip email sender cannot be long lived due to socket timeouts ""Must open a connection per send""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-3320","05/04/2018 21:58:53",1,"Task in task group incorrectly has build_id set to it's task id. ""Task mongodb_mongo_master_enterprise_rhel_62_64_bit_compile_patch_3d9ad8270139723593781ba980dd07c5c230b085_5aecb3f4e3c331265f754822_18_05_04_19_27_50 has a build id that is the same as it's task id""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-3324","05/04/2018 23:45:38",1,"Fold IsDispatchable into FindNextTask ""If a task is not dispatchable, we iterate over the queue again in FindNextTask.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3330","05/07/2018 18:45:48",1,"fetch_all_executions tasks endpoint can be slow ""This takes 8-10 seconds.    [https://evergreen.mongodb.com/api/rest/v2/builds/mongodb_mongo_v3.6_enterprise_rhel_72_s390x_7715621883aee73cbf5c162db6d04578ba353f60_18_05_07_11_04_31/tasks?fetch_all_executions=1]    [~cristopher.stauffer] is using this endpoint in a script, so it should be faster than this.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3334","05/08/2018 22:32:47",1,"coverage failure ""h2. [coverage failed on race-detector|https://evergreen.mongodb.com/task/mci_race_detector_coverage_53781eaad5d372a2e3c90845e29c136320391afc_18_05_08_18_23_55/0]     Host: [ec2-107-22-128-18.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-gveg435h]   Project: [mci|https://evergreen.mongodb.com/waterfall/mci]          ~BF Ticket Generated by [~brian.samek]~  ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-3335","05/09/2018 14:45:40",1,"Panic when retrieving banner in UI route ""unable to retrieve admin settings: error populating section alerts: error retrieving section alerts: reflect: call of reflect.Value.Type on zero Value""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-3337","05/09/2018 19:03:13",2,"Have to hit back button twice to get back to Evergreen from Lobster. ""# Go here: [https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_rhel_62_64_bit_integration_tests_replset_07ae6a93bf517643adcf4098e369f49e28f0bf99_18_05_09_16_47_46]   # Click HTML next to any test   # It takes 2 clicks of the back button to get back to evergreen, I'd expect it to only take one.""","",0,0,0,1,0,0,0,0,0,0,1,0,0,0,0
"EVG-3346","05/10/2018 20:06:07",2,"Reduce calls to DescribeSpotPriceHistory ""We occasionally exceed our AWS API limits. The two most frequent calls are DescribeInstances, which EVG-3251 moved to a batch call, and DescribeSpotPriceHistory, which this ticket is meant to address. We call this function in two places, in describeHourlySpotPriceHistory, which is called by the task end and host idle jobs, and by getLatestLowestSpotCostForInstance, which is called each time we spawn an ec2 host with type auto, to determine if we should spawn an on-demand or a spot host.    I believe we should do two things:   # Query Splunk for the logging in¬†describeHourlySpotPriceHistory and¬†getLatestLowestSpotCostForInstance to determine if one of these functions represents the bulk of the calls to¬†DescribeSpotPriceHistory. They may both be used heavily, since the former is called each time we spawn a host, and the latter each time a task ends.   # Figure out how to cache these data. (The two cases use different parameters, but I think this is only because¬†getLatestLowestSpotCostForInstance passes a future date to only get the latest price, so we can make the calls identical). It might make sense to cache these data. We can use their granularity to determine our caching strategy, or use 1-minute granularity, since it's unlikely we care to make finer distinctions than that.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-3347","05/10/2018 20:29:24",2,"Hosts that have transitioned to running after agent deploy failures do not retry ""We quarantine a host if StartAgentOnHost fails at least 10 times. However, we do this with an aggregation on the event log, which means that we will still believe that the put job has failed 10 times if the host has been quarantined for some time and has just been set to running. We should ensure that newly running hosts get all 10 attempts.¬†*We should also create a ticket.*""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3348","05/11/2018 13:28:03",0,"Perf tools - number normalizations ""There are different types of numbers could be found on perf tools pages - some of them are usual, however there are also very big and very small numbers, which require some extra space to display. Moreover, currently, small numbers could be truncated to 0, which makes the number useless.    Goal: all numbers should be easily readable, comparable and informative.¬†    In order to improve this we should use number normalization, which I think should work like this:   * Consider the first three (TBD) non-zero (TBD) digits to be significant.   * Drop the rest part of the value   * Use short notation where possible, like k or M (TBD)    ¬†""","",0,1,0,0,0,0,0,0,0,0,0,1,0,0,0
"EVG-8573","05/12/2018 18:03:52",2,"create evergreen project for gimlet ""- include threshold (95% ?) for coverage   - add pull-request testing  - single task""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-3356","05/12/2018 20:01:56",1,"use gimlet helpers for reading/writing to request data ""remove similar functions from the util package""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3363","05/13/2018 22:28:50",1,"Panic: nil cloud manager in setupHost() ""[https://github.com/evergreen-ci/evergreen/blob/bd044573930dcf571d8ec43a10670d38295c34a3/hostinit/setup.go?utf8=%E2%9C%93#L122]    ¬†    pool/helpers.go:36 runtime/asm_amd64.s:515 runtime/panic.go:489 runtime/panic.go:63 runtime/signal_unix.go:290 cloud/ec2.go:621 hostinit/setup.go:122 hostinit/setup.go:278 hostinit/wrapper.go:64 units/provisioning_setup_host.go:78 pool/helpers.go:23 pool/helpers.go:61 pool/local.go:84 runtime/asm_amd64.s:2197    ¬†    5/11/18 10:28PM EST from a Slack alert""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3364","05/14/2018 16:44:16",1,"Do not disable PR testing when disabling a project ""Instead, check if the project is disabled when determining whether or not to create a patch build from a github webhook. We shouldn't change any project data when disabling a project other than the disabled field.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3365","05/14/2018 19:22:09",1,"Lint Generate tasks is linting vendored projects ""See here:    [https://evergreen.mongodb.com/task/mci_ubuntu1604_display_lint_patch_47d843b228453688b321f23ce50948dec658f936_5af9d04f2fbabe33902316b7_18_05_14_18_07_30]    ¬†    [lint-vendor-github.com-mongodb-grip-send|https://evergreen.mongodb.com/task/mci_ubuntu1604_lint_vendor_github.com_mongodb_grip_send_patch_47d843b228453688b321f23ce50948dec658f936_5af9d04f2fbabe33902316b7_18_05_14_18_07_30]¬†is unexpected""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-3366","05/14/2018 21:08:07",1,"No longer able to view all logs unless you know the url ""You can't get to [https://logkeeper.mongodb.org/build/657a8889982a404882c60eb73acff101/all?raw=1]¬†or [https://logkeeper.mongodb.org/build/657a8889982a404882c60eb73acff101/all?html=1]¬†from lobster""","",0,0,1,0,0,0,0,0,0,0,1,0,0,1,0
"EVG-3369","05/16/2018 14:36:47",1,"BB plugin not able to do searches ""After [https://github.com/evergreen-ci/evergreen/commit/825cbc94aee285a77e21900086a33671f26ff214,]¬†the BB plugin reported that searching Jira failed.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3373","05/17/2018 15:56:50",1,"delegate all mux dependency on gimlet  ""* impacts agent status server,   * pprof   * mostly need to use gimlet.GetVars rather than mux.Vars""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3379","05/18/2018 19:22:33",1,"imrpove CSRF.  ""It should be implemented as a negorni middleware, and we should be able to attach to (some?) UI routes but not others.     This is important for being able to combine/reduce our services and simplify our load balancing configuration.     I think that we currently have it turned off. ""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3382","05/18/2018 20:29:36",1,"GitHub status API is updated for builds but not for patches ""e.g, https://evergreen.mongodb.com/build/mci_ubuntu1604_patch_6935cf29e9d5141e16a83924f886f6b46ad5d3f1_5aff23a0c9ec44191d68cb50_18_05_18_19_04_01""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3385","05/18/2018 21:53:26",1,"Restarting tasks in a Pull Request patch leads to a Github Status with no ""Details"" link for ""evergreen"" context ""https://github.com/10gen/mms/pull/14229    There was an individual task that failed on the first run (https://evergreen.mongodb.com/task/mms_int_INT_JAVA_BRS_36_patch_4c58337b9ba0f80de594910678a76c908015ae52_5aff0f59c9ec44191d660fbe_18_05_18_17_37_31/0) and passed when it was re-run, but it appears that the top-level """"evergreen"""" task hasn't had its state updated to match, and there's no """"details"""" link for me to look closer""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3386","05/18/2018 22:25:38",1,"Show tooltip of test full name on hover ""Test names can be very long. An example is [fuzzer test|https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_rhel_62_64_bit_jstestfuzz_replication_initsync_0a4f7b1ebf173984883d6e018ae88350015dfeb3_18_05_16_19_19_11/0]. It's hard to see the full name of the failed test right now.""","",1,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-3388","05/18/2018 23:23:09",1,"EC2 panic ""pool/helpers.go:67 runtime/asm_amd64.s:515 runtime/panic.go:489 runtime/panic.go:63 runtime/signal_unix.go:290 cloud/ec2.go:685 hostinit/setup.go:77 hostinit/setup.go:233 hostinit/wrapper.go:49 units/provisioning_setup_host.go:78 pool/helpers.go:23 pool/helpers.go:32 pool/helpers.go:87 runtime/asm_amd64.s:2197""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3389","05/19/2018 23:18:13",1,"s3Copy.copy command should accept a permissions argument ""It currently always copies with public-read permissions, which is surprising, given the behavior of s3.put, which accepts a permissions argument. If possible, it should copy with the same permissions as the source file, if a permissions argument is not provided.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3390","05/19/2018 23:22:53",1,"Run fewer iterations on the race variants ""We have moved multithreading out of many packages and into amboy. We run enough tests that occasionally we exceed our GitHub API limits. We should only run the race detector on packages that use multithreading.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-9002","05/21/2018 16:05:08",0,"Github Status API Sender sets wrong field for URLs ""Should set TargetURL, not URL""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-3392","05/21/2018 16:35:35",1,"Structured logging for all events ""Most events in model/event are just strings that are logged, let's give them a common structure    ¬†    ¬†""","message.WrapError(err, message.Fields{  """"resource_type"""": event.ResourceType,  """"message"""": """"error logging event"""",  """"source"""": """"event-log-fail"""",   } ",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-3396","05/22/2018 16:17:27",2,"Group setup did not run before restart of patch build task in task group ""Executions 2, 3, and 4 of this task were system failures, because the directory was missing¬†https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_ubuntu1604_64_compile_all_patch_6ab1592260c9b21d802aa65a11d268c0a97b11a7_5b042b95e3c3310342a53aab_18_05_22_14_46_14.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3402","05/23/2018 14:13:05",1,"race-service failure "" h2. [race-service failed on race-detector|https://evergreen.mongodb.com/task/mci_race_detector_race_service_503d660cd7293890a15999c2e8a898cdabeab151_18_05_22_21_41_11/0]   Host: [ec2-54-152-99-180.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-an2i4pxj]  Project: [mci|https://evergreen.mongodb.com/waterfall/mci]     ~BF Ticket Generated by [~john.liu]~ ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-3403","05/23/2018 14:16:40",2,"BB plugin fallback search is not returning expected results ""[https://evergreen.mongodb.com/task/mci_race_detector_race_agent_503d660cd7293890a15999c2e8a898cdabeab151_18_05_22_21_41_11]    ¬†    should have found https://jira.mongodb.org/browse/EVG-3395¬†at least but did not""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3407","05/23/2018 19:23:06",1,"Investigate how it's possible for TaskTransitionToFailure alert records to have an empty task id ""It's possible that porting this to Event driven notifications fixed this weirdness, but we should still have a look. Grep codebase for """"EVG-3407"""" to find relevant area""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-3408","05/23/2018 19:25:24",2,"Remove legacy notifications ""Grep codebase for EVG-3408    The¬†_entire_ alerts package will be removable at this point.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-3410","05/23/2018 20:15:43",2,"Restrict delivery method configuration ""Creating tickets in a JIRA project and EVG webhooks should be restricted to the project admin page only. Comments should remain available to users""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-3412","05/23/2018 20:41:54",2,"Move mongodb-specific jira constants to configuration options ""in alerts/jira.go and¬†ui_plugin_build_baron_tickets.go""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8353","05/23/2018 21:13:15",1,"Panic in slack sender when using slackMessage ""Slack sender is indexing into Attachments on error, but can't do this when message.Slack is used.    ¬†    pool/rate_limiting_average.go:145 runtime/asm_amd64.s:515 runtime/panic.go:489 runtime/panic.go:28 send/slack.go:95 logger/job_single.go:52 pool/helpers.go:23 pool/rate_limiting_average.go:181 pool/rate_limiting_average.go:166 runtime/asm_amd64.s:2197""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-3417","05/24/2018 15:53:17",1,"""updating status for incomplete build"" error in logs ""from model/trigger/build.go""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3424","05/24/2018 20:36:19",8,"Support starting containers in scheduler ""# Add a maximum containers field to the distro document.   # The scheduler, when inserting a host document for a distro that has maximum containers set, should set the containers fields in the host document.   # After inserting host documents for containers, the scheduler should also insert host documents for parents.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-3427","05/24/2018 20:40:02",1,"Refactor notification triggers to be an interface ""And remove circular dependency of trigger function <-> fetching subscriptions""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3429","05/25/2018 16:17:30",1,"Failing tests in created jira tickets show most (all?) tests ""{quote}  @John Liu, there are a lot more """"Failing Tests"""" populated in https://jira.mongodb.org/browse/BF-9314 than I would have expected, considering only that 1 test failed    https://mongodb.slack.com/archives/C0V896UV8/p1527261366000109  {quote}""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3430","05/25/2018 16:38:59",2,"Spawn host with data files did not have all data files ""It only included the source directory: {{source-mongodb-mongo-v4.0-e87f98}}. Note, I have since moved more data files there (I have a script that copies the pieces I need out of {{/data/mci}}).""","",0,0,0,0,0,0,1,0,0,1,0,0,0,0,0
"EVG-3431","05/25/2018 18:04:07",1,"Github Status API messages not being posted for external patches ""This PR: [https://github.com/mongodb/mongoid/pull/4499]  Created this build: [https://evergreen.mongodb.com/version/5b0733ffc9ec4405c1abefbb]    ¬†    Despite the build succeeding, evergreen check status in PR still shows """"Pending - preparing to run tasks"""".""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8482","05/25/2018 18:57:00",1,"Panics when sending slack alerts ""pool/rate_limiting_average.go:145 runtime/asm_amd64.s:515 runtime/panic.go:489 runtime/panic.go:28 send/slack.go:95 logger/job_single.go:52 pool/helpers.go:23 pool/rate_limiting_average.go:181 pool/rate_limiting_average.go:166 runtime/asm_amd64.s:2197""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-3432","05/25/2018 20:52:58",1,"Unable to create BF tickets in EVG from plugin ""error filing ticket: error creating JIRA ticket: HTTP request returned unexpected status `400 `: \{""""errorMessages"""":[],""""errors"""":{""""customfield_15756"""":""""Field 'customfield_15756' cannot be set. It is not on the appropriate screen, or unknown.""""}}""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3433","05/29/2018 15:55:35",1,"Make s3.put output full s3 url ""In the s3.put post-task command, the output is of the form:    Putting src/ec2_artifacts.tgz into path mongodb-mongo-master/enterprise-rhel-62-64-bit/2e6989e2744726f66289aca955cbc661539b6814/remote_ec2/remote_ec2_artifacts-mongodb_mongo_master_enterprise_rhel_62_64_bit_sharding_op_query_1_2e6989e2744726f66289aca955cbc661539b6814_18_05_28_04_25_48-0.tgz in s3 bucket mciuploads    I've gotten feedback that it would be more useful to concatenate these together to be the actual bucket url, rather than having the user do that manually.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3435","05/29/2018 19:53:57",1,"Fix Lobster Lint & Build ""I've recently added lobster into Evergreen as it's own project, but we need to get the build and lint working.    Don't do this manually, do configure your editor of choice to do it for you automatically.""","",0,0,0,1,0,0,0,0,0,0,1,0,0,0,0
"EVG-3438","05/30/2018 16:44:05",2,"Create a top level Perf change point page ""Should be accessible like perf discovery.   * The page will be the starting point for the performance build baron.   * This ticket is to just create the web page.   * Should be under the plugins drop down.""","",0,0,0,1,0,0,0,0,0,0,1,1,0,0,0
"EVG-3440","05/30/2018 16:54:13",1,"Update List of Changepoints to use list with BF removed ""Build on EVG-3439 to display the updated list of changepoints from new endpoint. No other changes needed.¬†""","",1,0,0,0,0,0,0,0,0,0,1,1,0,0,0
"EVG-3443","05/30/2018 20:40:05",1,"Allow github patch definitions to use tags ""Currently this is only implemented for patch aliases.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3445","05/30/2018 21:59:12",2,"s3Copy.copy and s3.put should log when they noop ""in a number of cases, s3.copy doesn't do anything and the desired behavior is to continue without erroring. However, the current behavior only logs this activities in the agent log and not the task log. We should clarify and provide a higher-level report of what the s3.copy command did in the task logs that includes things like:     - number of files copied   - file(s) skipped because they didn't exist  - file(s) skipped because their target existed. ""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3561","05/31/2018 15:18:16",5,"Update the Build Baron plugin to allow user feedback ""This should include adding the buttons for collecting feedback on ticket suggestions.""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3447","05/31/2018 18:50:31",1,"Use activated time in task latency stats ""Currently, the task latency stats are incorrect when tasks are activated by batch time or by users. We should take this into account. The current graphs have very long task latencies, but this is because tasks have been activated long after they are created.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3448","06/01/2018 15:47:05",1,"Log provision failures in host provision job ""so that failure volume can be easily graphed in splunk""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3449","06/01/2018 16:19:23",1,"Generate tasks retries on invalid payloads and doesn't output an error message ""Example here:¬†[https://evergreen.mongodb.com/task/lobster_ubuntu1604_generate_tasks_patch_1d067be3f946b69fba9400902da52e972984b580_5b10e2b80305b914de9bad59_18_06_01_06_08_03/1|https://evergreen.mongodb.com/task/lobster_ubuntu1604_generate_tasks_patch_1d067be3f946b69fba9400902da52e972984b580_5b10e2b80305b914de9bad59_18_06_01_06_08_03/0]    [Splunk error|https://mongodb.splunkcloud.com/en-US/app/search/search?q=search%20source%3D%22http%3Aevergreen%22%20lobster_ubuntu1604_generate_tasks_patch_1d067be3f946b69fba9400902da52e972984b580_5b10e2b80305b914de9bad59_18_06_01_06_08_03%7C%20spath%20error%20%7C%20search%20error%3D%22error%20reading%20project%20yaml%3A%20project%20errors%3A%20%0A%09lint-src-actions%3A%20nothing%20named%20%27lint-src-actions%27%0A%09lint-src-components-about%3A%20nothing%20named%20%27lint-src-components-about%27%0A%09lint-src-components-app%3A%20nothing%20named%20%27lint-src-components-app%27%0A%09lint-src-components-connectedfetch%3A%20nothing%20named%20%27lint-src-components-connectedfetch%27%0A%09lint-src-components-fetch%3A%20nothing%20named%20%27lint-src-components-fetch%27%0A%09lint-src-components-logview%3A%20nothing%20named%20%27lint-src-components-logview%27%0A%09lint-src-components-notfound%3A%20nothing%20named%20%27lint-src-components-notfound%27%0A%09lint-src-stores%3A%20nothing%20named%20%27lint-src-stores%27%0A%09lint-server%3A%20nothing%20named%20%27lint-server%27%0A%09lint-src%3A%20nothing%20named%20%27lint-src%27%0A%09lint-.%3A%20nothing%20named%20%27lint-.%27%22&display.page.search.mode=verbose&dispatch.sample_ratio=1&earliest=1527865792.000&latest=1527865792.001&sid=1527868105.13768078]""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-3455","06/01/2018 22:03:32",2,"Successful patch issued a failure notification to a user. ""A user got a notification saying """"Evergreen patch 5b118ede2a60ed326b9a4e8f in 'mms' has failed!"""", but the patch succeeded.    `db.event_log.find(\{r_id: """"5b118ede2a60ed326b9a4e8f""""})` shows that the corresponding patch and version failed and succeeded with in the span of a minute. There is likely a bug in the task lifecycle/event logging that is causing this.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-3459","06/04/2018 15:47:33",1,"Investigate Slack sender errors ""We were hitting several panics in the slack grip sender (see MAKE-410). We need to look into why these errors were happening in the first place. Logging shows no errors since then, but we can probably look deeper into the notifications collection to confirm that.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-3462","06/04/2018 19:42:04",2,"Docker provider panics on a log line if no mix/max port are set in distro ""Stack trace:  ""","  pool/helpers.go:67   runtime/asm_amd64.s:515   runtime/panic.go:489   runtime/panic.go:63   runtime/signal_unix.go:290   cloud/docker.go:113   units/provisioning_create_host.go:113   units/provisioning_create_host.go:82   pool/helpers.go:23  pool/helpers.go:32  pool/helpers.go:87   runtime/asm_amd64.s:2197  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3464","06/05/2018 14:45:27",1,"V1 API returning empty task set unexpectedly ""Given this task page: https://evergreen.mongodb.com/task/mongodb_mongo_master_debian92_concurrency_replication_causal_consistency_27b080da5ab09b324514a62ab38a3e6463e0d1c1_18_06_04_21_57_34/0    I'm hitting this end point to collect 'recent failure date': https://evergreen.mongodb.com/rest/v1/tasks/concurrency_replication_causal_consistency/history?project_id=mongodb-mongo-master    But that endpoint is returning the Tasks key as null.  The task and project_id values seem to be correct.  Any idea what's going on?    Note that whatever the problem is here (might totally be my fault!), we are under-scoring test failures because we're seeing all failures as """"failing zero of zero recent executions"""".""","",0,0,0,0,0,0,1,0,0,1,0,0,0,0,0
"EVG-3470","06/05/2018 22:08:41",2,"Baseline comparison disappears when assign thread level ""On a task page, when assigning a thread level after clicking """"All"""" the comparison disappears. There is no way to do choose a comparison for assigned thread levels, only for """"All or """"Max"""".    ¬†    ¬†""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-3542","06/06/2018 22:50:31",2,"Evergreen is attempting to copy the binary in multiple threads simultaneously ""When spawning via https://evergreen.mongodb.com/spawn, the hosts go through a provisioning stage and then disappear.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3483","06/07/2018 17:02:58",1,"When creating new SSH public key in spawn hosts, should not let you ""save the key"" without entering a name ""When spawning a spawn host if you select """"new key..."""" enter your key then check """"save key"""" you can then hit spawn without entering a name. It should instead force you to enter a name if you have checked save key""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-3485","06/07/2018 18:26:19",1,"Assess gitRef in Lobster ""gitRef is in the lobster codebase in many places, but it seems like this path is never git, so none of those code paths are being hit. We should assess what this was for, and either get it working, or remove it.""","",0,0,0,1,0,0,0,0,0,0,0,0,0,1,0
"EVG-3487","06/07/2018 21:41:56",2,"It's not possible to patch a project that doesn't have a config yaml committed to its repo ""Even if the patch adds the yaml""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3488","06/07/2018 23:04:31",1,"Admin restart tasks should be able to restart setup-failed tasks ""Currently there are checkboxes only for red and purple tasks.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3493","06/08/2018 18:41:25",2,"Add a way to delete all existing subscriptions on notifications page ""Also, for deleting individual notifications, it seems like we should display more than just the selector type, since the user can't determine what task/build/version it refers to without clicking.""","",0,0,0,1,0,0,0,0,0,0,1,0,0,0,0
"EVG-3494","06/08/2018 18:49:05",1,"Setting priority on a display task doesn't set priority on its execution tasks ""Example: [https://evergreen.mongodb.com/task/mci_ubuntu1604_display_lint_patch_09b809283c45bd044d42451d873afa90e83807c2_5b1abfdd0305b93cbb59168c_18_06_08_17_41_50]    Display task was set to priority 55, but execution tasks had no priority in UI and were deep in the queues""","",0,0,0,1,0,0,0,0,0,0,1,0,0,0,0
"EVG-3500","06/09/2018 16:46:27",1,"Remove existing gotest output before running test in Evergreen self-tests ""Otherwise, subsequent tasks in a task group may appear to fail due to an earlier failure. See¬†https://evergreen.mongodb.com/task/mci_ubuntu1604_display_lint_patch_78fe3206570729465d3df6f87209fe93d0dc41d1_5b1bdee42a60ed67bab381f6_18_06_09_14_06_29.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-3501","06/11/2018 15:32:06",2,"Ensure that we handle changing parent IDs in child documents ""A parent intent document may have a different ID than the ultimate host document. We should ensure that children can keep track of their parents across this change.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3502","06/11/2018 15:49:59",1,"Log mark end details ""Each minute we log an aggregate of task end statuses. We should also log MarkEnd, so that we can analyze this data by project or task.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3504","06/11/2018 17:00:18",1,"BB plugin search still doesn't escape things correctly ""Error searching jira for ticket: HTTP request returned unexpected status `400 `, (project in (BF, WT, SERVER, BFG)) and ( text~""""capped\:CheckReplOplogs"""" or text~""""indexv\:CheckReplOplogs"""" ) order by updatedDate desc""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3505","06/11/2018 20:06:41",2,"Case-insensitive Lobster search is actually case sensitive ""In master load [http://localhost:3000/lobster/build/4191390ec6c7ee9bdea4e45f9cc94d31/test/5af32dbbf84ae86d1e01e964?bookmarks=0%2C1129]    Search """"integration_Test"""". This should match, because it's case insensitive by default, but has no matches. The hilighter works as expected. Toggling the case sensitive toggle under Hide Details makes it work, until the search is rerun.""","",0,0,0,1,0,0,0,0,0,0,1,0,0,0,0
"EVG-3510","06/13/2018 21:41:32",2,"Remove Deprecated React Methods from Lobster ""componentWillReceiveProps from Fetch component""","",0,0,0,1,0,0,0,0,0,0,1,0,0,0,0
"EVG-3512","06/14/2018 14:47:03",2,"Individual names in ""Files"" section for display tasks. ""See EVG-3266""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-3524","06/14/2018 20:47:32",2,"Display pool mapping info in distro UI ""Users may wish to see, in the distro UI, information from the pool mapping.""","",0,0,0,1,0,0,0,0,0,0,1,0,0,0,0
"EVG-3525","06/14/2018 20:51:54",2,"Restrict parent hosts from spawning, running agents ""If a distro is a container pool, it should not be useable for tasks or spawnable by users. One approach is to add a checkbox to the distro UI which sets a field which prevents the distro from being spawned in tasks. Then we add validation that only those distros may be saved in the pool mapping in the admin collection.    In addition, we should not start agents on these hosts.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-5532","06/18/2018 18:05:46",1,"add failure timestamp to BFG template ""I frequently find it helpful to know the push time for a commit that triggered a build with a failure, in order to correlate it to a timeline in my head of when things were pushed and when failures occurred.  ""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3536","06/18/2018 18:45:50",1,"Restarting failed tasks appears to hang ""When restarting a small number of failed tasks (31) in a version, this hangs for almost a minute.""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-3538","06/18/2018 18:48:56",2,"ZSeries and ARM tests are failing immediately ""Here's a task: [https://evergreen.mongodb.com/task/mci_ubuntu1604_arm64_xc_subprocess_2c36b9184a7ca6556eb1a77655cd0336ef08246e_18_06_18_16_03_54/0#/log/T]    And its log:¬†https://evergreen.mongodb.com/task_log_raw/mci_ubuntu1604_arm64_xc_subprocess_2c36b9184a7ca6556eb1a77655cd0336ef08246e_18_06_18_16_03_54/0?type=T""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3545","06/19/2018 20:15:34",2,"Validate slack usernames at settings save ""Similarly to how we validate github usernames, let's validate slack user names.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-3636","06/19/2018 22:09:55",2,"Discrepancies between tasks status on a buildvariant view and task view. ""I was looking at the rhel71-ppc queue and found that tasks that are scheduled and have # in the queue show up as unscheduled on the buildvariant view. For example, everything but green says unscheduled - https://evergreen.mongodb.com/build/mongodb_mongo_master_enterprise_rhel_71_ppc64le_6d8b7f90fe0ae5251bfab98279d22ef705fae603_18_05_13_18_49_43 while this task https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_rhel_71_ppc64le_concurrency_replication_6d8b7f90fe0ae5251bfab98279d22ef705fae603_18_05_13_18_49_43 is scheduled    This build is opposite - https://evergreen.mongodb.com/build/mongodb_mongo_master_enterprise_rhel_71_ppc64le_d12afa4fdda9c6b113e7be3b4d67d757b07b50b5_18_05_14_13_46_06  Push task for it says scheduled on that view but the task view says not scheduled https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_rhel_71_ppc64le_push_d12afa4fdda9c6b113e7be3b4d67d757b07b50b5_18_05_14_13_46_06  And some unscheduled tasks on https://evergreen.mongodb.com/build/mongodb_mongo_master_enterprise_rhel_71_ppc64le_9482d5a32e100ce7f939ea5789b1862fc98e9924_18_05_14_22_56_00 are actually successfully completed https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_rhel_71_ppc64le_gle_auth_basics_passthrough_9482d5a32e100ce7f939ea5789b1862fc98e9924_18_05_14_22_56_00    I see the same situation on other """"large queue"""" distros like Enterprise Ubuntu 16.04 s390x and Enterprise SLES 12 s390x    One example is here - https://evergreen.mongodb.com/build/mongodb_mongo_master_enterprise_suse12_s390x_9482d5a32e100ce7f939ea5789b1862fc98e9924_18_05_14_22_56_00  and another here - https://evergreen.mongodb.com/build/mongodb_mongo_master_enterprise_ubuntu1604_s390x_cf339b8a8d8708e8b28747fe0cafee7cc79fe9a6_18_05_16_00_03_26 (compile task is scheduled but shows up as not scheduled on that view)    If it's a UI problem, it's annoying but less critical than if this is a bug with the way old tasks are being unscheduled.  I see tasks about a month old still in the queue while we should we unscheduling ones older than 1 (2?) week.""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-3549","06/19/2018 23:45:14",2,"Speed up task_queue page ""The task_queue page takes about 40 seconds to load.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-3550","06/20/2018 21:35:45",2,"Add validation in distro model to ensure that container pools specify a valid distro ""Ensure that for each distro with a ContainerPool key, that ContainerPool specifies a valid parent distro (which cannot have its own ContainerPool key).""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-3551","06/21/2018 14:26:49",1,"task history page for compiles not working ""https://evergreen.mongodb.com/task_history/mongodb-mongo-master/compile is returning blank?""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-3555","06/21/2018 15:39:38",1,"Panic in scheduler ""Stack trace at revision c30ae459ada04bddf27a878c80354386249b9de2    ""","  pool/helpers.go:67   runtime/asm_amd64.s:515   runtime/panic.go:489   runtime/panic.go:63  runtime/signal_unix.go:290   scheduler/wrapper.go:38   units/scheduler.go:76   pool/helpers.go:23   pool/helpers.go:32   pool/helpers.go:87   runtime/asm_amd64.s:2197  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3562","06/25/2018 14:35:40",2,"No notifications for 100% consistent OS X openssl unittests failures ""https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_osx_1010_openssl_unittests_d520be0814492c262515cf0a5d62a127ace70dce_18_06_22_16_32_29    https://jira.mongodb.org/issues/?filter=24306&jql=%22Failing%20Buildvariants%22%20%3D%20enterprise-osx-1010-openssl%20and%20%22Failing%20Tasks%22%20%3D%20%22unittests!%22%20""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3566","06/25/2018 20:04:57",2,"Updating 'Default VPC Subnet Id' in distros settings page has no effect ""The {{Default VPC Subnet Id}} setting was originally set to subnet B in the VPC.  Trying to update this to another subnet has no effect.  Requests continue to be launched in Subnet B.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3587","06/27/2018 20:18:26",1,"Change the current signal processing page to display multiple lists ""The lists / views we wish to display are:     * *warnings*: system failures, post run checks and threshold failures from evergreen (see EVG-3586 for more detail).     * *unprocessed change points*: this is the current list (done in EVG-3440 and EVG-3439).     * *processed change points*: the contents of the *perf.processed_change_points* collection.""","",0,1,0,0,0,0,0,0,0,0,1,1,0,0,0
"EVG-3588","06/27/2018 20:44:08",1,"Running migrations should not run other amboy jobs ""john.liu@evergreenapp-1:/srv/evergreen/current/clients/linux_amd64$ ./evergreen service deploy anser spawnhost-expiration-preference --conf /etc/mci_settings.yml    [evergreen] 2018/06/27 19:41:36 [p=info]: creating new remote job queue with 4 workers    [evergreen] 2018/06/27 19:41:36 [p=info]: job server running    [evergreen] 2018/06/27 19:41:36 [p=info]: job server running    [evergreen] 2018/06/27 19:41:36 [p=info]: starting queue job server for remote queue    [evergreen] 2018/06/27 19:41:36 [p=error]: [api_name='DescribeSpotPriceHistory' args='{    ¬† AvailabilityZone: """"us-east-1b"""",    ¬† EndTime: 2018-06-27 20:41:35.898 +0000 UTC,    ¬† InstanceTypes: [""""c3.4xlarge""""],    ¬† ProductDescriptions: [""""Windows""""],    ¬† StartTime: 2018-06-27 13:07:14 +0000 UTC    }' client='*cloud.awsClientImpl' message='AWS API call']: RequestCanceled: request context canceled    caused by: context canceled""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3589","06/27/2018 20:54:05",8,"Update the display and grouping of items in the signal processing lists ""Each list should only contain the items for the project being viewed (that is 'https://evergreen.mongodb.com/signal-processing/sys-perf' should only display sys-perf master, 'https://evergreen.mongodb.com/signal-processing/sys-perf-4.0' should display change points from sys-perf-4.0).    Since the project is implicit depending on the plugin page, it should no longer be necessary to display it. (EVG-3737)    The lists contain warnings, or change points (processed or unprocessed EVG-5147) grouped by revision.   Each line item in this list contains further component change points or warnings.    Line items are displayed:   * revision in the first (left most) column.   * hazard value in the second column.   * create time in the third column.   * one per revision per line item   * sorted by max hazard value and create time.    A grouped line item is a list of component items:   * sort by internal hazard value by default.   * it should be possible to view the component items as a sub-list .   * it should be possible to sort by internal properties (variant/ task / test in this sub list)""","",0,1,0,0,0,0,0,0,0,0,0,1,0,0,0
"EVG-3593","06/28/2018 14:58:53",1,"rest v2 routes that require authentication 404 with correct api token ""https://evergreen.mongodb.com/api/rest/v2/builds/mongodb_mongo_master_linux_64_duroff_mmapv1_9482d5a32e100ce7f939ea5789b1862fc98e9924_18_05_14_22_56_00/tasks""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-3594","06/28/2018 16:26:49",1,"Degraded mode should not mark events as processed. ""This risks swallowing BFGs""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3597","06/28/2018 19:17:07",1,"move queries to the models package from service ""{{getVersionHistory}} and {{getHostData}} in the service package should really be in the models package (and arguably the entire {{models.go}} should be elsewhere, but maybe it makes sense to hold off until we move things to a restv2 style situation.)""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3600","06/28/2018 21:09:42",2,"Dynamic tasks must support depends_on for static ones ""Repro:    This [dynamic task|https://evergreen.mongodb.com/task/mms_e2e_local_new_e2e_Local_ATM_Import_Automation_patch_14b2d0c90a023dbd4501b62e1d9b1e0861d548ca_5b353ea9e3c3315d3eca92d1_18_06_28_20_01_46] was generated from [this patch|https://evergreen.mongodb.com/version/5b353ea9e3c3315d3eca92d1]. You can see that it doesn't activate the requisite static tasks IVY_DEPENDENCIES and NPM_DEPENDENCIES (and the UI doesn't render the dependencies correctly in the task page)¬†""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8463","06/29/2018 14:31:08",2,"jobs stay locked after they stop running ""either because of early returns, db errors in unlocking, or panics the jobs stay locked (and then run later after a restart)""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-3604","06/29/2018 17:27:31",1,"keys CLI operations do not work ""    After removing file validation:  ""","  $ evergreen keys list  command line configuration path is not specified    NAME:     evergreen keys list - list all public keys for the current user    USAGE:     evergreen keys list [arguments...]  command line configuration path is not specified    $ ./clients/darwin_amd64/evergreen keys list  Public keys stored in Evergreen:  Name: '%!s(model.APIString=0xc4201b6e80)', Key: '%!s(model.APIString=0xc4201b6e90)'  Name: '%!s(model.APIString=0xc4201b6ea0)', Key: '%!s(model.APIString=0xc4201b6eb0)'  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3605","06/29/2018 19:38:26",2,"Lobster not scrolling horizontally when searching ""[https://logkeeper.mongodb.org/lobster/build/5fd863fe3a97fef224b4ee0f4efd2d14/test/5a300a7cbe07c47ae7144c94#bookmarks=0%2C2295]    Search for """"connection attempt""""""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-3606","06/30/2018 00:13:46",2,"Tasks in group ran in wrong order ""This task group should run the tasks in order: https://github.com/mongodb/mongo/blob/821f9f69916da51f97e001b1c45dff6e49533f81/etc/evergreen.yml#L6891-L6896    However, here it didn't happen that way: https://evergreen.mongodb.com/build/mongodb_mongo_master_embedded_sdk_iphonesimulator_10.2_14730a1d7515716a420603c2bfd6c48874791242_18_06_28_23_23_53    The embedded_sdk_s3_put task did not run immediately after embedded_sdk_install_dev as required.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3607","06/30/2018 01:26:07",2,"Single machine task groups should admit/imply explicit dependencies ""The mobile project needs to be able to run several steps on the same machine in sequence. Additionally, we need to use task group for this, so that other builders can depend on the results of particular tasks within the group.    However, if one task fails, the subsequent tasks still execute, which is not what we want.    Additionally, in the GUI, selecting one task to execute for a patch doesn't auto-select any of the others, even though they are dependencies.    We need a way to declare dependencies.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3608","07/01/2018 22:07:05",2,"Improve Waterfall performance ""If we change the waterfall to download the waterfall data (window.serverData) asynchronously, instead of embedding it into the page via templates, we can cut the waterfall load/render time in half.""","",0,1,0,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-8417","07/02/2018 20:34:54",1,"Gimlet's panic handler should write errors using rest.APIError ""The front end expects errors to have the structure defined by the the rest.APIError struct, but when a restv2 route panics, the """"error"""" field is unset""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-3611","07/02/2018 22:37:29",2,"Pre-populate variables, including user data for spawn host UI ""Would it be practical to populate project expansions for these as well? We should probably do this if we can, so users can pass secrets.""","",0,0,0,1,0,0,0,0,0,0,1,0,0,0,0
"EVG-3612","07/03/2018 16:07:03",1,"Always send evergreen build results from a commit to the committer ""Evergreen, for every build done upon commit, should send the results to the committer. There have been many failures lately due to mutually affecting commits being committed in too close a timeframe for either pre-commit builds to include the other; or just simply poor test coverage pre-commit because the committer didn't expect the changes to be so widely affecting.    More immediate feedback would be very helpful because it can take a while for the resulting BFGs to be sorted out, triaged to the correct team, the severity determined, assigned and inspected. Especially when the system experiences a lot of failures.    We have more developers these days, so the probability of conflicting changes is much higher than it used to be. A more immediate turnaround by notifying the committer ASAP will keep the build greener for everyone -- and give less work to Build Barons, who, once they notice the severity, usually have to manually ping offending committers or revert simple mistakes themselves.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-3613","07/03/2018 18:14:29",2,"Investigate double notifications ""I received two notifications for¬†5b3bad480305b9400b342cc5, the first one failed, the second one succeeded. All tasks in this patch succeeded.    ¬†    This is possibly a dupe of¬†EVG-3455""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3616","07/03/2018 23:14:10",2,"BFGs created for display tasks do not include failed tests information ""The BFG tickets created when a display task fails do not include the section containing the test names and links to the logs and history.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8483","07/04/2018 09:14:03",2,"AbortableRunner.Abort doesn't call Queue.Complete() ""First of all, thanks a lot for an awesome library. It is strange, but¬†Amboy is the only local queue for Go that has all needed features.    ¬†    Problem ‚Äî if you call `AbortableRunner.Abort` and then query queue stat, stat is not correct. In my case job is still running. As far I see,¬†AbortableRunner doesn't call `Queue.Complete()`    ¬†    And workaround not easy because implementation of¬†`Queue.Complete()` in case of `priorityLocalQueue` is not reliable ‚Äî counter is simply decrementing, so, anyone can easily break stats if call ¬†`Queue.Complete` several times. So, in my code I wrap it to check is `buildJob.Status().Completed`.""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-3617","07/05/2018 13:28:09",1,"Task page for display tasks always show task status and link to latest execution ""They should instead show the task status and link to the execution selected for the display task.    https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_windows_64_2k8_wtdevelop_display_replica_sets_auth_b76457d9aa0188e1d2369851506b9d4d927024cb_18_07_03_02_07_37/0""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-3620","07/06/2018 17:53:17",2,"remove rest.APIError in favor of gimlet.ErrorResponse ""this should, I think, involve a more serious refactor of how errors get passed to the API code. It's currently the case that the rest/data package and some areas of the model (generated tasks) return API errors which I think is wrong (and we wouldn't want to have the models package depend on gimlet.""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3621","07/06/2018 17:54:13",1,"Set content-length header in requests to crowd ""Scarecrowd's WSGI can't handle chunked encoding, which go sets by default if ContentLength isn't set.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3623","07/06/2018 19:52:46",2,"Estimated time to start exposed in API ""I would like to have some way of judging how much progress a task has made, and when it is likely to start executing, using the API.    Presently there is a field called position in queue that is exposed in evergreen UI. This field can be tracked on a per task basis to see if the task is making progress toward being built, and to roughly estimate when it will start building, assuming a steady load on the system.    The API does not expose this field and doesn't provide any data as far as I can tell to perform similar estimation.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3630","07/06/2018 23:55:33",1,"Wrong raw link on lobster ""The raw link button points to the all log messages of the job, which is useful in some cases, but a user would expect the raw link to the specific test.    Here's an example.  https://logkeeper.mongodb.org/lobster/build/888d60ec4c67a6e88a62271495561bc6/test/5b365c4af84ae86783002eba#bookmarks=0%2C3996""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-3631","07/08/2018 17:19:51",1,"add deploy management configuration to CLI config file  ""I want to be able to add direct connection operations to EVG app servers in the evergreen CLI, and to do this we would want to have some configuration in the cli config file that would let us store this information.     perhaps eventually we can make the evergreen CLI itself manage the build/deployment cycle for the evergreen application, but for now a section in the CLI config file to store the locations of the app servers (to start) will make it possible to add administrative options to manage the service from the cli. ""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8626","07/08/2018 18:54:48",1,"add abortable pool features to rate limiting pool ""to support terminating notification jobs (for example). ""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-3632","07/09/2018 14:17:30",1,"log reporting queries to splunk ""use amboy's reporting package to log more data in the amboystatus jobs.""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3633","07/09/2018 14:22:21",1,"switch all existing production amboy pools to use the abortable pool. ""we might want to wait until the notification pools can be backed by an abortable pool, because they use a rate limiting pool (MAKE-427), or we can move the other two worker pools to be abortable first.     The work to expose the management interface is separate. ""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3634","07/09/2018 14:23:41",2,"reorganize app server administration port ""expose the abortable pool management interface (depends on EVG-3633), add a prefix for the pprof endpoints, ""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3635","07/09/2018 15:12:22",2,"Static hosts removed from a distro config are still in the pool ""We've removed 2 servers from ubuntu1604-arm64-large on 5/21:  ubuntu1604-arm64-1.linaro.build.10gen.cc  ubuntu1604-arm64-8.linaro.build.10gen.cc    The server were in quarantined status prior to that and remained in the pool in the same state even after we removed them.    Today, 7/09, I set them to the running state to let evergreen do its thing and properly decommission them, but it started to run tasks on them instead.    Things that need to be fixed:  * Evergreen should decommission hosts that are removed from the distro config when there are no tasks running on them, even if they are in a quarantined state.  * Evergreen should not run tasks on hosts that are not part of any distros  * If a host is removed from the distro config and set to the running state, evergreen should decommission it.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3640","07/09/2018 20:37:42",2,"Retrieve project via version id via API ""Travis PR statuses link to Evergreen version URLs. As far as I can tell there's no way to figure out, given a version, what project this version is in.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3641","07/09/2018 21:53:12",2,"Access task results by display task Id in the API ""As an Evergreen user, I'd like to access task metadata and test results of a display task by its id.    Currently the API only gives access to execution tasks.""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3646","07/10/2018 19:25:16",1,"Ability to subscribe to failures of a specific test ""CC [~spencer]""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-3649","07/10/2018 19:35:59",2,"Build break notifications should notify when the first task regresses, not when version is done ""Currently build break notifications will almost never get sent because versions almost never completely finish""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3651","07/11/2018 20:20:43",2,"Must HTML Entities encode some characters in JIRA markup in BF/BFG tickets ""[~matthew.saltz] pointed out that some BF and BFG tickets have broken links/JIRA markup. For example:  https://jira.mongodb.org/browse/BF-9901?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel      I believe the cause is that an ! is included in the """"text"""" portion of the link. Examples:    Broken JIRA markup:  [unittests! failed on * Enterprise Windows 2008R2 compile_all|https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_windows_64_2k8_compile_all_display_unittests!_a7f2cf99a1ab6548eff63d3eddafab1134fe6b84_18_07_10_17_50_03/0]      Working JIRA markup:  [unittests (no exclamation) failed on * Enterprise Windows 2008R2 compile_all|https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_windows_64_2k8_compile_all_display_unittests!_a7f2cf99a1ab6548eff63d3eddafab1134fe6b84_18_07_10_17_50_03/0]  ""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3654","07/12/2018 18:01:03",2,"Project admins should be able to opt in all committers to build break notifications ""By default, turning on build break notifications should only notify users who have opted into them. However, project admins should have the option to opt in all users to build break notifications for that project. This is to support differing use cases for server (users can opt in) and cloud (everyone should get build break notifications, and it shouldn't require individual user action to get them).""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3656","07/12/2018 19:56:19",2,"Cannot create JIRA tickets because of unset Issue type ""(this only affects event driven notifications, not the existing BFG logic)""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3663","07/13/2018 16:45:49",2,"Some hosts stuck indefinitely being prepped for agents ""This occurred after the outage yesterday where AWS was terminating spot hosts Example host: sir-4zei5ghk. These hosts were terminated in AWS, but Evergreen continued in a loop attempting to prep them. From the host page they appeared to be running a task, but the task they appeared to be running, from the task page, was purple. I decommissioned all of the hosts (~ 80 of them) in the UI and then terminated them in the DB.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-3664","07/13/2018 16:46:39",1,"scheduler should insert host intent documents in a bulk operation ""currently there's a forloop around insert one. ""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3674","07/19/2018 16:39:02",2,"Dynamic tasks must allow cross-variant task addition ""When I kicked of [this patch|https://evergreen.mongodb.com/version/5b4f9902e3c3316b5de38ee8] via    {{evergreen patch -p mms -v e2e_local -t Setup_E2E_Local -y -f}}    It should have added a new task """"new_e2e_Local_ATM_Import_Automation"""" to a separate static variant {{e2e_local_win}} yet it did not.¬†    I also tried including the {{e2e_local_win}} variant in the patch but to no avail.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3680","07/20/2018 14:42:17",1,"S3 integration tests should generate unique names ""The S3 integration test should generate a unique name each time it is run. As it is currently written, it's possible for a previous successful run of the test to cause a subsequent test to succeed, even though it should have failed: https://github.com/evergreen-ci/evergreen/blob/414a2b6371ac0712153316792c13115e433d1a54/thirdparty/s3_test.go#L14-L15.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3682","07/22/2018 07:25:54",2,"Evergreen is generating BFG tickets for fail->fail transitions when only pass->fail transitions configured ""I realized that consecutive commits had BFG tickets created for them while going through the BFG tickets linked to BF-9759. I wouldn't ordinarily expect stepback to lead to the generation of BFG tickets but maybe there's some weird interaction with EVG-3645 going on?    * BFG-81063  ** https://evergreen.mongodb.com/task/mongodb_mongo_master_ubuntu1604_arm64_mobile_jstestfuzz_211b5c3006f89e8235dd6d795d0c64defc77030d_18_06_08_22_18_23  * BFG-81067  ** https://evergreen.mongodb.com/task/mongodb_mongo_master_ubuntu1604_arm64_mobile_jstestfuzz_8fae595c44b14aa61951ba413e293449c2b49866_18_06_08_21_11_33  * BFG-81072  ** https://evergreen.mongodb.com/task/mongodb_mongo_master_ubuntu1604_arm64_mobile_jstestfuzz_72784578190b44abe381e3a181adc309a1bd4cb1_18_06_08_20_52_08  * BFG-81074  ** https://evergreen.mongodb.com/task/mongodb_mongo_master_ubuntu1604_arm64_mobile_jstestfuzz_c68e6339eac6228e97f7eb3af7bcac506ce3d9e3_18_06_08_20_49_16  * BFG-81078  ** https://evergreen.mongodb.com/task/mongodb_mongo_master_ubuntu1604_arm64_mobile_jstestfuzz_e88605e272251362d16c416791434d56acfadfa9_18_06_08_20_45_51""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3686","07/23/2018 19:33:58",1,"Stranded tasks query doesn't work ""¬†¬† duration_secs: 0.013528195   ¬†¬† error: problem finding terminated hosts: unknown operator: $and   ¬†¬† job: task-stranded-cleanup.2018-07-23.18-18-00   ¬†¬† job_type: task-stranded-cleanup   ¬†¬† metadata: { [[+]|https://mongodb.splunkcloud.com/en-US/app/search/search?earliest=-60m%40m&latest=now&q=search%20index%3Devergreen%20metadata.level%20%3E%3D%2070%20AND%20NOT%20job_type%3D%22agent-deploy%22&display.page.search.mode=fast&dispatch.sample_ratio=1&display.general.type=events&sid=1532370174.2062849]   ¬†¬† }   ¬†¬† queue_type: *queue.remoteUnordered""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3689","07/23/2018 20:51:02",1,"Clearly document how to use Lobster to serve local log files ""Improve the documentation in the Lobster README about how to serve local log files using the Lobster server.""","",0,0,0,1,0,0,0,0,0,0,0,0,0,1,0
"EVG-3691","07/23/2018 21:03:31",1,"Tasks by project route doesn't pass task ID correctly ""tasksByProjectPaginator""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3693","07/23/2018 22:37:49",1,"Cannot delete subscriptions from UI ""I get a """"Subscription not found"""" error. This only applies to subs which have bson.ObjectIds as their type.""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-3697","07/24/2018 17:50:50",2,"Spawn host expiration message received too early ""I was sent the following:       at 7/24/18 @ 08:12 eastern time, which is much earlier than expected.""","  Your rhel70 host with id i-09891d4b3acce8ce2 will be terminated at 2018-07-25 00:10:25.969 +0000 UTC. Visit https://evergreen.mongodb.com/ui/spawn to extend its lifetime.  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3712","07/24/2018 22:00:50",1,"v2 tasks subresource of build has null artifacts ""Example: https://evergreen.mongodb.com/rest/v2/builds/mongodb_mongo_master_enterprise_rhel_70_64_bit_9d87df4b3ba2e611870893b8a83529a9311719d6_18_07_23_19_29_28/tasks  Array index: 7""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3714","07/25/2018 14:00:30",1,"Panic if project has no functions but generator does ""Stack:  ""","  gimlet/middleware_grip.go:184 runtime/asm_amd64.s:515 runtime/panic.go:489 runtime/hashmap.go:487 model/generate.go:230 model/generate.go:134 data/generate.go:28 route/generate_routes.go:73 route/handler.go:86 http/server.go:1942 mux/mux.go:114 negroni/negroni.go:46 negroni/negroni.go:29 negroni/negroni.go:38 negroni/negroni.go:38 negroni/static.go:34 negroni/negroni.go:38 negroni/negroni.go:38 negroni/static.go:34 negroni/negroni.go:38 negroni/negroni.go:38 gimlet/middleware_auth.go:37 negroni/negroni.go:38 negroni/negroni.go:38 gimlet/middleware_auth_user.go:142 negroni/negroni.go:38 negroni/negroni.go:38 gimlet/middleware_grip.go:192 negroni/negroni.go:38 negroni/negroni.go:86 http/server.go:2568 http/server.go:1825 runtime/asm_amd64.s:2197  ",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-3715","07/25/2018 14:20:05",1,"Exclude gosec ""This linter was renamed from gas to gosec, so we need to change the exclusion in the makefile.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-3716","07/25/2018 16:29:45",1,"Log provisioning retries at info ""These currently are logged at error because we log them in the job. However, they are expected, so we should log them at a lower level.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-8465","07/27/2018 19:43:25",2,"Amboy can't update stats/status document """"""problem saving stat: problem updating status document for event-send:5b5b64e9c9ec445913aa8eaa-regression-jira-issue-BFG-Build Failure: not found""""    not found  problem updating status document for event-send:5b5b64e62fbabe103eb18f4b-regression-jira-issue-BFG-Build Failure  github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/queue.(*mongoDB).SaveStatus   /data/mci/e0a0a6d6230b1a3fa7afe162eb264533/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/queue/driver_mongodb.go:315  github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/queue.(*lockManager).Lock   /data/mci/e0a0a6d6230b1a3fa7afe162eb264533/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/queue/driver_locker.go:224  github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/queue.(*mongoDB).Lock   <autogenerated>:25  github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/queue.(*remoteUnordered).Next   /data/mci/e0a0a6d6230b1a3fa7afe162eb264533/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/queue/remote.go:84  github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool.startWorkerServer.func1   /data/mci/e0a0a6d6230b1a3fa7afe162eb264533/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool/helpers.go:123  runtime.goexit   /opt/go1.8/go/src/runtime/asm_amd64.s:2197  problem saving stat  github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/queue.(*lockManager).Lock   /data/mci/e0a0a6d6230b1a3fa7afe162eb264533/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/queue/driver_locker.go:225  github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/queue.(*mongoDB).Lock   <autogenerated>:25  github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/queue.(*remoteUnordered).Next   /data/mci/e0a0a6d6230b1a3fa7afe162eb264533/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/queue/remote.go:84  github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool.startWorkerServer.func1   /data/mci/e0a0a6d6230b1a3fa7afe162eb264533/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool/helpers.go:123  runtime.goexit   /opt/go1.8/go/src/runtime/asm_amd64.s:2197""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-3732","07/27/2018 19:56:07",1,"JIRA Ticket description length limit exceeded ""Failed to send alert: error creating JIRA ticket: HTTP request returned unexpected status `400 `: {""""errorMessages"""":[],""""errors"""":{""""description"""":""""The entered text is too long. It exceeds the allowed limit of 32,767 characters.""""}}       extended:  HTTP request returned unexpected status `400 `: {""""errorMessages"""":[],""""errors"""":{""""description"""":""""The entered text is too long. It exceeds the allowed limit of 32,767 characters.""""}}""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8351","07/27/2018 20:04:35",2,"buffered session inserter fails to insert some documents ""We occasionally saw errors that notifications couldn't be found by ID. EVG-3614 stopped using the bulk inserter, and we no longer see these errors.""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-3737","07/30/2018 14:45:47",1,"Implicit project ""Project id is implicit. Query should be adjusted. The column should be removed.""","",0,0,0,0,0,0,0,0,1,0,0,1,0,0,0
"EVG-3738","07/30/2018 15:01:29",1,"logkeeper app should have reasonable socket timeout ""90s to match evergreen?""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-3747","07/30/2018 19:41:09",2,"console errors on task page for perfplugin  ""this causes graphs to not render, we think.     e.g. https://evergreen.mongodb.com/task/mongo_go_driver_perf_perf_0a84d587c4836909f1d89c43665e96ecb14fad46_18_07_27_18_33_15""","",1,0,0,0,0,0,0,0,0,0,0,1,0,0,0
"EVG-8535","07/30/2018 21:06:15",1,"curator logging agent should be able to watch a file ""if the current modes are """"pipe"""" and """"exec"""" this should be """"tail""""""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-3749","07/30/2018 22:09:12",2,"patch command line args not overriding default ""I'm runningbut regardless, all the other buildvariants (and their tasks) are scheduled. However, on the buildvariant I'm interested in - {{benchmark}} - only the task I want scheduld - {{benchmark-tpch-micro}} is scheduled.    See version at https://evergreen.mongodb.com/version/5b5f7d9be3c331561bf724cf for the result of the invocation above.    My {{~/.evergreen.yml}} file looks like:""","  evergreen patch -p sqlproxy -y -d """"1709"""" -v benchmark -t benchmark-tpch-micro api_server_host: http://evergreen-api.mongodb.com:8080/api  ui_server_host: https://evergreen.mongodb.com  api_key: XXX  user: adinoyi.omuya  projects:  - name: sqlproxy    default: true    alias: mvp    variants:    - code-quality,config-tests__os_full_matrix~windows,full_matrix__os_full_matrix~osx_mongodb_version~latest_mongodb_topology~standalone,full_matrix__os_full_matrix~ubuntu1404-64_mongodb_version~latest_mongodb_topology~standalone,full_matrix__os_full_matrix~windows_mongodb_version~latest_mongodb_topology~standalone,race-detector,full_matrix__os_full_matrix~osx_mongodb_version~3.2_mongodb_topology~sharded-cluster,full_matrix__os_full_matrix~ubuntu1404-64_mongodb_version~3.4_mongodb_topology~replica-set    tasks:    - all  - name: mongosql-auth-c    default: true    variants:    - all    tasks:    - all  - name: sqlproxy-2.4    default: true    variants:    - code-quality,config-tests__os_full_matrix~windows,full_matrix__os_full_matrix~osx_mongodb_version~latest_mongodb_topology~standalone,full_matrix__os_full_matrix~ubuntu1404-64_mongodb_version~latest_mongodb_topology~standalone,full_matrix__os_full_matrix~windows_mongodb_version~latest_mongodb_topology~standalone,race-detector,full_matrix__os_full_matrix~osx_mongodb_version~3.2_mongodb_topology~sharded-cluster,full_matrix__os_full_matrix~ubuntu1404-64_mongodb_version~3.4_mongodb_topology~replica-set    tasks:    - all  - name: mongosql-auth-c    default: true    variants:    - all    tasks:    - all",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3753","07/31/2018 21:13:10",2,"Schedule task dependencies for scheduled task, even if dependency doesn't satisfy batch time ""We have a high batch time on our project (24 hours). Fairly often recently, most of the tasks will get on one period, but the depended on task (compile) has run more recently than 24 hours, and doesn't get scheduled. This leads to none of the other tasks running.     Instead, the compile task (dependency) should be scheduled whenever something that is dependent on it is scheduled, regardless of the compile tasks' own batch time. ""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-8366","08/01/2018 14:27:59",2,"Amboy keeps retrying some errored jobs """"","¬†¬† error: problem unlocking 'host-termination-job.sir-h2e84zkg.2018-07-31.20-48-00': problem updating status document for host-termination-job.sir-h2e84zkg.2018-07-31.20-48-00: not found   ¬†¬† extended: not found  problem updating status document for host-termination-job.sir-h2e84zkg.2018-07-31.20-48-00  github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/queue.(*mongoDB).SaveStatus   /data/mci/b1fb0b12d0cfc1873c727e023990ee55/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/queue/driver_mongodb.go:315  github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/queue.(*lockManager).Unlock   /data/mci/b1fb0b12d0cfc1873c727e023990ee55/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/queue/driver_locker.go:249  github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/queue.(*mongoDB).Unlock   <autogenerated>:26  github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/queue.(*remoteBase).Complete   /data/mci/b1fb0b12d0cfc1873c727e023990ee55/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/queue/remote_base.go:152  github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool.executeJob   /data/mci/b1fb0b12d0cfc1873c727e023990ee55/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool/helpers.go:45  github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool.worker   /data/mci/b1fb0b12d0cfc1873c727e023990ee55/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool/helpers.go:101  runtime.goexit   /opt/go1.8/go/src/runtime/asm_amd64.s:2197  problem unlocking 'host-termination-job.sir-h2e84zkg.2018-07-31.20-48-00'  github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/queue.(*lockManager).Unlock   /data/mci/b1fb0b12d0cfc1873c727e023990ee55/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/queue/driver_locker.go:255  github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/queue.(*mongoDB).Unlock   <autogenerated>:26  github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/queue.(*remoteBase).Complete   /data/mci/b1fb0b12d0cfc1873c727e023990ee55/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/queue/remote_base.go:152  github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool.executeJob   /data/mci/b1fb0b12d0cfc1873c727e023990ee55/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool/helpers.go:45  github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool.worker   /data/mci/b1fb0b12d0cfc1873c727e023990ee55/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool/helpers.go:101  runtime.goexit   /opt/go1.8/go/src/runtime/asm_amd64.s:2197           mci:PRIMARY> db.evg.service.jobs.findOne({_id:""""host-termination-job.sir-h2e84zkg.2018-07-31.20-48-00""""})  {   """"_id"""" : """"host-termination-job.sir-h2e84zkg.2018-07-31.20-48-00"""",   """"type"""" : """"host-termination-job"""",   """"version"""" : 0,   """"priority"""" : 2,   """"status"""" : {    """"owner"""" : """"evg.service.evergreenapp-3.build.10gen.cc.04dc0574-21d8-4f3e-9bb2-d2fa572e4cff"""",    """"completed"""" : false,    """"in_prog"""" : true,    """"mod_ts"""" : ISODate(""""2018-08-01T13:26:49.969Z""""),    """"mod_count"""" : 577,    """"err_count"""" : 0   },   """"time_info"""" : {    """"created"""" : ISODate(""""2018-07-31T20:48:06.819Z""""),    """"start"""" : ISODate(""""0001-01-01T00:00:00Z""""),    """"end"""" : ISODate(""""0001-01-01T00:00:00Z""""),    """"wait_until"""" : ISODate(""""0001-01-01T00:00:00Z""""),    """"max_time"""" : NumberLong(0)   },   """"job"""" : {    """"host_id"""" : """"sir-h2e84zkg"""",    """"metadata"""" : {     """"name"""" : """"host-termination-job.sir-h2e84zkg.2018-07-31.20-48-00"""",     """"job_type"""" : {      """"name"""" : """"host-termination-job"""",      """"version"""" : 0     }    }   },   """"dependency"""" : {    """"type"""" : """"always"""",    """"version"""" : 0,    """"edges"""" : [ ],    """"dependency"""" : {     """"should_rebuild"""" : true,     """"type"""" : {      """"name"""" : """"always"""",      """"version"""" : 0     },     """"jobedges"""" : {      """"edges"""" : [ ]     }    }   }  }",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-3769","08/01/2018 21:53:25",2,"Setup Failure: xc-subprocess on RHEL 7.2 zLinux [Evergreen Self-Tests @ 4e4310d2]  ""h2. [xc-subprocess failed on RHEL 7.2 zLinux|https://evergreen.mongodb.com/task/mci_rhel72_s390x_xc_subprocess_4e4310d23ea0d0d7da2606cfdc5c647b04974123_18_08_01_17_51_19/0]  Host: [rhel72-z-10.maristisv.build.10gen.cc|https://evergreen.mongodb.com/host/rhel72-z-10.maristisv.build.10gen.cc]  Project: [Evergreen Self-Tests|https://evergreen.mongodb.com/waterfall/mci]  Commit: [diff|https://github.com/evergreen-ci/evergreen/commit/4e4310d23ea0d0d7da2606cfdc5c647b04974123]: EVG-3866: use correct selector for terminated hosts    ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-3816","08/02/2018 17:24:07",1,"Generated tasks should inherit the priority from the task that generated them ""Unless overridden in the task definition JSON""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3817","08/02/2018 19:26:38",2,"Setup failures not colored properly in patch results sidebar ""These failures would show up in pale purple on the grid and on individual results pages, but would still be colored gray in the results section on the right-hand side of the patch page.     Reference patch:   https://evergreen.mongodb.com/version/5b631dffe3c3316f9aecd40d""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-3821","08/03/2018 15:13:28",1,"Panic: concurrent map iteration and map write ""Stack is attached.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-3822","08/03/2018 15:20:15",2,"Create new status after initializing and before starting ""The SpawnHost function call can take much longer to return for containers than for conventional hosts, since Docker may need to import and build new images before actually creating and running new containers. This currently means that containers can be stuck in initializing for a while, and end up getting reaped by the scheduler after 3 minutes. By adding the HostSpawning (""""spawning"""") status, we are able to distinguish between uninitialized hosts and ones that have already called SpawnHost. ""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-5117","08/03/2018 18:31:51",1,"last_green endpoint does not exclude patch builds """"","  $ curl -s https://evergreen.mongodb.com/rest/v1/projects/curator/last_green?rhel70  Couldn't find version with id `1494` after successful aggregation.  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5125","08/05/2018 05:06:12",0,"Cannot get links to artifacts for execution tasks from project and githash ""I spiraled a bit here trying to come up with different options. It's possible I've overlooked something.    https://evergreen.mongodb.com/rest/v1/versions/mongodb_mongo_master_bc880e13829b89ee46c0715c5534c8ef1ac387f3/status lists the task ids for the """"unittests!"""" display task and not the """"unittests"""" execution task.    https://evergreen.mongodb.com/rest/v1/tasks/mongodb_mongo_master_enterprise_rhel_62_64_bit_coverage_display_unittests!_bc880e13829b89ee46c0715c5534c8ef1ac387f3_18_08_02_18_14_03 reports {{""""files"""": null}} as EVG-3283 originally described.    https://evergreen.mongodb.com/rest/v2/tasks/mongodb_mongo_master_enterprise_rhel_62_64_bit_coverage_display_unittests!_bc880e13829b89ee46c0715c5534c8ef1ac387f3_18_08_02_18_14_03 reports {{""""artifacts"""": null}} despite the changes from EVG-3283. It appears the artifacts are only listed in https://evergreen.mongodb.com/rest/v2/tasks/mongodb_mongo_master_enterprise_rhel_62_64_bit_coverage_unittests_bc880e13829b89ee46c0715c5534c8ef1ac387f3_18_08_02_18_14_03, which isn't listed by the {{/rest/v1/versions/<version_id>/status}} endpoint.    I tried to use the {{/rest/v2/projects/<project_id>/revisions/<commit_hash>/tasks}} endpoint, but it didn't work for me. https://evergreen.mongodb.com/rest/v2/projects/mongodb-mongo-master/revisions/bc880e13829b89ee46c0715c5534c8ef1ac387f3/tasks returns        as does https://evergreen.mongodb.com/rest/v2/projects/mongodb_mongo_master/revisions/bc880e13829b89ee46c0715c5534c8ef1ac387f3/tasks    ""","  {    """"status"""": 404,    """"error"""": """"task from project 'mongodb-mongo-master' and commit 'bc880e13829b89ee46c0715c5534c8ef1ac387f3' not found""""  }    {    """"status"""": 404,    """"error"""": """"task from project 'mongodb_mongo_master' and commit 'bc880e13829b89ee46c0715c5534c8ef1ac387f3' not found""""  }  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5126","08/05/2018 05:28:54",2,"Cannot restart setup-failed display tasks ""I tried to restart the {{replica_sets_auth}} task in [my patch build|https://evergreen.mongodb.com/task/mongodb_mongo_v4.0_enterprise_rhel_62_64_bit_display_replica_sets_auth_patch_ad5ca4f9f516d575dc247ba12b2c054ed8d2544f_5b6665c2e3c33156e42cbf57_18_08_05_02_50_19] and got the following error: """"Error restarting: Error restarting task mongodb_mongo_v4.0_enterprise_rhel_62_64_bit_display_replica_sets_auth_patch_ad5ca4f9f516d575dc247ba12b2c054ed8d2544f_5b6665c2e3c33156e42cbf57_18_08_05_02_50_19: Task 'mongodb_mongo_v4.0_enterprise_rhel_62_64_bit_display_replica_sets_auth_patch_ad5ca4f9f516d575dc247ba12b2c054ed8d2544f_5b6665c2e3c33156e42cbf57_18_08_05_02_50_19' is currently 'setup-failed' - cannot reset task in this status"""".    It'd be great if fixing this also made it possible so selecting """"Setup Failures"""" from the """"Restart"""" on the version and build pages could restart display tasks as well.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5140","08/06/2018 15:17:58",1,"Panic in gimlet route ""panic: project context not attached to request    gimlet/middleware_grip.go:184 runtime/asm_amd64.s:515 runtime/panic.go:489 route/prefetch.go:78 route/task_restart.go:37 gimlet/framework.go:42 http/server.go:1942 negroni/negroni.go:46 negroni/negroni.go:29 negroni/negroni.go:38 negroni/negroni.go:38 gimlet/middleware_auth.go:192 negroni/negroni.go:38 negroni/negroni.go:86 mux/mux.go:114 negroni/negroni.go:46 negroni/negroni.go:29 negroni/negroni.go:38 negroni/negroni.go:38 negroni/static.go:34 negroni/negroni.go:38 negroni/negroni.go:38 negroni/static.go:34 negroni/negroni.go:38 negroni/negroni.go:38 gimlet/middleware_auth.go:37 negroni/negroni.go:38 negroni/negroni.go:38 gimlet/middleware_auth_user.go:142 negroni/negroni.go:38 negroni/negroni.go:38 gimlet/middleware_grip.go:192 negroni/negroni.go:38 negroni/negroni.go:86 http/server.go:2568 http/server.go:1825 runtime/asm_amd64.s:2197""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8831","08/06/2018 17:27:45",1,"make curator sync files more reliably  ""don't run threads inside of the job  avoid skipping copying for dev builds. ""","",0,0,0,0,1,0,0,0,0,0,0,0,1,0,0
"EVG-5143","08/06/2018 20:57:57",2,"Servers getting auto-quarantined without a notice ""I see a few servers that were put into quarantine by mci user without creating a jira ticket today:    https://evergreen.mongodb.com/host/rhel67-z-5.maristisv.build.10gen.cc  https://evergreen.mongodb.com/host/rhel67-z-12.maristisv.build.10gen.cc  https://evergreen.mongodb.com/host/rhel67-z-13.maristisv.build.10gen.cc  https://evergreen.mongodb.com/host/rhel72-z-4.maristisv.build.10gen.cc  https://evergreen.mongodb.com/host/rhel72-z-5.maristisv.build.10gen.cc  https://evergreen.mongodb.com/host/sles12-z-1.maristisv.build.10gen.cc  https://evergreen.mongodb.com/host/ubuntu1604-arm64-2.packet.build.10gen.cc (3 days ago)  https://evergreen.mongodb.com/host/macos-1012-112.macstadium.build.10gen.cc    Last time we saw a jira ticket for this was on 8/02""","",0,0,0,0,0,0,1,0,0,1,0,0,0,0,0
"EVG-5144","08/07/2018 07:22:40",2,"Setup Failure: e2e-chrome on Ubuntu 18.04 (e2e) [Lobster @ d04f7d15]  "" h2. [e2e-chrome failed on Ubuntu 18.04 (e2e)|https://evergreen-staging.corp.mongodb.com//task/lobster_ubuntu1804_e2e_chrome_d04f7d15900d2de0f7f24b2030d67f8e6bde67f5_18_08_05_17_06_36/0] Host: [ec2-54-164-127-144.compute-1.amazonaws.com|https://evergreen-staging.corp.mongodb.com//host/sir-1ck85bmh] Project: [Lobster|https://evergreen-staging.corp.mongodb.com//waterfall/lobster] Commit: [diff|https://github.com/evergreen-ci/lobster/commit/d04f7d15900d2de0f7f24b2030d67f8e6bde67f5]: Update to React 16, Eslint 5 (#48)  ""","",0,0,0,0,1,0,0,0,0,0,0,0,0,1,0
"EVG-5146","08/07/2018 14:28:25",2,"Host expiration warnings aren't getting sent? ""¬†¬† error: unknown trigger: 'expiration'   ¬†¬† event_id: 5b6858f1b237365acdb40bea   ¬†¬† event_type: HOST   ¬†¬† job: event-metajob   ¬†¬† message: errors processing triggers for event   ¬†¬† metadata: { [[+]|https://mongodb.splunkcloud.com/en-US/app/search/search?earliest=-60m%40m&latest=now&q=search%20index%3Devergreen-staging%20metadata.level%20%3E%3D%2070&display.page.search.mode=fast&dispatch.sample_ratio=1&display.general.type=events&sid=1533648416.7279320]   ¬†¬† }   ¬†¬† source: events-processing""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5147","08/07/2018 15:29:54",2,"Create switch for processed/unprocessed CP modes ""Add a switch to the perf BB / signal processing page which allow to change mode: """"processed change points"""" and """"unprocessed change points""""""","",0,0,0,0,0,0,0,0,1,0,1,1,0,0,0
"EVG-5149","08/07/2018 16:00:58",2,"Need to check if a host is up before adding a host provisioning job for it ""I think the correct course of action here is to edit {{DescribeSpotRequestsAndSave}} in {{cloud/ec2_client.go}} so that it updates host's status' to running if they are running, and then change the host provisioning query so that it *doesn't* check IsUp for ec2 instances but also doesn't try to start hosts that aren't yet up. ""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5154","08/08/2018 12:24:33",1,"Signal Processing: Revision column is empty ""As the revision column is empty, I can see a list of change points, but can't know where that change point is.     !image-2018-08-08-14-21-23-517.png|width=600!     (What I really want is a clickable link to the task page, to the specific revision. I assume there's already a separate ticket for that.)""","",0,0,1,0,0,0,0,0,0,0,1,1,0,0,0
"EVG-5162","08/08/2018 22:44:00",1,"Build Baron Plugin: Include link to extracted features ""The Build Baron Tool now has an endpoint to display the extracted features from the BF Suggestion Server.    The Plugin should include a link to this page.    Link should appear on all the page regardless of whether the suggestion is coming from JIRA or the suggestion server. ""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5163","08/09/2018 03:19:20",1,"Allow time-based notifications to be configured based on pass/fail ""Correct me if I'm wrong, but based on discussion with brian right now the notifications seem to be implemented so that they only generate if the first commit is passing and the next is either passing or failing.  That seems to mean that if something times out and thus takes a long time, it will still generate a notification.  that seems less useful, since mostly what I care about is """"this task passed before, still passes, but now it takes 50% longer"""".    I also wouldn't hold up the resolution of the event-driven notifications on this since I haven't seen evidence of it going haywire yet.  this just seems like it would improve the signal:noise ratio on these.    (also, while I'm at it, can someone tell me if I should be saying """"150%"""" or """"50%"""" to get notified of things taking 1.5x their usual time?)""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5164","08/09/2018 06:54:11",1,"Parsing time failure for REST V2 ""patches by user"" endpoint ""Recently I got below 400 errors while accessing patches by user REST V2 endpoint.¬†    The body of the response indicates it's time parsing related:¬†    ¬†""","  $ evg_patch_build.py stats  Traceback (most recent call last):    File """"/Users/lchen/workplace/kernel-tools/vendoring/evg_patch_build.py"""", line 546, in <module>      evg_patch_build(action, project, desc, wt_branch, patch, restart_all=args['-a'])    File """"/Users/lchen/workplace/kernel-tools/vendoring/evg_patch_build.py"""", line 509, in evg_patch_build      patch_id = patch or get_latest_patch()    File """"/Users/lchen/workplace/kernel-tools/vendoring/evg_patch_build.py"""", line 128, in get_latest_patch      p_rsp = request_rest_endpoint_json(p_url)    File """"/Users/lchen/workplace/kernel-tools/vendoring/evg_patch_build.py"""", line 86, in request_rest_endpoint_json      rsp.raise_for_status()    File """"/usr/local/lib/python3.6/site-packages/requests/models.py"""", line 939, in raise_for_status      raise HTTPError(http_error_msg, response=self)  requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: https://evergreen.mongodb.com/rest/v2/users/luke.chen/patches   >>> r = requests.get('https://evergreen.mongodb.com/rest/v2/users/luke.chen/patches', headers=headers)  >>> r.json()  {u'status': 400, u'error': u'problem parsing time from \'0001-01-01 00:00:00 +0000 UTC\' (parsing time """""""" as """"""""2006-01-02T15:04:05.000Z"""""""": cannot parse """""""" as """""""""""")'} ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5169","08/09/2018 23:20:50",1,"Double forward slash in link header causes a 301 ""This URL:    https://evergreen.mongodb.com/api/rest/v2/projects    If it has enough projects, returns a link header which contains a double forward slash:        When I request this URL I get a 301 from evergreen redirecting to this url with one of the double slashes taken out.    Evergreen should generate single slash URLs in the link header.""","  Link: <https://evergreen.mongodb.com//api/rest/v2/projects?limit=100&start_at=mms-monitoring-qa>; rel=""""next""""  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5170","08/09/2018 23:58:41",1,"/projects/:project/patches endpoint broken ""Ex: https://evergreen.mongodb.com/api/rest/v2/projects/mongo-ruby-driver/patches    Yields:        https://github.com/evergreen-ci/evergreen/wiki/REST-V2-Usage#fetch-patches-by-project states that start_at defaults to now.    Curiously, the following URL:    https://evergreen.mongodb.com/api/rest/v2/projects/mongo-ruby-driver/patches?start_at=2006-01-02T15:04:05.000Z    Yields:    ""","  {    """"status"""": 400,    """"error"""": """"parsing time \""""\"""" as \""""\""""2006-01-02T15:04:05.000Z\""""\"""": cannot parse \""""\"""" as \""""\""""\""""""""  }    {    """"status"""": 400,    """"error"""": """"parsing time \""""2006-01-02T15:04:05.000Z\"""" as \""""\""""2006-01-02T15:04:05.000Z\""""\"""": cannot parse \""""2006-01-02T15:04:05.000Z\"""" as \""""\""""\""""""""  }  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5171","08/10/2018 17:01:41",1,"Waterfall resets to first page on filtering ""Repro:  * Go to [the second page of the 4.0 waterfall|https://evergreen.mongodb.com/waterfall/mongodb-mongo-v4.0?skip=5] for example  * Type something in the """"Filter Variant"""" page  * Watch the page go to the first waterfall page of that project    Impact: this is super annoying when trying to track down past history.    Interestingly enough this bug doesn't appear if I type in the """"Filter Task"""" box instead.""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-5172","08/10/2018 17:19:17",1,"start_at values are required to be quoted ""The source specifies this:        As a result, the following request fails:        And this succeeds:        The quotes should probably not be required.""","  rest/model/time.go:     APITimeFormat = """"\""""2006-01-02T15:04:05.000Z\""""""""    https://evergreen.mongodb.com/api/rest/v2/projects/mongo-ruby-driver/patches?start_at=2020-01-02T15:04:05.000Z    {    """"status"""": 400,    """"error"""": """"parsing time \""""2020-01-02T15:04:05.000Z\"""" as \""""\""""2006-01-02T15:04:05.000Z\""""\"""": cannot parse \""""2020-01-02T15:04:05.000Z\"""" as \""""\""""\""""""""  }    https://evergreen.mongodb.com/api/rest/v2/projects/mongo-ruby-driver/patches?start_at=%222020-01-02T15:04:05.000Z%22  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5174","08/10/2018 20:30:58",1,"Lack of patches should return an empty array, not 400 ""For example, api  v2 GET projects/mongo-tools-v4.0/patches?start_at=""""2020-01-01T00:00:00.000Z"""" produces:    400: no patches found    If there are no patches the return should be an empty array with a success HTTP status code.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5177","08/13/2018 13:31:09",2,"Aggregation options for grouped items ""Add aggregation for folded rows. Max on value, and count. Maybe, we could make it configurable by the user.""","",0,0,0,0,0,0,0,0,1,0,1,1,0,0,0
"EVG-5178","08/13/2018 13:32:48",2,"Date column ""Each CP has a timestamp. We should add this column to the grid, also add default filter to query CPs for the last two weeks only. User should be able to change it.    (This requires to write change filtering query parser/compiler)""","",0,0,0,0,0,0,0,0,1,0,1,1,0,0,0
"EVG-5179","08/13/2018 15:37:20",1,"Remove poolSize and always use maxContainers when scheduling archlinux-docker hosts ""poolSize is redundant because it's the same as maxContainers in the pool settings.¬†""","",0,0,0,1,0,0,0,0,0,0,1,0,0,0,0
"EVG-9256","08/13/2018 16:12:42",1,"maintence pass at sink application ""- disable background jobs that aren't going to be useful,   - cleanup and isolate cost reporting code.  - update vendored libs  - fix tests as needed. ""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-5181","08/13/2018 16:14:10",2,"Task in task_group on single host ran despite failure of previous task ""The following task group is defined as:        It was [observed in a build|https://evergreen.mongodb.com/build/mongodb_mongo_master_amazon_ec6f2a54d8b901e95e556d53647944be8ce441d5_18_08_13_05_46_37] in that {{compile}} & {{compile_unittests}} ran successfully and then {{unittests}} failed on this [host|https://evergreen.mongodb.com/host/sir-pqei7j7j]. The tasks {{compile_dbtest}} and {{compile_all}} were marked as blocked (and unscheduled). However {{dbtest}} ran on a [different host|https://evergreen.mongodb.com/host/sir-pip84bbj] (and failed since the artifacts did not exist).""","  - &compile_task_group_template    name: compile_task_group_template    max_hosts: 1    tasks: []  ...  - <<: *compile_task_group_template    name: compile_all_run_unittests_TG    tasks:    - compile    - compile_unittests    - unittests    - compile_dbtest    - dbtest    - compile_all  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5190","08/14/2018 19:04:33",2,"Allow users to alert on subsets of failure types ""Not sure how deeply-impacting this is in Evergreen, but we're seeing a lot of Setup Failures hitting the BFG project that don't need to.  Would be great if there was some way to ignore them.    And while I'm at it, it's unclear that System Failure BFGs are very useful either, so I assume any solution should include the option to disable those too.""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-5193","08/14/2018 20:51:27",1,"Log time taken by scheduler operations ""With many tasks in the queue the scheduler takes a long time to complete. We have seen ~5 minute durations. We should log how long various operations take, especially how long it takes to run the sorting setup, how long it takes to run the sort, and how long the host allocator takes. We can use this information to make a faster scheduler.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-5195","08/14/2018 21:29:28",0,"Put task status into a custom field in JIRA notifications ""Right now it's in the summary of a BFG and that means we have to regex search on it, which is insanely slow.  Using a custom field would be much faster.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5198","08/15/2018 03:07:19",2,"add flag to distro to exclude a distro from running tasks in projects ""(e.g. docker hosts, used for parents and should be spawnable, but not for task execution...)     should also be in the validator to prevent versions that use these distros from running""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5206","08/15/2018 21:02:07",2,"Re-notify after 2 days for 'test fails in task' trigger ""John Liu [3:57 PM]  eh    the task regression notification will re-notify of a failing task every 2 days  I believe this is to preserve the behavior of the previous BFGs    Ian Whalen [3:57 PM]  yup    John Liu [3:57 PM]  the task regression by test does not have this check  but we could definitely add it""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5210","08/16/2018 18:22:09",2,"ActivateElapsedBuilds does not schedule cross-variant dependencies ""It appears that tasks activate their dependencies in certain special cases (patch builds, stepback, patch builds), but I don't see that this happens in commit builds. It should happen there too for consistency, and to ensure that all activated tasks' dependencies are scheduled.    It appears that \{{ActivateElapsedBuilds}} activates all tasks in a given build, but it doesn't activate their dependencies, so if the dependencies are cross-variant, it will not activate them.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5215","08/17/2018 07:48:04",1,"Setup Failure: e2e-chrome on Ubuntu 18.04 (e2e) [Lobster @ 418607b0]  "" h2. [e2e-chrome failed on Ubuntu 18.04 (e2e)|https://evergreen-staging.corp.mongodb.com//task/lobster_ubuntu1804_e2e_chrome_418607b0f5d77c08c60db6b29ac9f6810960d4a1_18_08_15_14_03_00/0] Host: [ec2-34-230-66-20.compute-1.amazonaws.com|https://evergreen-staging.corp.mongodb.com//host/sir-97ti57eh] Project: [Lobster|https://evergreen-staging.corp.mongodb.com//waterfall/lobster] Commit: [diff|https://github.com/evergreen-ci/lobster/commit/418607b0f5d77c08c60db6b29ac9f6810960d4a1]: Allow user to change log file via 'Show Details' menu's input box when server is set (#54)  ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-5216","08/17/2018 14:22:27",1,"Change agent heartbeat failure to N times in a row from N times during a task ""Currently, the agent will fail a task if more than 10 heartbeats fail during task execution. This ticket is to change this behavior to more than 10 times in a row.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5218","08/17/2018 15:25:21",2,"Agent deploys fail immediately after deploy ""Investigate why¬†BUILD-5992 happened""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5222","08/17/2018 18:17:30",1,"Batch describe instances makes API call with empty list """"","  error getting host statuses for providers: error describing instances: after 10 retries, operation failed: MissingParameter: The request must contain the parameter InstanceId ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5225","08/17/2018 23:32:09",2,"Evergreen isn't consistent about failing task when creating BFG tickets ""BFG tickets appear to sometimes be created with the failing task as the execution task and sometimes created with the failing task as the display task.    For example, in BF-10282 the original title was """"Failures: sharding_6 on ! Linux DEBUG [MongoDB (master) @ 801fb6ac] (addshard2.js, find_and_modify_after_multi_write.js, authCommands.js, auto_rebalance_parallel_replica_sets.js, change_stream_update_lookup_read_concern.js +10 more)"""" and in BFG-87625 the original title was """"Failed: sharding on ! Linux DEBUG [MongoDB (master) @ 801fb6ac]"""".    I think ideally the links within a BFG ticket would go directly to the execution which caused the display task to be marked as a failure. However, I would want the title and custom JIRA fields to still refer to the name of the display task though.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5226","08/17/2018 23:48:25",0,"Evergreen returns 404 for certain inactive display tasks ""I think something may be misconfigured with how the {{benchrun_embedded*}} tasks are set up.  * https://evergreen.mongodb.com/task/mongodb_mongo_master_rhel_62_64_bit_mobile_display_benchrun_embedded_9fd731be471c3d0f40bf5208f2bdd3923c9ea3e8_18_08_17_17_26_44 is an inactive display task which returns a 404.  * https://evergreen.mongodb.com/task/mongodb_mongo_master_rhel_62_64_bit_mobile_benchrun_embedded_aggregation_5e461534b339c957d2e6dcf16015949a496a1110_18_08_16_22_58_49 is an execution task which doesn't have a """"Parent display task"""" link.  * https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_rhel_62_64_bit_display_sharding_59d4d78a68ef6347120c6dfcd6da6ec3d325722f_18_08_17_20_06_11 is a different inactive display task for the sharding tests which works completely fine.    References for the {{benchrun_embedded*}} tasks in the {{etc/evergreen.yml}} project configuration file.  * https://github.com/mongodb/mongo/blob/d0b0d782a14e9c0ac5724e35fb0bc2e20abcca67/etc/evergreen.yml#L178-L188  * https://github.com/mongodb/mongo/blob/d0b0d782a14e9c0ac5724e35fb0bc2e20abcca67/etc/evergreen.yml#L12789-L12825""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5227","08/20/2018 15:22:15",2,"Container changed from running back to building ""https://evergreen-staging.corp.mongodb.com/host/container-6564627122112293016""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5229","08/20/2018 19:22:53",1,"Do not run teardown scripts on task-spawned hosts """"","   error running teardown script on remote host: : error parsing ssh info : Invalid hostname format:  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5232","08/20/2018 19:38:24",1,"Spawn hosts for tasks fails to retrieve generated key """"","  error spawning host evg-ubuntu1604-test-20180820183226-4764860880446243780: key name must not be empty  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5236","08/21/2018 00:42:57",2,"avoid cross compiling zap tests  ""these are almost entirely test harness assumptions about testdata and config files.    after some thought, we decided to ditch the cross compile method and just compile these tests directly on these platforms.¬†""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5237","08/21/2018 03:51:23",1,"avoid/log termination jobs for terminated hosts ""seems like there are a couple of cases in the host termination job where we don't handle hosts that are already terminated very well. This is a small ticket to return early when it's clear we should and log a bit more in other cases.    derives from MAKE-437 work""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5241","08/21/2018 16:22:11",1,"Gimlet middleware: Runtime error: invalid memory address or nil pointer dereference  """"","  gimlet/middleware_grip.go:184  runtime/asm_amd64.s:515  runtime/panic.go:489  runtime/panic.go:63  runtime/signal_unix.go:290  service/version.go:112  service/ui.go:257  http/server.go:1942  negroni/negroni.go:46  negroni/negroni.go:29  negroni/negroni.go:38  negroni/negroni.go:38  service/middleware.go:239  gimlet/middleware_wrapper.go:16  negroni/negroni.go:38  negroni/negroni.go:86  mux/mux.go:114  negroni/negroni.go:46  negroni/negroni.go:29  negroni/negroni.go:38  negroni/negroni.go:38  negroni/static.go:41  negroni/negroni.go:38  negroni/negroni.go:38  negroni/static.go:53  negroni/negroni.go:38  negroni/negroni.go:38  gimlet/middleware_auth.go:37  negroni/negroni.go:38  negroni/negroni.go:38  gimlet/middleware_auth_user.go:142  negroni/negroni.go:38  negroni/negroni.go:38  gimlet/middleware_grip.go:192  negroni/negroni.go:38  negroni/negroni.go:86  http/server.go:2568  http/server.go:1825  runtime/asm_amd64.s:2197 ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-9299","08/22/2018 18:43:36",0,"Revendor latest version of github.com/bluele/slack ""github.com/bluele/slack has been updated to properly escape slack messages""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-5249","08/23/2018 00:47:43",1,"attach.xunit_results does not indicate failure ""I tried passing it different file paths to upload and it always says:    [2018/08/22 19:31:55.274] Running command 'attach.xunit_results' in """"upload test results"""" (step 2 of 4)  [2018/08/22 19:31:55.274] Attach test results succeeded    However nothing appears in the test results in evergreen UI.    The task should indicate failure if it fails e.g. due to being passed a nonexistent path to upload.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5254","08/23/2018 18:42:35",0,"Include task name and whether it was a task failure or test failure in email subject ""Not having this information makes it hard to skim your inbox for specific tasks and whether it's a task or system failure or if it's JUnit test failures only""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5256","08/24/2018 17:21:16",2,"Allow renotification interval to be configurable for task-regression{,-by-test} ""task-regression{,-by-test} renotify after 48 hours, but we should make these configurable using the extra data fields""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-5258","08/24/2018 19:25:15",1,"Can't restart display task with blocked execution task ""https://evergreen.mongodb.com/task/mci_ubuntu1604_display_lint_patch_3f997083ebbeb03548604f1f299d075733cf2252_5b80304c2a60ed5f8609e3a6_18_08_24_16_20_29""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-5259","08/24/2018 20:13:40",2,"Investigate how builds are marked failed with no failing tasks ""I put some logging inside of the task model to figure out when/where builds are getting marked failed. If you search splunk with """"source=http:evergreen  evg-3455"""" you'll find that builds that ultimately succeed, and are marked as Status: evergreen.BuildSucceeded at some point prior have their status in the DB set to failed.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-5261","08/24/2018 21:55:02",2,"Created ticket not displayed in the Build Baron Plugin ""On¬†[this task page|https://evergreen.mongodb.com/task/mongodb_mongo_v3.6_enterprise_rhel_72_s390x_jstestfuzz_concurrent_replication_WT_14681d89a9093802a8b29455c8a361ccd36b42c9_18_08_23_17_20_52/0], the Build Baron Plugin does not display the BFG ticket that was automatically created.    The ticket information is retrieved through an API call ({{plugin/buildbaron/created_tickets/)}} that returns a 500 error with a¬†""""HTTP request returned unexpected status `404 `"""" error message.    The message appears to come from the¬† [{{GetJIRATicket()}}|https://github.com/evergreen-ci/evergreen/blob/0f46336c89adc07fd5e0ca28834c111fbc3cb88c/thirdparty/jira.go#L166] function.   A 404 for the JIRA API call could happen if the ticket key is invalid.   This key is retrieved from Evergreen events by the Build Baron Plugin [here|https://github.com/evergreen-ci/evergreen/blob/0f46336c89adc07fd5e0ca28834c111fbc3cb88c/service/ui_plugin_build_baron.go#L113-L126].""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5264","08/26/2018 18:28:25",2,"Editing text in Lobster search bar is sluggish for very large logs ""The current behavior of the Lobster search bar is such that whenever you edit the current search term (delete/insert/replace a character), the search terms highlighted in the log are automatically updated. There seems to be a negative consequence to this, which is that for very large logs, editing the current search term becomes quite laggy. That is, trying to quickly type a term or delete a few characters becomes much slower than you would expect from a responsive text input box. Here is one [example log|https://logkeeper.mongodb.org/lobster/build/834158c1a5f92af0f569f178be004413/test/5b809f89c2ab68145a00ea9d#bookmarks=0%2C183196] that exhibits this behavior. It is a bit over 180,000 lines.     Depending on user's preferences, one fix would be to consider _not_ updating the highlighted search terms until a user presses """"Enter"""" again. Only then would the highlighted search terms update to reflect the current text value in the search bar. Personally, I prefer this behavior since it ensures that the current context is not changed while entering a new search term i.e. if I am focused on one particular log line while entering a new search term, I know that the logs won't be scrolled to a different position until I actually press """"Enter"""". ""","",0,1,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-5266","08/27/2018 15:29:28",1,"race-agent failure (TestAbort) ""https://evergreen.mongodb.com/task/mci_race_detector_race_agent_ae9b15165d12b22d7020fdb6f1d83e485f50cc09_18_08_24_21_13_32""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5267","08/27/2018 15:40:51",1,"Display task doesn't show system-failures correctly ""The task there shows as having no build host and no logs. It is unclear from the task page why this was a system failure.""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-5268","08/27/2018 18:36:42",1,"Container name not displayed on some container tasks ""https://evergreen.mongodb.com/task/mci_archlinux_docker_test_agent_917220c726028ea2ba8d4f618778812321e011e8_18_08_27_15_59_27""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5270","08/28/2018 01:25:16",1,"Build on MSFT with a compile-failure didn't list compiler output for failing code ""[https://evergreen.mongodb.com/task_log_raw/mongodb_mongo_master_windows_64_2k8_debug_compile_patch_078d6b49548d90880556af6f55e3baf8b4709917_5b845e6de3c3314a2daee887_18_08_27_20_26_22/0?type=T&text=true]    [https://evergreen.mongodb.com/host/sir-xzzr53qh]    It looks like something might have gone wrong with the agent installation.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5271","08/28/2018 12:28:14",2,"Inability to log in under FF ""Whenever an user clicks over password field it instantly loses the focus, so the user cannot type password and log in. The second problem is console warning (""""An empty string cannot be an argument of getElementById()""""), which logged to console whenever user clicks anywhere.    Both of this are FF related and couldn't be reproduced on Chrome (due to different implementation of getElementById function and other differences)""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-5272","08/28/2018 15:01:14",2,"For task failures, display failing command on task page ""We record the name of the command that failed in the task document, but don't expose that anywhere. We should expose this in the UI to help users debug""","",0,1,0,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-5274","08/29/2018 21:15:14",2,"Agent deploy jobs should requeue themselves ""Currently agent deploy jobs are generated every 15 seconds. This means that, if an agent deploy job doesn't finish quickly, another agent job can run at the same time. We should:  1. Round the timestamp to the nearest 10-minute or similar in the generator.  2. Requeue agent deploy jobs in the job itself, in a defer, only if it fails, and increment the attempt there.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5275","08/29/2018 22:41:57",2,"Overridden task shows up as ""Blocked"" ""Happened after the task completed successfully (sign depends on compile), see:    sign:¬†[https://evergreen.mongodb.com/task/sqlproxy_single_variant__os_single_variant~rhel70_sign_patch_9ff2d3c3c76471e68cc50903aa63bdd80a41a421_5b8704aee3c331672b83600a_18_08_29_20_40_15]    and    compile:¬†[https://evergreen.mongodb.com/task/sqlproxy_single_variant__os_single_variant~rhel70_compile_patch_9ff2d3c3c76471e68cc50903aa63bdd80a41a421_5b8704aee3c331672b83600a_18_08_29_20_40_15]""","",0,1,0,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-5276","08/30/2018 15:52:22",1,"Show what containers a parent contains, what parent a container belongs to ""on the host page""","",0,1,0,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-5277","08/30/2018 15:52:51",1,"Add TTL indexes for subscriptions with an ID selector ""For subscriptions which contain a selector whose key is ID, we should add a TTL index to prevent the event-metajob from being hit too hard in the future.    Biggest one is pull requests which create (num builds + 1) subscriptions per commit we receive via the webhooks.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5278","08/30/2018 15:56:20",1,"Add TTL index to notifications collection ""We presently store notifications indefinitely, but we never reuse them after sending. It's probably a good call to TTL this collection.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5279","08/30/2018 16:03:51",2,"Make the selection of 'start at origin' on perf graphs sticky by account ""It would be great if I could select the wrench and 'origin' once and then have it stick until changed.""","",0,1,0,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-5285","08/31/2018 20:34:14",1,"Link for tasks in email return not found ""I believe this is EVG-5211 but with email instead of jira. We should also check slack.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5286","08/31/2018 21:02:22",2,"Restarting a task doesn't update the build cache ""This leads to rogue/incorrect notifications when restarting a task""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-5287","08/31/2018 21:24:17",2,"Many version finished notifications received for same version ""mci:SECONDARY> db.event_log.find({r_id: """"mci_d7795888f24f737e355d037f989ea43203add13f"""", """"data.status"""": """"failed""""}).count()  60""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5289","09/03/2018 15:41:48",1,"Move perf tools to the app ""Currently, perf tools are living at /static/plugins/perf. Since it's not a plugin anymore, the code should be migrated to /app/perf/.""","",0,1,0,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-8644","09/04/2018 23:07:33",2,"write more rigerous integration tests for jasper ""* larger numbers of processes. (like 50 or 100)   * processes that have to be terminated.   * processes that resemble mongodb.   * use the send.InternalSender to verify that managers respect output options.""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8621","09/05/2018 22:13:44",2,"implement a better in-memory send.Sender ""for use in the jasper interface to tee logs to a buffer that we can return in a rest/etc interface.""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-5303","09/05/2018 22:42:58",1,"Github webhook not working ""Initially, we had the repo at [https://github.com/mongodb/mongo-odbc-driver/]¬†configured with the following webhooks:  !image-2018-09-05-17-39-10-283.png!    The evergreen logs indicated the following error:  even after deleting   ¬†""","‚ÄúPOST https://api.github.com/repositories/122675902/hooks: 422 Validation Failed [{Resource:Hook Field: Code:custom Message:Hook already exists on this repository}]‚Äù",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5305","09/07/2018 12:58:52",2,"simplify test compilation and execution.  ""using the ftdc/jasper makefiles as models (already upgraded sink, which is substantially similar to the evergreen makefile). This gets much easier after EVG-5246.""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5307","09/10/2018 04:55:58",0,"patchable=false tasks cannot be used in a display task with patchable=true tasks ""Since I'm using the {{s3Copy.copy}} command in the {{upload_benchrun_embedded_files}} task, I wanted to make it not run as part of a patch build in order to avoid confusing [the {{model.FindPushLogAfter(copyToLocation, v.RevisionOrderNumber)}} check|https://github.com/evergreen-ci/evergreen/blob/c17b8ca247e17800de7304c778c5af350a6c63d5/service/api_plugin_s3copy.go#L59] when it'd run as part of a mainline commit. I tried to include the {{upload_benchrun_embedded_files}} task in the existing {{benchrun_embedded}} display task but am getting an error message when navigating to its task page after scheduling the patch build. EVG-5226 describes some other weirdness around the {{benchrun_embedded*}} tasks that I wasn't sure if it is related given that I've based my changes on top of [660fb03|https://github.com/mongodb/mongo/commit/660fb03fe223cacc1c35d3c0e7b266ab5679f31d] from SERVER-37060.        * Task: https://evergreen.mongodb.com/task/mongodb_mongo_master_rhel_62_64_bit_mobile_display_benchrun_embedded_patch_660fb03fe223cacc1c35d3c0e7b266ab5679f31d_5b95e6522a60ed2c27bc10d7_18_09_10_03_35_01  * Patch build: https://evergreen.mongodb.com/version/5b95e6522a60ed2c27bc10d7""","  {    """"status"""": 500,    """"error"""": """"request aborted""""  }  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5308","09/10/2018 14:09:32",1,"Panic due to missing execution task """"","  path  /task/mongodb_mongo_master_rhel_62_64_bit_mobile_display_benchrun_embedded_patch_660fb03fe223cacc1c35d3c0e7b266ab5679f31d_5b95e6522a60ed2c27bc10d7_18_09_10_03_35_01    stack  gimlet/middleware_grip.go:184  runtime/asm_amd64.s:515  runtime/panic.go:489  runtime/panic.go:63  runtime/signal_unix.go:290  task/results.go:16  service/task.go:299  service/ui.go:232  http/server.go:1942  negroni/negroni.go:46  negroni/negroni.go:29  negroni/negroni.go:38  negroni/negroni.go:38  service/middleware.go:239  gimlet/middleware_wrapper.go:16  negroni/negroni.go:38  negroni/negroni.go:86  mux/mux.go:114  negroni/negroni.go:46  negroni/negroni.go:29  negroni/negroni.go:38  negroni/negroni.go:38  negroni/static.go:41  negroni/negroni.go:38  negroni/negroni.go:38  negroni/static.go:53  negroni/negroni.go:38  negroni/negroni.go:38  gimlet/middleware_auth.go:37  negroni/negroni.go:38  negroni/negroni.go:38  gimlet/middleware_auth_user.go:142  negroni/negroni.go:38  negroni/negroni.go:38  gimlet/middleware_grip.go:192  negroni/negroni.go:38  negroni/negroni.go:86  http/server.go:2568  http/server.go:1825  runtime/asm_amd64.s:2197  ",0,0,0,0,0,0,1,0,0,0,1,0,0,0,0
"EVG-5313","09/11/2018 16:43:12",2,"Restart all tasks in a single-host task group if one task is restarted ""There are a number of cases where a task in a single-host task group might be restarted. If this task depends on previous tasks in a task group having run, then this task will fail in a way that might be mysterious to the user. Furthermore, there is not an indication in the UI of which tasks belong to a particular task group. Even if there were, selectively restarting each task in the group would require some painstaking clicking.    We should, in cases where Evergreen restarts a task (the system-unresponsive case, when for example AWS has reaped a host) and when a user restarts a task, if that task is part of a single-host task group, Evergreen should restart all tasks in the group. Unlike multi-host task groups, users assume that single-host task groups have dependencies between the tasks.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5314","09/11/2018 20:29:05",2,"Expose image ID in rest v2 host API endpoint ""We currently do this in the distros endpoint. We should do it in the hosts endpoint also so that people can reason about which image changes were present when their task ran.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5315","09/12/2018 13:49:38",1,"Attempting to schedule display task returns 500 HTTP error about not being able to find distro ""This might be the first time we've attempted to have execution tasks within a display task run on different distros. [The {{generate_benchrun_embedded_files}} task is meant to run on the {{rhel62\-small}} distro|https://github.com/mongodb/mongo/blob/4592bf741ed8a7492e31a1e0a8ad997fcd0a2704/etc/evergreen.yml#L12948], and [the {{benchrun_embedded*}} tasks are meant to run on the {{centos6\-perf}} distro|https://github.com/mongodb/mongo/blob/4592bf741ed8a7492e31a1e0a8ad997fcd0a2704/etc/evergreen.yml#L12921-L12944].    https://evergreen.mongodb.com/task/mongodb_mongo_master_rhel_62_64_bit_mobile_display_benchrun_embedded_4592bf741ed8a7492e31a1e0a8ad997fcd0a2704_18_09_12_02_05_52    {quote}      Error activating task mongodb_mongo_master_rhel_62_64_bit_mobile_display_benchrun_embedded_4592bf741ed8a7492e31a1e0a8ad997fcd0a2704_18_09_12_02_05_52: problem finding distro for activating task 'mongodb_mongo_master_rhel_62_64_bit_mobile_display_benchrun_embedded_4592bf741ed8a7492e31a1e0a8ad997fcd0a2704_18_09_12_02_05_52': problem finding buildvarianttask for task 'mongodb_mongo_master_rhel_62_64_bit_mobile_display_benchrun_embedded_4592bf741ed8a7492e31a1e0a8ad997fcd0a2704_18_09_12_02_05_52': could not find task benchrun_embedded in build variant rhel-62-64-bit-mobile  {quote}""","  Request URL: https://evergreen.mongodb.com/tasks/mongodb_mongo_master_rhel_62_64_bit_mobile_display_benchrun_embedded_4592bf741ed8a7492e31a1e0a8ad997fcd0a2704_18_09_12_02_05_52  Request Method: PUT  Request Payload: {""""active"""":true,""""action"""":""""set_active""""}  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8715","09/12/2018 15:23:31",2,"unify ""hashing"" and document parsing codepaths ""in order to identify schema changes in documents, we hash the bson values (including traversal) for all inputs and then we read the documents again to store the values again.    the code paths for traversal and hashing are separate, so this ticket is to unify these code paths. It would be nice if we could also avoid the double traversal, however, that's a lower priority.""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-5320","09/12/2018 21:18:19",1,"Panic in external termination job ""pool/abortable.go:121 runtime/asm_amd64.s:523 runtime/panic.go:513 runtime/panic.go:82 runtime/signal_unix.go:390 cloud/cloud_host.go:37 units/host_monitoring_external_termination.go:94 pool/helpers.go:28 pool/helpers.go:37 pool/abortable.go:174 pool/abortable.go:148 runtime/asm_amd64.s:1333    The query that inserts the jobs should filter out host intents""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-5322","09/13/2018 12:56:27",1,"Decommissioned intent hosts should be terminated without calling into a cloud manager ""Currently, if intent hosts are decommissioned, we attempt to terminate them by calling the cloud manager. This fails in the ec2 case, since the documents don't have enough metadata to be processed by the cloud manager. (They are neither on-demand nor spot.) The job errors, and another job is generated, which tries to terminate it again. We should instead check to see if the document is an intent and set it to terminated immediately.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5323","09/13/2018 15:01:09",2,"Stack returned to agent from 400 is a list of integers """"","  [evergreen.agent] 2018/09/07 21:38:02 [p=emergency]: error in agent loop, exiting: error getting next task: failed to get task: server returned 400 ({    """"error"""": {      """"error"""": {},      """"stack"""": [        24821304,        24826414,        25432232,        7220916,  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5325","09/13/2018 20:00:39",1,"Create a REST endpoint to allow sending custom notifications ""The Cloud team needs the ability to send custom notifications to evergreen users.     We will be running a script periodically against the Evergreen Stats Summary endpoints.   If it determines that a particular commit caused a flakiness regression, or a consistent failure, we want to be able to send email / slack notifications to that user.   Ideally, we'd be able to send these to Slack rooms also. ""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5327","09/13/2018 22:26:36",1,"Next task endpoint panic for nonexistent task group ""gimlet/middleware_grip.go:184 runtime/asm_amd64.s:515 runtime/panic.go:489 runtime/panic.go:63 runtime/signal_unix.go:290 model/task_queue.go:173 service/api_task.go:266 service/api_task.go:519 service/api.go:573 http/server.go:1942 negroni/negroni.go:46 negroni/negroni.go:29 negroni/negroni.go:38 negroni/negroni.go:38 service/api.go:166 gimlet/middleware_wrapper.go:16 negroni/negroni.go:38 negroni/negroni.go:86 mux/mux.go:114 negroni/negroni.go:46 negroni/negroni.go:29 negroni/negroni.go:38 negroni/negroni.go:38 negroni/static.go:41 negroni/negroni.go:38 negroni/negroni.go:38 negroni/static.go:53 negroni/negroni.go:38 negroni/negroni.go:38 gimlet/middleware_auth.go:37 negroni/negroni.go:38 negroni/negroni.go:38 gimlet/middleware_auth_user.go:142 negroni/negroni.go:38 negroni/negroni.go:38 gimlet/middleware_grip.go:192 negroni/negroni.go:38 negroni/negroni.go:86 http/server.go:2568 http/server.go:1825 runtime/asm_amd64.s:2197""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5330","09/14/2018 18:35:41",1,"task-execution-timeout job should mark execution tasks as sys-timed-out ""Currently it asks the display task to restart when it finishes, but it probably will never finish if we're in this state""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5332","09/17/2018 12:42:32",1,"Current class is only applied to 'all' thread levels view in the trend graphs  ""The 'current' css class is only applied t points on the 'All threads view'. See the following images for [mixed_workloads|https://evergreen.mongodb.com/task/sys_perf_linux_3_node_replSet_mixed_workloads_ec6f2a54d8b901e95e556d53647944be8ce441d5_18_08_13_05_46_37]:     !max-only.png|width=50%!    !all-thread-levels.png|width=50%! ""","",0,0,1,0,0,0,0,0,0,0,0,1,0,0,0
"EVG-5334","09/17/2018 15:22:41",2,"Allow restarting setup-failed tasks from the build page ""EVG-3248 added the ability to restart setup failures from the version page. We should also add the same feature to the build page.""","",0,1,0,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-5335","09/17/2018 15:33:52",2,"combining lobster filters doesn't work ""I feel like this used to work but I can't get it to work with the new interface:    https://logkeeper.mongodb.org/lobster/build/ba88d756f0698281c9999f9a7e793432/test/5b9be0a8f84ae82e18086488#bookmarks=0%2C8241&f=11ELECTION&f=11REPL_HB&f=10d20271    I expect this filter to be able to exclude all lines with ELECTION or REPL_HB, and to also exclude all lines *without* """"d20271"""".  The first two filters work correctly, but I can't figure out how to make the third filter work.  When I click on """"inverse"""" it does behave properly, but when I click on """"match"""" it doesn't seem to do anything -- the display is the same as if I didn't have the third filter at all.""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-5337","09/17/2018 19:10:14",0,"s3 put should log that it uploaded no files when optional is set ""It is unclear to the user when optional is set if the command uploaded a file or nooped.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5341","09/18/2018 13:57:19",1,"Project route with non-existent project causes panic ""E.g., /project/asdf""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5343","09/18/2018 14:21:51",1,"> 1000 ""error clearing running task"" error in 10-minute period ""I believe we have seen this a couple times now. It leads to CPU spikes on the app servers. We should find out why this is and prevent it from happening.    https://github.com/evergreen-ci/evergreen/blob/5e893fd7aeb172a034dce2c851d415745552daad/service/api_task.go#L184""","",0,0,0,0,0,0,1,0,0,1,0,0,0,0,0
"EVG-5344","09/18/2018 15:29:02",2,"Mechanism to send users to templated Spawn Hosts configs ""To replace the functionality of https://mci.mms-build.10gen.cc/spawn, without exposing undue implementation detail to Cloud engineers, I would like to be able to send them links to specific Spawn Host configs.     On """"Cloud MCI"""", these appear as separate Distros (ie. one item specifies an AMI _and_ an Ops Manager config to run inside it)    Some ideas for Evergreen Spawn Hosts:   * Templates ability to save per-team 'templates' for 'run Userdata at start'.   ** Distro=ubuntu18 UserDataTemplate=Ops Manager 4.1.0-LDAP  ** Admins could create these / manage them in git, or evg's MDB. They should be update-able via automation, not requiring human intervention.   ** Ideally, I could target these distro/template combinations by url - https://evergreen.mongodb.com/spawn?distro=foo&template=bar would pre-populate the Spawn Hosts UI     * (alternative workaround, not ideal) ability to fill the 'Userdata' box from the URI.   ** this would let us build a web service which could construct these URIs       Something like the functionality described above is necessary for Cloud to move off our custom MCI instance.     cc: [~brian.samek] may have other ideas""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5346","09/19/2018 12:25:05",2,"Perf. discovery - wrong ratio formula ""There is a mistake in ratio formula - it's calculated by using log2, which is good for charts, but doesn't make that much sense for numbers. Correct formula should be linear.""","",0,0,1,0,0,0,0,0,0,0,1,1,0,0,0
"EVG-5347","09/19/2018 15:30:15",1,"Move lint task to go 1.11 ""There are small differences between go 1.11 and go 1.8 gofmt. Since we tend to develop locally with go 1.11, we cause lint errors when linting in Evergreen with go 1.8 gofmt. We should move the lint task to go 1.11, presumably on archlinux container.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5348","09/19/2018 15:46:25",1,"Submitting a buildvariant filter auto-adds a skip ""*Steps to repro:*   1) Go to [https://evergreen.mongodb.com/waterfall/mongodb-mongo-master]   2) Put 'Enterprise Ubuntu 18.04' in the filter variant box.    *Actual result:*   Land on [https://evergreen.mongodb.com/waterfall/mongodb-mongo-master?bv_filter=Enterprise%20Ubuntu%2018.04&skip=5]    *Expexted result:*   Land on¬†[https://evergreen.mongodb.com/waterfall/mongodb-mongo-master?bv_filter=Enterprise%20Ubuntu%2018.04]""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-5351","09/20/2018 10:52:09",2,"Leverage new props of change points collection ""Perf team added few new properties to change points collection (in Atlas). For instance, task_id, hazard values. This might simplify queries and improve performance and display more consistent hazard values.""","",0,1,0,0,0,0,0,0,0,0,1,1,0,0,0
"EVG-5354","09/20/2018 21:52:28",0,"Remove unused routes ""The home (""""/"""") and """"/token"""" routes are unused. We should remove them.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8635","09/20/2018 22:50:04",2,"benchmark throughput (bytes per ms) of output in various configurations ""using the yes command and a number of different logging configurations, see what the maximum possible throughput is for a process running in jasper.    it's also interesting to us to see what the latency (mostly in a, """"are there pauses in collection."""") but the test of that is not obvious how to do correctly.    should be possible to implement this using go test, though we'll need to add an additional task to evergreen and some makefile glue to run benchmarks.""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8528","09/20/2018 22:52:10",2,"implement sender bencharmking  ""implement throughput (messages/<time>, as well as size/<time>) measurements of logging ability for various grip senders.    Look at the mongodb-go-driver benchmarking tool/framework and see if you can steal some/all of that for evergreen integration.    This will require some change to the evergreen configuration and the makefile, which can be spun off onto its own ticket if the scope grows too much.""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-5355","09/21/2018 14:43:39",2,"Trendchart - BF ticket links are broken ""For some reason, the host is `undefined`, despite `jiraHost` variable is set.""","",0,0,1,0,0,0,0,0,0,0,1,1,0,0,0
"EVG-8414","09/24/2018 18:19:15",1,"Make DevNullAppender able to write ""DevNullAppender currently errors when Send is called because /dev/null is opened in read-only mode.""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-5382","09/24/2018 19:14:41",1,"Patch validation should ensure required tasks exist ""I submitted¬†[this patch build|https://evergreen.mongodb.com/version/5ba8f412c9ec44521903461b], which introduced an evergreen variant """"Enterprise RHEL 6.2 (majority read concern off)"""" on 4.0. I incorrectly included the {{burn_in_tests}} and {{lint}} as requirements of {{compile_all_run_unittests_TG}}, even though {{burn_in_tests}} and {{lint}} were not included as tasks for this variant. This should have failed patch validation. Instead, my patch was uploaded, but when I tried to run all tasks for the variant, only the """"display tasks"""" were scheduled.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5384","09/24/2018 19:33:45",1,"Turn off host provision failure emails ""We have an alert for this.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5385","09/25/2018 14:14:47",1,"Support multiple paths in LDAP ""LDAP authentication should support users residing in different LDAP paths. For example, ordinary users may be in one path, while services may reside in another.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5391","09/25/2018 21:16:37",2,"Stats collector can sometimes not run ""Neither task on this host has system logs: https://evergreen.mongodb.com/host/sir-cprg5aih    And no requests received a non-200 status, so I think the stats collector thread either didn't start, errored, or got blocked""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8759","09/26/2018 16:11:43",1,"add logging options to process creation to control log buffering ""number of messages to buffer and time to wait to buffer. Use the buffered sender from grip, to be careful about flushing and closing those senders.     also don't buffer if people don't ask for it. ""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-5393","09/26/2018 16:24:17",1,"Build logs are not included with test logs if the first build log is after the test_id creation ""If no build logs were sent to the build endpoint before a test_id is created, then when viewing the test logs the build logs that occur during the test executions do not show.    Example:   * [test_logs|https://logkeeper.mongodb.org/lobster/build/54e4e5c9d941645c3f2b3eba1edc85b5/test/5baa3e8ac2ab682ba000f61a] with only the test logs   * [build_logs|https://logkeeper.mongodb.org/lobster/build/54e4e5c9d941645c3f2b3eba1edc85b5/all] show that there were build logs during the test execution    ¬†    The function responsible for including the build logs in the test view is [here|https://github.com/evergreen-ci/logkeeper/blob/master/views.go#L600]. The code looks for build logs before the test_id creation [here|https://github.com/evergreen-ci/logkeeper/blob/master/views.go#L613] and if none are found returns nothing [here|https://github.com/evergreen-ci/logkeeper/blob/master/views.go#L649].""","",0,0,1,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-8612","09/26/2018 17:09:52",1,"collector interface should allow writing to io.Writer/io.WriteCloser for streaming ""[here|https://github.com/mongodb/ftdc/blob/master/collector.go]    as a flavor of Resolve() that just writes the data to a writer interface. can then refactor resolve in these terms. ""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-5394","09/26/2018 17:20:16",1,"validatePushEvent does not handle branches with slashes in them correctly ""{{validatePushEvent}} splits on a slash and then returns the third item. This works fine if the branch does not contain a slash. If the branch does contain a slash, we return an error, since we can't trust the split we've performed. We should handle branches with slashes in them.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5395","09/26/2018 18:23:09",1,"Deleting a github patch tag doesn't work correctly ""If I erase the tag and save, the tag is still there""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-5396","09/26/2018 18:31:15",1,"LDAP implementation logs user out after expire_after_minutes ""In staging I periodically am logged out, presumably after expire_after_minutes. The behavior should be to reauthenticate the user, but not to log them out.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8707","09/26/2018 19:44:32",2,"consttructor for Pail types, based on some global sink configuration/system defaults ""we need to add configuration to the sink application globally that defines what we want our defaults to be (e.g. which blob storage we use, and also credentials,) from this (+ a prefix, passed in by the caller) generate a bucket instance that we can use to write data. ""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8642","09/26/2018 19:46:44",2,"improve support for storage types and data associated with performance ""I think this means that what's currently a path will become a list of structs, with values for: """"key name, bucket name, results format)    results format will always be FTDC (for now,)   so that it's clear how to save data and produce readers for them. ""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-5399","09/26/2018 22:41:02",2,"Handle build break notifications for triggered builds ""- add the right implicit subscriptions (search for places using evergreen.RepotrackerVersionRequester)  - send to project admins and not the committer""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-5400","09/27/2018 00:22:44",2,"Error when loading task data onto spawnhost ""github.com/evergreen-ci/evergreen/subprocess.(*remoteCmd).Run   /data/mci/5eef55b7b4277de70684b14a3dac9a9e/gopath/src/github.com/evergreen-ci/evergreen/subprocess/remote_command.go:66  github.com/evergreen-ci/evergreen/units.(*setupHostJob).fetchRemoteTaskData   /data/mci/5eef55b7b4277de70684b14a3dac9a9e/gopath/src/github.com/evergreen-ci/evergreen/units/provisioning_setup_host.go:757  github.com/evergreen-ci/evergreen/units.(*setupHostJob).provisionHost   /data/mci/5eef55b7b4277de70684b14a3dac9a9e/gopath/src/github.com/evergreen-ci/evergreen/units/provisioning_setup_host.go:492  github.com/evergreen-ci/evergreen/units.(*setupHostJob).setupHost   /data/mci/5eef55b7b4277de70684b14a3dac9a9e/gopath/src/github.com/evergreen-ci/evergreen/units/provisioning_setup_host.go:134  github.com/evergreen-ci/evergreen/units.(*setupHostJob).Run   /data/mci/5eef55b7b4277de70684b14a3dac9a9e/gopath/src/github.com/evergreen-ci/evergreen/units/provisioning_setup_host.go:106  github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool.runJob   /data/mci/5eef55b7b4277de70684b14a3dac9a9e/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool/helpers.go:28  github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool.executeJob   /data/mci/5eef55b7b4277de70684b14a3dac9a9e/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool/helpers.go:37  github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool.(*abortablePool).runJob   /data/mci/5eef55b7b4277de70684b14a3dac9a9e/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool/abortable.go:174  github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool.(*abortablePool).worker   /data/mci/5eef55b7b4277de70684b14a3dac9a9e/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool/abortable.go:148  runtime.goexit   /opt/go1.8/go/src/runtime/asm_amd64.s:2197 ""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5401","09/27/2018 16:17:49",1,"PerfBB - inverted hazard values ""All calculations for hazard value are incorrect (inverted). It means, that 'Recovery' item might actually¬† be a 'Moderate' performance drop. And item which displays +10% is actually -10%.  Absolute values are correct, the issue is with the sign.""","",0,0,1,0,0,0,0,0,0,0,1,1,0,0,0
"EVG-5403","09/27/2018 17:08:31",1,"EVG UI: The Performance Baron plugin list items should contain links  ""The change points now contain task_ids, this information should be used to link to the evergreen task pages.     It would also be good to provide links to the project page and the variant page (if possible).""","",0,1,0,0,0,0,0,0,0,0,1,1,0,0,0
"EVG-5404","09/27/2018 17:12:36",1,"EVG UI: change the fields rendered on the Performance Baron page ""Remove (or hide them by default):    * Value    * Value To Avg    * Probability    Add thread level. ""","",0,1,0,0,0,0,0,0,0,0,1,1,0,0,0
"EVG-5405","09/27/2018 18:09:07",1,"Modifying project page should save an event in the event log ""We could do something like the distros page, where we present a history of project page changes. Note that this should probably be superusers-only, or admin only. If it includes redacted variables, then it has to be superusers-only.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8648","09/27/2018 18:29:48",2,"Command line tool to convert bson-dump metrics to FTDC ""separate way to specify metadata separately from the stream  toggle use of the dynamic allocator (when we expect schema to change)   configure batchsize for chunks. ""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-5407","09/27/2018 20:15:39",3,"Change semantic of create_time task field for patch builds ""The semantic of the task field¬†{{create_time}} for patch builds should be changed to match the semantic for the mainline, i.e. be the push time for the base commit.    Currently the {{create_time}} is based on the {{create_time}} value for the corresponding Version, which is the push time for the mainline but the finalization time for the patch builds.    Current usage of the {{create_time}} for patch builds can be replaced with the {{ingest_time}}.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-5409","09/27/2018 20:21:02",5,"Write migration hook to update task create_time values for patch builds ""Work on EVG-5407 will change the semantic of the task field {{create_time}} for patch builds. A migration hook should be written to update the values in the database to reflect this change for all the tasks.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-5410","09/27/2018 20:22:48",5,"Write component to store and query test and task execution statistics ""Write API in front of database to handle (generate, store and query) cached collections data. The API will be in a new package in {{model/.}}    The API is meant to be used by a job that triggers the pre-computations (EVG-5411) and by REST API endpoints that allow users to query the statistics (EVG-5412, EVG-5413).    ¬†In order to pre-compute and store the statistics, the following functions will be provided:   - get the stats status for a project (contains the time of the last successful job run and the time before which all finished tasks were processed)   - set the stats status for a project   - find which statistics need to be updated after tasks finished in a given time interval (contains project, requester, hour, day and task list)   - generate the hourly test statistics for a project, requester, hour and task list   - generate the daily test statistics for a project, requester, day and task list   - generate the daily task statistics for a project, requester, day and task list    ¬†    In order to query the statistics, two functions will be provided:   * aggregate and return test statistics according to a provided set of parameters (see design document)   * aggregate and return task statistics according to a provided set of parameters (see design document)    ¬†""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-5411","09/27/2018 20:26:51",5,"Write job to update test and task execution statistics for a project ""The job should be run at configurable time intervals and update the test and task execution statistics that are impacted by the tasks that have finished since the last time the job ran.    One job is run per project.""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5415","09/27/2018 22:08:41",1,"Add button to user settings page to log user out everywhere ""This should delete their login cache token.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5416","09/27/2018 22:09:03",1,"Add button to admin settings page to log out all users ""This should delete all user login cache tokens.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5417","09/27/2018 22:10:24",1,"Add additional TTL to login cache to log user out after period of time ""This should be separate from the TTL which causes Evergreen to silently re-auth the user against LDAP.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5419","09/28/2018 03:53:18",2,"Evergreen agent should check for processes killed by OOM killer ""The TIG team has [maintained logic|https://github.com/mongodb/mongo/blob/b0844bec953b9e014ebb6c1d04f0ba8da54b736e/etc/evergreen.yml#L2811-L2853] which runs as part of all the {{mongodb\-mongo\-*}} Evergreen projects to invoke {{dmesg}} in (very) platform-specific ways to determine if a process has been killed by the OOM killer. It would be beneficial for all Evergreen projects if this functionality was instead integrated into the Evergreen agent and reported to the """"system logs"""" in a similar way to the {{ps}} and {{df}} output.    # I think the Evergreen agent should check for processes killed by the OOM killer any time it would run the {{subprocess.KillSpawnedProcs()}} function.  # I don't think it is necessary for the Evergreen agent to system fail the task if the OOM killer killed a process, although that would be another way to achieve EVG-1134.  # I would find it useful if the {{evergreen}} binary exposed a way to run the check from the command line so it would be possible to trigger manually on a {{host.create}}-spawned machine though I'd understand if the {{sudo}} permissions required made this too complicated to deal with.    ""","  ### Clear and print OOM messages ###  """"clear OOM messages"""":      command: shell.exec      params:        system_log: true        script: |            ulimit -a          # Clear the dmesg ring buffer. The """"post"""" phase will check dmesg for OOM messages.          ${set_sudo}          $sudo dmesg -c > /dev/null 2>&1          if [ $? -eq 0 ]; then            echo """"Cleared the dmesg ring buffer""""          else            echo """"Could not clear the dmesg ring buffer""""          fi    """"print OOM messages"""":    # Print out any Out of Memory killed process messages.    command: shell.exec    params:      system_log: true      working_dir: src # Temporary files created in src will be cleaned up in """"pre"""".      script: |        ${set_sudo}        # Use dmesg -T option, if supported, to display timestamps.        dmesg=dmesg        $sudo dmesg -T > /dev/null 2>&1        if [ $? -eq 0 ]; then          dmesg=""""dmesg -T""""        fi        $sudo $dmesg 2> /dev/null > dmesg.txt        if [ $? -ne 0 ]; then          echo """"Cannot check for OOM (Out of memory) killed processes on this platform""""          exit 0        fi        grep -iE '(Out of memory|OOM[- ]killer|Killed process)' dmesg.txt > oom.txt        if [ -s oom.txt ]; then          echo """"OOM (Out of memory) killed processes detected""""          cat oom.txt        else          echo """"No OOM (Out of memory) killed processes detected""""        fi  ",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8576","09/28/2018 04:57:18",2,"ftdc server->library encoding/decoding round trip test  ""We should time-box this ticket, as there may be diminishing returns after a sudden point.     The idea is to take the metrics chunk that we currently use to test the read-path, round-trip the content through our own implementation and ensure that the results match (via hashing/etc.) of the total payload.     This might not be possible in the literal case, at least because our implementation flattens the structure of the reference document. We may have to be satisfied with asserting that our decoded version of the ftdc test data from the server is the same after round-tripping it once through the our implementation. ""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-5420","09/28/2018 10:11:57",2,"EVG UI: Processed list visibility ""It should  be possible to view:     # only the acknowledged processed change points       # only the hidden processed change points       # both the acknowledged and hidden processed change points      By default, only the acknowledged Processed change point list should shown.    Acknowledged Processed change point have  processed_type field is set to acknowledged.  Hidden Processed change point have  processed_type field is set to hidden.    ""","",0,1,0,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-5426","10/01/2018 16:50:24",2,"Create endpoint to show all tasks in a project in a given time period ""GET /project/<project_name>/versions/tasks    This endpoint should default to some same value, like a day, if start and end are not provided. If only start is provided, end should be now.    params:   * start: starting date and time   * end: ending date and time   * status: task status to filter. If not provided, return all statuses.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5427","10/01/2018 19:24:59",2,"Agent deploy happened during a task ""https://evergreen.mongodb.com/host/sir-985i7qnj""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8770","10/01/2018 20:42:34",1,"add FTDC data format as a sysinfo collector in curator ""as part of developing the FTDC library, I added a method for collecting system metrics into FTDC streams, and wrote a very simple command line utility.     As part of tying up loose ends we should vendor this library into curator, and expose it as an option in the existing system metrics collection facility in curator as an alternate output format. ""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8684","10/01/2018 20:49:51",1,"ftdc2json cli tools ""We should take our FTDC library and provide a suite of basic command line tools for working with this data. The first of these was developed for testing the FTDC library (ftdcdump) and is committed to that repository but we should expand upon this and provide:     - the ability to read a mongodump-formated bson file and write an FTDC file with this data  - the ability to read a line-seperated json file and write an FTDC file with this data  - the ability to tail either of the above files for """"line seperated"""" (this might only make sense for JSON) content and generate ftdc content.   - read ftdc data chunks and write the output to either JSON or BSON (i.e. reverse compression for easier local use.) If possible and straightforward, consider making it possible to make HTTP requests to get these files, to avoid writing the compressed data to disk when we have no need of that. ""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8788","10/01/2018 20:56:00",1,"the betterCollector should report payload size more accurately ""an earlier implementation of the collector, wrote contents to a buffer as data is collected, which made it possible to report on the size of the payload, making it possible to limit batches based on size rather than just the number of samples.     This is a reasonable feature and one that I think we'll want to take advantage of, but I'm not sure how easy this would be. This is a small ticket to evaluate and scope the problem, and see how disruptive to the current architecture of the library it would be to add this feature, and based on that examination we can repoint and reporioritize as needed.""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-5428","10/02/2018 16:25:44",1,"task-execution-timeout job does not correctly clean up task groups ""https://evergreen.mongodb.com/task/mongodb_mongo_master_ubuntu1604_debug_aubsan_lite_unittests_patch_7ff69910209132acaa6abf6237f0f2d36ce518c2_5b998305e3c331399c3db19d_18_09_12_21_21_32##%257B%2522compare%2522%253A%255B%257B%2522hash%2522%253A%25227ff69910209132acaa6abf6237f0f2d36ce518c2%2522%257D%255D%257D has been in a status of started for a long time""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5448","10/02/2018 18:34:56",1,"System Unresponsive BFGs generated with no logs should generate system failure, not timed out BFs ""During my build baron shift, there was an evergreen-side database slow down that produced a large amount of failures (e.g., BFG-92946) that were marked as system unresponsive and had no logs. The associated build ticket, BUILD-6211, seems to have addressed the underlying issue with the database, but I believe it would be desirable from the build baron's perspective to limit the amount of BFGs generated for tickets that have no logs and thus don't seem to have much use.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5432","10/02/2018 20:54:40",2,"num_hosts parameter to host.create should accept string expansions ""https://github.com/evergreen-ci/evergreen/wiki/Project-Files#usage says to report""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5433","10/02/2018 20:57:41",2,"Add a delay before deploying an agent to a server if previous agent deployment failed. ""I see that sometimes we exhaust all 10 retries within less than a minute    Oct 2, 2018 2:45:57 pm Status changed from running to quarantined by mci.  Oct 2, 2018 2:45:57 pm New agent deploy failed  Oct 2, 2018 2:45:52 pm New agent deploy failed  Oct 2, 2018 2:45:46 pm New agent deploy failed  Oct 2, 2018 2:45:45 pm New agent deploy failed  Oct 2, 2018 2:45:41 pm New agent deploy failed  Oct 2, 2018 2:45:38 pm New agent deploy failed  Oct 2, 2018 2:45:31 pm New agent deploy failed  Oct 2, 2018 2:45:27 pm New agent deploy failed  Oct 2, 2018 2:45:22 pm New agent deploy failed  Oct 2, 2018 2:45:16 pm New agent deploy failed  Oct 2, 2018 2:45:12 pm Status changed from quarantined to running by ******.    Can we a delay between the attempts?    It's possible for hosts to have short intermittent networking problems, having longer retries will help prevent some of them from getting quarantined and requiring manual intervention.    At the same time, we recognize that some vendors are more prone to those types of problems and that needs to be addressed separately and we're working on that.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5435","10/03/2018 09:48:54",1,"The change point tool tip in the perf plugin obstructs the graph ""It would be nice if the change point tool tip was displayed either to the left or right of the change point line.    As it is currently rendered, it obstructs the change point, see the following image:    !popup.png|width=50%!""","",0,0,1,0,0,0,0,0,0,0,1,1,0,0,0
"EVG-5444","10/03/2018 16:32:29",2,"Investigate host provisioning errors on debian and amazon linux ""attempts:  16       distro:  debian92-test       error:  error initializing host sir-7hbi4gch: error settings DNS name: error checking DNS name for host sir-7hbi4gch: spot instance does not yet have an instanceId       extended:  spot instance does not yet have an instanceId  github.com/evergreen-ci/evergreen/cloud.(*ec2Manager).GetDNSName   /data/mci/4d14af84559797a4e4ec739d43bd3e20/gopath/src/github.com/evergreen-ci/evergreen/cloud/ec2.go:885  github.com/evergreen-ci/evergreen/units.(*setupHostJob).setDNSName   /data/mci/4d14af84559797a4e4ec739d43bd3e20/gopath/src/github.com/evergreen-ci/evergreen/units/provisioning_setup_host.go:181  github.com/evergreen-ci/evergreen/units.(*setupHostJob).runHostSetup   /data/mci/4d14af84559797a4e4ec739d43bd3e20/gopath/src/github.com/evergreen-ci/evergreen/units/provisioning_setup_host.go:211  github.com/evergreen-ci/evergreen/units.(*setupHostJob).provisionHost   /data/mci/4d14af84559797a4e4ec739d43bd3e20/gopath/src/github.com/evergreen-ci/evergreen/units/provisioning_setup_host.go:387  github.com/evergreen-ci/evergreen/units.(*setupHostJob).setupHost   /data/mci/4d14af84559797a4e4ec739d43bd3e20/gopath/src/github.com/evergreen-ci/evergreen/units/provisioning_setup_host.go:134  github.com/evergreen-ci/evergreen/units.(*setupHostJob).Run   /data/mci/4d14af84559797a4e4ec739d43bd3e20/gopath/src/github.com/evergreen-ci/evergreen/units/provisioning_setup_host.go:106  github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool.runJob   /data/mci/4d14af84559797a4e4ec739d43bd3e20/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool/helpers.go:28  github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool.executeJob   /data/mci/4d14af84559797a4e4ec739d43bd3e20/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool/helpers.go:37  github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool.(*abortablePool).runJob   /data/mci/4d14af84559797a4e4ec739d43bd3e20/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool/abortable.go:174  github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool.(*abortablePool).worker   /data/mci/4d14af84559797a4e4ec739d43bd3e20/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool/abortable.go:148  runtime.goexit   /opt/go1.8/go/src/runtime/asm_amd64.s:2197  github.com/evergreen-ci/evergreen/cloud.(*ec2Manager).GetDNSName   /data/mci/4d14af84559797a4e4ec739d43bd3e20/gopath/src/github.com/evergreen-ci/evergreen/cloud/ec2.go:885  github.com/evergreen-ci/evergreen/units.(*setupHostJob).setDNSName   /data/mci/4d14af84559797a4e4ec739d43bd3e20/gopath/src/github.com/evergreen-ci/evergreen/units/provisioning_setup_host.go:181  github.com/evergreen-ci/evergreen/units.(*setupHostJob).runHostSetup   /data/mci/4d14af84559797a4e4ec739d43bd3e20/gopath/src/github.com/evergreen-ci/evergreen/units/provisioning_setup_host.go:211  github.com/evergreen-ci/evergreen/units.(*setupHostJob).provisionHost   /data/mci/4d14af84559797a4e4ec739d43bd3e20/gopath/src/github.com/evergreen-ci/evergreen/units/provisioning_setup_host.go:387  github.com/evergreen-ci/evergreen/units.(*setupHostJob).setupHost   /data/mci/4d14af84559797a4e4ec739d43bd3e20/gopath/src/github.com/evergreen-ci/evergreen/units/provisioning_setup_host.go:134  github.com/evergreen-ci/evergreen/units.(*setupHostJob).Run   /data/mci/4d14af84559797a4e4ec739d43bd3e20/gopath/src/github.com/evergreen-ci/evergreen/units/provisioning_setup_host.go:106  github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool.runJob   /data/mci/4d14af84559797a4e4ec739d43bd3e20/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool/helpers.go:28  github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool.executeJob   /data/mci/4d14af84559797a4e4ec739d43bd3e20/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool/helpers.go:37  github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool.(*abortablePool).runJob   /data/mci/4d14af84559797a4e4ec739d43bd3e20/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool/abortable.go:174  github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool.(*abortablePool).worker   /data/mci/4d14af84559797a4e4ec739d43bd3e20/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool/abortable.go:148  runtime.goexit   /opt/go1.8/go/src/runtime/asm_amd64.s:2197  error checking DNS name for host sir-7hbi4gch  github.com/evergreen-ci/evergreen/units.(*setupHostJob).setDNSName   /data/mci/4d14af84559797a4e4ec739d43bd3e20/gopath/src/github.com/evergreen-ci/evergreen/units/provisioning_setup_host.go:183  github.com/evergreen-ci/evergreen/units.(*setupHostJob).runHostSetup   /data/mci/4d14af84559797a4e4ec739d43bd3e20/gopath/src/github.com/evergreen-ci/evergreen/units/provisioning_setup_host.go:211  github.com/evergreen-ci/evergreen/units.(*setupHostJob).provisionHost   /data/mci/4d14af84559797a4e4ec739d43bd3e20/gopath/src/github.com/evergreen-ci/evergreen/units/provisioning_setup_host.go:387  github.com/evergreen-ci/evergreen/units.(*setupHostJob).setupHost   /data/mci/4d14af84559797a4e4ec739d43bd3e20/gopath/src/github.com/evergreen-ci/evergreen/units/provisioning_setup_host.go:134  github.com/evergreen-ci/evergreen/units.(*setupHostJob).Run   /data/mci/4d14af84559797a4e4ec739d43bd3e20/gopath/src/github.com/evergreen-ci/evergreen/units/provisioning_setup_host.go:106  github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool.runJob   /data/mci/4d14af84559797a4e4ec739d43bd3e20/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool/helpers.go:28  github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool.executeJob   /data/mci/4d14af84559797a4e4ec739d43bd3e20/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool/helpers.go:37  github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool.(*abortablePool).runJob   /data/mci/4d14af84559797a4e4ec739d43bd3e20/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool/abortable.go:174  github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool.(*abortablePool).worker   /data/mci/4d14af84559797a4e4ec739d43bd3e20/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool/abortable.go:148  runtime.goexit   /opt/go1.8/go/src/runtime/asm_amd64.s:2197  error settings DNS name  github.com/evergreen-ci/evergreen/units.(*setupHostJob).runHostSetup   /data/mci/4d14af84559797a4e4ec739d43bd3e20/gopath/src/github.com/evergreen-ci/evergreen/units/provisioning_setup_host.go:212  github.com/evergreen-ci/evergreen/units.(*setupHostJob).provisionHost   /data/mci/4d14af84559797a4e4ec739d43bd3e20/gopath/src/github.com/evergreen-ci/evergreen/units/provisioning_setup_host.go:387  github.com/evergreen-ci/evergreen/units.(*setupHostJob).setupHost   /data/mci/4d14af84559797a4e4ec739d43bd3e20/gopath/src/github.com/evergreen-ci/evergreen/units/provisioning_setup_host.go:134  github.com/evergreen-ci/evergreen/units.(*setupHostJob).Run   /data/mci/4d14af84559797a4e4ec739d43bd3e20/gopath/src/github.com/evergreen-ci/evergreen/units/provisioning_setup_host.go:106  github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool.runJob   /data/mci/4d14af84559797a4e4ec739d43bd3e20/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool/helpers.go:28  github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool.executeJob   /data/mci/4d14af84559797a4e4ec739d43bd3e20/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool/helpers.go:37  github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool.(*abortablePool).runJob   /data/mci/4d14af84559797a4e4ec739d43bd3e20/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool/abortable.go:174  github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool.(*abortablePool).worker   /data/mci/4d14af84559797a4e4ec739d43bd3e20/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool/abortable.go:148  runtime.goexit   /opt/go1.8/go/src/runtime/asm_amd64.s:2197  error initializing host sir-7hbi4gch  github.com/evergreen-ci/evergreen/units.(*setupHostJob).provisionHost   /data/mci/4d14af84559797a4e4ec739d43bd3e20/gopath/src/github.com/evergreen-ci/evergreen/units/provisioning_setup_host.go:412  github.com/evergreen-ci/evergreen/units.(*setupHostJob).setupHost   /data/mci/4d14af84559797a4e4ec739d43bd3e20/gopath/src/github.com/evergreen-ci/evergreen/units/provisioning_setup_host.go:134  github.com/evergreen-ci/evergreen/units.(*setupHostJob).Run   /data/mci/4d14af84559797a4e4ec739d43bd3e20/gopath/src/github.com/evergreen-ci/evergreen/units/provisioning_setup_host.go:106  github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool.runJob   /data/mci/4d14af84559797a4e4ec739d43bd3e20/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool/helpers.go:28  github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool.executeJob   /data/mci/4d14af84559797a4e4ec739d43bd3e20/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool/helpers.go:37  github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool.(*abortablePool).runJob   /data/mci/4d14af84559797a4e4ec739d43bd3e20/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool/abortable.go:174  github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool.(*abortablePool).worker   /data/mci/4d14af84559797a4e4ec739d43bd3e20/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool/abortable.go:148  runtime.goexit   /opt/go1.8/go/src/runtime/asm_amd64.s:2197 ""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5438","10/03/2018 18:00:28",1,"Unable to add mount point for distro ""When adding a mount point for a distro, """"Save Configuration"""" becomes inactive.¬† Also, only one mount point is allowed.¬† After the first is added the """"+Add Mount Point"""" button becomes inactive as well.""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-5439","10/03/2018 18:45:49",2,"Test history endpoint times out ""https://evergreen.mongodb.com/rest/v1/projects/mongodb-mongo-master/test_history?sort=latest&taskStatuses=success%2Cfailed%2Ctimeout%2Csysfail&tests=jstests%2Fcore%2Ftxns%2Frepeatable_reads_in_transaction.js%2Cjstests%5Ccore%5Ctxns%5Crepeatable_reads_in_transaction.js%2Cjstests%2Fcore%2Fgeoa.js%2Cjstests%5Ccore%5Cgeoa.js%2Cjstests%2Fcore%2Fgeo_mapreduce2.js%2Cjstests%5Ccore%5Cgeo_mapreduce2.js%2Cjstests%2Fcore%2Ftailable_cursor_invalidation.js%2Cjstests%5Ccore%5Ctailable_cursor_invalidation.js%2Cjstests%2Fcore%2Fprofile_insert.js%2Cjstests%5Ccore%5Cprofile_insert.js%2Cjstests%2Fcore%2Fgeo2.js%2Cjstests%5Ccore%5Cgeo2.js%2Cjstests%2Fcore%2Fcapped_max1.js%2Cjstests%5Ccore%5Ccapped_max1.js%2Cjstests%2Fcore%2Fstages_or.js%2Cjstests%5Ccore%5Cstages_or.js%2Cjstests%2Fcore%2Faggregation_getmore_batchsize.js%2Cjstests%5Ccore%5Caggregation_getmore_batchsize.js%2Cjstests%2Fcore%2Fmr_killop.js%2Cjstests%5Ccore%5Cmr_killop.js%2Cjstests%2Fcore%2Fregex4.js%2Cjstests%5Ccore%5Cregex4.js%2Cjstests%2Fcore%2Fupdate_blank1.js%2Cjstests%5Ccore%5Cupdate_blank1.js%2Cjstests%2Fcore%2Fdiagdata.js%2Cjstests%5Ccore%5Cdiagdata.js%2Cjstests%2Fcore%2Fgeo_circle1.js%2Cjstests%5Ccore%5Cgeo_circle1.js%2Cjstests%2Fcore%2Fgeoe.js%2Cjstests%5Ccore%5Cgeoe.js%2Cjstests%2Fcore%2Fslice1.js%2Cjstests%5Ccore%5Cslice1.js%2Cjstests%2Fcore%2Findex_create_too_many.js%2Cjstests%5Ccore%5Cindex_create_too_many.js%2Cjstests%2Fcore%2Fverify_update_mods.js%2Cjstests%5Ccore%5Cverify_update_mods.js%2Cjstests%2Fcore%2Ffind6.js%2Cjstests%5Ccore%5Cfind6.js%2Cjstests%2Fcore%2Findex_check5.js%2Cjstests%5Ccore%5Cindex_check5.js&tasks=replica_sets_jscore_passthrough&beforeRevision=ba38c66d9483d2fb8a644772fa5dd0fff78a3cc9&variants=&afterRevision=fbf57dfc196c3e4d6b0313cadb71f10138b9c018&testStatuses=pass%2Cfail%2Csilentfail&distros=""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-5497","10/03/2018 22:34:12",1,"Error spawning hosts from task with task spawned hosts ""Even with only one additional host.    It started spawning i-026328f7b927bc416 though    Task link: https://evergreen.mongodb.com/task/mms_e2e_local_spawnhost_E2E_Local_ATM_Deployment_Item_Creation_MultiServer_patch_5cc1b4da184b0c36b13c36d8d61fa07f53b6d235_5bb5325b0305b979b0afb708_18_10_03_21_19_23""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5452","10/04/2018 17:39:41",1,"Can't Set RDP password for host created with Evergeen ""After creating a windows machine with evergreen, the RDP password can't be set. The response from evergreen is """"Invalid Password"""".    I have tried with multiple combinations.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5441","10/04/2018 18:06:48",2,"Evergreen spawnhost creates the source directory with the wrong enterprise module ""I spawned a host in order to debug a failing task and the produced environment contains the mongo repository cloned as enterprise instead of the actual enterprise repository.    I.e.:      This is also visible when trying to compile mongodb:  ""","  [root@ip-10-122-8-28 source-patch-1517_mongodb-mongo-master]# ls  APACHE-2.0.txt    GNU-AGPL-3.0.txt       README      build         debian   docs  jstests   pytests  site_scons  CONTRIBUTING.rst  LICENSE-Community.txt  SConstruct  buildscripts  distsrc  etc   mypy.ini  rpm      src    [root@ip-10-122-8-28 source-patch-1517_mongodb-mongo-master]# ls src/mongo/db/modules/enterprise/  APACHE-2.0.txt    GNU-AGPL-3.0.txt       README      buildscripts  distsrc  etc      mypy.ini  rpm         src  CONTRIBUTING.rst  LICENSE-Community.txt  SConstruct  debian        docs     jstests  pytests   site_scons    ...  Checking for extended alignment 64 for concurrency types... yes  Checking for mongoc_get_major_version() in C library mongoc-1.0... no  DUPLICATE IDS: 13602    src/mongo/db/commands/mr.cpp:364:13:uassert(13602    src/mongo/db/modules/enterprise/src/mongo/db/commands/mr.cpp:364:13:uassert(13602  DUPLICATE IDS: 13606    src/mongo/db/commands/mr_common.cpp:87:19:uasserted(13606    src/mongo/db/modules/enterprise/src/mongo/db/commands/mr_common.cpp:87:19:uasserted(13606  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5445","10/05/2018 14:08:54",1,"Log agent exits at a lower level ""    error:  error in agent loop, exiting: error getting next task: Next task response indicates agent should exit       extended:  Next task response indicates agent should exit  github.com/evergreen-ci/evergreen/rest/client.(*communicatorImpl).GetNextTask   /data/mci/050df4f24c4332fe6f8b513d0dc0d50e/gopath/src/github.com/evergreen-ci/evergreen/rest/client/methods.go:270  github.com/evergreen-ci/evergreen/agent.(*Agent).loop   /data/mci/050df4f24c4332fe6f8b513d0dc0d50e/gopath/src/github.com/evergreen-ci/evergreen/agent/agent.go:112  github.com/evergreen-ci/evergreen/agent.(*Agent).Start   /data/mci/050df4f24c4332fe6f8b513d0dc0d50e/gopath/src/github.com/evergreen-ci/evergreen/agent/agent.go:77  github.com/evergreen-ci/evergreen/operations.Agent.func2   /data/mci/050df4f24c4332fe6f8b513d0dc0d50e/gopath/src/github.com/evergreen-ci/evergreen/operations/agent.go:114""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5449","10/05/2018 22:15:23",1,"Evergreen agent should set TMPDIR environment variable for all processes it spawns ""The Build team introduced logic back in SERVER-32772 for all {{mongodb\-mongo\-*}} Evergreen projects to avoid having {{dbtest}} write to {{/tmp}} as it isn't cleared by the Evergreen agent between tasks. It would be beneficial for all Evergreen projects if this functionality was instead integrated into the Evergreen agent so individual teams need not concern themselves with triggering problems on static machines that are rarely rebooted. I'll leave it to the Evergreen team to decide whether it should live within the task's {{$\{workdir\}}} or be a well-known location off to the side.        The Evergreen agent may as well set {{TEMP}} and {{TMP}} just in case the executable consults one of the other names instead of {{TMPDIR}}.""","  # Set the TMPDIR environment variable to be a directory in the task's working  # directory so that temporary files created by processes spawned by resmoke.py get  # cleaned up after the task completes. This also ensures the spawned processes  # aren't impacted by limited space in the mount point for the /tmp directory.  export TMPDIR=""""${workdir}/tmp""""  mkdir -p $TMPDIR  ",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5451","10/05/2018 22:47:13",2,"Evergreen is not able to deploy the agent to static boxes if distro has 'Disable scheduling this distro' set ""I was trying to figure out why evergreen was unable to deploy the agent on boxes in -test distro while -build boxes for the same static platform where ok.    Moving a box from -test to -build confirmed my theory of distro config differences.    The only difference I was able to find was the checkbox 'Disable scheduling this distro. Tasks already in the schedule will be dispatched.' that was set for -test. Unchecking it seems to have resolved the problem.    Failing to deploy the agent 10 times results in quarantining the host. If the connection between disabling scheduling tasks and quarantining the hosts in the distro can make some sense in theory, it doesn't seem right that it's intentional because it requires 10 failed agent deploys. Also, unchecking that box doesn't automatically unquarantine the servers in that distro, so this logic seems incorrect.    Is this behavior intentional?""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8558","10/09/2018 15:18:01",1,"Clean up async_test ""Rewrite TestSetupDownloadJobsAsync to not use recall.NewDownloadJob    Clean up async_test logic    ¬†""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8665","10/10/2018 15:56:51",2,"propogate buildlogger urls to REST/jRPC responses  ""we should make sure users who use buildlogger/logkeeper can figure out from the API where the logs ended up. ""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-5456","10/10/2018 16:32:29",1,"Repotracker panic ""pool/abortable.go:121 runtime/asm_amd64.s:515 runtime/panic.go:489 runtime/panic.go:63 runtime/signal_unix.go:290 repotracker/repotracker.go:171 repotracker/wrappers.go:57 units/repotracker.go:109 pool/helpers.go:28 pool/helpers.go:37 pool/abortable.go:174 pool/abortable.go:148 runtime/asm_amd64.s:2197""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5459","10/11/2018 14:16:21",2,"Trendchart actions ""Implement hide/acknowledge actions for the trend chart.""","",0,0,0,0,0,0,0,0,1,0,1,1,0,0,0
"EVG-5462","10/12/2018 15:58:30",1,"Add an is_patch field to the task status list return from the /projects/{project}/versions/tasks REST API ""EVG-5426 added a new [REST endpoint|https://evergreen.mongodb.com/rest/v2/projects/sys-perf/versions/tasks].    This call returns all task statuses including patches.    There is no way to determine if the task status is for a patch without pattern matching on the task_id.     This approach is brittle and likely to fail in the future.     It would be better if an is_patch field was added to the status .    ""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5463","10/15/2018 17:00:38",2,"Evergreen appears to be overdelivering notifications for persistent failures ""There's a number of BFG tickets linked to BF-10910 that are for the same (test name, task name, build variant) combination.    * [15 BFG tickets|https://jira.mongodb.org/issues/?jql=project%20%3D%20BFG%20AND%20issueFunction%20IN%20linkedIssuesOf(%22key%20%3D%20BF-10910%22)%20AND%20%22Failing%20Buildvariants%22%20%3D%20enterprise-windows-64-2k8-wtdevelop] for the Enterprise Windows 2008R2 WiredTiger develop builder  * [15 BFG tickets|https://jira.mongodb.org/issues/?jql=project%20%3D%20BFG%20AND%20issueFunction%20IN%20linkedIssuesOf(%22key%20%3D%20BF-10910%22)%20AND%20%22Failing%20Buildvariants%22%20%3D%20enterprise-windows-64-2k8-openssl] for the Enterprise Windows 2008R2 OpenSSL builder""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5464","10/15/2018 21:09:09",1,"Automatic and manual termination of static hosts does nothing ""https://evergreen.mongodb.com/host/ubuntu1604-arm64-1.linaro.build.10gen.cc""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5465","10/19/2018 15:04:05",2,"Turn cyclic dependency detection back on ""We see high CPU time in cyclic dependency detection during CPU spikes, so we speculate this part of the code has contributed to recent database slowdowns, though we do not know what the mechanism has been. We should take a look at this part of the code and figure out if there is a problematic query and turn the dependency check back on once we understand what has been happening and fix it.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-5466","10/19/2018 15:06:00",0,"Task timeout job doesn't work for execution tasks ""It tries to reset the display task when completed, but it will never complete""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5470","10/22/2018 18:53:47",2,"Authorizing PR via API does not work ""I attempted to authorize a PR via the API:    https://gist.github.com/p-mongo/e02dee88b98c2ca9a7ec5e7606162fba    The response contains activated: true and status: created, however when I go to patch page (https://evergreen.mongodb.com/patch/5b59e99e0305b9555d71cfc5) there is still the """"authorize patch"""" button on it.    Note also that on the API response the evergreen version is returned as an empty string.    I had this same exact issue on another PR. Clicking the UI button authorized the PR correctly and started building it (hence this bug appears to be unrelated to the ongoing github outage).""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8735","10/22/2018 19:59:17",2,"support direct message storage for small samples. ""sometimes we'll get a small number of events and it won't make sense to store them in s3 and we should be able to support storing/caching <10 points in the perf model""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-5471","10/22/2018 21:57:44",1,"Segfault when PUTting patches and not specifying project id ""api_patch.go:64 has this code:        If a project id is not given in the API request (v1 put projects/), data.Project is (I take it) an empty string, FindOneProjectRef then returns (nil, nil) and pref.Enabled segfaults.    To reproduce: PUT to patches/ with a valid request with project id taken out.""","   pref, err := model.FindOneProjectRef(data.Project)   if err != nil {    as.LoggedError(w, r, http.StatusBadRequest, errors.Wrapf(err, """"project %s is not specified"""", data.Project))    return   }     if pref.PatchingDisabled || !pref.Enabled {    as.LoggedError(w, r, http.StatusUnauthorized, errors.New(""""patching is disabled""""))    return   }  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5472","10/22/2018 22:07:21",1,"PUT patches/ returns camelcased keys ""Upon a successful patch submission, the keys in the response are:        These should be in lowercase w/underscores methinks.""","  [""""Id"""", """"Description"""", """"Project"""", """"Githash"""", """"PatchNumber"""", """"Author"""", """"Version"""", """"Status"""", """"CreateTime"""", """"StartTime"""", """"FinishTime"""", """"BuildVariants"""", """"Tasks"""", """"VariantsTasks"""", """"Patches"""", """"Activated"""", """"PatchedConfig"""", """"Alias"""", """"GithubPatchData""""]  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5474","10/23/2018 22:14:42",1,"Clearly label commands/tasks/builds killed due to timeouts ""This task was killed due to timeout I am told:    https://evergreen.mongodb.com/task/mongoid_jruby_new__mongodb_version~4.0_topology~replica_set_jruby~jruby_9.2_driver~latest_test_patch_54faca700b0fd17953a8d317abb6c5c4b2b6bf44_5bce83d60305b937a435a3bf_18_10_23_02_13_44    It has the following output:        To an engineer who has not experienced evergreen killing their tasks, """"Command canceled"""" does not automatically imply a timeout kill. Moreover, the """"nil"""" in that message is confusing because Ruby uses nil, hence I was wondering if this was some kind of a Ruby-triggered cancellation.    Additionally, there is a multitude of timeouts that can be set throughout evergreen configuration. One has to go through the docs to identify the appropriate timeout for each case.    To provide a better developer experience, evergreen should:    1. Clearly state that a task/build/process/etc. was killed due to a timeout.  2. Clearly state which timeout was exceeded.    It was pointed out that the agent log contains the following:        Duplicating this exact message into task logs would be an improvement over the current timeout reporting, as then a user wouldn't need to go through multiple logs to figure out what happened (as well as know whether they should be looking in agent logs, system logs, event logs, task logs or all 4).    https://github.com/evergreen-ci/evergreen/wiki/Project-Files does mention """"exec_timeout_secs"""". A really awesome rendering of the timeout message would be something like this in the task log instead of the current message:      ""","  [2018/10/22 23:30:25.036] Command canceled: <nil>    [2018/10/22 23:30:25.036] Hit exec timeout (1h0m0s)    [2018/10/22 23:30:25.036] Hit exec timeout (1h0m0s). (See exec_timeout_secs in project or task configuration.)  ",0,1,0,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-5476","10/24/2018 16:52:39",1,"Failures: test-command on Ubuntu 16.04 (Docker) [Evergreen Self-Tests @ c29587e7] (TestGitGetProjectSuite, TestValidateGitCommands) "" h2. [test-command failed on Ubuntu 16.04 (Docker)|https://evergreen.mongodb.com/task/mci_ubuntu1604_docker_test_command_c29587e7fbd0bc497cad163a7d39dcffd8d61ecf_18_10_12_13_15_43/0] Host: [|https://evergreen.mongodb.com/host/container-4012700820423740125] Project: [Evergreen Self-Tests|https://evergreen.mongodb.com/waterfall/mci] Commit: [diff|https://github.com/evergreen-ci/evergreen/commit/c29587e7fbd0bc497cad163a7d39dcffd8d61ecf]: EVG-5453 better HTTPS support in git.get_project (#1706) Evergreen Subscription: ; Evergreen Event:  *TestGitGetProjectSuite* - [Logs|https://evergreen.mongodb.com/test_log/5bc0a8062fbabe5e0916a104] | [History|https://evergreen.mongodb.com/task_history/mci/mci_ubuntu1604_docker_test_command_c29587e7fbd0bc497cad163a7d39dcffd8d61ecf_18_10_12_13_15_43#TestGitGetProjectSuite=fail] *TestValidateGitCommands* - [Logs|https://evergreen.mongodb.com/test_log/5bc0a8062fbabe5e0916a104] | [History|https://evergreen.mongodb.com/task_history/mci/mci_ubuntu1604_docker_test_command_c29587e7fbd0bc497cad163a7d39dcffd8d61ecf_18_10_12_13_15_43#TestValidateGitCommands=fail]  ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-8560","10/24/2018 23:25:45",2,"rate limiting pools use different execution patterns  ""they use runJob and should use executeJob (runJob should be removed) ""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-5484","10/26/2018 14:42:27",2,"Perf BB: The hazard sorting and calculation of % change in the UI is different to the CLI ""The CLI and UI should use the same default sort (and where possible allow the same alternate sort methods) and display the same values.    Ruslan and I will need to work together on this to agree what makes sense.    This issue is minor but slightly more important than the issues listed in EVG-5483.""","",0,0,1,0,0,0,0,0,0,0,0,1,0,0,0
"EVG-5485","10/26/2018 14:47:08",0,"PerfBB: duplicate key errors from stitch ""I was able to get the UI into a state where the PerfBB sort and filter stopped working.    ¬†    The chromium console was displaying a message like:    ¬†    ¬†    But there were no duplicate documents in the¬†perf.processed_change_points collection.    I'm not 100% sure of the steps to reproduce but it involved ACK'ing a change point from both the task page and the CLI.    ¬†    ¬†""","    POST https://stitch.mongodb.com/api/client/v2.0/app/evergreen_perf_plugin-wwdoa/functions/call 502  angular.js:14700 Error: Duplicate key error: E11000 duplicate key error collection: perf.processed_change_points index: _id_ dup key: { : ObjectId('5bd22a26a7b487503d31baa9') }     at stitch.min.js?hash=45438b4cbba218e3e31ddfede2dc50b5b7f35e90:1 """"Possibly unhandled rejection: {""""name"""":""""StitchError"""",""""code"""":""""MongoDBError"""",""""response"""":{},""""json"""":{""""error"""":""""Duplicate key error: E11000 duplicate key error collection: perf.processed_change_points index: _id_ dup key: { : ObjectId('5bd22a26a7b487503d31baa9') }"""",""""error_code"""":""""MongoDBError"""",""""link"""":""""https://stitch.mongodb.com/groups/5ad0ab11c0c6e30f62c1c56a/apps/5aeb4c68058429576a7e117f/logs?co_id=5bd2ec42dced5f54ed07a0a6""""}}"""" ",0,0,1,0,0,0,0,0,0,0,0,1,0,0,0
"EVG-5489","10/26/2018 19:27:36",2,"Failures: test-cloud on Ubuntu 16.04 [Evergreen Self-Tests @ 91a48d5c] (TestCostIntegrationSuite, TestGetProviderAuto) ""h2. [test-cloud failed on Ubuntu 16.04|https://evergreen.mongodb.com/task/mci_ubuntu1604_test_cloud_91a48d5ce71263ae152240830f36de1a164ab084_18_10_26_14_23_16/1]  Host: [ec2-54-157-34-240.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-7n2i56yj]  Project: [Evergreen Self-Tests|https://evergreen.mongodb.com/waterfall/mci]  Commit: [diff|https://github.com/evergreen-ci/evergreen/commit/91a48d5ce71263ae152240830f36de1a164ab084]: EVG-5334 (feat) Build - restart build options (#1725)  Evergreen Subscription: ; Evergreen Event:   *TestCostIntegrationSuite* - [Logs|https://evergreen.mongodb.com/test_log/5bd35c762a60ed1b09ad3161] | [History|https://evergreen.mongodb.com/task_history/mci/mci_ubuntu1604_test_cloud_91a48d5ce71263ae152240830f36de1a164ab084_18_10_26_14_23_16#TestCostIntegrationSuite=fail]  *TestGetProviderAuto* - [Logs|https://evergreen.mongodb.com/test_log/5bd35c762a60ed1b09ad3161] | [History|https://evergreen.mongodb.com/task_history/mci/mci_ubuntu1604_test_cloud_91a48d5ce71263ae152240830f36de1a164ab084_18_10_26_14_23_16#TestGetProviderAuto=fail]    ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-5490","10/28/2018 00:06:23",2,"Add support for Lobster to source plain-text logs from an arbitrary URL ""EVG-3271 added support for being able to upload a plain-text version of a log file and uses the greatness that is Lobster to do filtering, etc. with it. There are cases where I need to download the """"task logs"""" or """"system logs"""" because my browser is unable to render them. It would be incredibly useful to be able to provide a URL to Lobster via https://logkeeper.mongodb.org/lobster where it'd fetch a plain-text version of the logs and render them via Lobster's HTML format. A bonus would be to provide a URL to a compressed tarball (say in S3) that contains plain-text log files and view them with Lobster as well.""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-8669","10/28/2018 19:07:34",1,"avoid omitempty in grip sysinfo types ""also revendor to curator and fix ftdc buildsystem""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8745","10/30/2018 12:42:31",2,"Database method to find all perf test results ""The perf data structure allows tests to declare that they are subtests by referencing a """"parent"""" test in the """"info"""" document. We want to write a method that can, given a test, find and return all sub tests of this test. This should support recursive lookup, though obviously with some kind of limit.     This is somewhat similar to the task-finder in the evergreen scheduler. We should see if we can make the method plug-able so that we can try using $graphLookup or a parallel approach.  ""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8711","10/30/2018 13:23:27",2,"add default rollups ""after implementing the rollup type and the rollup storage we should add back in support for default rollups, including:     - total duration  - total ops (if populated)  - total bytes (if populated)  - average throughput ops  - average throguhput size  - p90 throughput  - p50 throughput""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8552","10/30/2018 13:28:19",1,"add grpc method to have user-submitted rollups ""this is a bit of an exploratory ticket. people have talked about having test harnesses compute some data and submit it to the service. one form of that would just be to have tests record their results not a sequence of events but rather as a single (total) event. Another form would be an API to insert something into the rollup map implemented as part of MAKE-505.     We might want to have another arbitrary map for """"user_rollups"""" using the same basic scheme as our rollup map, but without the versioning (as that lacks meaning in this context,) having said that, this ticket is all about the user interface (e.g. GRPC) that we'd implement to support allowing this functionality from users.  ""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8653","10/31/2018 17:37:22",2,"add job management endpoints ""add endpoints/methods to the management interface to:     - mark pending ({inprog false, complete false}) completed, by type  - mark in progress jobs complete by type (a less kind, less gentle, abort.) ""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-5505","11/01/2018 15:13:43",2,"Auto-quarantined static host produced multiple JIRA tickets ""We see that a single static host that got auto quarantined due to failed agent deployments produced 6 jira tickets. ""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8606","11/01/2018 16:50:15",1,"cleanup jasper service loging  ""this might mostly be in bond.     maybe also make it easy to set logging to splunk/systemd ""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-5507","11/02/2018 17:56:59",1,"Build page panics for nonexistent patch ""gimlet/middleware_grip.go:184 runtime/asm_amd64.s:515 runtime/panic.go:489 runtime/panic.go:63 runtime/signal_unix.go:290 service/build.go:87 service/ui.go:251 http/server.go:1942 negroni/negroni.go:46 negroni/negroni.go:29 negroni/negroni.go:38 negroni/negroni.go:38 service/middleware.go:239 gimlet/middleware_wrapper.go:16 negroni/negroni.go:38 negroni/negroni.go:86 mux/mux.go:114 negroni/negroni.go:46 negroni/negroni.go:29 negroni/negroni.go:38 negroni/negroni.go:38 negroni/static.go:41 negroni/negroni.go:38 negroni/negroni.go:38 negroni/static.go:53 negroni/negroni.go:38 negroni/negroni.go:38 gimlet/middleware_auth.go:37 negroni/negroni.go:38 negroni/negroni.go:38""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5510","11/05/2018 15:37:05",2,"Task timeout job errors ""[https://evergreen.mongodb.com/host/sir-krbi531h]    ¬†    ¬†¬† error: problem saving stat: problem updating status document for host-alerting.sir-krbi531h.2018-11-05.15-20-00: not found   ¬†¬† extended: not found problem updating status document for host-alerting.sir-krbi531h.2018-11-05.15-20-00 github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/queue.(*mongoDB).SaveStatus /data/mci/918f2c2a4b1115740cb602f5323b847e/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/queue/driver_mongodb.go:316 github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/queue.(*lockManager).Lock /data/mci/918f2c2a4b1115740cb602f5323b847e/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/queue/driver_locker.go:224 github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/queue.(*mongoDB).Lock <autogenerated>:25 github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/queue.(*remoteUnordered).Next /data/mci/918f2c2a4b1115740cb602f5323b847e/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/queue/remote.go:89 github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool.startWorkerServer.func1 /data/mci/918f2c2a4b1115740cb602f5323b847e/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool/helpers.go:123 runtime.goexit /opt/go1.8/go/src/runtime/asm_amd64.s:2197 problem saving stat github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/queue.(*lockManager).Lock /data/mci/918f2c2a4b1115740cb602f5323b847e/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/queue/driver_locker.go:225 github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/queue.(*mongoDB).Lock <autogenerated>:25 github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/queue.(*remoteUnordered).Next /data/mci/918f2c2a4b1115740cb602f5323b847e/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/queue/remote.go:89 github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool.startWorkerServer.func1 /data/mci/918f2c2a4b1115740cb602f5323b847e/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool/helpers.go:123 runtime.goexit /opt/go1.8/go/src/runtime/asm_amd64.s:2197""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5513","11/05/2018 18:57:22",1,"Relax restriction on number of `generate.tasks` tasks per variant ""Currently only one task can run {{generate.tasks}} per variant. However, a use case has emerged in which a large task should be able to dynamically generate sub-tasks as buckets of this task. Although this could be done with a single {{generate.tasks}} task, allowing many such tasks means that users will still be able to meaningfully select tasks by passing the {{-t}} and {{-v}} flags to the {{evergreen patch}} commands. We should therefore relax this restriction.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-9039","11/06/2018 22:41:49",1,"Specify which network interface jasper should listen on ""Currently, jasper only listens on the local loopback network interface. We should add an option to explicitly specify the interface so jasper can be accessed from non-localhost machines. ""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-5520","11/08/2018 16:42:41",1,"Performance Baron Page -- bad links ""In the table here: [https://evergreen.mongodb.com/perf-bb/change-points/sys-perf]    The links in the variant page are broken for me. For one I get:¬†        Instead of   ""","  https://evergreen.mongodb.com/build/sys_perf_linux_shard_lite_6caa6abbc0f5d4681599361edba2ef1f3a775c50_18_11_08_16_38_17    https://evergreen.mongodb.com/build/sys_perf_linux_shard_lite_6caa6abbc0f5d4681599361edba2ef1f3a775c50_18_10_31_21_26_35  ",0,0,1,0,0,0,0,0,0,0,0,1,0,0,0
"EVG-5523","11/09/2018 14:24:59",2,"Support display tasks with task history pages. ""As an engineer I would like to be able to see the history for a display task like I currently can for a task. So that I can treat display tasks as normal tasks.    [Sample Task History Page|https://www.google.com/url?q=https://evergreen.mongodb.com/task_history/mongodb-mongo-master/replica_sets_ese_0?revision%3D28418b385fdb72f69447a53f4a320853e6c20592%23/slavedelay1.js%3Dpass&sa=D&ust=1541673930628000&usg=AFQjCNFbYZqUDVnVYazZKgBjAnbq_AtvSg]""","",0,1,0,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-5527","11/09/2018 19:08:38",1,"cache historic test results should only filter test data not task data ""The caching job currently filters out tasks which produce different testcase names every run, since they won't produce a consistent history. However, the task names do stay the same, so we should only filter for test results, not for task results.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5734","11/13/2018 03:19:29",1,"Task logs are truncated but other logs appear complete ""The """"task logs"""" for the following Evergreen failures are truncated; however, the """"agent logs"""" and """"system logs"""" appear to be complete.    * https://evergreen.mongodb.com/task/mongodb_mongo_v4.0_linux_64_repeated_execution_logical_session_cache_replication_100ms_refresh_jscore_passthrough_3f7235ad61a16702e2a5200a912e3e02dd89a44e_18_11_09_16_23_18  * https://evergreen.mongodb.com/task/mongodb_mongo_v4.0_linux_64_repeated_execution_logical_session_cache_replication_100ms_refresh_jscore_passthrough_826c8b47c283749bb6f751d57729c6c3ac160a75_18_10_22_17_04_15  * https://evergreen.mongodb.com/task/mongodb_mongo_v4.0_linux_64_repeated_execution_logical_session_cache_replication_100ms_refresh_jscore_passthrough_41c04c12572154180b95a29b2eb1b42db45c4e38_18_10_16_13_06_23    The above links are for Evergreen failures because this issue was only noticed while investigating BF/BFG tickets. It is also an issue that's present with [passing Evergreen tasks|https://evergreen.mongodb.com/task/mongodb_mongo_v4.0_linux_64_repeated_execution_logical_session_cache_replication_100ms_refresh_jscore_passthrough_67d87f1f63c398407d9c083ce1cccbe242571059_18_11_10_00_52_17].""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5534","11/14/2018 14:11:13",1,"Rename ""first task failure"" to ""first failure in a version"" ""In mongo-c-driver on Evergreen we have """"Subscriptions"""" configured so that """"When the first task failure occurs"""", Evergreen should """"Send an email to driver-c-evergreen-alerts@10gen.com"""". However, there are tasks that have been failing for dozens of builds over the course of weeks, yet we're still getting new emails about them. For example, we got an email at¬†Nov 13, 8:22 PM about this task:    [https://evergreen.mongodb.com/task/mongo_c_driver_clang37_debug_compile_sasl_openssl_c70ed7bbaa33f123d156d35001f6ba8a3ec11d21_18_11_12_13_38_13/0]    It's just one in a long and distinguished lineage of failures for that task, not the first.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8820","11/14/2018 15:17:57",2,"add read-path benchmarks for FTDC operations  ""focus on the underlying functions in the bson.go function, particularly in """"rehydrate"""" methods.     I think eventually we want to see if we can move off of the bson.Document structure (which is a type designed to support mutation,) and see if we can get better performance for the byte-slice wrappers (e.g. Raw) which are good for reading/append operations, and may be more ideal for our use cases. Having good benchmarks will be useful.""","",0,0,0,0,1,0,0,0,0,0,0,0,1,0,0
"EVG-8466","11/14/2018 17:22:09",2,"Curator deadlock issue with Wait() and Terminate() ""h2. [Evergreen Link|https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_rhel_62_64_bit_replica_sets_kill_secondaries_jscore_passthrough_patch_04141490b2d5cc66be2457d3090292526dc37e4c_5beb429f2fbabe719c2ff46a_18_11_13_21_32_08]  ""","```goroutine 10269 [select, 360 minutes]:  github.com/mongodb/curator/vendor/github.com/mongodb/jasper.(*blockingProcess).Info(0xc4215d3520, 0x142f380, 0xc422345710, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, ...)      /data/mci/fca1981c8872662be0cd0e0338428ddf/gopath/src/github.com/mongodb/curator/vendor/github.com/mongodb/jasper/process_blocking.go:179 +0x3ae  github.com/mongodb/curator/vendor/github.com/mongodb/jasper.(*localProcess).Info(0xc421674ff0, 0x142f380, 0xc422345710, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, ...)      /data/mci/fca1981c8872662be0cd0e0338428ddf/gopath/src/github.com/mongodb/curator/vendor/github.com/mongodb/jasper/process_local.go:27 +0xdd  github.com/mongodb/curator/vendor/github.com/mongodb/jasper/jrpc/internal.(*jasperService).Get(0xc42001a900, 0x7fe7a044d0e0, 0xc422345710, 0xc422345740, 0xc42001a900, 0xc421fde390, 0xddcea0)      /data/mci/fca1981c8872662be0cd0e0338428ddf/gopath/src/github.com/mongodb/curator/vendor/github.com/mongodb/jasper/jrpc/internal/service.go:133 +0x22f  github.com/mongodb/curator/vendor/github.com/mongodb/jasper/jrpc/internal._JasperProcessManager_Get_Handler(0xeba680, 0xc42001a900, 0x7fe7a044d0e0, 0xc422345710, 0xc4215f3260, 0x0, 0x0, 0x0, 0xc422463e40, 0xc422f12420)      /data/mci/fca1981c8872662be0cd0e0338428ddf/gopath/src/github.com/mongodb/curator/vendor/github.com/mongodb/jasper/jrpc/internal/jasper.pb.go:1792 +0x28d  github.com/mongodb/curator/vendor/google.golang.org/grpc.(*Server).processUnaryRPC(0xc42024e300, 0x14335a0, 0xc420298000, 0xc421411e00, 0xc420223f80, 0x1469150, 0x0, 0x0, 0x0)      /data/mci/fca1981c8872662be0cd0e0338428ddf/gopath/src/github.com/mongodb/curator/vendor/google.golang.org/grpc/server.go:982 +0x8c0  github.com/mongodb/curator/vendor/google.golang.org/grpc.(*Server).handleStream(0xc42024e300, 0x14335a0, 0xc420298000, 0xc421411e00, 0x0)      /data/mci/fca1981c8872662be0cd0e0338428ddf/gopath/src/github.com/mongodb/curator/vendor/google.golang.org/grpc/server.go:1208 +0x15a6  github.com/mongodb/curator/vendor/google.golang.org/grpc.(*Server).serveStreams.func1.1(0xc4202760a0, 0xc42024e300, 0x14335a0, 0xc420298000, 0xc421411e00)      /data/mci/fca1981c8872662be0cd0e0338428ddf/gopath/src/github.com/mongodb/curator/vendor/google.golang.org/grpc/server.go:686 +0xa9  created by github.com/mongodb/curator/vendor/google.golang.org/grpc.(*Server).serveStreams.func1      /data/mci/fca1981c8872662be0cd0e0338428ddf/gopath/src/github.com/mongodb/curator/vendor/google.golang.org/grpc/server.go:687 +0xa1``` ",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-9084","11/14/2018 20:28:12",2,"computed interval event format ""basically send rollups (or subtle variant on that) in time sequence format and ftdc compress them. ""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-5540","11/14/2018 21:07:10",1,"Failure: test-agent on Ubuntu 16.04 (Docker) [Evergreen Self-Tests @ 898611af] (TestDirectoryCleanup) "" h2. [test-agent failed on Ubuntu 16.04 (Docker)|https://evergreen.mongodb.com/task/mci_ubuntu1604_docker_test_agent_898611afc51ba83555ef9d002c0e3fdc04203c6b_18_11_14_17_03_49/0] Host: [|https://evergreen.mongodb.com/host/container-9216666983216868440] Project: [Evergreen Self-Tests|https://evergreen.mongodb.com/waterfall/mci] Commit: [diff|https://github.com/evergreen-ci/evergreen/commit/898611afc51ba83555ef9d002c0e3fdc04203c6b]: EVG-5527: Only filter test data when caching stats (#1779) Evergreen Subscription: ; Evergreen Event:  *TestDirectoryCleanup* - [Logs|https://evergreen.mongodb.com/test_log/5bec57f4c9ec443487f17bf4] | [History|https://evergreen.mongodb.com/task_history/mci/mci_ubuntu1604_docker_test_agent_898611afc51ba83555ef9d002c0e3fdc04203c6b_18_11_14_17_03_49#TestDirectoryCleanup=fail]  ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-5544","11/15/2018 17:08:45",1,"Commit link on task page for triggered build should link triggering commit ""Get the commit hash from the triggering version, not the created version""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-9215","11/16/2018 05:15:39",1,"investigate deadlock around sending signals and terminted processes ""the TIG team has found a couple of situations where jasper deadlocks in tests that are signaling processes over GRPC, and also doing Get calls of the terminated processes. This reproduces pretty consistently in evergreen and happens on Linux.    We don't have a unit test that covers this kind of workload, and I think that's the place to start this investigation. ""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-9113","11/16/2018 05:16:52",2,"add methods to clean up/clear terminated processes  ""currently there's a hashmap of all processes in jasper storage, which means, if we start/stop processes regularly and the service never terminates, eventually we'll overload memory. We should have methods on the manager for purging these objects. ""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-9170","11/16/2018 15:00:56",1,"use modern bsoncore constructors for building flat documents ""the new (new) bson library doesn't yet have support for the kind of nested document construction that we want to do, but it should be fine for the flat iterator, and it should be a good experiment to see if there's a performance boost. ""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-8978","11/16/2018 15:02:49",1,"create pail evergreen project/config/make system  ""following MAKE-469, there's a separate repository for pail. We should spend a couple of points doing some more project-setup things:     - write a basic readme   - write a basic makefile cribbing from jasper/ftdc  - write a basic evergreen test  - create the evergreen project (cribbing/duplicating sink, there's a button.)   - set up pull request testing.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-5547","11/16/2018 17:09:47",1,"Add index on execution_tasks for the old_tasks collection ""The index is used for lookup in some stats pre-computing aggregations.  ""","  db.old_tasks.createIndex({""""execution_tasks"""": 1}) ",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-9257","11/16/2018 17:18:17",1,"methods for FTDC chunks to calculate rollups/means/totals from the chunks  ""just add methods to chunks so that we can process data from chunks directly without needing to unwind and populate json   ""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-5548","11/16/2018 18:38:29",1,"Check degraded mode flag at beginning of cache stats job ""The degraded mode flag is currently checked before scheduling jobs.  We should also check it at the beginning of the job to be able to turn already queued up jobs into no-ops.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5549","11/16/2018 18:41:39",1,"Run cache stats job every 6 hours. ""The cache stats job is currently set to run every 3 hours, and at most once every 15 minutes (in case of restarts).  It should be set to run at most once every 6 hours.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5551","11/16/2018 22:25:52",1,"Remove util.StringOrBool in favor of unmarshaling into string ""Since the yaml unmarshaler supports unmarshaling bools into strings, we do not need the complexity of util.StringOrBool. Furthermore, unit testing while solving EVG-5432 shows that the custom marshaling logic in util.StringOrBool does not work. It would be better to remove it than to fix it.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5552","11/19/2018 13:33:02",1,"Rename Warnings tab to Failures ""This page should be called Failures (both the label on the page and the URI)""","",0,1,0,0,0,0,0,0,0,0,1,1,0,0,0
"EVG-5553","11/19/2018 13:35:46",1,"Inefficient vertical space usage ""The table should fill the browser window. The number of rows is currently quite small.""","",0,1,0,0,0,0,0,0,0,0,1,1,0,0,0
"EVG-8571","11/19/2018 15:25:18",2,"Implement Connector for Perf Results ""In order to write the rest routes for perf results, we need to have a Connector interface that will act as the intermediary between the rest service and the database. The [Connector interface|https://github.com/evergreen-ci/evergreen/blob/master/rest/data/interface.go] in Evergreen is a good place to start. This should include both a db implementation, and a mock implementation for testing.   ""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8778","11/19/2018 15:25:33",2,"Get perf results by task_id ""Write a function on [PerformanceResults struct|https://github.com/evergreen-ci/sink/blob/master/model/perf.go#L195] to find performance results by task_id. ""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8553","11/19/2018 15:25:47",2,"Get perf results by version ""Write a function on [PerformanceResults struct|https://github.com/evergreen-ci/sink/blob/master/model/perf.go#L195] to find performance results by version.""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8581","11/19/2018 15:26:00",2,"Get perf results by project + taskname ""Write a function on [PerformanceResults struct|https://github.com/evergreen-ci/sink/blob/master/model/perf.go#L195] to find performance results by project+taskname We may also decide to write a function to get performance results by project+taskname+testname.""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8668","11/19/2018 15:26:13",1,"Add ability to filter by tags ""Now that we have functions to get performance results by id, task_id, version, project+taskname, and get recursively get child tasks, write a add the ability to all of these to filter by tags.""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8525","11/19/2018 15:26:28",2,"Implement a gimlet.RouteHandler for getting perf results by id ""This should implement the functions defined in [gimlet.RouteHandler interface|https://github.com/evergreen-ci/gimlet/blob/eee2e53245290e991b0e30b8f6a788d77dc0fa4a/framework.go#L10] for perf results. Example implementation [here|https://github.com/evergreen-ci/evergreen/blob/master/rest/route/distro.go#L24]. ""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8721","11/19/2018 15:26:55",2,"Implement a gimlet.RouteHandler for getting perf results by task_id and version ""This should implement the functions defined in [gimlet.RouteHandler interface|https://github.com/evergreen-ci/gimlet/blob/eee2e53245290e991b0e30b8f6a788d77dc0fa4a/framework.go#L10] for perf results. Example implementation [here|https://github.com/evergreen-ci/evergreen/blob/master/rest/route/distro.go#L24]. ""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8682","11/19/2018 15:27:01",2,"Implement a gimlet.RouteHandler for getting perf results by taskname ""This should implement the functions defined in [gimlet.RouteHandler interface|https://github.com/evergreen-ci/gimlet/blob/eee2e53245290e991b0e30b8f6a788d77dc0fa4a/framework.go#L10] for perf results. Example implementation [here|https://github.com/evergreen-ci/evergreen/blob/master/rest/route/distro.go#L24]. ""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8543","11/19/2018 15:27:08",2," Implement a gimlet.RouteHandler for getting perf results by id with children ""This should implement the functions defined in [gimlet.RouteHandler interface|https://github.com/evergreen-ci/gimlet/blob/eee2e53245290e991b0e30b8f6a788d77dc0fa4a/framework.go#L10] for perf results. Example implementation [here|https://github.com/evergreen-ci/evergreen/blob/master/rest/route/distro.go#L24]. ""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8534","11/19/2018 15:27:23",2,"Implement a gimlet.RouteHandler for getting perf results by version, filtered by tags ""This should implement the functions defined in [gimlet.RouteHandler interface|https://github.com/evergreen-ci/gimlet/blob/eee2e53245290e991b0e30b8f6a788d77dc0fa4a/framework.go#L10] for perf results. Example implementation [here|https://github.com/evergreen-ci/evergreen/blob/master/rest/route/distro.go#L24]. ""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8803","11/19/2018 15:27:40",1,"Begin to keep track of what indexes we need to build/maintain ""As a starting point, probably something like evergreen‚Äôs indexes.js, but it might make more sense to have something in go using bson.D‚Äôs that checks for indeses on deploys (via some sort of {{sink admin index-check}}, or maybe {{sink service index-check}} that just warns on missing indexes.)""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-5555","11/19/2018 16:05:48",2,"Add project level configuration parameter to disable stats caching ""By default all the projects will have their test and tasks statistics pre-computed.  We should add a project level configuration parameter to disable it.""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5558","11/19/2018 22:53:26",1,"""Re-notify after how many hours"" doesn't really have a default ""When defining a notification trigger with """"When a previously passing task fails"""", the dialog says that the default number of hours is 48, but in fact there is no default, I have to specify a number. See screenshot.""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-5559","11/20/2018 14:33:14",2,"Admin switch to turn on logging of request bodies ""We currently log all web requests but not the body; having a way to also log the body would be useful""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5560","11/21/2018 14:38:41",2,"Patch builds should be able to override entries in the manifest ""After the changes from EVG-727 / EVG-5379, patch builds always use the manifest from their corresponding base commit. That is pretty great and likely what users expected/wanted most of the time. However, it should be possible to use the {{set\-module}} command to override the revision for an entry in the manifest, to add new entries to the manifest, or remove entries from the manifest in order to simulate what would happen if those changes were actually pushed.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5561","11/22/2018 16:55:39",1,"Failures: test-cloud on OSX [Evergreen Self-Tests @ 6ec04848] (TestCostIntegrationSuite, TestEBSPriceCaching, TestFetchEBSPricing, TestFetchOnDemandPricingCached, TestFetchOnDemandPricingUncached) "" h2. [test-cloud failed on OSX|https://evergreen.mongodb.com/task/mci_osx_test_cloud_6ec0484823935a3ed9e492fcb54892f6e2d7ac76_18_11_21_13_53_56/0] Host: [macos-1012-19.macstadium.build.10gen.cc|https://evergreen.mongodb.com/host/macos-1012-19.macstadium.build.10gen.cc] Project: [Evergreen Self-Tests|https://evergreen.mongodb.com/waterfall/mci] Commit: [diff|https://github.com/evergreen-ci/evergreen/commit/6ec0484823935a3ed9e492fcb54892f6e2d7ac76]: EVG-5555 Add project parameter to disable stats caching (#1805) Evergreen Subscription: ; Evergreen Event:  *TestCostIntegrationSuite* - [Logs|https://evergreen.mongodb.com/test_log/5bf6c8012a60ed72f37c19d7] | [History|https://evergreen.mongodb.com/task_history/mci/mci_osx_test_cloud_6ec0484823935a3ed9e492fcb54892f6e2d7ac76_18_11_21_13_53_56#TestCostIntegrationSuite=fail] *TestEBSPriceCaching* - [Logs|https://evergreen.mongodb.com/test_log/5bf6c8012a60ed72f37c19d7] | [History|https://evergreen.mongodb.com/task_history/mci/mci_osx_test_cloud_6ec0484823935a3ed9e492fcb54892f6e2d7ac76_18_11_21_13_53_56#TestEBSPriceCaching=fail] *TestFetchEBSPricing* - [Logs|https://evergreen.mongodb.com/test_log/5bf6c8012a60ed72f37c19d7] | [History|https://evergreen.mongodb.com/task_history/mci/mci_osx_test_cloud_6ec0484823935a3ed9e492fcb54892f6e2d7ac76_18_11_21_13_53_56#TestFetchEBSPricing=fail] *TestFetchOnDemandPricingCached* - [Logs|https://evergreen.mongodb.com/test_log/5bf6c8012a60ed72f37c19d7] | [History|https://evergreen.mongodb.com/task_history/mci/mci_osx_test_cloud_6ec0484823935a3ed9e492fcb54892f6e2d7ac76_18_11_21_13_53_56#TestFetchOnDemandPricingCached=fail] *TestFetchOnDemandPricingUncached* - [Logs|https://evergreen.mongodb.com/test_log/5bf6c8012a60ed72f37c19d7] | [History|https://evergreen.mongodb.com/task_history/mci/mci_osx_test_cloud_6ec0484823935a3ed9e492fcb54892f6e2d7ac76_18_11_21_13_53_56#TestFetchOnDemandPricingUncached=fail]  ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-5562","11/23/2018 13:41:36",1,"PerfBB buttons should be green ""The Hide / Ack and Unmark buttons should use the same green colour(s) as the equivalent buttons on the task page.""","",0,1,0,0,0,0,0,0,0,0,1,1,0,0,0
"EVG-9010","11/26/2018 17:03:19",2,"GRPC reporter interface for the ftdc library  ""probably in the metrics api new package, should put it into curator. ""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-5565","11/26/2018 17:11:58",1,"Increase default and maximum limit size for test and task execution stats ""The current default and limit is 100, it should be increased to 1000 to reduce the need for pagination and improve performance.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5567","11/26/2018 20:01:48",2,"Create API v2 endpoints to get and set project variables ""This came out of discussions with [~zakhar.kleyman], who mentioned that rotating keys would have been much easier with this endpoint. I had expected that EVG-1730 would accomplish this, but that ticket only handled editing the project model. I think this probably should have been in scope for that ticket, so I'm going to add it to the Complete API v2 epic.    Note that since this allows getting project variables, it should be superuser-only.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8567","11/26/2018 21:20:38",2,"Create a merge rollups function on model.PerformanceResult ""Don't forget to replace [this code|https://github.com/evergreen-ci/sink/blob/master/rpc/internal/service.go#L211].""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-5568","11/26/2018 22:35:53",1,"Improve indexes for test and task execution stats ""On {{daily_test_stats}}:   - add:     - remove:      On {{daily_task_stats}}:   - add     - remove  ""","{""""_id.project"""": 1, """"_id.requester"""": 1, """"_id.test_file"""": 1, """"_id.date"""": 1}  {""""_id.project"""": 1, """"_id.requester"""": 1, """"_id.task_name"""": 1, """"_id.date"""": 1}  {""""_id.project"""": 1, """"_id.requester"""": 1, """"_id.task_name"""": 1, """"_id.variant"""": 1, """"_id.date"""": 1}  {""""_id.project"""": 1, """"_id.requester"""": 1, """"_id.test_file"""": 1, """"_id.task_name"""": 1, """"_id.date"""": 1}  {""""_id.project"""": 1, """"_id.requester"""": 1, """"_id.test_file"""": 1, """"_id.task_name"""": 1,""""_id.variant"""": 1, """"_id.date"""": 1}  { """"_id.project"""": 1, """"_id.test_file"""": 1, """"_id.date"""": 1}  { """"_id.project"""": 1, """"_id.task_name"""": 1, """"_id.date"""": 1}  { """"_id.project"""": 1, """"_id.requester"""": 1, """"_id.task_name"""": 1, """"_id.date"""": 1}  { """"_id.project"""": 1, """"_id.task_name"""": 1, """"_id.date"""": 1}  ",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5569","11/26/2018 22:36:47",1,"Failures: test-rest-model on Ubuntu 16.04 [Evergreen Self-Tests @ 23319c01] (TestMetricsSuite, TestSysInfoConverterOverwritesExistingData) ""h2. [test-rest-model failed on Ubuntu 16.04|https://evergreen.mongodb.com/task/mci_ubuntu1604_test_rest_model_23319c0163951ca4c9a0773678f25e46d94843d8_18_11_26_21_10_19/0]  Host: [ec2-52-72-5-30.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-gye84pgh]  Project: [Evergreen Self-Tests|https://evergreen.mongodb.com/waterfall/mci]  Commit: [diff|https://github.com/evergreen-ci/evergreen/commit/23319c0163951ca4c9a0773678f25e46d94843d8]: EVG-5515: support expansion and globbing for generate tasks (#1809)  Evergreen Subscription: ; Evergreen Event:   *TestMetricsSuite* - [Logs|https://evergreen.mongodb.com/test_log/5bfc72232fbabe06f5227ede] | [History|https://evergreen.mongodb.com/task_history/mci/mci_ubuntu1604_test_rest_model_23319c0163951ca4c9a0773678f25e46d94843d8_18_11_26_21_10_19#TestMetricsSuite=fail]  *TestSysInfoConverterOverwritesExistingData* - [Logs|https://evergreen.mongodb.com/test_log/5bfc72232fbabe06f5227ede] | [History|https://evergreen.mongodb.com/task_history/mci/mci_ubuntu1604_test_rest_model_23319c0163951ca4c9a0773678f25e46d94843d8_18_11_26_21_10_19#TestSysInfoConverterOverwritesExistingData=fail]    ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-5570","11/27/2018 17:18:20",1,"Pagination header only contains path and query parameters ""The header link should contain the full URL but only contains the path and query parameters.    The framework should be able to add the query parameters automatically so the work on this ticket will be to revert to using the Connector URL as baseURL.  A separate ticket will be created to have gimlet include the query parameters that were present in the request URL in the link.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8539","11/27/2018 20:20:25",1,"gimlet pagination links should include the query parameters ""The links that are created for pagination should include the query parameters that were present in the request.""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-5572","11/27/2018 20:24:24",2,"Create commit queue type ""Create commit queue type (2)""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5575","11/27/2018 20:24:25",1,"Implement db persistence for commit queue type ""Implement db persistence for commit queue type (1)""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5574","11/27/2018 20:24:25",1,"Create status action function registry ""Create StatusAction type and interface (1)""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5573","11/27/2018 20:24:25",1,"Create merge action function registry ""Create MergeAction type and interface (1)""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5577","11/27/2018 20:24:26",2,"Implement set-module for commit queue ""Implement set-module for commit queue (8)""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5576","11/27/2018 20:24:26",2,"Write add, remove, and remove all methods on commit queue ""Write add, remove, and remove all methods on commit queue (2)""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5579","11/27/2018 20:58:24",2,"Implement parsing for ‚Äúevergreen merge‚Äù messages ""Implement parsing for ‚Äúevergreen merge‚Äù messages (2)""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5583","11/27/2018 20:58:25",2,"Write status API call ""Write status API call (2)""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5581","11/27/2018 20:58:25",2,"Implement GitHub merge API call ""Implement GitHub merge API call(2)""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5584","11/27/2018 20:58:26",1,"Write opt in UI ""Write opt in UI (1)""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5586","11/27/2018 20:58:27",1,"Implement regexes and tags UI element ""Implement regexes and tags UI element (1)""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5585","11/27/2018 20:58:27",1,"Write opt in API for UI ""Write opt in API for UI (1)""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5588","11/27/2018 20:58:28",1,"Implement API for UI to list tasks in queue ""Implement API for UI to list tasks in queue (1)""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5587","11/27/2018 20:58:28",1,"Implement regexes and tags API for UI ""Implement regexes and tags API for UI (1)""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5590","11/27/2018 20:58:29",1,"Implement CLI to remove tasks from queue ""Implement UI to remove tasks from queue (1)""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5589","11/27/2018 20:58:29",1,"Implement CLI to list tasks in queue ""Implement UI to list tasks in queue (1)""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5593","11/27/2018 20:58:30",2,"Write amboy job to populate amboy jobs ""Write amboy job to populate amboy jobs (2)""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5592","11/27/2018 20:58:30",2,"Implement REST API to remove commits from queue ""Implement REST API to remove commits from queue (2)""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5591","11/27/2018 20:58:30",1,"Implement REST API to list tasks in queue ""Implement REST API to list tasks in queue (2)""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5595","11/27/2018 20:58:31",1,"Create degraded mode back end ""Create degraded mode back end (1)""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5594","11/27/2018 20:58:31",2,"Implement amboy job to process queue ""Implement amboy job to process queue (4)""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5597","11/27/2018 20:58:32",1,"Create delete all from all commit queues back end for admin UI ""Create delete all from all commit queues back end for admin UI (1)""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5596","11/27/2018 20:58:32",1,"Create degraded mode UI ""Create degraded mode UI (1)""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5598","11/27/2018 20:58:33",1,"Create delete all from all commit queues admin UI ""Create delete all from all commit queues admin UI (1)""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5601","11/28/2018 20:50:31",2,"Stats pagination is incorrect when grouping by days ""When querying the test/task execution stats, if grouping by days (group_by > 1), the match stage computed to from the start_at key for pagination is incorrect.  The stage should compute the date for the next time range before comparing values.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5604","11/29/2018 13:09:20",2,"Revision filter improvements ""The revision filter should accept both short and long versions. For example, if I paste e5c39e225effd4a28937c32c84ac3dc0c1ceb355 or e5c39e225e for a revision, this should match correctly like (e5c39e2).  - e5c39e225effd4a28937c32c84ac3dc0c1ceb355 can come from the task URL or the CLI  - e5c39e225e can come from the bread crumb navigation at the top of a task page  - the filtering should continue to work as is (ie¬†e5c3 should still partial match) ""","",0,1,0,0,0,0,0,0,0,0,1,1,0,0,0
"EVG-5605","11/29/2018 14:43:38",2,"problem sending `generate.tasks` request: Failed to make request after 10 attempts ""I switched over fuzzer tasks in mongodb_mongo_master to use generate.tasks yesterday. Looking over the last few results, it mostly looks good. However, it looks like it is occasionally failing with a message like the following:       [https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_rhel_62_64_bit_inmem_aggregation_multiversion_fuzzer_gen_03e13f90426a82a97cbb0f926385e09904519259_18_11_29_02_41_55]""","  [2018/11/28 22:51:35.235] Running command 'generate.tasks' in """"generate fuzzer tasks"""" (step 1.6 of 1)   [2018/11/28 23:06:04.835] Command failed: Problem posting task data: problem sending `generate.tasks` request: Failed to make request after 10 attempts   [2018/11/28 23:06:04.836] Task completed - FAILURE.```  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5606","11/29/2018 15:32:21",1,"github patch alias doesn't allow tags with empty regex ""ui bug. ""","",0,0,0,1,0,0,0,0,0,0,1,0,0,0,0
"EVG-5607","11/29/2018 15:35:58",2,"evergreen fetch --source takes much longer than a CLI git clone of mongodb repository ""Running a git clone of mongodb (a full clone) on my machine takes 1 minute and maxes up to 3 cores:      Running an evergreen fetch for a specific task with {{`--source`}} should be comparable (and possibly faster because it does not need to clone all of the git history). However it takes 13 minutes and maxes between 1 and 2 cores:      One of the SIGQUITs I did showed this stacktrace:      Obvious questions that may lead to optimizations are:  # Is it possible to use more goroutines for decompression  # Is there a surprisingly small buffer of bytes being used resulting in a lack of efficiency""","  dgottlieb@chimichurri /data/mci$ time git clone git@github.com:mongodb/mongo.git  Cloning into 'mongo'...  remote: Enumerating objects: 156, done.  remote: Counting objects: 100% (156/156), done.  remote: Compressing objects: 100% (120/120), done.  remote: Total 668132 (delta 61), reused 63 (delta 36), pack-reused 667976  Receiving objects: 100% (668132/668132), 423.43 MiB | 21.87 MiB/s, done.  Resolving deltas:  32% (159192/497417)     Resolving deltas: 100% (497417/497417), done.  Checking out files: 100% (21105/21105), done.    real 0m35.240s  user 1m0.560s  sys 0m5.408s    dgottlieb@chimichurri /data/mci$ time evergreen -c cli_bin/.evergreen.yml fetch -t mongodb_mongo_master_enterprise_rhel_62_64_bit_jstestfuzz_sharded_8_enterprise_rhel_62_64_bit_03e13f90426a82a97cbb0f926385e09904519259_18_11_29_02_41_55 -k 7c4ab89f8460d1cfcf441fcec85a9efa0257981b --source --dir=/data/mci  Enumerating objects: 631242, done.  Counting objects: 100% (631242/631242), done.  Compressing objects: 100% (142561/142561), done.  Total 631242 (delta 485604), reused 629514 (delta 484120), pack-reused 0    Fetching module enterprise at master  Enumerating objects: 156, done.  Counting objects: 100% (156/156), done.  Compressing objects: 100% (120/120), done.  Total 668132 (delta 61), reused 63 (delta 36), pack-reused 667976    real 10m6.580s  user 12m55.716s  sys 0m40.512s    goroutine 100 [runnable]:  compress/flate.(*decompressor).huffSym(0xc4200bec00, 0xc4200bec28, 0xc1, 0x0, 0x0)   /opt/go1.8/go/src/compress/flate/inflate.go:707 +0x1f4  compress/flate.(*decompressor).huffmanBlock(0xc4200bec00)   /opt/go1.8/go/src/compress/flate/inflate.go:493 +0x105  compress/flate.(*decompressor).nextBlock(0xc4200bec00)   /opt/go1.8/go/src/compress/flate/inflate.go:326 +0x1ea  compress/flate.(*decompressor).Read(0xc4200bec00, 0xc4325b6000, 0x8000, 0x8000, 0xc42030d8b0, 0x18a41f3, 0x1c6d360)   /opt/go1.8/go/src/compress/flate/inflate.go:346 +0x66  compress/zlib.(*reader).Read(0xc4236e2000, 0xc4325b6000, 0x8000, 0x8000, 0x0, 0x0, 0x6)   /opt/go1.8/go/src/compress/zlib/reader.go:94 +0x76  io.copyBuffer(0x7f89943d3800, 0xc42787a780, 0x7f8994251860, 0xc4236e2000, 0xc4325b6000, 0x8000, 0x8000, 0x40f388, 0x1df2780, 0x1e0d160)   /opt/go1.8/go/src/io/io.go:390 +0x100  io.CopyBuffer(0x7f89943d3800, 0xc42787a780, 0x7f8994251860, 0xc4236e2000, 0xc4325b6000, 0x8000, 0x8000, 0x0, 0xc42030d958, 0xc42030d9a8)   /opt/go1.8/go/src/io/io.go:371 +0x88  github.com/evergreen-ci/evergreen/vendor/gopkg.in/src-d/go-git.v4/plumbing/format/packfile.(*Scanner).copyObject(0xc4236f0c30, 0x7f89943d3800, 0xc42787a780, 0x0, 0x0, 0x0)   /data/mci/6df5eb368fe5bf5bc79bd59ccd81f487/gopath/src/github.com/evergreen-ci/evergreen/vendor/gopkg.in/src-d/go-git.v4/plumbing/format/packfile/scanner.go:296 +0x2bb  github.com/evergreen-ci/evergreen/vendor/gopkg.in/src-d/go-git.v4/plumbing/format/packfile.(*Scanner).NextObject(0xc4236f0c30, 0x7f89943d3800, 0xc42787a780, 0x0, 0xc400000000, 0x0, 0x0)   /data/mci/6df5eb368fe5bf5bc79bd59ccd81f487/gopath/src/github.com/evergreen-ci/evergreen/vendor/gopkg.in/src-d/go-git.v4/plumbing/format/packfile/scanner.go:273 +0xb6  github.com/evergreen-ci/evergreen/vendor/gopkg.in/src-d/go-git.v4/plumbing/format/packfile.(*Decoder).fillRegularObjectContent(0xc42030df70, 0x32c2960, 0xc42787a780, 0x1200000000000000, 0x4868, 0xc42030da78)   /data/mci/6df5eb368fe5bf5bc79bd59ccd81f487/gopath/src/github.com/evergreen-ci/evergreen/vendor/gopkg.in/src-d/go-git.v4/plumbing/format/packfile/decoder.go:364 +0xb4  github.com/evergreen-ci/evergreen/vendor/gopkg.in/src-d/go-git.v4/plumbing/format/packfile.(*Decoder).decodeByHeader(0xc42030df70, 0xc42787a740, 0x0, 0x0, 0xc42030db30, 0xc42379a280)   /data/mci/6df5eb368fe5bf5bc79bd59ccd81f487/gopath/src/github.com/evergreen-ci/evergreen/vendor/gopkg.in/src-d/go-git.v4/plumbing/format/packfile/decoder.go:304 +0x494  github.com/evergreen-ci/evergreen/vendor/gopkg.in/src-d/go-git.v4/plumbing/format/packfile.(*Decoder).doDecodeObject(0xc42030df70, 0x223b081, 0xc42030df70, 0x99c103e, 0xc42030db60, 0x0)   /data/mci/6df5eb368fe5bf5bc79bd59ccd81f487/gopath/src/github.com/evergreen-ci/evergreen/vendor/gopkg.in/src-d/go-git.v4/plumbing/format/packfile/decoder.go:233 +0x68  github.com/evergreen-ci/evergreen/vendor/gopkg.in/src-d/go-git.v4/plumbing/format/packfile.(*Decoder).DecodeObjectAt(0xc42030df70, 0x107f5f6, 0x0, 0x0, 0x0, 0x0)   /data/mci/6df5eb368fe5bf5bc79bd59ccd81f487/gopath/src/github.com/evergreen-ci/evergreen/vendor/gopkg.in/src-d/go-git.v4/plumbing/format/packfile/decoder.go:355 +0xd7  github.com/evergreen-ci/evergreen/vendor/gopkg.in/src-d/go-git.v4/plumbing/format/packfile.(*Decoder).recallByOffset(0xc42030df70, 0x107f5f6, 0x83a956190a8a287, 0xc4e29909da, 0x0, 0x0)   /data/mci/6df5eb368fe5bf5bc79bd59ccd81f487/gopath/src/github.com/evergreen-ci/evergreen/vendor/gopkg.in/src-d/go-git.v4/plumbing/format/packfile/decoder.go:437 +0x106  github.com/evergreen-ci/evergreen/vendor/gopkg.in/src-d/go-git.v4/plumbing/format/packfile.(*Decoder).fillOFSDeltaObjectContent(0xc42030df70, 0x32c2960, 0xc42787a6c0, 0x107f5f6, 0x1, 0x0, 0x0)   /data/mci/6df5eb368fe5bf5bc79bd59ccd81f487/gopath/src/github.com/evergreen-ci/evergreen/vendor/gopkg.in/src-d/go-git.v4/plumbing/format/packfile/decoder.go:406 +0x23c  github.com/evergreen-ci/evergreen/vendor/gopkg.in/src-d/go-git.v4/plumbing/format/packfile.(*Decoder).decodeByHeader(0xc42030df70, 0xc42787a680, 0x0, 0x0, 0x0, 0x0)   /data/mci/6df5eb368fe5bf5bc79bd59ccd81f487/gopath/src/github.com/evergreen-ci/evergreen/vendor/gopkg.in/src-d/go-git.v4/plumbing/format/packfile/decoder.go:308 +0x456  github.com/evergreen-ci/evergreen/vendor/gopkg.in/src-d/go-git.v4/plumbing/format/packfile.(*Decoder).doDecodeObject(0xc42030df70, 0x223b081, 0x32c2960, 0xc42787a540, 0x0, 0x0)   /data/mci/6df5eb368fe5bf5bc79bd59ccd81f487/gopath/src/github.com/evergreen-ci/evergreen/vendor/gopkg.in/src-d/go-git.v4/plumbing/format/packfile/decoder.go:233 +0x68  github.com/evergreen-ci/evergreen/vendor/gopkg.in/src-d/go-git.v4/plumbing/format/packfile.(*Decoder).DecodeObject(0xc42030df70, 0x32c2960, 0xc42787a540, 0x0, 0x0)   /data/mci/6df5eb368fe5bf5bc79bd59ccd81f487/gopath/src/github.com/evergreen-ci/evergreen/vendor/gopkg.in/src-d/go-git.v4/plumbing/format/packfile/decoder.go:223 +0x33  github.com/evergreen-ci/evergreen/vendor/gopkg.in/src-d/go-git.v4/plumbing/format/packfile.(*Decoder).decodeObjects(0xc42030df70, 0x9a1ca, 0x0, 0x0)   /data/mci/6df5eb368fe5bf5bc79bd59ccd81f487/gopath/src/github.com/evergreen-ci/evergreen/vendor/gopkg.in/src-d/go-git.v4/plumbing/format/packfile/decoder.go:170 +0x40  github.com/evergreen-ci/evergreen/vendor/gopkg.in/src-d/go-git.v4/plumbing/format/packfile.(*Decoder).doDecode(0xc420066f70, 0x0, 0x0)   /data/mci/6df5eb368fe5bf5bc79bd59ccd81f487/gopath/src/github.com/evergreen-ci/evergreen/vendor/gopkg.in/src-d/go-git.v4/plumbing/format/packfile/decoder.go:160 +0x158  github.com/evergreen-ci/evergreen/vendor/gopkg.in/src-d/go-git.v4/plumbing/format/packfile.(*Decoder).Decode(0xc42030df70, 0x0, 0x0, 0x0, 0x0, 0x0)   /data/mci/6df5eb368fe5bf5bc79bd59ccd81f487/gopath/src/github.com/evergreen-ci/evergreen/vendor/gopkg.in/src-d/go-git.v4/plumbing/format/packfile/decoder.go:139 +0xa1  github.com/evergreen-ci/evergreen/vendor/gopkg.in/src-d/go-git.v4/storage/filesystem/internal/dotgit.(*PackWriter).buildIndex(0xc420f98f50)   /data/mci/6df5eb368fe5bf5bc79bd59ccd81f487/gopath/src/github.com/evergreen-ci/evergreen/vendor/gopkg.in/src-d/go-git.v4/storage/filesystem/internal/dotgit/writers.go:64 +0xe8  created by github.com/evergreen-ci/evergreen/vendor/gopkg.in/src-d/go-git.v4/storage/filesystem/internal/dotgit.newPackWrite   /data/mci/6df5eb368fe5bf5bc79bd59ccd81f487/gopath/src/github.com/evergreen-ci/evergreen/vendor/gopkg.in/src-d/go-git.v4/storage/filesystem/internal/dotgit/writers.go:52 +0x3af  ",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5608","11/29/2018 15:38:02",2,"Do not display execution tasks on task timing page ""We should display only display tasks and ordinary tasks, not the constituent execution tasks that are part of a display task.""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-5611","11/30/2018 13:46:48",1,"Default filtering for variant ""Original requirements:   # wiretiger variants should not be shown by default. This might be accomplished by pre-populating the variant filter with '^((?!wtdevelop).)*$'. It would be nice if¬†'(?!wtdevelop).)' also worked.   # canary tests should not be shown by default. This might be accomplished by pre-populating the variant filter with '^((?!canary_|fio_|NetworkBandwidth).)*$'    I going prepopulate filter with described default values. Other requirements are not easiest thing to do so I created a separate feature request ticket EVG-5610""","",0,1,0,0,0,0,0,0,0,0,1,1,0,0,0
"EVG-5612","11/30/2018 14:25:10",1,"System-unresponsive display task should be purple ""This one is not highlighted correctly.¬†https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_windows_64_2k8_display_sharding_ese_99c9d211f7faed59f31b3d1733c63b64af668f80_18_11_29_19_51_48/0""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-5613","11/30/2018 14:38:28",2,"Trendchart - base line might not be visible due to scale ""We should took baseline into account for Y scale domain calculation. At the screeshot, baseline isn't visible because it high above the chart.    --    Changing estimation from 1 to 2 sp due to refactoring of legacy reference lines rendering code. Now it's possible to redraw ref. lines without redrawing whole chart - however this wasn't implemented in terms of this ticket.""","",0,0,1,0,0,0,0,0,0,0,1,1,0,0,0
"EVG-5614","11/30/2018 15:27:32",1,"Client IP address not present in Evergreen logs ""gimlet should pass the value of the X-Cluster-Client-Ip header through as the remote address. However, in the Splunk logs, only the load balancer IP is present. I believe this worked at some point, and Techops has said that the load balancer behavior has not changed.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5615","11/30/2018 15:39:16",2,"Evergreen logs truncated ""Sometimes an Evergreen task has not posted all of its logs to the API server. For example, [these logs|https://evergreen.mongodb.com/task/mongo_node_driver_core_tests_os_requires_32__node_version~Argon_os_requires_32~ubuntu_16.04_test_3.4_standalone_patch_a8f8e4ce41936babc3b9112bf42d609779f03b39_5bfefd49e3c33123cb993da3_18_11_28_20_40_59/0?type=T&text=true] stop.    Running the same task with these commands in the main body of the task instead of pre contains all of the expected logs.    There are a few different things that might cause this:   # A context may be canceled before the log can be flushed. If that's the case, we need to ensure that the function running pre flushes logs before returning.   # There may be a bug in the grip logger in which a buffer is not flushed before closing.   # The API server may have rejected the logs. This is not possible in the above case, since later logs from the task are present, but I am including it here for completeness, since it may cause logs at the very end of a task to be missing. This ticket need not address this possibility unless we find this symptom in some other task.""","   [2018/11/28 15:42:30.909] v0.10.13 2013-07-09 linux-x64,linux-x86,osx-x64-pkg,osx-x64-tar,osx-x86-tar,src,sunos-x64,sunos-x86,win-x64-exe,win-x86-exe,win-x86-msi 1.3.2 3.14.5.9 0.10.12 1.2.3 1.0.1e 11 - [2018/11/28 15:42:30.909] v0.10.12 2013-06-18 linux-x64,linux-x86,osx-x64-pkg,osx-x64-tar,osx-x86-tar,src,sunos-x64,sunos-x86,win-x64-exe,win-x86-exe,win-x86-msi 1.2.32 3.14.5.9 0.10.11 1.2.3 1.0.1e 11 - [2018/11/28 15:42:30.909] v0.10.11 2",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8825","11/30/2018 18:20:02",2,"modify cedar service for local demo mode  ""attach grpc ""","",0,0,0,0,1,0,0,0,0,0,0,0,1,0,0
"EVG-5618","11/30/2018 20:15:49",2,"Empty sys-perf charts despite table-view data ""This occurred in the following patch: [https://evergreen.mongodb.com/task/sys_perf_linux_shard_lite_bestbuy_query_patch_82fce7bd6f6e2838ce3ccc72474ff8b8ebe325a0_5c0173f22a60ed1355e7491f_18_11_30_17_31_47##%257B%2522compare%2522%253A%255B%257B%2522hash%2522%253A%252282fce7bd6f6e2838ce3ccc72474ff8b8ebe325a0%2522%257D%252C%257B%2522hash%2522%253A%252282fce7bd6f6e2838ce3ccc72474ff8b8ebe325a0%2522%257D%255D%257D]    It is worth noting that¬†[resource_sanity_checks|https://evergreen.mongodb.com/task_history/sys-perf/bestbuy_query?revision=82fce7bd6f6e2838ce3ccc72474ff8b8ebe325a0#resource_sanity_checks=fail]¬†failed""","",0,0,1,0,0,0,0,0,0,0,0,1,0,0,0
"EVG-5626","12/04/2018 16:37:14",2,"Add max execution timeouts to all amboy jobs in Evergreen ""We have seen several outages where jobs appear to spin and never time out after some event. Recovering requires manual intervention: marking in-progress jobs complete and then restarting the app servers. Instead, all jobs should have a timeout as a back stop. This should be long enough that we never hit it except when there is a problem.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8363","12/04/2018 17:09:59",1,"Spell gauge correctly ""This is really bothering me.""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-5627","12/04/2018 20:05:18",1,"Use higher cardinality indices for stats jobs ""We're seeing intensive aggregations like this cause write latency to spike:    Performance advisor suggests having test name first""","  {   """"host"""" : """"evergreendb-3.10gen-mci.4085.mongodbdns.com:27017"""",   """"desc"""" : """"conn78501"""",   """"connectionId"""" : 78501,   """"client"""" : """"10.120.46.216:54116"""",   """"active"""" : true,   """"currentOpTime"""" : """"2018-12-04T20:01:19.417+0000"""",   """"opid"""" : -953708162,   """"secs_running"""" : NumberLong(217),   """"microsecs_running"""" : NumberLong(217705909),   """"op"""" : """"command"""",   """"ns"""" : """"mci.daily_test_stats"""",   """"command"""" : {    """"aggregate"""" : """"daily_test_stats"""",    """"pipeline"""" : [     {      """"$match"""" : {       """"_id.task_name"""" : """"replica_sets_jscore_passthrough"""",       """"$or"""" : [        {         """"_id.date"""" : {          """"$gt"""" : ISODate(""""2018-11-22T00:00:00Z"""")         }        },        {         """"_id.date"""" : ISODate(""""2018-11-22T00:00:00Z""""),         """"_id.variant"""" : {          """"$gt"""" : """"enterprise-ubuntu1804-64""""         }        },        {         """"_id.date"""" : ISODate(""""2018-11-22T00:00:00Z""""),         """"_id.variant"""" : """"enterprise-ubuntu1804-64"""",         """"_id.task_name"""" : {          """"$gt"""" : """"replica_sets_jscore_passthrough""""         }        },        {         """"_id.task_name"""" : """"replica_sets_jscore_passthrough"""",         """"_id.date"""" : ISODate(""""2018-11-22T00:00:00Z""""),         """"_id.variant"""" : """"enterprise-ubuntu1804-64"""",         """"_id.test_file"""" : {          """"$gt"""" : """"jstests/core/geo_max.js""""         }        },        {         """"_id.date"""" : ISODate(""""2018-11-22T00:00:00Z""""),         """"_id.variant"""" : """"enterprise-ubuntu1804-64"""",         """"_id.task_name"""" : """"replica_sets_jscore_passthrough"""",         """"_id.test_file"""" : """"jstests/core/geo_max.js"""",         """"_id.distro"""" : {          """"$gte"""" : """"ubuntu1804-test""""         }        }       ],       """"_id.date"""" : {        """"$gte"""" : ISODate(""""2018-11-07T00:00:00Z""""),        """"$lt"""" : ISODate(""""2018-12-05T00:00:00Z"""")       },       """"_id.project"""" : """"mongodb-mongo-master"""",       """"_id.requester"""" : {        """"$in"""" : [         """"gitter_request""""        ]       },       """"_id.test_file"""" : {        """"$in"""" : [         """"jstests/core/json1.js"""",         """"jstests\\core\\json1.js"""",         """"jstests/core/geo_2d_explain.js"""",         """"jstests\\core\\geo_2d_explain.js"""",         """"jstests/core/exists9.js"""",         """"jstests\\core\\exists9.js"""",         """"jstests/core/arrayfinda.js"""",         """"jstests\\core\\arrayfinda.js"""",         """"jstests/core/all.js"""",         """"jstests\\core\\all.js"""",         """"jstests/core/regex_unicode.js"""",         """"jstests\\core\\regex_unicode.js"""",         """"jstests/core/count4.js"""",         """"jstests\\core\\count4.js"""",         """"jstests/core/update_multi5.js"""",         """"jstests\\core\\update_multi5.js"""",         """"jstests/core/capped5.js"""",         """"jstests\\core\\capped5.js"""",         """"jstests/core/storefunc.js"""",         """"jstests\\core\\storefunc.js"""",         """"jstests/core/arrayfind5.js"""",         """"jstests\\core\\arrayfind5.js"""",         """"jstests/core/geo_max.js"""",         """"jstests\\core\\geo_max.js"""",         """"jstests/core/geo_multikey1.js"""",         """"jstests\\core\\geo_multikey1.js"""",         """"jstests/core/removec.js"""",         """"jstests\\core\\removec.js"""",         """"jstests/core/regex.js"""",         """"jstests\\core\\regex.js"""",         """"jstests/core/update_arraymatch1.js"""",         """"jstests\\core\\update_arraymatch1.js"""",         """"jstests/core/mr_merge.js"""",         """"jstests\\core\\mr_merge.js"""",         """"jstests/core/wildcard_index_distinct_scan.js"""",         """"jstests\\core\\wildcard_index_distinct_scan.js"""",         """"jstests/core/nin.js"""",         """"jstests\\core\\nin.js"""",         """"jstests/core/collation_update.js"""",         """"jstests\\core\\collation_update.js""""        ]       }      }     },     {      """"$addFields"""" : {       """"date"""" : """"$_id.date""""      }     },     {      """"$group"""" : {       """"total_duration_pass"""" : {        """"$sum"""" : {         """"$multiply"""" : [          """"$num_pass"""",          """"$avg_duration_pass""""         ]        }       },       """"_id"""" : {        """"date"""" : """"$date"""",        """"distro"""" : """"$_id.distro"""",        """"variant"""" : """"$_id.variant"""",        """"task_name"""" : """"$_id.task_name"""",        """"test_file"""" : """"$_id.test_file""""       },       """"num_pass"""" : {        """"$sum"""" : """"$num_pass""""       },       """"num_fail"""" : {        """"$sum"""" : """"$num_fail""""       }      }     },     {      """"$project"""" : {       """"test_file"""" : """"$_id.test_file"""",       """"variant"""" : """"$_id.variant"""",       """"distro"""" : """"$_id.distro"""",       """"num_fail"""" : 1,       """"task_name"""" : """"$_id.task_name"""",       """"date"""" : """"$_id.date"""",       """"num_pass"""" : 1,       """"avg_duration_pass"""" : {        """"$cond"""" : {         """"if"""" : {          """"$ne"""" : [           """"$num_pass"""",           0          ]         },         """"then"""" : {          """"$divide"""" : [           """"$total_duration_pass"""",           """"$num_pass""""          ]         },         """"else"""" : null        }       }      }     },     {      """"$sort"""" : {       """"date"""" : 1,       """"variant"""" : 1,       """"task_name"""" : 1,       """"test_file"""" : 1,       """"distro"""" : 1      }     },     {      """"$limit"""" : 1001     }    ],    """"cursor"""" : {         },    """"allowDiskUse"""" : true,    """"$db"""" : """"mci""""   },   """"planSummary"""" : """"IXSCAN { _id.project: 1, _id.test_file: 1, _id.date: 1 }, IXSCAN { _id.project: 1, _id.test_file: 1, _id.date: 1 }, IXSCAN { _id.project: 1, _id.task_name: 1, _id.date: 1 }, IXSCAN { _id.project: 1, _id.task_name: 1, _id.date: 1 }, IXSCAN { _id.project: 1, _id.task_name: 1, _id.date: 1 }"""",   """"numYields"""" : 15988,   """"locks"""" : {       },   """"waitingForLock"""" : false,   """"lockStats"""" : {    """"Global"""" : {     """"acquireCount"""" : {      """"r"""" : NumberLong(15990)     }    },    """"Database"""" : {     """"acquireCount"""" : {      """"r"""" : NumberLong(15990)     }    },    """"Collection"""" : {     """"acquireCount"""" : {      """"r"""" : NumberLong(15990)     }    }   }  }",0,0,0,0,0,0,0,1,0,1,0,0,0,0,0
"EVG-5630","12/05/2018 16:20:35",1,"Cache last task group in FindNextTask ""We currently run {{shouldRunTaskGroup}} for every task in a group. However, once we've run it once, we don't need to rerun it, and since task group tasks are in order, we can skip all tasks in a group once we've checked on.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5632","12/05/2018 19:58:44",2,"Project config invalid on PR testing ""Getting `evergreen ‚Äî project config was invalid` error on PR testing.  Ran `evergreen validate evergreen.yaml` and it returned that it was valid.    [PR|https://github.com/evergreen-ci/cedar/pull/29]""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5633","12/05/2018 23:00:54",1,"Cache historical test endpoint should have a degraded mode ""DAG team is planning on using the cache historical test endpoints to determine how to split up resmoke suites. Since there are concerns about performance of the endpoints and the impact that calls could have on overall evergreen performance, we should have a degraded mode that the DAG scripts could detect if needed.    Having the endpoints return an http response of 503 (Service Unavailable) might be a good option.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5636","12/06/2018 21:17:22",2,"Restructure/rename degraded mode flags ""Each flag should correspond to a job/group of jobs or APIs""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5637","12/06/2018 22:19:29",2,"generate.tasks client retries race with server-side retries, causing system failures ""E.g., https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_rhel_62_64_bit_jstestfuzz_sharded_gen_28e38550525a1e338ea2882da3ddce518771627f_18_12_06_20_13_22/0    I believe the order of operations here is:  1. Client makes generate.tasks request.  2. Client times out.  3. Server succeeds in processing request.  4. Client retries.  5. Server returns validation error, because tasks already exist.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5641","12/07/2018 15:27:46",2,"Stats page contains no data ""The stats tab is currently completely non-functional: https://evergreen.mongodb.com/task_timing/mongodb-mongo-master#    - Most variants have all tasks greyed out  - Variants list tasks that aren't associated with that variant  - You can't seem to get any data on even the few that aren't greyed out.    CC' [~cristopher.stauffer]    ""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-5642","12/07/2018 16:56:31",2,"MissingParameter: The request must contain the parameter InstanceId ""There were hundreds of these errors. Evergreen should never pass a malformed request to DescribeInstances.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5644","12/10/2018 05:42:47",2,"Tasks stuck in 'started' state with sub-tasks 'dispatched' or 'system-unresponsive' ""A few tasks ([here|https://evergreen.mongodb.com/task/mongodb_mongo_master_linux_64_debug_display_replica_sets_auth_patch_a1442e88e77fff49dd20a11953a6012be66d4b79_5c0d86902fbabe335d3b6272_18_12_09_21_18_09##%257B%2522compare%2522%253A%255B%257B%2522hash%2522%253A%2522a1442e88e77fff49dd20a11953a6012be66d4b79%2522%257D%252C%257B%2522hash%2522%253A%2522a1442e88e77fff49dd20a11953a6012be66d4b79%2522%257D%252C%257B%2522hash%2522%253A%2522a1442e88e77fff49dd20a11953a6012be66d4b79%2522%257D%255D%257D]¬†¬†and [there|https://evergreen.mongodb.com/task/mongodb_mongo_master_linux_64_debug_display_sharding_patch_a1442e88e77fff49dd20a11953a6012be66d4b79_5c0d86902fbabe335d3b6272_18_12_09_21_18_09##%257B%2522compare%2522%253A%255B%257B%2522hash%2522%253A%2522a1442e88e77fff49dd20a11953a6012be66d4b79%2522%257D%252C%257B%2522hash%2522%253A%2522a1442e88e77fff49dd20a11953a6012be66d4b79%2522%257D%255D%257D]) in my patch [build|https://evergreen.mongodb.com/version/5c0d86902fbabe335d3b6272]¬†stuck in 'started' state for long with '>= 1 day (wall clock)' waiting time. Their sub/execution tasks stayed under 'dispatched' or 'system-responsive' state. Attempts of 'abort' the tasks failed with no effect of turning them to aborted state.¬†""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5645","12/11/2018 14:54:47",1,"cannot restart a display task ""If you choose Restart in the Gear menu for any Display task, you receive this error:    I think it still works however?  The state of the task after hitting this error is """"Started"""", so I think it really does attempt to rerun all the execution tasks?""","  Error restarting: Error restarting task mongodb_mongo_master_enterprise_rhel_62_64_bit_display_jstestfuzz_concurrent_replication_session_patch_02f285939f442c999227c431c82844e8d26707b0_5c0f42b6c9ec444e5fb03c6b_18_12_11_04_54_18: Task 'mongodb_mongo_master_enterprise_rhel_62_64_bit_display_jstestfuzz_concurrent_replication_session_patch_02f285939f442c999227c431c82844e8d26707b0_5c0f42b6c9ec444e5fb03c6b_18_12_11_04_54_18' is currently 'unstarted' - cannot reset task in this status   ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5646","12/11/2018 16:37:46",1,"Adjust priority for amboy jobs ""Review to make sure they look right, change if they need changing.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5648","12/11/2018 17:53:56",1,"Error if teardown script does not exist ""We only run the teardown script if one is configured for the distro. Therefore, it is an error if one does not exist. We should return an error we don't find one, not noop.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5649","12/11/2018 19:05:26",2,"Evergreen fetch seemed to hang for a task fetching artifacts ""The task: {{mongodb_mongo_master_enterprise_rhel_62_64_bit_majority_read_concern_off_replica_sets_kill_secondaries_jscore_passthrough_patch_6f23d1a20a7669396efab06bf26b3ee76553fd9b_5c0ee9b50305b96482de19ad_18_12_10_22_33_53}}    Running by hand gives the following output:      Noting the {{file name too long}} errors.""","  [root@ip-10-122-15-226 ~]# ./evergreen -c cli_bin/.evergreen.yml fetch -t mongodb_mongo_master_enterprise_rhel_62_64_bit_majority_read_concern_off_replica_sets_kill_secondaries_jscore_passthrough_patch_6f23d1a20a7669396efab06bf26b3ee76553fd9b_5c0ee9b50305b96482de19ad_18_12_10_22_33_53 -k 7c4ab89f8460d1cfcf441fcec85a9efa0257981b --artifacts --dir=/data/mci  Gathering dependencies... Done.  error:  Couldn't download https://s3.amazonaws.com/mongodatafiles/mongodb-mongo-master/enterprise-rhel-62-64-bit-majority-read-concern-off/6f23d1a20a7669396efab06bf26b3ee76553fd9b/datafiles/mongo-data-mongodb_mongo_master_enterprise_rhel_62_64_bit_majority_read_concern_off_replica_sets_kill_secondaries_jscore_passthrough_patch_6f23d1a20a7669396efab06bf26b3ee76553fd9b_5c0ee9b50305b96482de19ad_18_12_10_22_33_53-capped6_PeriodicKillSecondaries-0-0.tgz: open /data/mci/artifacts-patch-1265_enterprise-rhel-62-64-bit-majority-read-concern-off_replica_sets_kill_secondaries_jscore_passthrough/mongo-data-mongodb_mongo_master_enterprise_rhel_62_64_bit_majority_read_concern_off_replica_sets_kill_secondaries_jscore_passthrough_patch_6f23d1a20a7669396efab06bf26b3ee76553fd9b_5c0ee9b50305b96482de19ad_18_12_10_22_33_53-capped6_PeriodicKillSecondaries-0-0.tgz: file name too long  error:  failed to check if file exists: stat /data/mci/artifacts-patch-1265_enterprise-rhel-62-64-bit-majority-read-concern-off_replica_sets_kill_secondaries_jscore_passthrough/mongo-data-mongodb_mongo_master_enterprise_rhel_62_64_bit_majority_read_concern_off_replica_sets_kill_secondaries_jscore_passthrough_patch_6f23d1a20a7669396efab06bf26b3ee76553fd9b_5c0ee9b50305b96482de19ad_18_12_10_22_33_53-wildcard_index_multikey_PeriodicKillSecondaries-0-0.tgz: file name too long  (worker 3) Downloading mongo-diskstats-mongodb_mongo_master_enterprise_rhel_62_64_bit_majority_read_concern_off_replica_sets_kill_secondaries_jscore_passthrough_patch_6f23d1a20a7669396efab06bf26b3ee76553fd9b_5c0ee9b50305b96482de19ad_18_12_10_22_33_53-0.tgz to directory artifacts-patch-1265_enterprise-rhel-62-64-bit-majority-read-concern-off_replica_sets_kill_secondaries_jscore_passthrough (3.5 kB)  (worker 2) Downloading mongo-system-resource-info-mongodb_mongo_master_enterprise_rhel_62_64_bit_majority_read_concern_off_replica_sets_kill_secondaries_jscore_passthrough_patch_6f23d1a20a7669396efab06bf26b3ee76553fd9b_5c0ee9b50305b96482de19ad_18_12_10_22_33_53-0.tgz to directory artifacts-patch-1265_enterprise-rhel-62-64-bit-majority-read-concern-off_replica_sets_kill_secondaries_jscore_passthrough (75 kB)  (worker 0) Downloading mongo-coredumps-mongodb_mongo_master_enterprise_rhel_62_64_bit_majority_read_concern_off_patch_6f23d1a20a7669396efab06bf26b3ee76553fd9b_5c0ee9b50305b96482de19ad_18_12_10_22_33_53-replica_sets_kill_secondaries_jscore_passthrough-0.tgz to directory artifacts-patch-1265_enterprise-rhel-62-64-bit-majority-read-concern-off_replica_sets_kill_secondaries_jscore_passthrough (3.7 MB)  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-9011","12/11/2018 19:13:45",1,"Add Restart() to Process ""Currently, Jasper processes do not have a {{Restart()}} (or similar) functionality. We should add this.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-5652","12/12/2018 12:18:25",1,"Warnings - Variant / test name grouping ""The issues should be grouped by (variant and test name). The Create time of this grouping should be the most recent create time of the grouped failed tasks""","",0,1,0,0,0,0,0,0,0,0,1,1,0,0,0
"EVG-5654","12/12/2018 12:21:53",1,"Warnings - links ""The rows in the table should contain links to the task pages and probably the version page""","",0,1,0,0,0,0,0,0,0,0,1,1,0,0,0
"EVG-5655","12/12/2018 12:23:04",0,"Warnings - hide status column by default ""I'm not sure the status column is useful. It appears to only be 'failed'""","",0,1,0,0,0,0,0,0,0,0,1,1,0,0,0
"EVG-5656","12/12/2018 12:23:57",1,"Warnings - colour coding ""It would be nice if the failures were colour coded link they are in the waterfall page (red for test failures, purple for system failures etc)""","",0,1,0,0,0,0,0,0,0,0,1,1,0,0,0
"EVG-5657","12/12/2018 12:25:06",1,"More comprehensive date filter ""The Create Time filter on this page looks like it only uses string matching, so '2018-10-12' but '>=2018-10-12',¬† '=2018-10-12' does not. This behaviour is inconsistent with the change points list filtering    ALSO    The Create Time filter uses numeric comparisons. So '=2018-10-12' will never match anything where as '>=2018-10-12' will. This behaviour is correct if you understand the matching but it is not what you would expect. Maybe string based matching would be better, although >= and <= should continue to work as expected""","",0,1,0,0,0,0,0,0,0,0,1,1,0,0,0
"EVG-5658","12/12/2018 12:26:24",2,"Persistent filter settings ""It would be nice if your filters were cached and reused the next time you view the page. _(This is a very minor feature request)_""","",0,1,0,0,0,0,0,0,0,0,1,1,0,0,0
"EVG-8410","12/12/2018 16:02:53",2,"Figure out why pail's local impl is failing on windows. ""See [here|https://evergreen.mongodb.com/task/pail_windows_test_patch_1df85beb6afca4560131e9a65fccfaac91af944a_5c1031b32a60ed719ff9e033_18_12_11_21_52_53] for more details on the failure.""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-5661","12/12/2018 18:10:17",1,"Lobster feature request: allow ""click to expand"" that shows log lines in between two bookmarked lines ""This would be a nice feature because often, I first bookmark the lines I'm interested in, then I want to explore more deeply what's happening around and between those lines.    Currently, the only way to see¬†*any*¬†non-bookmarked lines is to:   * add some additional filters for the additional lines you're interested in   * turn off all filters    However, *both of these have the drawback*¬†that they'll show the matching lines throughout the entire test, when I only care about those lines inside a small window.    I attached two examples (from GitHub and mongodbcr.appspot) of what the """"click to expand"""" UI could look like:""","",0,1,0,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-9038","12/13/2018 22:47:14",2,"Fix maxdepth in model/perf.go ""Want:  MaxDepth < 0 -> search recursively without limit on depth  MaxDepth == 0 -> do not search recursively  MaxDepth > 0 -> search recursively until reach depth of MaxDepth""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-8714","12/14/2018 03:30:16",2,"PoplarBenchmark function type  ""    need a wrapper to convert to/from func(*testing.B) and a manual harness with min iterations/ and min/max time ""","  type Benchmark func(context.Context, events.Recorder) error  ",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8663","12/14/2018 03:34:01",2,"write TestMain function for poplar  ""autoconvert testing.B to poplar benchmarks for easier reporting. ""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8763","12/14/2018 03:36:01",1,"add types to shrub or poplar for the result.json format  ""to support easily building/generating this type""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-5666","12/14/2018 14:37:01",1,"Intent host ID sent to DescribeInstances ""I see many errors of the form    associated with DescribeInstances API calls. We should not sent intent host IDs to AWS.""","   InvalidInstanceID.Malformed: Invalid id: """"evg-debian92-test-20181211120400-7089663881877227953""""",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5667","12/14/2018 15:08:02",1,"Remove test_history code ""We are now using the cache historical test execution statistics project for this data. The old endpoint is deprecated.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-5672","12/14/2018 19:17:29",1,"Do not retry for ""InvalidSpotInstanceRequestID.NotFound"" ""If the spot request ID is not found once, it will not be found on every retry. We should retry.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5674","12/14/2018 20:23:26",1,"Lint tasks fail ""  ¬†""","  [2018/12/14 15:22:14.982] package github.com/evergreen-ci/evg-lint/...: github.com/evergreen-ci/evg-lint/...: invalid import path: malformed import path """"github.com/evergreen-ci/evg-lint/..."""": double dot ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5676","12/17/2018 15:48:14",1,"Cache ec2 cost in more places ""Currently we only cache in getProvider, which we only call in the auto case. We should cache in more places (the host idle job, in particular) so that we handle the pure spot and pure on-demand cases.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5678","12/17/2018 16:48:28",2,"Implement Queue Item Type for a Task and its dependencies ""Implement Queue Item Type for a Task and its dependencies""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5677","12/17/2018 16:48:28",2,"Implement Queue Item Type for Single Tasks ""Implement Queue Item Type for Single Tasks""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5679","12/17/2018 16:48:29",2,"Implement Queue Item Type for a Group of Ordered Dependencies (Single Host Task Group) ""Requirements:  - mgobson SetBSON/GetBSON  - bson MarshalBSON UnmarshalBSON  - Implement interface for HasEligableTask and GetNextTask(hostInfo)""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5682","12/17/2018 16:48:30",1,"Add Scheduler Version Flag ""This shouldn‚Äôt include any logic, just crud methods to persist it from the DB and access it from the rest api (with UI for the same.)    Requirements:  - UI on the distro page  - API in rest for toggling-persistence to the db""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5680","12/17/2018 16:48:30",2,"Implement Queue Item Type for a Group of Unordered Dependencies (Multi-Host Task Group) ""Requirements:  - mgobson SetBSON/GetBSON  - bson MarshalBSON UnmarshalBSON  - Implement interface for HasEligableTask and GetNextTask(hostInfo)""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5684","12/17/2018 16:48:31",2,"Refactor Inputs to Host Allocation to Be Public ""Requirements:   - Make Fields in HostAllocatorData public (or constructable?)  - Reduce/Remove dependency on legacy model.TaskQueueItem""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5683","12/17/2018 16:48:31",1,"Add New Degraded Mode Flags ""Requirements:  - For all new flags add them to the UI/DB/REST  - Add one top level flag to totally disable the new scheduler (let‚Äôs call it the planner)  - Add one top level flag to disable the new host allocator""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5686","12/17/2018 16:48:32",2,"Implement container.Heap for slices of Container items ""Depends on all of the ‚ÄúQueue Item Type‚Äù tickets.    See: [https://github.com/mongodb/amboy/blob/master/queue/priority_storage.go#L156|https://github.com/mongodb/amboy/blob/master/queue/priority_storage.go#L156]      Requirements:   - should be able to sort based on the point value of a queue.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5685","12/17/2018 16:48:32",1,"Create New Host Allocation Job ""Depends on ‚ÄúRefactor inputs to Host Allocation.‚Äù    Requirements:  - respect the distro scheduler flag (per distro toggle)  - respect the respect the top level host allocator flag  - scheduler.GetHostAllocator(ctx, scheduler.HostAllocatorData) (int, err) -> bulk insert intents    Probably can be disabled to start, as this depends on the scheduler part.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5688","12/17/2018 16:48:33",2,"Add Default Distro Configuration to Site Admin ""Depends on ‚ÄúAdd Distro Configuration for Weighting Factor,‚Äù or at least we‚Äôll probably need to move the document that describes the weights to ‚Äúevergreen‚Äù rather than have it live in distro    Work with John to figure out if there‚Äôs a way to reduce the duplication here.    Requirements:  - Accessible from the global configuration""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5687","12/17/2018 16:48:33",2,"Add Distro Configuration for Weighting Factors ""The design document lists a number of different parameters that have ‚Äúweights‚Äù in the scheduling process. We need to expose this as part of the distro configuration, I imagine that we‚Äôll have a number of values describe the relative value (or ordering?) of a list of possible priorities.    Requirements:  - UI, REST and DB handlers for this structure  - Determine what the list of properties are.  - Probably need to define a  - Possibly hidden unless users explicitly say that they want to override the defaults.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5690","12/17/2018 16:48:34",2,"Add Distro Configuration for Scheduler Options not Associated With Weights ""Assignee: StuDescribed in the design document this includes things like interleaving strategy, target duration. These aren‚Äôt related to the weightings, and are more similar to maxhosts.    Requirements:  - additional UI/REST/DB support for a collection of options.  - changes to distro.Distro""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5689","12/17/2018 16:48:34",1,"Add Method for Resolving Distro Scheduler Configuration from global defaults and local ""Requirements:  - A function that takes an *evergreen.Settings and *distor.Distro and returns a document that describes the weights.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5693","12/17/2018 16:48:35",2,"Produce Task Queue Items from task.Task items ""This process should create task queue items from the tasks that we get out of the task finder. This is also probably the right place to assign point values and do any additional look ups or preparation. This includes building the groups.'""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5692","12/17/2018 16:48:35",2,"New TaskFinder implementation to find all pending tasks for scheduling. ""We have multiple parallel implementations of this query/operation in the legacy system. The current task finders need to be changed to not filter out blocked dependent tasks.    It may also be useful to do something iterative here rather than our usual All() approach, so that we can have a more streaming approach between the task prioritizer and the task finder.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5691","12/17/2018 16:48:35",2,"Implement New Task Planner Process ""This is mostly just scaffolding:  - new package  - basic tests   - interfaces     The idea is that we need to tie together the logic that""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5697","12/17/2018 16:48:37",1,"Add Minimum Hosts Per Distro ""Requirements:  - Add a field to the distro that is minimum pool size (to complement current maxhosts).  - Add UI/REST interfaces to this value  - Change the idle-host termination query to not terminate idle hosts if it would mean putting a host pool below the minimum number of hosts.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5702","12/18/2018 19:11:58",1,"Build page not rendering correctly in Ops Manager Kubernetes project ""It seems none of the build pages render correctly in the Ops Manager Kubernetes Project: [https://evergreen.mongodb.com/waterfall/ops-manager-kubernetes.]    For instance, on the following page I get multitudinous Javascript errors, variables aren't all substituted correctly and I can't restart tasks.    [https://evergreen.mongodb.com/version/ops_manager_kubernetes_b56d20a949830c3b2530a396594817a991a3ea9b]    !image-2018-12-18-19-10-55-317.png|width=1137,height=660!""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5703","12/18/2018 20:34:24",2,"Triggering based on command doesn't work ""https://evergreen.mongodb.com/task/mci_generate_generate_config_45ee6f1e790a2fdf28a7d6acaf61c2ffc1da9629_b3ee817a9733cdca55b20fbbd77c41e6_18_12_17_15_58_20""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5706","12/19/2018 18:17:10",2,"Display Task with 'setup-failed' children still show success ""I'm seeing an issue where I have some tasks under a display task, several of the tasks have failed with """"setup-failed"""", but the display task as a whole shows """"success"""".    https://evergreen.mongodb.com/task/mongodb_mongo_master_hot_backups_rhel_70_64_bit_display_noPassthrough_patch_c70f14205a0cf7de5cfd48e6138c48a9c8f1aa72_5c1a744e2a60ed3e8c7c300a_18_12_19_16_40_00""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5707","12/19/2018 19:25:32",2,"Increase rate at which we delete logkeeper data to match TTL ""Currently we delete 5 per second. This will cause us to delete the backlog in 115 days. We should target something faster this than, perhaps on the order of a few weeks.""","",0,0,0,1,0,0,0,0,0,0,0,0,0,1,0
"EVG-5708","12/20/2018 16:45:34",1,"Comment out the task create_time migration hook ""The migration hook to update task create_time values for patch builds (EVG-5409) should be commented out.    While running it again would not modify documents, it would iterate over all the tasks in the database.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-5711","12/20/2018 20:50:45",2,"Patch is missing base tasks for some tasks ""https://evergreen.mongodb.com/version/5c1be2c6e3c3312b34ac86c8""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-5712","12/20/2018 22:01:43",2,"Task page links to incorrect patch (but seemingly runs with correct one) ""[This Evergreen task|https://evergreen.mongodb.com/task/genny_archlinux_t_integration_test_standalone_patch_3ce75fabfb135c519955daf72e1df28619c60397_5c1bc3d5c9ec4427483ce69b_18_12_20_16_31_19] links to following {{/filediff}} endpoints:    * https://evergreen.mongodb.com/filediff/5c1bc3d5c9ec4427483ce69b?patch_number=0  * https://evergreen.mongodb.com/filediff/5c1bc3d5c9ec4427483ce69b/?file_name=src%2Fresmokeconfig%2Fgenny_standalone.yml&patch_number=0    The changes to {{resmokeconfig/genny_standalone.yml}} are blank because the diff being displayed is actually from [10gen/genny#68|https://github.com/10gen/genny/pull/68] rather than [10gen/genny#64|https://github.com/10gen/genny/pull/64].""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5714","12/21/2018 16:12:42",2,"testResults start and end types should be time.Time and not floats ""should include unsetting this data, (writing a migration,) and removing it from the model. ""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5716","12/21/2018 20:39:30",2,"History drawer takes many seconds to load ""The /history/tasks/<task_id>/surround endpoint is returning data very slowly. Tasks I've checked from the mci and mongodb-mongo-master projects returned data in between 4 and 12 seconds.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5719","12/27/2018 22:51:00",2,"Retries from running generate.tasks command may cause system failures ""The {{generate.tasks}} command sent by https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_rhel_62_64_bit_majority_read_concern_off_aggregation_expression_multiversion_fuzzer_gen_c6cfa0ce672fc10ac571b40f74502dcab2d0138e_18_12_27_20_23_32/0 failed due to the generated tasks already existing (likely as a result of racing with an earlier {{generate.tasks}} attempt). This leads to an unfortunate behavior where the display task we use to represent the combination of the task running the {{generate.tasks}} command the generated tasks to show up as purple despite all of the generated task succeeding. It would be nice if the retries could know that they failed as a result of an earlier attempt succeeding and suppressing this error.    ""","  [2018/12/27 20:33:37.640] Running command 'generate.tasks' in """"generate fuzzer tasks"""" (step 1.6 of 1)  [2018/12/27 20:34:41.309] Command failed: Problem posting task data: problem sending `generate.tasks` request: server returned 400 ({    """"status"""": 400,    """"error"""": """"generated project is invalid: cannot redefine tasks in 'generate.tasks' (aggregation_expression_multiversion_fuzzer_1_enterprise-rhel-62-64-bit-majority-read-concern-off)    cannot redefine tasks in 'generate.tasks' (aggregation_expression_multiversion_fuzzer_4_enterprise-rhel-62-64-bit-majority-read-concern-off)    cannot redefine tasks in 'generate.tasks' (aggregation_expression_multiversion_fuzzer_5_enterprise-rhel-62-64-bit-majority-read-concern-off)    cannot redefine tasks in 'generate.tasks' (aggregation_expression_multiversion_fuzzer_6_enterprise-rhel-62-64-bit-majority-read-concern-off)    cannot redefine tasks in 'generate.tasks' (aggregation_expression_multiversion_fuzzer_9_enterprise-rhel-62-64-bit-majority-read-concern-off)    cannot redefine tasks in 'generate.tasks' (aggregation_expression_multiversion_fuzzer_0_enterprise-rhel-62-64-bit-majority-read-concern-off)    cannot redefine tasks in 'generate.tasks' (aggregation_expression_multiversion_fuzzer_2_enterprise-rhel-62-64-bit-majority-read-concern-off)    cannot redefine tasks in 'generate.tasks' (aggregation_expression_multiversion_fuzzer_3_enterprise-rhel-62-64-bit-majority-read-concern-off)    cannot redefine tasks in 'generate.tasks' (aggregation_expression_multiversion_fuzzer_7_enterprise-rhel-62-64-bit-majority-read-concern-off)    cannot redefine tasks in 'generate.tasks' (aggregation_expression_multiversion_fuzzer_8_enterprise-rhel-62-64-bit-majority-read-concern-off)""""  }  )  ",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5722","12/28/2018 17:12:55",1,"Failed: coverage on Coverage [Evergreen Self-Tests @ 10447745]  "" h2. [coverage failed on Coverage|https://evergreen.mongodb.com/task/mci_coverage_coverage_104477457d4f8e3b63285a70df65f512dca6047e_18_12_28_15_09_31/0] Host: [ec2-3-84-93-49.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-f9ti662h] Project: [Evergreen Self-Tests|https://evergreen.mongodb.com/waterfall/mci] Commit: [diff|https://github.com/evergreen-ci/evergreen/commit/104477457d4f8e3b63285a70df65f512dca6047e]: EVG-5669 Fix lint Evergreen Subscription: ; Evergreen Event:   ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-8601","12/31/2018 00:58:31",1,"add conditional Add method to grip.Catcher interface ""just like grip methods have When methods for conditional logging, the Catcher interface should have additional conditional methods so that we can have more sophisticated add-error logic ""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8650","12/31/2018 00:58:32",1,"small fixes for the xmpp sender ""- make the xmpp sender's reset method not override the sender. - ensure xmpp (and no other sender) uses s.formater directly and instead calls the Formater public method. - the tls/ssl fallback doesn't work. ""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8575","12/31/2018 00:58:34",1,"direct error creation methods on catcher interface ""add methods/wrappers to support error creation in the catcher.  New(string) Errorf(string, ...interface{}) Wrap(err, string) Wrapf(err, string) ""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8530","12/31/2018 00:58:35",1,"streaming collector interfaces for writing json and bson ""this is just to support using the collector interface to create uncompressed payloads to support easier client-side post-processing methods. ""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8730","12/31/2018 00:58:36",1,"{amboy.RunJob(context.Context) error} helper function ""- to make it easier to run jobs outside of a queue. - add logging about runtime ""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8691","12/31/2018 00:58:37",2,"dependency with callback style checks ""the current dependency system in amboy doesn't provide any basic way to have a dependency that's blocked until specified jobs are complete.  there should be single-system queue (where in-memory approaches work), and more function-object-ish approaches can work ""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8784","12/31/2018 00:58:38",2,"improve shell job for amboy ""the current shell job is adequate, but difficult to use in more complicated situations:  would be nice to have support for: - run group with continue on error - abort on error (but ignore error) - parallel run group  as well as with configuration for output (e. g. write to file, pass to logger, etc.) ""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8760","12/31/2018 00:58:39",2,"add support for multi-function/multi-actor benchmarks ""should support: - run one function many times concurrently per iteration - run mixed groups of benchmark functions concurrently ""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-5723","01/02/2019 14:09:10",2,"Some OS X machines appear to always be system-unresponsive ""See, for example, the machines for the purple tasks in this build https://evergreen.mongodb.com/build/mci_osx_f952af4fa5aa2c9ac0bb5b8e2aac265110b4a984_18_12_31_20_13_59, among them, macos-1012-93.macstadium.build.10gen.cc,  macos-1012-38.macstadium.build.10gen.cc, macos-1012-78.macstadium.build.10gen.cc.""","",0,0,0,0,0,0,0,1,0,1,0,0,0,0,0
"EVG-5724","01/02/2019 15:05:44",1,"mci-token should set expiration date in the future ""[~jonathan.brill] is logged out of Evergreen daily, and we're not sure why. We noticed that the authentication token cookie sets an expiration date in the past, and this potentially could be deleted by something (an extension?). We should set an expiration for the token in the future.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5727","01/02/2019 18:42:39",1,"Cannot restart tasks with version restart modal ""The validator says """"Select at least one task to restart"""", and I cannot click the button.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5731","01/03/2019 15:24:51",1,"Layout of the degraded mode flags is messed up "" !image-2019-01-03-10-24-44-624.png|thumbnail! ""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-5735","01/04/2019 14:31:38",2,"Timed out task should display as red, not lavender ""https://evergreen.mongodb.com/task/mongosql_auth_c_full_matrix__os~windows_32_integration_tests_plain_6909fd596edb18a1f66b168d2ccabbc21ca48396_f7da0b94ad16d13746871917c6addb76_19_01_03_22_52_31""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-5738","01/07/2019 17:18:11",2,"Link on build-spawned host doesn't work ""https://evergreen.mongodb.com/host/i-0d764010b961b97b2""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-5741","01/08/2019 21:58:53",1,"Skipped tests are counted as failed tests in the test stats API ""Currently the background job that pre-computes the historical test stats does not handle the skip status and treats all the test results with a status different from 'pass' as being failed.    At minima the results shouldn't be counted as failed tests.    We might also want to include the count of skipped tests in the stats.    ¬†    Similarly we don't handle the silentfail status but since we currently only use it to display the failure differently in the UI, counting them as failures makes sense.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5742","01/08/2019 22:55:47",1,"Remove logger from REST interface ""Remove logger from REST interface""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5743","01/08/2019 22:55:58",2,"Add configuration for senders ""Add configuration for senders""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5747","01/08/2019 22:56:34",2,"Upload file logs to S3 ""Upload file logs to S3""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5748","01/08/2019 22:56:43",2,"Connect sender implementations to agent ""Connect sender implementations to agent""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5749","01/08/2019 22:56:50",1,"Dogfood all 4 loggers with Evergreen ""Dogfood all 4 loggers with Evergreen""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5750","01/08/2019 22:57:02",0,"Link to file logs in UI ""Link to file logs in UI""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5751","01/08/2019 22:57:09",2,"Link to Logkeeper logs in UI ""Link to Logkeeper logs in UI""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8339","01/10/2019 19:33:34",1,"Check for s3 bucket should not require bucket ownership ""Currently, the [Check|https://github.com/evergreen-ci/pail/blob/master/s3_bucket.go#L177] method for the s3 bucket implementation does a GetBucketLocation request which requires bucket ownership. ""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-5754","01/11/2019 14:38:11",2,"Restart task modal should give some indication that it's doing work when restart button is clicked ""When restarting a task if there is a delay in response it's unclear to a user if their action was registered or not. Sometimes waiting for multiple seconds and only then getting feedback once the request to restart tasks was successfully completed.    When I press restart the UI should provide a loading spinner or some other obvious animation that indicates that my click was registered and it's waiting on response from the server. As it stands since it does nothing sometimes a user will assume the click was not registered and hit restart multiple times. This leads to weird errors and states where some tasks have 3 - 4 multiple executions despite user intent to only restart once.""","",0,1,0,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-5757","01/14/2019 18:47:46",2,"Unable to view compile task on task timing page ""The changes from EVG-5522 and EVG-5608 addressed the shortcomings of [the task timing page|https://evergreen.mongodb.com/task_timing/mongodb-mongo-master#/project=mongodb-mongo-master&buildVariant=enterprise-rhel-62-64-bit&taskName=compile&requester=gitter_request&limit=50&onlySuccessful=false] after the introduction of display tasks; however, it appears there are still issues when the task is part of a task group. I'd like to be able to select the {{compile}} task and see how long it takes over time.""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-8434","01/16/2019 03:25:34",2,"reexamine gprc vendoring situation ""update probably makes it possible to drop some/all of x/net?     also make cedar and curator match in terms of grpc versions.     also jasper.    ""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-5759","01/17/2019 14:24:36",1,"Add configuration option to setup_group to fail task if setup_group fails ""https://evergreen.mongodb.com/task/mongodb_mongo_v4.0_enterprise_osx_1010_mmapv1_compile_58d80a26224da882cbe30d301ed295c302515c9b_19_01_12_23_59_30 kept running after failing to clone the enterprise module. I'm not sure if this is a misbehavior of the {{git.get_project}} command itself, or related to how the command is [called during the {{setup_group}} phase of a task group|https://github.com/mongodb/mongo/blob/58d80a26224da882cbe30d301ed295c302515c9b/etc/evergreen.yml#L254].    ""","  [2019/01/14 00:08:14.587] + cd src  [2019/01/14 00:08:14.587] + git reset --hard 58d80a26224da882cbe30d301ed295c302515c9b  [2019/01/14 00:08:14.587] + set -o errexit  [2019/01/14 00:08:14.587] + git clone git@github.com:10gen/mongo-enterprise-modules.git src/mongo/db/modules/enterprise  [2019/01/14 00:08:44.713] Cloning into 'src/mongo/db/modules/enterprise'...  [2019/01/14 00:08:44.713] ssh: Could not resolve hostname github.com: nodename nor servname provided, or not known  [2019/01/14 00:08:44.714] fatal: Could not read from remote repository.  [2019/01/14 00:08:44.714] Please make sure you have the correct access rights  [2019/01/14 00:08:44.719] and the repository exists.  [2019/01/14 00:08:44.719] HEAD is now at 58d80a2 SERVER-37775 Add Community RHEL7 s390x  [2019/01/14 00:08:44.719] Command failed: problem with git command: exit status 128  [2019/01/14 00:08:44.719] Running command 'shell.exec' in """"get modified patch files"""" (step 8 of 14)  ...  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5761","01/17/2019 20:34:44",1,"The BB plugin is not displayed on a display task page with status 'test-timed-out' ""The BB plugin is only shown for tasks that have a status set to {{'failed'}}. See check [here|https://github.com/evergreen-ci/evergreen/blob/887f2a477cb2556a8c59cdbcb26ab6503ccedb32/public/static/plugins/buildbaron/partials/task_build_baron.html#L3].    But display tasks that have an execution task that has failed because of a test timeout have a status set to '{{test-timed-out}}' so the plugin does not appear.    The execution task itself has a status set to '{{failed}}' and its page shows the plugin.    Note: There are other places where the task status is compared to '{{failed}}' in the UI so other features could be similarly impacted.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5762","01/17/2019 21:27:44",0,"Support jira oauth ""See linked tickets for more info.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8344","01/17/2019 23:09:01",2,"refactor and write tests for aviation ""use gimlet as a guide, feel free to refactor a bunch    also import/steal chain_test.go from https://github.com/grpc-ecosystem/go-grpc-middleware""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-5764","01/22/2019 15:08:27",1,"error inserting task for build, apparently related to triggers ""  ¬†""","   E11000 duplicate key error collection: mci.tasks index: _id_ dup key: { : """"mongosql_auth_c_full_matrix__os~windows_64_compile_c08cd274c5a17388821b72d8c20f15a3ffdf7375_f7da0b94ad16d13746871917c6addb76_19_01_22_14_40_04"""" } error inserting task for build 'mongosql-auth-c_full_matrix__os~windows-64_c08cd274c5a17388821b72d8c20f15a3ffdf7375_f7da0b94ad16d13746871917c6addb76_19_01_22_14_40_04' github.com/evergreen-ci/evergreen/model.CreateBuildFromVersion /data/mci/5e30f13f8c71493a9b0075c35e560e58/gopath/src/github.com/evergreen-ci/evergreen/model/lifecycle.go:556 github.com/evergreen-ci/evergreen/repotracker.createVersionItems /data/mci/5e30f13f8c71493a9b0075c35e560e58/gopath/src/github.com/evergreen-ci/evergreen/repotracker/repotracker.go:733 github.com/evergreen-ci/evergreen/repotracker.CreateVersionFromConfig /data/mci/5e30f13f8c71493a9b0075c35e560e58/gopath/src/github.com/evergreen-ci/evergreen/repotracker/repotracker.go:612 github.com/evergreen-ci/evergreen/trigger.TriggerDownstreamVersion /data/mci/5e30f13f8c71493a9b0075c35e560e58/gopath/src/github.com/evergreen-ci/evergreen/trigger/project_triggers.go:54 github.com/evergreen-ci/evergreen/trigger.triggerDownstreamProjectsForTask /data/mci/5e30f13f8c71493a9b0075c35e560e58/gopath/src/github.com/evergreen-ci/evergreen/trigger/process.go:199 github.com/evergreen-ci/evergreen/trigger.EvalProjectTriggers /data/mci/5e30f13f8c71493a9b0075c35e560e58/gopath/src/github.com/evergreen-ci/evergreen/trigger/process.go:110 github.com/evergreen-ci/evergreen/units.tryProcessOneEvent /data/mci/5e30f13f8c71493a9b0075c35e560e58/gopath/src/github.com/evergreen-ci/evergreen/units/event_metajob.go:124 github.com/evergreen-ci/evergreen/units.(*eventMetaJob).dispatchLoop /data/mci/5e30f13f8c71493a9b0075c35e560e58/gopath/src/github.com/evergreen-ci/evergreen/units/event_metajob.go:150 github.com/evergreen-ci/evergreen/units.(*eventMetaJob).Run /data/mci/5e30f13f8c71493a9b0075c35e560e58/gopath/src/github.com/evergreen-ci/evergreen/units/event_metajob.go:236 github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool.runJob /data/mci/5e30f13f8c71493a9b0075c35e560e58/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool/helpers.go:28 github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool.executeJob /data/mci/5e30f13f8c71493a9b0075c35e560e58/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool/helpers.go:58 github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool.handleJob /data/mci/5e30f13f8c71493a9b0075c35e560e58/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool/helpers.go:34 github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool.(*abortablePool).runJob /data/mci/5e30f13f8c71493a9b0075c35e560e58/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool/abortable.go:174 github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool.(*abortablePool).worker /data/mci/5e30f13f8c71493a9b0075c35e560e58/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool/abortable.go:148 runtime.goexit /opt/go1.8/go/src/runtime/asm_amd64.s:2197",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-9177","01/22/2019 19:37:08",1,"Test cedar service send ""Use poplar to test cedar service, write a test that gets a curator binary and runs poplar send with yaml file of arguments. ""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-9089","01/22/2019 19:37:56",2,"Improve testing in cedar ""Look through tests and make them more thorough and robust.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-8345","01/23/2019 17:09:20",1,"rest endpoints for generating client certificates ""vendor cert strap, and use it to generate a client cert for a user, as in the api key generation""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8433","01/23/2019 17:09:23",2,"move certificates into the database ""- include the ability to import certs from files if they've changed from the one in the database. - send alerts if the cert changes and needs to be reloaded - generate certs if none exist. - add configuration about the common name, expiration, etc to the config in the database. ""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8430","01/23/2019 17:09:24",1,"support for cookie authentication in cedar application ""- allow user settable token (to share evergreen cookie?) - add cookies to requests using the mechanism from evergreen ""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8509","01/23/2019 17:09:25",1,"add cookie attaching middlware to gimlet ""this component is currently in evergreen, but should be generic. ""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-5769","01/23/2019 17:49:47",1,"Host that failed to provision ran a task anyway ""A host (https://evergreen.mongodb.com/host/sir-k7f87rnh)  1. failed to provision  2. then the status changed to decommissioned by mci  3. 3 seconds later the status changed from decommissioned to running by mci again  4. then an agent was deployed and a task started    The task may have failed because the setup script ran twice.    ""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5771","01/24/2019 15:04:39",2,"New project was not set up with webhooks installed ""A new project was added to Evergreen, genny-toolchain, but it did not have """"Enable Github Webhooks"""" checked. Since this is not visible by project admins, we should have a mechanism for enabling GitHub webhooks for a new project. We could, for example, install the webhook secret if the repository name changes. Or we could display the button if a webhook is not set up for the project, and allow a user to check it. In general though it is a problem if projects are set up by default without webhooks installed, since this means that commits will be slow to be picked up by Evergreen.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-9264","01/24/2019 16:58:43",1,"Add a method for creating Commands on Manager ""We should add a method to the {{Manager}} interface that lets us create {{Command}}'s, similar to the pre-existing {{Create()}} method.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-5780","01/25/2019 16:24:28",2,"Delete logkeeper logs by build instead of by test ""Currently, although we [delete|https://github.com/evergreen-ci/logkeeper/blob/6223635e82a033d52287d1023b5be5b936c428cc/schema.go#L194] data by build, we [find|https://github.com/evergreen-ci/logkeeper/blob/6223635e82a033d52287d1023b5be5b936c428cc/schema.go#L135] it by test, which may be a bottleneck in the logkeeper delete job. We should instead find by build, and [set|https://github.com/evergreen-ci/logkeeper/blob/6223635e82a033d52287d1023b5be5b936c428cc/schema.go#L122] the failed field on the build document instead.""","",0,0,0,1,0,0,0,0,0,0,0,0,0,1,0
"EVG-5773","01/25/2019 19:07:59",1,"shell.exec silent should suppress stdout and stderr ""If you set {{silent: true}} in {{shell.exec}}, Evergreen will not print the script it is executing. However, it will also not suppress standard output and standard error. {{subprocess.exec}} handles this correctly. {{shell.exec}} should as well, probably by setting the ignore stdout and ignore stderr variables.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5776","01/25/2019 21:24:29",1,"""no entry found for host"" errors in logs ""Every few hours there is a burst of hundreds of these errors, which makes the notification for increased error rate noisy.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8337","01/28/2019 23:03:52",1,"Gimlet LDAP returning error even if user is authenticated in service group ""Small bug in gimlet LDAP where if a user is in the service group but not the user group, it returns an error.    [code here|https://github.com/evergreen-ci/gimlet/blob/223d02e0354561f1500f12d7b1239c65fb03e2ec/ldap/ldap.go#L349-L353]""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-9190","01/29/2019 21:17:08",1,"Include .exe extension for Windows binary ""The [Jasper integration into resmoke.py|https://jira.mongodb.org/browse/SERVER-38136] requires the curator binary to be named curator.exe for Windows compatibility due to [this line which expects a .exe extension|https://github.com/mongodb/mongo/blob/9c83ead9257d0d41d7b7ec92adf441bf34b0c3a8/buildscripts/resmokelib/core/process.py#L98-L99].""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-5785","01/29/2019 21:54:57",1,"Requesting a build's tasks, when that build has no tasks, returns 404 ""Build:    https://evergreen.mongodb.com/api/rest/v2/builds/ops_manager_kubernetes_release_operator_e58808157491c7cf963d3e4406cbe82da53b6f57_19_01_29_11_17_24    Tasks:  https://evergreen.mongodb.com/api/rest/v2/builds/ops_manager_kubernetes_release_operator_e58808157491c7cf963d3e4406cbe82da53b6f57_19_01_29_11_17_24/tasks    Acceptance Criteria:  The above tasks request returns a success code and empty list. ""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8829","01/30/2019 22:13:06",1,"Failures: lint on Race Detector (Arch Linux) [Curator @ f94301ba] (lint-curator, lint-operations) ""h2. [lint failed on Race Detector (Arch Linux)|https://evergreen.mongodb.com/task/curator_race_detector_lint_f94301ba7c73460c15321d62f21262d098241726_19_01_30_21_54_34/0]  Host: [ec2-54-158-164-127.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-a9cg6h2g]  Project: [Curator|https://evergreen.mongodb.com/waterfall/curator]  Commit: [diff|https://github.com/mongodb/curator/commit/f94301ba7c73460c15321d62f21262d098241726]: MAKE-627: certificate cleanup (#32) | 30 Jan 19 21:54 UTC  Evergreen Subscription: ; Evergreen Event:   *lint-curator* - [Logs|https://evergreen.mongodb.com/test_log/5c5220319ccd4e450db552b4] | [History|https://evergreen.mongodb.com/task_history/curator/curator_race_detector_lint_f94301ba7c73460c15321d62f21262d098241726_19_01_30_21_54_34#lint-curator=fail]  *lint-operations* - [Logs|https://evergreen.mongodb.com/test_log/5c5220319ccd4e450db552b4] | [History|https://evergreen.mongodb.com/task_history/curator/curator_race_detector_lint_f94301ba7c73460c15321d62f21262d098241726_19_01_30_21_54_34#lint-operations=fail]    ""","",0,0,0,0,1,0,0,0,0,0,0,0,1,0,0
"EVG-9250","01/31/2019 20:34:28",2,"Support Windows job objects ""resmoke has special logic for Windows process management using job objects (e.g. [process initialization|https://github.com/mongodb/mongo/blob/8d23154ed3e086213c5bd59b3e2fcba96a3cca41/buildscripts/resmokelib/core/process.py#L53-L85] and [process termination|https://github.com/mongodb/mongo/blob/8d23154ed3e086213c5bd59b3e2fcba96a3cca41/buildscripts/resmokelib/core/process.py#L156-L201]). In order for Jasper to be used on Windows machines and ensure it terminates all processes, it needs logic to handle job objects as well.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-9063","02/01/2019 15:18:26",2,"add hook for pre-termination ""maybe specifically pre-signal? to support being able to do windows event object and/or clean shut down. probably should resemble triggers?""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-9315","02/01/2019 19:24:35",1,"Write tests for Depot interface ""Now that we have a mongo backed implementation of certstrap's Depot interface, we should write a generic test for the interface and test it against both mongo and certstrap's file system backed implementation.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-8359","02/01/2019 19:26:17",2,"create grpc server infrastructure ""wrap server creation currently in use in the cedar/rpc package into generally reusable functions in aviation.  ""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8498","02/01/2019 19:26:19",1,"handle certificate revocation and validation ""we currently have no mechanism in our GRPC/cedar application stack to validate that users associated with a certificate are valid users of the system.  it seems possible that we would have a user that would be deactivated in ldap that would have a valid certificate, so we'd want to check in sometimes. ""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8420","02/01/2019 19:26:20",2,"tests for client side TLS configuration ""the poplar client in curator has some TLS configuration. It might be nice to package this up in a form that could be reusable externally, and also it would be good to add some testing. ""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8492","02/01/2019 19:26:21",2,"python library for cedar interaction ""may make sense to put this up as evergreen-ci/cedar.py and include some kind of easy wrapper around the poplar metrics rpc api as well as cedar directly.  should also include getting certificates without needing the cedar binary. ""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-5793","02/01/2019 19:26:22",2,"use pprof from gimlet ""recently we moved some of the pprof handling infrastructure into gimlet, so we should use that in evergreen and remove the legacy copy of this code. ""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-8381","02/01/2019 19:26:23",2,"add additional queue infrastructure to cedar application ""we should have a message buffering queue for sending messages to slack and use the queue to buffer those messages  we should also have a local queue for process local operations (machine stats mostly,)  worker pools should be abortable unless they need to be ratelimited.   additionally if we can add reporter and management interfaces.  ""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8931","02/01/2019 20:24:14",1,"provide common implementation for http.Server creation ""currently we don't create a special web server, and should probably move the http server creation out of evergreen and into gimlet. ""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-5797","02/04/2019 19:33:27",2,"Multiple instances of curl running when deploying evergreen agent to hosts  ""I found this happening on one of the static s390x boxes        Running curl in parallel to get the same file slows down the already slow network even more and can potentially corrupt the agent.""","[mci-exec@ubuntu1804-z-8.dallasisv.build ~]$ ps -ef | grep ever  mci-exec 52818 52817  0 15:16 pts/2    00:00:00 bash -c cd ~ && curl -LO 'https://evergreen.mongodb.com/clients/linux_s390x/evergreen' && chmod +x evergreen  mci-exec 52819 52818  0 15:16 pts/2    00:00:00 curl -LO https://evergreen.mongodb.com/clients/linux_s390x/evergreen  mci-exec 53044 53005  0 15:16 pts/3    00:00:00 bash -c cd ~ && curl -LO 'https://evergreen.mongodb.com/clients/linux_s390x/evergreen' && chmod +x evergreen  mci-exec 53045 53044  0 15:16 pts/3    00:00:00 curl -LO https://evergreen.mongodb.com/clients/linux_s390x/evergreen  mci-exec 53524 53523  0 15:17 pts/4    00:00:00 bash -c cd ~ && curl -LO 'https://evergreen.mongodb.com/clients/linux_s390x/evergreen' && chmod +x evergreen  mci-exec 53525 53524  0 15:17 pts/4    00:00:00 curl -LO https://evergreen.mongodb.com/clients/linux_s390x/evergreen  mci-exec 53595 53594  0 15:17 pts/1    00:00:00 bash -c cd ~ && curl -LO 'https://evergreen.mongodb.com/clients/linux_s390x/evergreen' && chmod +x evergreen  mci-exec 53596 53595  1 15:17 pts/1    00:00:00 curl -LO https://evergreen.mongodb.com/clients/linux_s390x/evergreen",0,0,0,0,0,0,1,0,0,1,0,0,0,0,0
"EVG-5800","02/05/2019 15:41:35",2,"Patch command hangs for a specific diff ""If you try to patch the attached diff to mongodb-4.0 with the following command, we time out querying the github API              ""","  evergreen patch -t all -v all -p mongodb-mongo-v4.0 -y -f --browse    could not find base revision 'caa42a1f75a56c7643d0b68d3880444375ec42e3' for project 'mongodb-mongo-v4.0': API response error: problem querying repo mongodb/mongo for caa42a1f75a56c7643d0b68d3880444375ec42e3: context canceled  error processing patch  github.com/evergreen-ci/evergreen/service.(*APIServer).submitPatch   /data/mci/bd9640f3ed14ad93652d6b9b948b3306/gopath/src/github.com/evergreen-ci/evergreen/service/api_patch.go:97  github.com/evergreen-ci/evergreen/service.(*APIServer).(github.com/evergreen-ci/evergreen/service.submitPatch)-fm   /data/mci/bd9640f3ed14ad93652d6b9b948b3306/gopath/src/github.com/evergreen-ci/evergreen/service/api.go:499  net/http.HandlerFunc.ServeHTTP   /opt/go1.8/go/src/net/http/server.go:1942  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8972","02/07/2019 15:24:37",2,"write generic local authentication implementation  ""something in memory, like the native auth, or perhaps something that hits the database internally, but that doesn't depend on an external service. should be good for testing as well as basic experiences. ""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-5806","02/07/2019 16:46:22",1,"Add endpoint to see processes killed by OOM killer ""Take the business logic of EVG-5419 and create a usable API endpoint that will track OOM killer information on applicable systems.""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5809","02/08/2019 15:21:13",1,"Duplicate Notifications on Patch Completion ""I signed up for Slack alerts when my patches complete. Sometimes I get duplicate alerts for the same patch.    Judging from the notification, it seems there are two events generated for the same patch completion.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8899","02/08/2019 17:51:37",2,"Add pre-signal trigger for Windows events ""A pre-signal trigger must be written to indicate to a Windows mongod process that it is about to be signaled for termination (e.g. SIGTERM, SIGKILL). This is necessary to support clean termination in resmoke.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-5810","02/08/2019 19:02:07",1,"Fix Final GitHub Status ""GItHub doesn't show the final status for the merge (merge succeeded/failed) event though the API shows it.    e.g. [https://github.com/evergreen-ci/evergreen/pull/2003]¬†and    curl -H """"Authorization: token xxxxxxxxxxxxx"""" https://api.github.com/repos/evergreen-ci/evergreen/commits/c7df04ff574f6958516802c54310392dd55fb785/statuses""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5811","02/11/2019 15:22:03",2,"Check user's GitHub permissions ""Before kicking off the commit queue in response to a user's comment, check the user's permissions to make sure they're authorized to:   # run a patch on Evergreen   # merge a commit    See [https://help.github.com/articles/repository-permission-levels-for-an-organization/]    and¬†https://developer.github.com/v3/repos/collaborators/#review-a-users-permission-level""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5812","02/11/2019 15:24:57",2,"Monitor Commit Queue progress ""If a merge gets stuck remove it from the queue so the queue doesn't block.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5813","02/11/2019 15:32:11",2,"Check the SHA being merged ""Ensure the SHA being merged matches the SHA of the commit that was tested.    If a new commit is pushed to the PR while after the commit queue has started testing the PR the merge should be aborted.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5815","02/11/2019 20:26:17",2,"Indicate in Jira tickets that a task is a system timeout ""This will allow the server team to better be able to route BFs.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5817","02/11/2019 21:43:43",1,"System unresponsive tasks are colored incorrectly ""It looks like they are not colored and so get the default. On the build page, this makes them blue. On the task page, this makes them gray.    Example build https://evergreen.mongodb.com/build/mongodb_mongo_master_linux_64_debug_691ab6da0c38f52f32c1028a8fa7447997ced255_19_02_11_19_59_38  Example task https://evergreen.mongodb.com/task/mongodb_mongo_master_linux_64_debug_display_noPassthrough_691ab6da0c38f52f32c1028a8fa7447997ced255_19_02_11_19_59_38""","",0,1,0,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-5822","02/12/2019 18:49:29",1,"Javascript error editing an existing subscription ""When editing a subscription in project settings    TypeError: """"$scope.extraData is undefined""""      closeDialog subscriptions.js:109  fn7Angular angular.js:14700:15""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-8953","02/12/2019 22:46:56",1,"Fix duplicate symbol error due to gopsutil vendor ""Duplicate symbol error: https://github.com/mongodb/grip/blob/8b8accd7a3ec9b31a2d3eea610d5bf906bddfd11/vendor/github.com/shirou/gopsutil/disk/disk_darwin_cgo.go#L6-L25""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-5825","02/13/2019 14:50:09",2,"Can't restart tasks in ops manager kubernetes project ""On any given commit, e.g. [https://evergreen.mongodb.com/version/ops_manager_kubernetes_f8d64ec6838a36a3a25b1c9382d07ee0c15474b0], restarting tasks doesn't appear to work. The restart button does nothing when clicked aside from causing a console error of the form 'TypeError: """"x.Build.tasks is undefined""""'‚Äîscreenshot attached. Current config available on github:¬†[https://github.com/10gen/ops-manager-kubernetes/blob/f8d64ec6838a36a3a25b1c9382d07ee0c15474b0/.evergreen.yml]""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-5826","02/13/2019 15:22:57",1,"Task Failure Emails Contain Broken Log Links ""All the links to """"view logs"""" in our evergreen task failure emails start with {{http://test_log/...}}, which understandably doesn't resolve. Interestingly, the """"view task"""" link does correctly point to {{https://evergreen.mongodb.com/task/...}}. Example email attached.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5827","02/13/2019 15:40:14",1,"lobster button is cut off by window border ""It appears that the """"Clear Cache"""" button positioning is using the window size to position the center of the button instead of the right edge of the button, which causes half the button to be off the side of the browser window, no matter how you size it.""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-8438","02/13/2019 15:50:11",2,"Download tests can race ""The failing test is DownloadMongoDBPassesWithValidOptions: https://github.com/mongodb/jasper/blob/00087cb560867641fb26ac672c93ef75181ac787/rest_test.go#L617-L629    Example failing test: https://evergreen.mongodb.com/task/jasper_race_detector_race_patch_00087cb560867641fb26ac672c93ef75181ac787_5c64365132f417543a336a3a_19_02_13_15_22_58/0    Logs: https://evergreen.mongodb.com/test_log/5c643805850e61491d386a2c#L1172    This seems to be an issue in Amboy, but will need investigation.""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-5916","02/13/2019 16:23:56",2,"System failed tasks not automatically restarting ""(no logs)  Examples:  https://evergreen.mongodb.com/task/mms_int_INT_JAVA_MMS_f2617606cc8712a1b504c48d55da4362bb3d9f08_19_02_13_07_05_36/0  https://evergreen.mongodb.com/task/mms_e2e_local_E2E_Local_ATM_Import_Automation_f2617606cc8712a1b504c48d55da4362bb3d9f08_19_02_13_07_05_36/0  https://evergreen.mongodb.com/task/mms_qa_unit_js_UNIT_JS_LINT_0e2bb63df97f3cdb3d8a9266959641d0abd6628e_19_02_13_22_49_27/0  https://evergreen.mongodb.com/task/mms_int_INT_JAVA_MMS_dea07a34958161b894578690fab38fa955214d64_19_02_22_20_37_18/0""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5828","02/13/2019 16:39:09",1,"Regular ""task failure"" subscription even type should allow failure type filter ""Currently this filter is only available on """"a previously passing test fails"""".""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8415","02/14/2019 22:00:33",1,"Propagate rollup type in poplar ""Rollup type should be exported [here|https://github.com/evergreen-ci/poplar/blob/master/rpc/internal/cedar.ext.go#L49-L70].""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8493","02/14/2019 22:06:28",1,"Add mainline flag to Cedar model ""We should be able to distinguish a mainline build performance result and a path build performance result in the cedar database. In order to to do this we need to add a flag in the cedar performance result model and make sure that DSI is sending that information over (readily accessible via the `is_patch` expansion in DSI's runtime.yml).    ¬†    ¬†""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8389","02/14/2019 22:11:19",2,"Tests' created_at time and completed_at time ignored. ""DSI and poplar allow for passing in the created_at and completed_at time of a test, but cedar's data model does not store this information. This would probably be useful to store, I am assuming it would go [here|https://github.com/evergreen-ci/cedar/blob/master/model/perf.go#L174-L187]. We would also need to make sure the data is exported via rpc and propagated in poplar.""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-5835","02/14/2019 22:27:21",1,"Error when attempting to add ""previously passing task fails"" subscription ""I believe that the re-notify period should default to a value, but it is not set on the front end. Perhaps we should just pre-populate this value?""","",0,0,0,1,0,0,0,0,0,0,1,0,0,0,0
"EVG-8405","02/15/2019 05:52:27",1,"Gimlet PPROF routes invalid ""The failing tests in cedar are caused by a bug in gimlet, I ran the service locally and got the following error messages:  {quote}{{julianedwards$ ../../build/cedar service --dbName grpc_test}}{{[cedar] 2019/02/15 00:07:10 [p=info]: configured local queue with 2 workers}}{{[cedar] 2019/02/15 00:07:10 [p=info]: creating new remote job queue with 2 workers}}{{[cedar] 2019/02/15 00:07:10 [p=info]: [db='grpc_test' message='configured a remote mongodb-backed queue' prefix='ceder.service' priority='true']}}{{[cedar] 2019/02/15 00:07:10 [p=info]: [message='starting background cron jobs' opts='\{true false false}' started='map[remote:false local:false]' state='not populated' stats='map[remote:running='0', completed='0', pending='0', blocked='0', total='0' local:running='0', completed='0', pending='0', blocked='0', total='0']']}}{{[cedar] 2019/02/15 00:07:10 [p=debug]: [id='ceder.service.Julians-MacBook-Pro-2.local.7073d386-a4f8-4287-8379-01dab202c941' name='amboy-stats-collector-2019-02-15.00-07-00' operation='put job' service='amboy.queue.mgo']}}{{[cedar] 2019/02/15 00:07:10 [p=debug]: [change='&\{0 0 0 test-root}' coll='depot' db='certDepot' id='test-root' op='put']}}{{[cedar] 2019/02/15 00:07:10 [p=debug]: [change='&\{1 0 1 <nil>}' coll='depot' db='certDepot' id='test-root' op='put']}}{{[cedar] 2019/02/15 00:07:10 [p=debug]: [change='&\{1 0 1 <nil>}' coll='depot' db='certDepot' id='test-root' op='put']}}{{[cedar] 2019/02/15 00:07:10 [p=debug]: [change='&\{1 0 1 <nil>}' coll='depot' db='certDepot' id='test-root' op='put']}}{{[cedar] 2019/02/15 00:07:10 [p=debug]: [change='&\{1 0 1 <nil>}' coll='depot' db='certDepot' id='test-root' op='put']}}{{[cedar] 2019/02/15 00:07:11 [p=debug]: [change='&\{0 0 0 localhost}' coll='depot' db='certDepot' id='localhost' op='put']}}{{[cedar] 2019/02/15 00:07:11 [p=debug]: [change='&\{1 0 1 <nil>}' coll='depot' db='certDepot' id='localhost' op='put']}}{{[cedar] 2019/02/15 00:07:11 [p=debug]: [change='&\{1 0 1 <nil>}' coll='depot' db='certDepot' id='localhost' op='put']}}{{[cedar] 2019/02/15 00:07:11 [p=warning]: port is already set to 3000}}{{[cedar] 2019/02/15 00:07:11 [p=info]: [message='detected local rpc services' service='[]']}}{{[cedar] 2019/02/15 00:07:11 [p=debug]: running 2 workers}}{{[cedar] 2019/02/15 00:07:11 [p=debug]: started worker 1 of 2 waiting for jobs}}{{[cedar] 2019/02/15 00:07:11 [p=debug]: started worker 2 of 2 waiting for jobs}}{{[cedar] 2019/02/15 00:07:11 [p=info]: starting queue job server for remote queue}}{{[cedar] 2019/02/15 00:07:11 [p=warning]: -1 is not a valid version}}{{[cedar] 2019/02/15 00:07:11 [p=notice]: starting /rest on: :3000}}{{[cedar] 2019/02/15 00:07:11 [p=warning]: -1 is not a valid version}}{{[cedar] 2019/02/15 00:07:11 [p=warning]: -1 is not a valid version}}{{[cedar] 2019/02/15 00:07:11 [p=warning]: -1 is not a valid version}}{{[cedar] 2019/02/15 00:07:11 [p=warning]: -1 is not a valid version}}{{[cedar] 2019/02/15 00:07:11 [p=warning]: -1 is not a valid version}}{{[cedar] 2019/02/15 00:07:11 [p=warning]: -1 is not a valid version}}{{[cedar] 2019/02/15 00:07:11 [p=warning]: -1 is not a valid version}}{{[cedar] 2019/02/15 00:07:11 [p=warning]: -1 is not a valid version}}{{[cedar] 2019/02/15 00:07:11 [p=warning]: -1 is not a valid version}}{{[cedar] 2019/02/15 00:07:11 [p=emergency]: problem starting admin rest service: r='/debug/pprof/', v='-1', methods=[GET], defined=false, prefixOverride=false is not a valid route, skipping}}{{r='/debug/pprof/heap', v='-1', methods=[GET], defined=false, prefixOverride=false is not a valid route, skipping}}{{r='/debug/pprof/block', v='-1', methods=[GET], defined=false, prefixOverride=false is not a valid route, skipping}}{{r='/debug/pprof/goroutine', v='-1', methods=[GET], defined=false, prefixOverride=false is not a valid route, skipping}}{{r='/debug/pprof/mutex', v='-1', methods=[GET], defined=false, prefixOverride=false is not a valid route, skipping}}{{r='/debug/pprof/threadcreate', v='-1', methods=[GET], defined=false, prefixOverride=false is not a valid route, skipping}}{{r='/debug/pprof/cmdline', v='-1', methods=[GET], defined=false, prefixOverride=false is not a valid route, skipping}}{{r='/debug/pprof/profile', v='-1', methods=[GET], defined=false, prefixOverride=false is not a valid route, skipping}}{{r='/debug/pprof/symbol', v='-1', methods=[GET], defined=false, prefixOverride=false is not a valid route, skipping}}{{r='/debug/pprof/trace', v='-1', methods=[GET], defined=false, prefixOverride=false is not a valid route, skipping}}{quote}  I went into the vendored gimlet code and set the version to 1 for all the pprof routes and it seemed to fix the version errors:  {quote}{{julianedwards$ ../../build/cedar service --dbName grpc_test}}{{[cedar] 2019/02/15 00:47:37 [p=info]: configured local queue with 2 workers}}{{[cedar] 2019/02/15 00:47:37 [p=info]: creating new remote job queue with 2 workers}}{{[cedar] 2019/02/15 00:47:37 [p=info]: [db='grpc_test' message='configured a remote mongodb-backed queue' prefix='ceder.service' priority='true']}}{{[cedar] 2019/02/15 00:47:37 [p=info]: [message='starting background cron jobs' opts='\{true false false}' started='map[remote:false local:false]' state='not populated' stats='map[remote:running='0', completed='0', pending='1', blocked='0', total='1' local:running='0', completed='0', pending='0', blocked='0', total='0']']}}{{[cedar] 2019/02/15 00:47:37 [p=debug]: [id='ceder.service.Julians-MacBook-Pro-2.local.b44151bd-3b40-451d-8933-3528d57cea5a' name='amboy-stats-collector-2019-02-15.00-47-00' operation='put job' service='amboy.queue.mgo']}}{{[cedar] 2019/02/15 00:47:37 [p=debug]: [change='&\{1 0 1 <nil>}' coll='depot' db='certDepot' id='test-root' op='put']}}{{[cedar] 2019/02/15 00:47:37 [p=debug]: [change='&\{1 0 1 <nil>}' coll='depot' db='certDepot' id='test-root' op='put']}}{{[cedar] 2019/02/15 00:47:37 [p=debug]: [change='&\{1 0 1 <nil>}' coll='depot' db='certDepot' id='test-root' op='put']}}{{[cedar] 2019/02/15 00:47:37 [p=debug]: [change='&\{1 0 1 <nil>}' coll='depot' db='certDepot' id='test-root' op='put']}}{{[cedar] 2019/02/15 00:47:37 [p=debug]: [change='&\{1 0 1 <nil>}' coll='depot' db='certDepot' id='test-root' op='put']}}{{[cedar] 2019/02/15 00:47:37 [p=emergency]: problem setting up the certificate depot: certificate request has existed!}}{{julianedwards$ ../../build/cedar service --dbName grpc_test}}{{[cedar] 2019/02/15 00:48:02 [p=info]: configured local queue with 2 workers}}{{[cedar] 2019/02/15 00:48:02 [p=info]: creating new remote job queue with 2 workers}}{{[cedar] 2019/02/15 00:48:02 [p=info]: [db='grpc_test' message='configured a remote mongodb-backed queue' prefix='ceder.service' priority='true']}}{{[cedar] 2019/02/15 00:48:02 [p=info]: [message='starting background cron jobs' opts='\{true false false}' started='map[remote:false local:false]' state='not populated' stats='map[local:running='0', completed='0', pending='0', blocked='0', total='0' remote:running='0', completed='0', pending='2', blocked='0', total='2']']}}{{[cedar] 2019/02/15 00:48:02 [p=debug]: [id='ceder.service.Julians-MacBook-Pro-2.local.8493997e-70e9-4b4e-a1fb-0b82d0c4cd26' name='amboy-stats-collector-2019-02-15.00-48-00' operation='put job' service='amboy.queue.mgo']}}{{[cedar] 2019/02/15 00:48:02 [p=debug]: [change='&\{0 0 0 test-root}' coll='depot' db='certDepot' id='test-root' op='put']}}{{[cedar] 2019/02/15 00:48:02 [p=debug]: [change='&\{1 0 1 <nil>}' coll='depot' db='certDepot' id='test-root' op='put']}}{{[cedar] 2019/02/15 00:48:02 [p=debug]: [change='&\{1 0 1 <nil>}' coll='depot' db='certDepot' id='test-root' op='put']}}{{[cedar] 2019/02/15 00:48:02 [p=debug]: [change='&\{1 0 1 <nil>}' coll='depot' db='certDepot' id='test-root' op='put']}}{{[cedar] 2019/02/15 00:48:02 [p=debug]: [change='&\{1 0 1 <nil>}' coll='depot' db='certDepot' id='test-root' op='put']}}{{[cedar] 2019/02/15 00:48:02 [p=debug]: [change='&\{0 0 0 localhost}' coll='depot' db='certDepot' id='localhost' op='put']}}{{[cedar] 2019/02/15 00:48:02 [p=debug]: [change='&\{1 0 1 <nil>}' coll='depot' db='certDepot' id='localhost' op='put']}}{{[cedar] 2019/02/15 00:48:02 [p=debug]: [change='&\{1 0 1 <nil>}' coll='depot' db='certDepot' id='localhost' op='put']}}{{[cedar] 2019/02/15 00:48:02 [p=warning]: port is already set to 3000}}{{[cedar] 2019/02/15 00:48:02 [p=info]: [message='detected local rpc services' service='[]']}}{{[cedar] 2019/02/15 00:48:02 [p=debug]: running 2 workers}}{{[cedar] 2019/02/15 00:48:02 [p=debug]: started worker 1 of 2 waiting for jobs}}{{[cedar] 2019/02/15 00:48:02 [p=debug]: started worker 2 of 2 waiting for jobs}}{{[cedar] 2019/02/15 00:48:02 [p=info]: starting queue job server for remote queue}}{{[cedar] 2019/02/15 00:48:02 [p=notice]: starting /rest on: :3000}}{{[cedar] 2019/02/15 00:48:02 [p=emergency]: problem starting admin rest service: r='/debug/pprof/', v='1', methods=[GET], defined=false, prefixOverride=false is not a valid route, skipping}}{{r='/debug/pprof/heap', v='1', methods=[GET], defined=false, prefixOverride=false is not a valid route, skipping}}{{r='/debug/pprof/block', v='1', methods=[GET], defined=false, prefixOverride=false is not a valid route, skipping}}{{r='/debug/pprof/goroutine', v='1', methods=[GET], defined=false, prefixOverride=false is not a valid route, skipping}}{{r='/debug/pprof/mutex', v='1', methods=[GET], defined=false, prefixOverride=false is not a valid route, skipping}}{{r='/debug/pprof/threadcreate', v='1', methods=[GET], defined=false, prefixOverride=false is not a valid route, skipping}}{{r='/debug/pprof/cmdline', v='1', methods=[GET], defined=false, prefixOverride=false is not a valid route, skipping}}{{r='/debug/pprof/profile', v='1', methods=[GET], defined=false, prefixOverride=false is not a valid route, skipping}}{{r='/debug/pprof/symbol', v='1', methods=[GET], defined=false, prefixOverride=false is not a valid route, skipping}}{{r='/debug/pprof/trace', v='1', methods=[GET], defined=false, prefixOverride=false is not a valid route, skipping}}{{[cedar] 2019/02/15 00:48:02 [p=debug]: context canceled}}  {quote}""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8399","02/15/2019 16:42:14",1,"Fix context deadline exceeded in TestRunParallelRunsInParallel ""Failure: [https://evergreen.mongodb.com/task/jasper_windows_test_7661d4568700a16f93117bbeaf5f34fb6b056466_19_02_13_20_54_35]    Logs: [https://evergreen.mongodb.com/test_log/5c6485fee3c3312e624c0430#L153]    I suspect this is probably because Windows and Race Detector Linux are slower and need a higher timeout, but will investigate further.    Update: test still times out context occasionally on Ubuntu 16.04.""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-5837","02/15/2019 16:56:21",1,"Commit queue patch link should include full URL ""GitHub PR patches have the full URL. The commit queue should look like those.""","",0,1,0,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-5838","02/15/2019 16:58:03",1,"Post status message that commit queue merge request has been received by Evergreen ""In the case of GitHub PR patches, there is no need for letting the user know that the patch has been received, because we create a patch immediately. However, in the case of the commit queue, the user has no feedback that the patch was received, because it is not created immediately. We should post a message to the user letting them know the commit queue has received their merge request.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5839","02/15/2019 17:09:11",1,"Merged PR blocks Commit Queue ""When a PR that has already been merged reaches the head of the queue the queue blocks.    It appears the Mergeable field returned from GitHub is nil for an already merged PR so the queue never processes is, assuming GitHub hasn't yet created the merge commit.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5843","02/16/2019 04:56:30",2,"Pagination of /rest/v2/builds/<build_id>/tasks endpoint returns duplicate tasks or omits them entirely ""There are 912 tasks (found by setting {{limit=1000000}}) for [this Evergreen build|https://evergreen.mongodb.com/build/mongodb_mongo_master_enterprise_rhel_62_64_bit_1d246814a058073f0c26981fff5fe67c16af3593_19_02_15_16_48_50] but  * pagination by 100 only returns 395 of them  * pagination by 10 only returns 208 of them  * pagination by 2 only returns 177 of them        I also manually inspected some of the {{limit=10}} pages and found that https://evergreen.mongodb.com/api/rest/v2/builds/mongodb_mongo_master_enterprise_rhel_62_64_bit_1d246814a058073f0c26981fff5fe67c16af3593_19_02_15_16_48_50/tasks?limit=10&start_at=mongodb_mongo_master_enterprise_rhel_62_64_bit_update_fuzzer_3_enterprise_rhel_62_64_bit_1d246814a058073f0c26981fff5fe67c16af3593_19_02_15_16_48_50 actually lists {{mongodb_mongo_master_enterprise_rhel_62_64_bit_update_fuzzer_gen_1d246814a058073f0c26981fff5fe67c16af3593_19_02_15_16_48_50}} first, which is a task that had already returned by a previous page.""","  /rest/v2/builds/mongodb_mongo_master_enterprise_rhel_62_64_bit_1d246814a058073f0c26981fff5fe67c16af3593_19_02_15_16_48_50/tasks?limit=100  /rest/v2/builds/mongodb_mongo_master_enterprise_rhel_62_64_bit_1d246814a058073f0c26981fff5fe67c16af3593_19_02_15_16_48_50/tasks?limit=100&start_at=mongodb_mongo_master_enterprise_rhel_62_64_bit_logical_session_cache_sharding_100ms_refresh_jscore_passthrough_gen_1d246814a058073f0c26981fff5fe67c16af3593_19_02_15_16_48_50  /rest/v2/builds/mongodb_mongo_master_enterprise_rhel_62_64_bit_1d246814a058073f0c26981fff5fe67c16af3593_19_02_15_16_48_50/tasks?limit=100&start_at=mongodb_mongo_master_enterprise_rhel_62_64_bit_sharding_auth_23_enterprise_rhel_62_64_bit_1d246814a058073f0c26981fff5fe67c16af3593_19_02_15_16_48_50  /rest/v2/builds/mongodb_mongo_master_enterprise_rhel_62_64_bit_1d246814a058073f0c26981fff5fe67c16af3593_19_02_15_16_48_50/tasks?limit=100&start_at=mongodb_mongo_master_enterprise_rhel_62_64_bit_sharding_last_stable_mongos_and_mixed_shards_11_enterprise_rhel_62_64_bit_1d246814a058073f0c26981fff5fe67c16af3593_19_02_15_16_48_50  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5912","02/18/2019 16:10:54",3,"UI: The Performance Discovery view should highlight outlier status ""The Performance discovery view should highlight all detected and marked outliers.    It should be possible to view suspicious outliers but this status should not be shown by default unless it is possible to also view a confidence figure.    The manner in which the GESD algorithm works generally ensures that a fixed percentage (currently ~10%) of the data will always be highlighted as suspicious.  Only suspicious points close to the last detected outlier should be actually reviewed.""","",1,0,0,0,0,0,0,0,0,0,0,1,0,0,0
"EVG-5980","02/18/2019 16:22:21",2,"UI: It must be possible to mark / unmark task data as outliers ""The UI should allow revision / project/ variant/ task / task / test / thread level performance data to be marked or unmarked as an outlier.    It must be possible to mark / unmark results on:  # The task page  # The Performance BB page     It would be good to be able to mark / unmark results on:   # The Performance discovery page  ""","",1,0,0,0,0,0,0,0,0,0,0,1,0,0,0
"EVG-5913","02/18/2019 16:37:04",3,"UI: The Performance Baron page must list outliers ""A new outliers Tab needs to be added to the Performance Baron page.    This new page should list all:  # detected outliers  # suspicious outliers  # marks  #  mutes        ""","",1,0,0,0,0,0,0,0,0,0,0,1,0,0,0
"EVG-5844","02/19/2019 13:35:01",2,"Agent sends log after task ends ""For https://evergreen.mongodb.com/host/sir-me7r7vxk, we see the following order of operations.        There are many more examples in the linked BF. I believe these are triggered by deploys and are a bug in synchronizing the closing of the logger in the agent with getting the next task.""","  4:40:44 task A posts to /end endpoint  4:40:44 task B assigned to host  4:40:49 task A 409s posting to /log endpoint  4:40:50 prepping host for agent  4:40:51 task A 409s posting to /log endpoint  4:40:51 task A 409s posting to /log endpoint  4:40:52 starting agent on host   4:40:52 agent successfully started for host  4:48:21 task B finished event due to timeout  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5845","02/19/2019 16:33:31",1,"Don't concatenate commit message and description ""It makes commits merged by the commit queue have unwieldy descriptions  https://evergreen.mongodb.com/version/mci_5a3e547273477f9718463cd406cc440865ae1b13""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5846","02/19/2019 16:58:41",2,"Task history not showing all commits ""Filing per slack discussion with [~brian.samek]: https://mongodb.slack.com/archives/C0V896UV8/p1550591752071500    {quote}  acm [10:55]   I don‚Äôt know what you call this part of the UI, but the history shown here on the left does not seem to be showing every commit: https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_rhel_71_ppc64le_compile_a285618a35742923e9e21fa2df4434406b121a4e_19_01_31_02_10_29    acm [10:59]   In my view of it for Jan 31st, it lists `c065d`, then `a2856`, then `d3e18`. However, it has skipped `9ac90` which happened between `a2856` and `d3e18`.  {quote}    ""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-5847","02/20/2019 14:34:22",1,"For tasks >500 spots deep in their queue, display that on the task page ""Currently that spot is blank""","",0,1,0,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-5848","02/20/2019 16:53:30",1,"Incorrect display task links ""Links in https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_ubuntu1804_ppc64le_display_unittests!_patch_1d246814a058073f0c26981fff5fe67c16af3593_5c6c8a030ae6063e49545641_19_02_19_22_58_25##%257B%2522compare%2522%253A%255B%257B%2522hash%2522%253A%25221d246814a058073f0c26981fff5fe67c16af3593%2522%257D%255D%257D are incorrect  compile_unittests points to https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_ubuntu1804_ppc64le_compile_unittests_patch_1d246814a058073f0c26981fff5fe67c16af3593_5c6c8a030ae6063e49545641_19_02_19_22_58_25_0/1 that returns not found.  Same for unittests link.    Link for the compile_unittests found on the page of the host running it was https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_ubuntu1804_ppc64le_compile_unittests_patch_1d246814a058073f0c26981fff5fe67c16af3593_5c6c8a030ae6063e49545641_19_02_19_22_58_25##%257B%2522compare%2522%253A%255B%257B%2522hash%2522%253A%25221d246814a058073f0c26981fff5fe67c16af3593%2522%257D%255D%257D    Also, parent unittests! task was showing """"Scheduled"""" and didn't switch to """"Started"""" till ~30 minutes after compile_unittests started.""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-8855","02/20/2019 17:00:53",1,"ensure rest interface properly filters mainline tasks out ""I added a mainline flag to tasks to support easy filtering of patches, and I fixed tests until they passed, but I want to make sure that we have the correct semantics and capabilities for the rest interface ""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-9208","02/20/2019 18:21:43",1,"make it possible to bootstrap a certdepo from an empty config ""if everything's zero'd out then you can't start the app, because the filedepot will be the empty string and the cert depo options will be nil.     I think we need to have some omitempty to fix it, this might be an issue only for existing services that are adding SSL.     Relatedly, I'd like to make sure that the configuration in the database """"looks reasonable"""" (this probably means putting a lot of omit emptys and then cleaning up the database) because currently (particularly for the cert depot) we set a bunch of zero values in the database and then override them in memory, so you can't really see what things are set to.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-8927","02/21/2019 17:00:38",1,"Make (*CreateOptions) Close consistent ""closers on CreateOptions were changed to return errors in MAKE-624. (*CreateOptions) Close should return an error to be consistent with other Close() functions.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-5857","02/22/2019 17:58:20",2,"Commit queue patch doesn't contain diff ""The diff shows as 0 lines.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5963","02/22/2019 18:19:10",1,"evergreen validator command should return non-zero for errors """"","  INFO:mr.operations.evergreen:evergreen configuration file /Users/kelsey/repos/mongo-release-tools/output.yaml is valid!  INFO:mr.operations.evergreen:evergreen configuration file /Users/kelsey/repos/mongo-release-tools/output.yaml is valid!  INFO:mr.cli:over and out.    $ evergreen validate /Users/kelsey/repos/mongo-release-tools/output.yamlERROR: project errors: evaluating task selector: validate-version-report: nothing named 'validate-version-report' validate-version-report: nothing named 'validate-version-report'  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5858","02/22/2019 18:45:58",1,"Commit queue shouldn't strip PR numbers from commit message ""like https://github.com/evergreen-ci/evergreen/commit/4907bd3e5f4d53ce2412e1af264ecfea7a856320""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5860","02/22/2019 20:05:53",1,"Unable to scroll on history sidebar ""Example task https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_rhel_62_64_bit_coverage_concurrency_sharded_causal_consistency_3_enterprise_rhel_62_64_bit_coverage_731e7a0cf8b427a0d6197ab7b114dcdfa31b46bd_19_02_16_20_30_12. This appears to be fine on the version page. I'm able to load the task page down once, but not past 2/13. This might be related to EVG-5846, thought curiously there I _can_ scroll.""","",0,0,0,1,0,0,0,0,0,0,1,0,0,0,0
"EVG-5865","02/22/2019 21:26:43",2,"Modify host.list route to list containers ""Modify host.list route to list containers""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5867","02/22/2019 21:26:59",2,"Support starting containers without agent in provisioning-create-host job  ""Support starting containers without agent in provisioning-create-host job. What this entails:   * Finding parent from host.create and from scheduler   * Incorporating docker options with scheduler   * Differentiating downloading/building image   * Handling URL or registry for images""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5869","02/22/2019 21:27:15",1,"Add new params and validation to host.create ""Add new params and validation to host.create (probably already done, just check over it)""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5871","02/22/2019 21:27:32",1,"Implement obtaining logs, background in host.create ""Implement obtaining logs, background in host.create""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5872","02/22/2019 21:27:40",0,"Dogfood with Evergreen ""Dogfood with Evergreen""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8954","02/22/2019 22:20:06",1,"Make general clean terminate signal trigger for Windows ""mongos expects exit code 0 in resmoke sharding tests, so we need another signal trigger that can be registered to handle the expectation of exit code 0 from sending SIGTERM in general.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-5877","02/26/2019 15:06:45",2,"Expansion that tells whether a build is a Commit Queue Merge ""When doing a patch build, there is a """"is_patch"""" expansion that a projects configuration can use to customize configuration based on whether the build is a patch build or a mainline build. This would be really useful to have for Commit Queue Merge builds as well. I could picture a generate.tasks task that customized what is generated based on whether the build is a patch build, commit queue merge, or a mainline build.""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5878","02/26/2019 19:46:56",2,"Aliases missing after project copy ""The aliases on the mongo-c-driver project went missing (though I'm adding them back manually), and I strongly suspect this happened after BUILD-7789.    BUILD-7789 should have copied from mongo-c-driver to mongo-c-driver-r1.14.0, so it seems odd that mongo-c-driver would have been modified at all.""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-5882","02/27/2019 17:29:07",2,"mongod running from previous task appears not to have been stopped by the Evergreen agent ""In https://evergreen.mongodb.com/task/mms_e2e_local_win_E2E_Local_Monitoring_Import_3006ac90d82a056ff2171f2736c51c154eab36f2_19_02_22_20_57_36/ it looks like there is a mongod running from the task that ran immediately before it that should have been killed by the agent when it cleaned up processes at the end of that task.""","",0,0,0,0,0,0,1,0,0,1,0,0,0,0,0
"EVG-5883","02/27/2019 19:04:26",1,"Do not allow turning on PR testing if no PR definitions are provided ""It is currently possible to save a project config in a state where PR testing is enabled but no PR testing definitions are specified. This is confusing. Evergreen should prevent this and return an error to the user.""","",0,1,0,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-5885","02/27/2019 21:39:02",1,"Handle ""unstarted"" status in display task UI ""https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_rhel_70_64_bit_display_dbtest!_24c08a88060a8f86e3c0af2022c853e845996eee_19_02_27_20_06_19""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-5887","02/27/2019 23:46:41",2,"Running generate.tasks command sometimes takes 20 minutes ""I noticed this when looking at the task timing page and filing EVG-5886.    https://evergreen.mongodb.com/task/mongodb_mongo_master_linux_64_repeated_execution_logical_session_cache_replication_default_refresh_jscore_passthrough_gen_069187003e2d083afea12ec401bcfc8d899ec6c6_19_02_18_18_08_57        https://evergreen.mongodb.com/task/mongodb_mongo_master_linux_64_repeated_execution_logical_session_cache_replication_default_refresh_jscore_passthrough_gen_e932fa2b7af46ddc924f9dcc295b46bdef3e45e2_19_02_25_14_44_10        https://evergreen.mongodb.com/task/mongodb_mongo_master_linux_64_repeated_execution_logical_session_cache_replication_default_refresh_jscore_passthrough_gen_d4cfa2877d4aa8dd3f3e5da91e38507c02d300eb_19_02_25_14_44_10    ""","  [2019/02/18 19:19:48.196] Running command 'generate.tasks' in """"generate resmoke tasks"""" (step 1.7 of 1)  [2019/02/18 19:42:46.143] Task completed - SUCCESS.    [2019/02/25 15:46:56.206] Running command 'generate.tasks' in """"generate resmoke tasks"""" (step 1.7 of 1)  [2019/02/25 16:10:13.671] Task completed - SUCCESS.    [2019/02/25 15:46:38.605] Running command 'generate.tasks' in """"generate resmoke tasks"""" (step 1.7 of 1)  [2019/02/25 16:06:29.890] Task completed - SUCCESS.  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5890","02/28/2019 20:26:55",1,"Notification endpoint does not send  ""The notifications endpoint returns 200 OK, but the sender does not seem to actually send the notification.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5893","03/01/2019 13:45:57",2,"Performance Baron list should have links on the test column ""For example the following image should link to [here|https://evergreen.mongodb.com/task/performance_linux_wt_standalone_agg_query_comparison_04882fa7f5210cfb14918ecddbbc5acbd88e86b6_19_02_21_01_49_10##%257B%2522hiddenGraphs%2522%253A%255B%2522Aggregation.IntNonIdFindOneProjectionCovered%2522%252C%2522Aggregation.UnindexedLargeInUnsortedNonMatching%2522%252C%2522Aggregation.UnindexedLargeInNonMatching%2522%252C%2522Aggregation.UnindexedVeryLargeInUnsortedMatching%2522%252C%2522Aggregation.UnindexedVeryLargeInSortedMatching%2522%252C%2522Aggregation.UnindexedLargeInUnsortedMatching%2522%252C%2522Aggregation.UnindexedLargeInMatching%2522%252C%2522Aggregation.StringUnindexedInPredWithSimpleCollation%2522%252C%2522Aggregation.StringUnindexedInPredWithNonSimpleCollation%2522%252C%2522Aggregation.TwoInts%2522%252C%2522Aggregation.RegexPrefixFindOne%2522%252C%2522Aggregation.IntIDRange%2522%252C%2522Aggregation.IntNonIdFindOne%2522%252C%2522Aggregation.IntIdFindOne%2522%252C%2522Aggregation.Empty%2522%252C%2522Aggregation.NoMatch%2522%252C%2522Aggregation.DistinctWithoutIndexAndQuery%2522%252C%2522Aggregation.DistinctWithoutIndex%2522%252C%2522Aggregation.DistinctWithIndexAndQuery%2522%252C%2522Aggregation.DistinctWithIndex%2522%252C%2522Aggregation.CountsIntIDRange%2522%252C%2522Aggregation.CountsFullCollection%2522%252C%2522Aggregation.IntNonIdFindProjectionCovered%2522%252C%2522Aggregation.FindProjection%2522%252C%2522Aggregation.FindWideDocProjection%2522%252C%2522Aggregation.FindProjectionThreeFieldsCovered%2522%252C%2522Aggregation.FindProjectionThreeFields%2522%252C%2522Aggregation.FindProjectionDottedField%2522%252C%2522Aggregation.FindProjectionDottedField.Indexed%2522%255D%257D]      !image-2019-03-01-13-44-16-480.png|width=90%!    In this case there is only a single change point, when there are multiple change points / task, it should show all change point tests and hide the rest.""","",0,1,0,0,0,0,0,0,0,0,0,1,0,0,0
"EVG-5895","03/01/2019 14:48:50",2,"Move inserting parent hosts out of scheduler into new job ""Not convinced we're actually going to do this... look into it.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-5898","03/01/2019 16:27:03",2,"Lobster not initially loading all log lines ""When I open Lobster in Chrome (72.0.3626.119), all the log lines of a file are not initially loaded. When I start scrolling down it appears that more lines are added, and then I can scroll back up to see the previously loaded lines, but this is not the expected behavior. The scrollbar upon load should reflect the full length of the log file. [Example log|https://logkeeper.mongodb.org/lobster/build/c4b0548443ba9ca452c3ac7303557fb1/test/5c6f0bb3be07c4262d02bed6#bookmarks=0%2C1910]     Screencast showing the issue:   !2jX14GBJ5l.gif!    ""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-8334","03/01/2019 17:51:37",1,"CreateWithLogFile fails on RPC with blocking process ""Failing task: https://evergreen.mongodb.com/task/jasper_macos_test_f5c86bbf86862547b9928e8b2fc1884ffa89374a_19_02_26_21_22_32    Logs: https://evergreen.mongodb.com/test_log/5c78cdd69ccd4e72ab5878f7#L2749""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-5901","03/01/2019 20:10:14",2,"Generate tasks causes failure when yml includes task groups ""[https://evergreen.mongodb.com/task/mms_evg_foliage_stat_check_init_patch_fb8a11cd45a4087f4ebb29a78c364120c351c092_5c798e8356234379c45b3031_19_03_01_19_56_52]    ¬†    this task should add a single task per variant, but suddenly causes an issue with parsing the yml file with the following warning:    Command failed: 400 (Bad Request): project semantics is invalid: task group int-external-group has max number of hosts 5 greater than half the number of tasks 7  task INT_JAVA_EXTERNAL_GCP in task group int-external-group has a dependency on another task ([IVY_DEPENDENCIES]), which can cause task group tasks to be scheduled out of order  task INT_JAVA_EXTERNAL_AZURE_SNAPSHOT in task group int-external-group has a dependency on another task ([IVY_DEPENDENCIES]), which can cause task group tasks to be scheduled out of order  task INT_JAVA_EXTERNAL_COMMON in task group int-external-group has a dependency on another task ([IVY_DEPENDENCIES]), which can cause task group tasks to be scheduled out of order  task INT_JAVA_EXTERNAL_AWS in task group int-external-group has a dependency on another task ([IVY_DEPENDENCIES]), which can cause task group tasks to be scheduled out of order  task INT_JAVA_EXTERNAL_AWS_SNAPSHOT in task group int-external-group has a dependency on another task ([IVY_DEPENDENCIES]), which can cause task group tasks to be scheduled out of order  task INT_JAVA_EXTERNAL_AZURE in task group int-external-group has a dependency on another task ([IVY_DEPENDENCIES]), which can cause task group tasks to be scheduled out of order  task INT_JAVA_EXTERNAL_FREE in task group int-external-group has a dependency on another task ([IVY_DEPENDENCIES]), which can cause task group tasks to be scheduled out of order    ¬†""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5905","03/04/2019 20:54:25",2,"generate.task taking a long time to complete in Patch Build ""I had a patch build and noticed that the generate.task command took around 8 minutes to complete. This is long enough that I was concerned something was wrong. I think it is worth exploring if there is something possible to do for patch build (I don't think this is as much of a problem on mainline builds).    Here is a link to the task I was watching: https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_rhel_62_64_bit_sharding_gen_patch_7e771db35d742333eeb53fb790c4f152fab9ff71_5c7d8cd632f4177bea4c0086_19_03_04_20_39_15##%257B%2522compare%2522%253A%255B%257B%2522hash%2522%253A%25227e771db35d742333eeb53fb790c4f152fab9ff71%2522%257D%255D%257D""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5906","03/04/2019 22:18:32",1,"Passing an alias hides the CLI's message that project does not exist ""If you pass an alias to the evergreen CLI patch command with an invalid project, instead of reporting that the project does not exist, it reports that the alias does not exist. This is confusing for users, as it suggests that the problem is updating the list of aliases in the project config instead of fixing the CLI invocation.    ""","  $ evergreen patch -p not_a_project  Unexpected reply from server (404 Not Found): no project found named 'not_a_project'    Run `evergreen list --projects` to see all valid projects    $ evergreen patch -p not_a_project -a not_an_alias  Set not_an_alias as the default alias for project 'not_a_project'? no  not_an_alias is not a valid alias  ",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5908","03/05/2019 23:02:31",2,"Want to be able to patch projects with the repotracker disabled ""Currently getting: Unexpected reply from server (401 Unauthorized): 400 (Bad Request): patching is disabled    ¬†    Even though the box to disable patching is not checked (although the repo tracker is disabled)""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-8975","03/06/2019 15:45:16",2,"load ftdc data to mongodb from files ""This is basically the same as the current operation that reads the files and turns them into bson, except that we'd insert those documents to a mongodb collection...     (probably using a bulk operation, using the new driver, etc.) ""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-5914","03/06/2019 17:53:04",2,"a generated task with dependancies - does not wait for them ""example:        [https://evergreen.mongodb.com/version/5c8001cbe3c3312c8717695d]    ¬†    the task named """"foliage"""" (which exists in all build variants) is generated by the evergreen foliage build variant.    ¬†    the task itself is defined in the yml file with:    depends_on:    ¬† - name: """"*""""  ¬† ¬† status: """"*""""    in the¬†Dependencies variant, the task is created and does depend on one of the other tasks in the variant, but not both. In the other - it depends on nothing.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5915","03/06/2019 20:56:25",2,"remove dependency on local SSH key  ""This is follow on work from EVG-3678, which we had to abandon because of the state of libcurl/git on the build hosts.     the current system requires that either: hosts have their own SSH key to clone projects *or* users specify a token in their project configs (using content, presumably from project expansions.)     The goal of this ticket is to make it possible for *no* hosts to have any SSH key installed by default, and evergreen to have a way of injecting tokens or ssh keys into the operations to support git.get_project operation on evergreen so that we don't have to put set up scripts on hosts...    I think this can build upon the work for EVG-3678, but probably needs to include some additional work including a flag in the distros to say """"fallback to ssh clones"""" and a way to inject an SSH key into these hosts on a per-task method?""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-8698","03/06/2019 22:06:28",1,"Revendor gimlet into cedar ""There is new logic in gimlet in the ldap library that checks a TTL and reauthorizes the user if the TTL has expired. This is invisible to the user, but may be useful to automatically check if someone is no longer authorized in ldap.     https://github.com/evergreen-ci/gimlet/commit/e4d488310cb0e4e016efa9e5552a2d34861b8094#diff-0f5bcbd669b5eb1ac514214bbe7dabfaL66""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-5917","03/06/2019 22:15:15",0,"Fix error message returned from CLI from git diff """"","  evergreen patch --project=mms-qa --variants=e2e --finalize --tasks= E2E_NDS_LiveImport_Live_Data_AWS  Enter a description for this patch (optional):   Error getting diff summary: 'git 91ad4adb5645e384023f1be50d36d871b4885c85 diff 91ad4adb5645e384023f1be50d36d871b4885c85 --no-ext-diff --stat E2E_NDS_LiveImport_Live_Data_AWS' failed with err exit status 128  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8731","03/06/2019 22:16:13",2,"support multiple certificate authority in a chain ""so that we can have new/old and create new certificates with new (but still accept old) for a period to support live rotation of CA without needing to stop the world ""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-5919","03/07/2019 14:30:59",2,"External task logs are missing new lines ""E.g., here https://evergreen.mongodb.com/task/mci_ubuntu1604_test_model_stats_660bb906e0814d573934d444d1744f4c95d20085_19_03_06_22_43_42/0. Screenshot is attached.""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-5922","03/07/2019 17:28:33",1,"Commit queue not posting received status to GitHub ""When the commit queue receives a PR it immediately posts to GitHub a status """"added to queue""""¬†but GitHub is not displaying this status on the PR.¬†    The problem may be that the status is not being sent on the correct SHA.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8387","03/07/2019 19:08:48",1,"CreateOptions is not safe for concurrent access ""Since CreateOptions can be passed around in ProcessInfo or in Respawn, it must either be cloned or locked.""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8423","03/07/2019 19:17:30",1,"blockingProcess can hang after process is done ""If Info or Running, reach [the select block|https://github.com/mongodb/jasper/blob/2fa6f5db03bc4308977d099772d29b4612510e00/process_blocking.go#L222-L227] and the underlying process finishes, the operation may never be processed since reactor returns.""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-5925","03/07/2019 21:04:49",2,"Apparent increase in system unresponsive tasks ""Task: https://evergreen.mongodb.com/task/mongodb_mongo_master_linux_64_debug_display_auth_patch_884ac2862eda54e15d99e4db253b822cb4a90f1d_5c815ec3d1fe071bd3d40a27_19_03_07_18_11_16/0##%257B%2522compare%2522%253A%255B%257B%2522hash%2522%253A%2522884ac2862eda54e15d99e4db253b822cb4a90f1d%2522%257D%255D%257D""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5927","03/07/2019 21:27:37",1,"Parallelize event dispatch loop ""It currently takes us a couple minutes to run the event dispatch loop, and on 3/7/19 we were pinned at processing 1000 events per loop iteration for several hours, which means that we were behind in processing events. We should  # Parallelize the loop. https://github.com/evergreen-ci/evergreen/blob/02c7b0e2d9305c8afab331b730693665b02731d6/units/event_metajob.go#L157  # Add logging for the number of tasks remaining. Currently the query gets 1000 tasks. We should have an additional query for the total number of tasks remaining so that if we get behind we can measure how behind we are.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5928","03/08/2019 16:30:02",1,"fix setup_group_can_fail_task ""[~max.hirschhorn] has run a task with setup_group_can_fail_task set to true where the task still continues even though setup_group does fail ([see here|https://evergreen.mongodb.com/task/mongodb_mongo_master_embedded_sdk_iphoneos_embedded_sdk_build_cdriver_patch_5a7ccd5f073341f5f98e0ced39a80416869c181b_5c81b2591e2d171c9b21f724_19_03_08_00_08_28/0?type=T#]).¬†""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5930","03/08/2019 18:36:59",0,"CLI: generate patch from feature branch onto project's tracked branch ""Get the patch to the project branch representing the changes of a feature branch (git format-patch) Assume local branch tracking project branch exists. Should also allow a diff with the user's working directory.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5929","03/08/2019 18:36:59",1,"CLI: add option to patch for only committed changes ""Let the user supply a ref. Default to the tip of the current branch""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5932","03/08/2019 18:37:00",2,"CLI: set-module and finalize subcommands ""Add module to a merge. Finalize when the merge is finished""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5931","03/08/2019 18:37:00",1,"CLI: merge command ""Get project information from REST API. Post the patch to REST API. Print pertinent information from response to stdout. Option to not finalize""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5935","03/08/2019 18:37:01",0,"Commit Queue: Add patch execution path ""Add configuration option for applying patches. Refactor code to treat patch items differently from GitHub PRs.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5934","03/08/2019 18:37:01",2,"Commit Queue: Generalize item ""Generalize commit queue item to store information about the patch and user. Alternatively, a new collection.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5937","03/08/2019 18:37:02",2,"Notification: configure method ""Add configuration option on the user level for commit queue milestones""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5936","03/08/2019 18:37:02",1,"Commit Queue: Dequeue when item is finished ""Refactor the commit queue sender to dequeue the item without talking to GitHub""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5939","03/08/2019 18:37:03",2,"Notification: Merge status ""Notify user when their merge fails/succeeds""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5938","03/08/2019 18:37:03",1,"Notification: Merge test begun ""Notify user when their item is pulled off the queue and a patch is created""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5942","03/08/2019 18:37:04",1,"merge.commit: Push commit to GitHub ""Push the commit created from the patch to GitHub.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5941","03/08/2019 18:37:04",1,"merge.commit: Commit a patch ""Create a commit from a patch and commit as a particular user (git am).""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5940","03/08/2019 18:37:04",2,"merge.commit: new command ""Add command for applying patches""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5943","03/08/2019 18:37:05",2,"Define merge task ""call the git.get_project and merge.commit commands.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5945","03/08/2019 19:43:21",2,"Show system-unresponsive errors as system failures for restart ""system-unresponsive errors don't get counted as system failures when trying to restart tasks (see [https://evergreen.mongodb.com/version/5c829611e3c33157bbcdeacb]¬†for an example). Can we change this so there's an easy way to restart all system-unresponsive tasks?""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-5946","03/08/2019 21:51:07",0,"Depending on all tasks across multiple variants should only depend on tasks actually present in those variants ""Consider a case where there are variants A, B, C, and tasks 1, 2, 3, 4, 5. Tasks are assigned to variants like this:    A: 1, 2   B: 3, 4   C: 5    There isn't an easy way for a new, generated task in a new variant to depend on all tasks in A and B. Depending on {{*}}¬†in A, B would mean depending on tasks 1, 2, 3, 4, 5, yet these tasks do not exist across all variants. There should be some way of depending on all tasks in a set of variants, not all tasks in a project.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5947","03/11/2019 13:28:17",1,"panic in production """"","  gimlet/middleware_grip.go:184  runtime/asm_amd64.s:515  runtime/panic.go:489  runtime/panic.go:63  runtime/signal_unix.go:290  model/task_json.go:114  service/ui_plugin_perf_json.go:127  http/server.go:1942  mux/mux.go:212  negroni/negroni.go:46  negroni/negroni.go:29  negroni/negroni.go:38  negroni/negroni.go:38  negroni/static.go:41  negroni/negroni.go:38  negroni/negroni.go:38  negroni/static.go:53  negroni/negroni.go:38  negroni/negroni.go:38  gimlet/middleware_auth.go:37  negroni/negroni.go:38  negroni/negroni.go:38  gimlet/middleware_auth_user.go:142  negroni/negroni.go:38  negroni/negroni.go:38  gimlet/middleware_grip.go:192  negroni/negroni.go:38  negroni/negroni.go:86  http/server.go:2568  http/server.go:1825  runtime/asm_amd64.s:2197  ",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-5949","03/11/2019 14:56:01",1,"""log when killProcs is cleaning up"" causing agent to panic ""Reverted¬†EVG-5882 because of¬†the panic‚Äìyou can see details of it [in Splunk|https://mongodb.splunkcloud.com/en-US/app/search/search?earliest=1552226400&latest=1552315205&q=search%20index%3Devergreen-staging%20metadata.level%3E%3D80&display.page.search.mode=smart&dispatch.sample_ratio=1&sid=1552316113.35205120].""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5952","03/11/2019 20:35:34",1,"Blocking task group tasks does not remove them from the queue ""I suspect this is the source of the bug where tasks are blocked but still run.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5955","03/12/2019 13:43:13",1,"Incorrect Task Color on Version Page ""For this [task|https://evergreen.mongodb.com/task/mci_lint_generate_lint_patch_92d046bf202bfbe1bc972b1bac6cb02f388d2a83_5c86d21ce3c3310aed4538e3_19_03_11_21_24_45/0]¬†the task Lint shows up as """"Started"""" on the versions page, but on the actual task page it shows as a system failure.""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-5957","03/12/2019 14:36:51",2,"Failures: test-thirdparty on Windows [Evergreen Self-Tests @ 08d36fef] (TestGithubSuite, TestGetGithubAPIStatus) ""h2. [test-thirdparty failed on Windows|https://evergreen.mongodb.com/task/mci_windows_test_thirdparty_patch_08d36fef89a1e449b2cba11bee0a83fcb24041b1_5c86b2ae0ae606492613cf49_19_03_11_19_10_43/1]  Host: [ec2-3-81-56-237.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-wrir6iyh]  Project: [Evergreen Self-Tests|https://evergreen.mongodb.com/waterfall/mci]  Commit: [diff|https://github.com/evergreen-ci/evergreen/commit/08d36fef89a1e449b2cba11bee0a83fcb24041b1]: 'evergreen-ci/evergreen' pull request #2096 by tychoish: EVG-5927: event/notification dispatch speed improvements (https://github.com/evergreen-ci/evergreen/pull/2096) | 25 Feb 19 15:27 UTC  Evergreen Subscription: ; Evergreen Event:   *TestGithubSuite* - [Logs|https://evergreen.mongodb.com/test_log/5c86b80857e85a62412db174] | [History|https://evergreen.mongodb.com/task_history/mci/mci_windows_test_thirdparty_patch_08d36fef89a1e449b2cba11bee0a83fcb24041b1_5c86b2ae0ae606492613cf49_19_03_11_19_10_43#TestGithubSuite=fail]  *TestGetGithubAPIStatus* - [Logs|https://evergreen.mongodb.com/test_log/5c86b80857e85a62412db174] | [History|https://evergreen.mongodb.com/task_history/mci/mci_windows_test_thirdparty_patch_08d36fef89a1e449b2cba11bee0a83fcb24041b1_5c86b2ae0ae606492613cf49_19_03_11_19_10_43#TestGetGithubAPIStatus=fail]    ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-5958","03/12/2019 14:56:21",2,"Failures: test-cloud on Race Detector [Evergreen Self-Tests @ d3b07a5c] (TestDockerIntegrationSuite, TestImagePull) ""h2. [test-cloud failed on Race Detector|https://evergreen.mongodb.com/task/mci_race_detector_test_cloud_d3b07a5c8c1e3e8904fd6416c537ab199984abd3_19_03_11_14_45_04/0]  Host: [ec2-52-91-84-43.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-j5bi4ayk]  Project: [Evergreen Self-Tests|https://evergreen.mongodb.com/waterfall/mci]  Commit: [diff|https://github.com/evergreen-ci/evergreen/commit/d3b07a5c8c1e3e8904fd6416c537ab199984abd3]: Revert """"EVG-5882: log when killProcs is cleaning up (#2082)"""" (#2092)    This reverts commit 206d9881caea648b26724ed9bc23ae9956787f5e. | 11 Mar 19 14:45 UTC  Evergreen Subscription: ; Evergreen Event:   *TestDockerIntegrationSuite* - [Logs|https://evergreen.mongodb.com/test_log/5c868bbe3066157ceeee73ac] | [History|https://evergreen.mongodb.com/task_history/mci/mci_race_detector_test_cloud_d3b07a5c8c1e3e8904fd6416c537ab199984abd3_19_03_11_14_45_04#TestDockerIntegrationSuite=fail]  *TestImagePull* - [Logs|https://evergreen.mongodb.com/test_log/5c868bbe3066157ceeee73ac] | [History|https://evergreen.mongodb.com/task_history/mci/mci_race_detector_test_cloud_d3b07a5c8c1e3e8904fd6416c537ab199984abd3_19_03_11_14_45_04#TestImagePull=fail]    ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-5959","03/12/2019 14:56:24",2,"Failure: test-repotracker on Race Detector [Evergreen Self-Tests @ d3b07a5c] (TestGetRevisionsSince) ""h2. [test-repotracker failed on Race Detector|https://evergreen.mongodb.com/task/mci_race_detector_test_repotracker_d3b07a5c8c1e3e8904fd6416c537ab199984abd3_19_03_11_14_45_04/0]  Host: [ec2-54-242-246-152.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-mnpi78ch]  Project: [Evergreen Self-Tests|https://evergreen.mongodb.com/waterfall/mci]  Commit: [diff|https://github.com/evergreen-ci/evergreen/commit/d3b07a5c8c1e3e8904fd6416c537ab199984abd3]: Revert """"EVG-5882: log when killProcs is cleaning up (#2082)"""" (#2092)    This reverts commit 206d9881caea648b26724ed9bc23ae9956787f5e. | 11 Mar 19 14:45 UTC  Evergreen Subscription: ; Evergreen Event:   *TestGetRevisionsSince* - [Logs|https://evergreen.mongodb.com/test_log/5c86883f1e2d177b5890be89] | [History|https://evergreen.mongodb.com/task_history/mci/mci_race_detector_test_repotracker_d3b07a5c8c1e3e8904fd6416c537ab199984abd3_19_03_11_14_45_04#TestGetRevisionsSince=fail]    ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-5960","03/13/2019 15:35:33",0,"Blocked tasks should not be blocked forever ""We believe that there should be either a timeout or a different status (especially when a dependency it relies on fails) the denotes that this task will not run.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5965","03/14/2019 20:03:43",1,"Task status is mismatched between host and task page ""rollback_fuzzer_clean_shutdowns is yellow: https://evergreen.mongodb.com/version/5c8915e69ccd4e676237c494     But on the task page it's green: https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_rhel_62_64_bit_display_rollback_fuzzer_clean_shutdowns_patch_884ac2862eda54e15d99e4db253b822cb4a90f1d_5c8915e69ccd4e676237c494_19_03_13_14_40_03##%257B%2522compare%2522%253A%255B%257B%2522hash%2522%253A%2522884ac2862eda54e15d99e4db253b822cb4a90f1d%2522%257D%255D%257D""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5966","03/15/2019 10:15:59",3,"performance plugin raises a null pointer exception in max only mode ""Steps to reproduce:    # Go [here|https://evergreen.mongodb.com/task/sys_perf_linux_standalone_big_update_71bb13f2885036a229882ebb41ac4a0640ac2800_19_03_08_15_09_51##%257B%2522hiddenGraphs%2522%253A%255B%2522BigUpdate.Loader.IndividualBulkInsert_timer%2522%255D%257D]    # Select *'Max Only'* Thread level    so it does not render a graph        The issue is being caused as [maxLevelIdx|https://github.com/evergreen-ci/evergreen/blob/bf8b89727cc2690951e6d8ffd67c32f0dd286f88/public/static/app/perf/trend_chart.js#L98]  is invalid for the data in question.""","  `trend_chart.js:246 Uncaught TypeError: Cannot read property 'ops_per_sec' of undefined     at trend_chart.js:246     at Function.m.map.m.collect (underscore-min.js:5)     at calculateYScaleDomain (trend_chart.js:242)     at updateYScaleDomain (trend_chart.js:297)     at trend_chart.js:300     at drawTrendGraph (perf.js:210)     at perf.js:661`  ",0,0,1,0,0,0,0,0,0,0,0,1,0,0,0
"EVG-5967","03/15/2019 14:36:08",2,"Host and task assignments are getting out of sync, leading to stranded tasks ""https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_rhel_62_64_bit_majority_read_concern_off_rollback_fuzzer_66_enterprise_rhel_62_64_bit_majority_read_concern_off_patch_0cfc32589d5f6436e83d6d0d290849cf3798cbae_5c8b3db456234308b157173a_19_03_15_05_59_11/1  https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_rhel_62_64_bit_majority_read_concern_off_rollback_fuzzer_87_enterprise_rhel_62_64_bit_majority_read_concern_off_patch_0cfc32589d5f6436e83d6d0d290849cf3798cbae_5c8b3db456234308b157173a_19_03_15_05_59_11/1  https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_rhel_62_64_bit_majority_read_concern_off_rollback_fuzzer_95_enterprise_rhel_62_64_bit_majority_read_concern_off_patch_0cfc32589d5f6436e83d6d0d290849cf3798cbae_5c8b3db456234308b157173a_19_03_15_05_59_11/1  https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_rhel_62_64_bit_majority_read_concern_off_rollback_fuzzer_clean_shutdowns_12_enterprise_rhel_62_64_bit_majority_read_concern_off_patch_0cfc32589d5f6436e83d6d0d290849cf3798cbae_5c8b3db456234308b157173a_19_03_15_05_59_11/3  https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_rhel_62_64_bit_majority_read_concern_off_rollback_fuzzer_unclean_shutdowns_15_enterprise_rhel_62_64_bit_majority_read_concern_off_patch_0cfc32589d5f6436e83d6d0d290849cf3798cbae_5c8b3db456234308b157173a_19_03_15_05_59_11/3  ""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5968","03/18/2019 13:53:01",1,"Add a tooltip explaining Slack username on notifications page ""Both Geoff Mishkin and I had the same question, so it seems there's room for clarification/simplification.  Easiest thing seems to be a tooltip with something like:    """"Your Slack username should be your default Google account (firstname.lastname) but you can confirm here: https://mongodb.slack.com/account/settings#username.""""""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5972","03/18/2019 19:25:48",2,"Evergreen host teardown failing due to agent deployment (impacting DSI teardown) ""DSI clusters are being stranded due to teardown failures. These failures are occuring because of the following error (s)                  Example host: https://evergreen.mongodb.com/host/i-09849449b7efe5fcf    This was previously reported here:   https://jira.mongodb.org/browse/EVG-2010""","  Warning: Permanently added 'ec2-54-145-199-205.compute-1.amazonaws.com,54.145.199.205' (ECDSA) to the list of known hosts.  bash: /root/evergreen: Text file busy  Connection to ec2-54-145-199-205.compute-1.amazonaws.com closed.    Warning: Permanently added 'ec2-54-221-52-153.compute-1.amazonaws.com,54.221.52.153' (ECDSA) to the list of known hosts.  /root/evergreen: error while loading shared libraries: /root/evergreen: unsupported version 0 of Verneed record    Connection to ec2-54-221-52-153.compute-1.amazonaws.com closed.  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5973","03/18/2019 20:04:03",2,"generate.tasks fails if no tasks are specified with a display_task ""When implementing the new task {{burn_in_tasks_gen}} there are cases where no new tasks will be generated. If a null JSON file is provided ({{}}), then {{generate.tasks}}   will successfully not do anything.    However the requirement is to have on the main build a display task name of {{burn_in_tests}}. This is accomplished inside the JSON file as follows (when there are tasks to generate):  {code}{      """"tasks"""": [          {              """"depends_on"""": [                  {                      """"name"""": """"compile""""                  }              ],               """"commands"""": [                  {                      """"func"""": """"do setup""""                  },                   {                      """"func"""": """"run tests"""",                       """"vars"""": {                          """"resmoke_args"""": """"--suites=causally_consistent_jscore_passthrough --storageEngine=wiredTiger --repeatTestsSecs=600.0 --repeatTestsMin=2 --repeatTestsMax=1000 jstests/core/all2.js""""                      }                  }              ],               """"name"""": """"burn_in:enterprise-rhel-62-64-bit_causally_consistent_jscore_passthrough_0""""          },           {              ],               """"display_tasks"""": [                  {                      """"name"""": """"burn_in_tests"""",                       """"execution_tasks"""": [                          """"burn_in_tests_gen"""",                           """"burn_in:enterprise-rhel-62-64-bit_causally_consistent_jscore_passthrough_0"""",                       ]                  }              ],               """"name"""": """"enterprise-rhel-62-64-bit""""          }      ]  }  {code}  When trying an similar construct with no tasks:  {code}{      """"buildvariants"""": [          {              """"display_tasks"""": [                  {                      """"name"""": """"burn_in_tests"""",                       """"execution_tasks"""": [                          """"burn_in_tests_gen""""                      ]                  }              ],               """"name"""": """"enterprise-rhel-62-64-bit""""          }      ]  }  {code}  The following error is generated:  ""","{      """"tasks"""": [          {              """"depends_on"""": [                  {                      """"name"""": """"compile""""                  }              ],               """"commands"""": [                  {                      """"func"""": """"do setup""""                  },                   {                      """"func"""": """"run tests"""",                       """"vars"""": {                          """"resmoke_args"""": """"--suites=causally_consistent_jscore_passthrough --storageEngine=wiredTiger --repeatTestsSecs=600.0 --repeatTestsMin=2 --repeatTestsMax=1000 jstests/core/all2.js""""                      }                  }              ],               """"name"""": """"burn_in:enterprise-rhel-62-64-bit_causally_consistent_jscore_passthrough_0""""          },           {              ],               """"display_tasks"""": [                  {                      """"name"""": """"burn_in_tests"""",                       """"execution_tasks"""": [                          """"burn_in_tests_gen"""",                           """"burn_in:enterprise-rhel-62-64-bit_causally_consistent_jscore_passthrough_0"""",                       ]                  }              ],               """"name"""": """"enterprise-rhel-62-64-bit""""          }      ]  }  {      """"buildvariants"""": [          {              """"display_tasks"""": [                  {                      """"name"""": """"burn_in_tests"""",                       """"execution_tasks"""": [                          """"burn_in_tests_gen""""                      ]                  }              ],               """"name"""": """"enterprise-rhel-62-64-bit""""          }      ]  }  Command failed: 400 (Bad Request): error reading project yaml: project error: execution task burn_in_tests_gen is listed in more than 1 display task  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5974","03/18/2019 20:27:08",0,"CLI commands don't correctly accept conf file from options ""Some Evergreen CLI commands don't accept a custom {{--conf}} (e.g. {{evergreen --conf custom_evergreen.yml host create}} will still use default {{~/.evergreen.yml}}).""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5976","03/19/2019 13:11:29",1,"Panic in prod in cloud provider """"","  pool/abortable.go:121  runtime/asm_amd64.s:515  runtime/panic.go:489  runtime/panic.go:28  cloud/ec2.go:980  cloud/ec2.go:637  cloud/cloud_host.go:59  units/host_termination.go:217  units/host_monitoring_idle_termination.go:144  pool/helpers.go:28  pool/helpers.go:58  pool/helpers.go:34  pool/abortable.go:174  pool/abortable.go:148  runtime/asm_amd64.s:2197  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5977","03/19/2019 14:47:21",2,"Task posted multiple times to mark end, causing agent to exit ""The agent in this task https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_rhel_62_64_bit_compile_dbtest_7f620154e595d2c1e6c7af79fc62070ced3bb941_19_03_08_16_01_46/0 posted to /end and did not hear back within the timeout, so it posted again. The first of those requests ultimately succeeded, so the second one failed. This causes the agent to exit, which caused the next task to run on a different host. We should add logging to see how common this is, and if it happens regularly we should try to mitigate this problem.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-9248","03/19/2019 15:31:54",2,"make pail bucket type configurable in cedar app ""I added a hack in the rpc service to populate the bucket type field as """"s3"""" but we should make this  configurable at some level, either by adding to the API so that clients could tell us where to save things (which seems like a lot of work with marginal benefits) or as some sort of global application configuration (e.g. a field in model.CedarConfig).     We should consider if/how we want to expose bucket type information to users via the api. ""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-8881","03/19/2019 19:21:03",1,"pail/cedar should have default s3 region ""need default s3 region, otherwise we get errors. ""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-5982","03/20/2019 17:23:32",2,"Add ability to mute/unmute outliers from perf-bb page ""As a performance build baron  I would like to be able to mute/unmute outliers from the perf-bb page  So that I can control outliers from that page.    ----""","",0,1,0,0,0,0,0,0,0,0,0,1,0,0,0
"EVG-5983","03/20/2019 17:42:28",2,"Spot instance requests canceled but instance is running ""It looks like Evergreen is cancelling some spot instance requests but not correctly terminating the hosts, which means that the hosts may be left running.        For some of the cases I checked, the host was in fact running in Evergreen, but for one case I checked, the host did not exist. This case may have been created by the integration test:        Since it's a t2.micro, the cost leaked is probably very small, but we should still review all the """"request-canceled-and-instance-running"""" and make sure all are either running in Evergreen or part of the test, and we should fix the test to actually terminate the host, which at the moment will not be terminated until the reaper terminates it.""","  aws ec2 describe-spot-instance-requests | tee spot-instance-requests.txt | grep Code | sort | uniq -c   853                 """"Code"""": """"fulfilled"""",  4255                 """"Code"""": """"instance-terminated-by-user"""",     5                 """"Code"""": """"pending-evaluation"""",     3                 """"Code"""": """"pending-fulfillment"""",    26                 """"Code"""": """"request-canceled-and-instance-running"""",            {              """"CreateTime"""": """"2019-03-20T17:22:13.000Z"""",              """"InstanceId"""": """"i-0011811bd1ab40e36"""",              """"LaunchSpecification"""": {                  """"SecurityGroups"""": [                      {                          """"GroupName"""": """"default""""                      }                  ],                  """"ImageId"""": """"ami-97785bed"""",                  """"InstanceType"""": """"t2.micro"""",                  """"KeyName"""": """"mci"""",                  """"NetworkInterfaces"""": [                      {                          """"AssociatePublicIpAddress"""": true,                          """"DeviceIndex"""": 0,                          """"SubnetId"""": """"subnet-517c941a""""                      }                  ],                  """"Placement"""": {                      """"AvailabilityZone"""": """"us-east-1a""""                  },                  """"Monitoring"""": {                      """"Enabled"""": false                  }              },              """"LaunchedAvailabilityZone"""": """"us-east-1a"""",              """"ProductDescription"""": """"Linux/UNIX"""",              """"SpotInstanceRequestId"""": """"sir-d9n845qg"""",              """"SpotPrice"""": """"0.005000"""",              """"State"""": """"cancelled"""",              """"Status"""": {                  """"Code"""": """"request-canceled-and-instance-running"""",                  """"Message"""": """"Your Spot request is canceled, but your instance i-0011811bd1ab40e36 is still running."""",                  """"UpdateTime"""": """"2019-03-20T17:22:17.000Z""""              },              """"Tags"""": [                  {                      """"Key"""": """"distro"""",                      """"Value"""": """"test_distro""""                  },                  {                      """"Key"""": """"evergreen-service"""",                      """"Value"""": """"ip-10-122-26-25""""                  },                  {                      """"Key"""": """"expire-on"""",                      """"Value"""": """"2019-03-30""""                  },                  {                      """"Key"""": """"mode"""",                      """"Value"""": """"production""""                  },                  {                      """"Key"""": """"name"""",                      """"Value"""": """"sir-d9n845qg""""                  },                  {                      """"Key"""": """"owner"""",                      """"Value"""": """"mci""""                  },                  {                      """"Key"""": """"start-time"""",                      """"Value"""": """"20190320172211""""                  },                  {                      """"Key"""": """"username"""",                      """"Value"""": """"Ubuntu""""                  }              ],              """"Type"""": """"one-time"""",              """"ValidUntil"""": """"2019-03-27T17:22:13.000Z"""",              """"InstanceInterruptionBehavior"""": """"terminate""""          },  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5989","03/21/2019 14:44:57",1,"Re-add export to CLI ""The `Export()` command was removed in a¬†[previous refactor|https://github.com/evergreen-ci/evergreen/pull/481] and never hooked back into the. CLI. It seems like the command also will return """"Service Unavailable"""" if it's added to the CLI, so that will need to be fixed.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-5991","03/21/2019 18:25:12",1,"500 response returned when trying to create build-break notification ""This is the subscription I'm trying to create:   !Screen Shot 2019-03-21 at 2.23.51 PM.png|thumbnail!       And this is the response I get when clicking save:    ""","  Error parsing request body error attempting to unmarshal into *struct { Identifier string """"json:\""""identifier\""""""""; DisplayName string """"json:\""""display_name\""""""""; RemotePath string """"json:\""""remote_path\""""""""; BatchTime int """"json:\""""batch_time\""""""""; DeactivatePrevious bool """"json:\""""deactivate_previous\""""""""; Branch string """"json:\""""branch_name\""""""""; ProjVarsMap map[string]string """"json:\""""project_vars\""""""""; GitHubAliases []model.ProjectAlias """"json:\""""github_aliases\""""""""; CommitQueueAliases []model.ProjectAlias """"json:\""""commit_queue_aliases\""""""""; PatchAliases []model.ProjectAlias """"json:\""""patch_aliases\""""""""; DeleteAliases []string """"json:\""""delete_aliases\""""""""; PrivateVars map[string]bool """"json:\""""private_vars\""""""""; Enabled bool """"json:\""""enabled\""""""""; Private bool """"json:\""""private\""""""""; Owner string """"json:\""""owner_name\""""""""; Repo string """"json:\""""repo_name\""""""""; Admins []string """"json:\""""admins\""""""""; TracksPushEvents bool """"json:\""""tracks_push_events\""""""""; PRTestingEnabled bool """"json:\""""pr_testing_enabled\""""""""; CommitQueue model.APICommitQueueParams """"json:\""""commit_queue\""""""""; PatchingDisabled bool """"json:\""""patching_disabled\""""""""; AlertConfig map[string][]struct { Provider string """"json:\""""provider\""""""""; Settings map[string]interface {} """"json:\""""settings\"""""""" } """"json:\""""alert_config\""""""""; NotifyOnBuildFailure bool """"json:\""""notify_on_failure\""""""""; ForceRepotrackerRun bool """"json:\""""force_repotracker_run\""""""""; Subscriptions []model.APISubscription """"json:\""""subscriptions\""""""""; DeleteSubscriptions []string """"json:\""""delete_subscriptions\""""""""; Triggers []model.TriggerDefinition """"json:\""""triggers\""""""""; FilesIgnoredFromCache []string """"json:\""""files_ignored_from_cache\""""""""; DisabledStatsCache bool """"json:\""""disabled_stats_cache\"""""""" }: json: cannot unmarshal number into Go struct field APISubscription.trigger_data of type string  ",0,0,0,0,0,0,1,0,0,0,1,0,0,0,0
"EVG-5992","03/21/2019 20:11:52",2,"Some failed test tasks are not sorted before successful ones in Patch Status ""In [this patch build|https://evergreen.mongodb.com/version/5c92bfd0e3c33108e41aec63], some failed tests are not sorted correctly in¬†Patch Status on the right.""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-5993","03/21/2019 21:01:25",2,"distro.planner_settings.version returns empty from API ""From the API    ""","  """"message"""": """"invalid distro.planner_settings.version '' for distro  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-5994","03/22/2019 14:34:09",2,"Version time spent is not the sum of build time spent ""For example, [this patch|https://evergreen.mongodb.com/version/5c941023d6d80a4356130c66] reports its time spent as """"33h 58m 21s"""", while the """"! Enterprise RHEL 6.2"""" [variant|https://evergreen.mongodb.com/build/mongodb_mongo_master_enterprise_rhel_62_64_bit_patch_3789c3e4f1721e4ebd9cd076339a77d505051857_5c941023d6d80a4356130c66_19_03_21_22_29_39] reports time spent of """"78h 28m 16s"""". Is it possible we're summing the wall clock times of the display tasks, instead of their execution tasks? ""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-5995","03/22/2019 15:46:49",3,"UI: The outliers list should always display high confidence outliers, but it should be possible to show /hide low confidence outliers. ""They list of points identified by GESD are divided into high confidence outliers and low confidence outliers.    We should always display the points that identified as high confidence outliers. It should be possible to to toggle the display of low confidence outliers.    The default is to not show low confidence outliers.    The current view allows you to toggle between 'high confidence' outliers and 'low confidence' outliers.""","",0,1,0,0,0,0,0,0,0,0,0,1,0,0,0
"EVG-5996","03/22/2019 21:22:49",0,"Implement monitor ""The runner needs to be able to curl the latest agent, spawn the new agent, and detect when it terminates.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-5999","03/22/2019 21:27:59",2,"Add settings to UI distro page ""Default should be SSH for now. Choosing any of the other options should not actually change the setup/deployment behavior until implemented.""","",0,0,0,1,0,0,0,0,0,0,1,0,0,0,0
"EVG-6000","03/22/2019 21:29:24",2,"Put Jasper CLI on host via SSH ""The CLI used to start Jasper RPC must be put on the host. This does not include actually starting the service.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-6002","03/25/2019 12:36:31",8,"Provide a way to tag specific build variants of a public project as private ""It is currently possible to download the enterprise binaries and debug symbols from evergreen without logging in. That is enough to probably fully recover the enterprise source code from the debug info.    Additionally, it would be inconvenient to add the mqlrun builder to the main server project since we don't want that to be made available outside the walls. But if we don't add it to the main server project, then we need to re-iterate all the server build instructions some other project.    I don't think we need a whole ACL system here, but something that lets us tag specific build variants as non-public within a public project would be useful.  ""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6003","03/25/2019 13:49:09",1,"task-end-stats and task-start-stats should use activated time for latency ""Currently task stats uses the task's creation time. This leads to bad data, because a task may have been originally unscheduled, and scheduled by batch time or by a person. The waiting period we care about is the difference between when someone or something has requested that the task enter the scheduler's queue and the time when the task has started or finished.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6004","03/25/2019 14:14:54",1,"Set up Jasper service via user data ""Functionality should be the same as EVG-6167¬†but done with a user data script when cloud host is spawned rather than in the host setup job.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-8347","03/25/2019 14:40:27",1,"Fix Jasper benchmarks ""Some of the previous changes to basic and blocking process make the benchmarks error.""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-6006","03/25/2019 19:51:38",2,"Project page doesn't load correctly (if the project ID has a . in it?) ""https://evergreen.mongodb.com/projects##evergreen.js is displaying some settings from https://evergreen.mongodb.com/projects##evergreen.py""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-6009","03/25/2019 21:47:11",0,"If ""pre"" fails, the task should fail ""Currently both """"pre"""" and """"post"""" do not affect task outcomes. """"pre"""" should always fail a task, because it is a sign that test setup has failed. We should make a failing step in """"pre"""" fail tasks.    Arguably """"post"""" should cause the task to fail too, to maintain the symmetry between """"pre"""" and """"post"""", and because users may wish to know that """"post"""" has failed. However, users currently rely on this behavior, e.g., """"post to process files that might not exist. No one should rely on """"pre""""'s behavior. This ticket therefore is only about """"pre"""".    We should make a failing step in """"pre"""" fail a task. We should also add an option for users to keep the current behavior of """"pre"""", but this option should be opt in, and the default behavior should be that a failing command in """"pre"""" causes the task to fail.    We should also send an email a few days before we deploy this change so that people are aware their tasks may fail if they are relying on the behavior of pre.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6010","03/25/2019 21:56:55",2,"First character of test names are cut off in Test Results pane ""Apparently my 13-inch MacBook Pro at 1280 pixels is in the sweet spot for this to happen. Making the window width larger than 1485 pixels appears to adjust the spacing so it isn't an issue.""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-8523","03/26/2019 21:08:32",1,"attach artifacts after creating tests ""this will support top level test-id creation and have the artifacts in the bucket keep more uniform and easily traceble""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-6015","03/26/2019 21:09:21",1,"add jasper rest interface to admin handler ""operations/service_web.go getAdminService ""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6016","03/26/2019 21:10:18",2,"replace all bare exec.Command use with jasper ""there are a handful of direct command utilizations in the legacy command-line tools as well as in util/subtree and command/git_test.go  some of the adhoc/build tools in cmd use exec directly as well, which we might have to look at in a case by case basis. ""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6017","03/26/2019 21:10:49",2,"Host Allocator Job removing stale uninitialized hosts ""It's possible that [RemoveStaleInitializing|https://github.com/evergreen-ci/evergreen/blob/37dbd10f5aa1784aac6d5511e781e7e1b209ea6b/model/host/db.go#L528]¬†shouldn't be removing host intents that were spawned by a task, because tasks could end up hanging on them. Should investigate.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6018","03/27/2019 14:17:53",2,"Errors cloning ""Happens occasionally, seems to be mostly on Windows.    """"Command failed: problem running fetch command: exit status 128""""""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6019","03/27/2019 15:38:52",1,"set TEMPDIR vars during evergreen self-tests tests  ""something in build/ (or similar?) and clean it up regularly. ""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-6022","03/27/2019 20:04:50",2,"Commits Out of Order in Task History ""When clicking through the commits in task history, commits with the same create_time are reordered.    For example,¬†when¬†[https://evergreen.mongodb.com/task/sys_perf_linux_1_node_replSet_snapshot_reads_e1f404b1f27b4ef2c38162fbee8b49853fc9f79d_19_03_21_13_20_16]¬†is selected the githash is out of order.¬†""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-6024","03/29/2019 14:30:08",2,"UI: Add a control to allow rejected outlier data to be displayed ""It might be nice to be able to see performance data for rejected tasks.    ¬†    This could be implemented by adding a new toggle to the spanner.""","",0,1,0,0,0,0,0,0,0,0,0,1,0,0,0
"EVG-9133","03/29/2019 19:46:27",2,"key and value names for rollups should be lower case in rollup value ""write a migration as well""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-9193","03/29/2019 19:51:04",2,"rollup versions should append (by default) rather than replacing  ""not just ""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-6030","04/01/2019 19:07:42",1,"/rest/v1/projects/mms/versions?limit=xx doesn't work ""the end point always returns the last 10 versions and with no pagination link""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6031","04/01/2019 22:47:42",2,"Host terminated externally, but task was not restarted ""I see a number of server tasks which finished system-unresponsive because they were terminated externally, but they do not appear to have been restarted, e.g.,¬†[https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_windows_64_2k8_sharding_auth_02_enterprise_windows_64_2k8_83b3ca680119f3bfd991233ddf8b546b9c655949_19_04_01_18_24_00].""","",0,0,0,0,0,0,1,0,0,1,0,0,0,0,0
"EVG-6032","04/02/2019 11:00:53",1,"UI: Outliers list doesn't apply any default sort order ""The outliers list doesn't have a default sort so the items in the list can vary and won't necessarily include the latest outliers.    In the absence of any other sorting, we should probably default to sort on the 'order' field.""","",0,0,1,0,0,0,0,0,0,0,0,1,0,0,0
"EVG-6033","04/02/2019 14:27:07",1,"Failure: test-model-event on Ubuntu 16.04 [Evergreen Self-Tests @ c4163122] (TestRecentHostStatusFinder) ""h2. [test-model-event failed on Ubuntu 16.04|https://evergreen.mongodb.com/task/mci_ubuntu1604_test_model_event_c4163122ee17a01be3caa45f0e5b90aadd26400f_19_04_01_21_55_26/1]  Host: [ec2-100-26-182-205.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-25qr7t9g]  Project: [Evergreen Self-Tests|https://evergreen.mongodb.com/waterfall/mci]  Commit: [diff|https://github.com/evergreen-ci/evergreen/commit/c4163122ee17a01be3caa45f0e5b90aadd26400f]: EVG-5928: pass script to standard input for shell.exec (#2165) | 01 Apr 19 21:55 UTC  Evergreen Subscription: ; Evergreen Event:   *TestRecentHostStatusFinder* - [Logs|https://evergreen.mongodb.com/test_log/5ca3625461837d499d458465] | [History|https://evergreen.mongodb.com/task_history/mci/mci_ubuntu1604_test_model_event_c4163122ee17a01be3caa45f0e5b90aadd26400f_19_04_01_21_55_26#TestRecentHostStatusFinder=fail]    ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-9094","04/02/2019 16:00:35",1,"Add interface to access all RPC functionality ""There are several implemented RPC functions that are not visible to RPC clients in external projects. Since this functionality is in an internal package, it has to be exported so that they can be called outside of the rpc package.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-6036","04/02/2019 23:38:01",1,"Most randomly generated RDP passwords are invalid ""In the UI for a spawn host, the """"Set RDP Password"""" dialog has a helpful random password generation button. Unfortunately, most passwords it generates will not be accepted by the host. Rapidly clicking it and the clipboard button will produce quite a few errors.    ¬†    !image-2019-04-02-18-37-45-128.png!""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-6038","04/03/2019 14:36:16",2,"Tests in Tests Results pane on task page aren't sorted by name ""Note that I'd also expect the failing tests to be sorted by name, then followed by the passing tests sorted by name when sorted by """"Status"""" rather than """"Name"""".""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-8548","04/03/2019 15:14:12",1,"Investigate why gRPC logs not logging to splunk ""Aviation middleware, know it is working for TLS authentication.    Once solved, don't forget to add dashboard to splunk.""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-9006","04/03/2019 16:00:08",1,"Make it easier to set up RPC service/client ""The goal is to make it easier to create servers and clients without asking the user to vendor all gRPC dependencies to start an RPC service.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-6039","04/03/2019 16:21:10",0,"Add functionality to recent_tasks endpoint to bucket and filter by project and distro ""We use the recent tasks endpoint to monitor production, particularly after deploys or if a user has reported a problem https://evergreen.mongodb.com/rest/v2/status/recent_tasks?minutes=1. It would be useful to have an option that would cause those statistics to be broken down by project and distro, and furthermore that filtering (https://evergreen.mongodb.com/rest/v2/status/recent_tasks?minutes=1&status=system-failed) could also be done by project and distro.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-6040","04/03/2019 16:37:34",2,"latency_secs and total_wait_secs in splunk often appear wildly incorrect ""When tracking data on user experience, we're especially interested in latency_secs and total_wait_secs. However, these are often wrong in the logs. We should fix this. Here's an example:  ""","  {    """"distro"""": """"rhel62-large"""",    """"execution"""": 0,    """"host"""": """"sir-hahg45jg"""",    """"host_task_count"""": 16,    """"latency_secs"""": 9223372036.854776,    """"project"""": """"mongodb-mongo-v4.0"""",    """"provider"""": """"ec2"""",    """"requester"""": """"patch_request"""",    """"stat"""": """"task-start-stats"""",    """"task"""": """"sharding_auth_audit_04_enterprise-rhel-62-64-bit"""",    """"task_id"""": """"mongodb_mongo_v4.0_enterprise_rhel_62_64_bit_sharding_auth_audit_04_enterprise_rhel_62_64_bit_patch_57edce7396271531dde4499458b22c9cde1f03d4_5ca4bf75e3c33122e77d058d_19_04_03_14_13_47"""",    """"variant"""": """"enterprise-rhel-62-64-bit""""  }  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6041","04/03/2019 16:44:37",2,"Display task not shown from a generate.tasks which has no additional execution_tasks ""    This config is used in generate.tasks. However the GUI task displayed is still {{burn_in_tests_gen}}""","  {      """"buildvariants"""": [          {              """"display_tasks"""": [                  {                      """"name"""": """"burn_in_tests"""",                      """"execution_tasks"""": [                          """"burn_in_tests_gen""""                      ]                  }              ],              """"name"""": """"enterprise-rhel-62-64-bit""""          }      ]  }  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6042","04/03/2019 18:06:24",2,"Race between idle host job and task dispatching causes tasks to system failure ""It is possible for the following sequence of operations to occur  # There are no tasks in the queue for more than 4 minutes.  # A host idle job begins.  # A host gets a next task from the queue.  # The host idle job terminates this host.  # The task completes as a system failure.    I believe that is what happened in these tasks:  * https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_rhel_62_64_bit_rollback_fuzzer_2_enterprise_rhel_62_64_bit_patch_d99db775dbf73e27bd20e402f26f068dc199203d_5ca4c8690305b9718a48e108_19_04_03_14_51_22  * https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_rhel_62_64_bit_jsCore_txns_patch_d99db775dbf73e27bd20e402f26f068dc199203d_5ca4c8690305b9718a48e108_19_04_03_14_51_22  * https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_rhel_62_64_bit_mongosTest_patch_d99db775dbf73e27bd20e402f26f068dc199203d_5ca4c8690305b9718a48e108_19_04_03_14_51_22  * https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_rhel_62_64_bit_ese_patch_d99db775dbf73e27bd20e402f26f068dc199203d_5ca4c8690305b9718a48e108_19_04_03_14_51_22""","",0,0,0,0,0,0,1,0,0,1,0,0,0,0,0
"EVG-6043","04/03/2019 18:09:10",2,"git clone command's output is not logged ""https://github.com/evergreen-ci/evergreen/commit/f84583c326528615c3623c09c0f21372f4b7f695 caused us to stop logging clone commands. We appear to log when we clone with a token, but not when we clone over SSH. As a result, the mongodb-mongo-master project does not log its clone command, which makes it difficult to verify that they are correct. For example, a recent problem reported by a user could be explained by Evergreen checking out the wrong enterprise module, but there is not a way to check that from the task logs. We should at a minimum make sure that we are logging the command before we execute it. If it is safe (i.e., not in the token case, where we pass a secret on the command line), we should also continue to log git's output.""","",0,0,0,0,0,0,1,0,0,1,0,0,0,0,0
"EVG-8350","04/03/2019 18:42:36",1,"SaveStatus not finding job in db ""Also add job type in unlock method logging and add owner to stats when saving  ""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-6045","04/03/2019 18:56:01",1,"Task page correctly shows task as blocked, but on waterfall the box is yellow ""In this version https://evergreen.mongodb.com/version/5ca4c56de3c33122e77d2918, displays tasks' generators have run, but the execution tasks they created are blocked, because compile failed. The task pages correctly show that these tasks are blocked, but the waterfall displays them as yellow. This is confusing, because it suggests that these tasks are still doing work.""","",0,0,0,0,0,0,1,0,0,0,1,0,0,0,0
"EVG-6046","04/03/2019 20:47:03",1,"Gimlet not parsing errors correctly ""Build was getting a very weird stack trace in their [host.create task¬†|https://evergreen.mongodb.com/task/buildhost_configuration_windows64_2012_test_patch_775968df14c9fcf78103c0a9637f9f55875060b5_5ca24daed6d80a45709a5d00_19_04_01_17_43_13/0]which was tracked down to an error [here|https://github.com/evergreen-ci/evergreen/blob/b497b857abe52ab77602fb68999314905f92939d/rest/route/host_create.go#L77]. The underlying error has since been fixed, but the problem with how the error was sent still exists.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6047","04/04/2019 14:19:26",2,"Tasks marked system failed by cleanup jobs show up as yellow in the build ""ClearAndResetStrandedTask needs to also update the build cache""","",0,0,0,1,0,0,0,0,0,0,1,0,0,0,0
"EVG-6049","04/04/2019 19:17:57",2,"Patches to the enterprise module are applied to the wrong base on spawn hosts ""If you launch a spawn host with the artifacts from the patch test with changes to the enterprise module, the patch for the enterprise module gets applied to HEAD of the enterprise repo rather than the base commit specified in the patch.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6050","04/04/2019 20:54:08",2,"Slack Notification Shows Failed Patch Builds as Successful ""Slack notifications for failed patch builds are showing up green. It's possible the problem is limited to restarts.    Here is a patch from today where I got green Slack notifications for all but the first execution when the task never succeeded: https://evergreen.mongodb.com/version/5ca5355330661517d93becb9    Here's a patch from late March that did have correct Slack notifications: https://evergreen.mongodb.com/version/5c9140690305b9644a477fdb""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6058","04/04/2019 21:53:06",2,"Elapsed time displayed on mouse over is incorrect ""example mci task:  https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_rhel_62_64_bit_display_sharding_patch_4b5ea6e22404c5ebb5208bd96fad69ba2fa0cdb8_5ca3d83f1e2d1766d247a422_19_04_02_21_46_56##%257B%2522compare%2522%253A%255B%257B%2522hash%2522%253A%25224b5ea6e22404c5ebb5208bd96fad69ba2fa0cdb8%2522%257D%255D%257D    example tests:  txn_two_phase_commit_failover.js: mouse over says 40 secs, but if you open the logs, it took roughly 10 minutes. The length of the bar appears to reflect the 10 mins elapsed time.  ""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-8330","04/04/2019 22:19:12",2,"add retry middleware to grpc clients ""This middleware package can probably do what we need, but we might want to copy it and use our logger.  https://github.com/grpc-ecosystem/go-grpc-middleware/tree/master/retry ""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8357","04/04/2019 22:19:15",2,"jasper cli for running commands ""basically we want to have an easy CLI for testing and other manual administration operations.  should have a """"start command in background"""" and also """"wait for a command to finish.""""  maybe we can hook it up to the in-memory sender so we can, effectively tail the log from jasper as the command runs. ""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8395","04/04/2019 22:19:16",2,"move certdepot to it's own package ""we'll want to:    - come up with a better name, maybe,  - create a new repo in evergreen-ci - create evergreen projects and configs ""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-6051","04/04/2019 22:19:18",2,"cleanup testutil package ""with the new environment configurations, a lot of the infrastructure in the testutil package can probably be deleted, particularly the code that gets the settings, which should just be accessed from the environment  ""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6053","04/04/2019 22:19:34",1,"evergreen should panic on start if it imports testutil pacakge ""this would have the effect of using a test config in production. ""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-9187","04/04/2019 22:22:51",1,"Provide Example S3 Bucket Policy for Expanded Metrics Data ""It'd be nice if the cedar metrics data were not publicly readable.    One way to do this could be to set the bucket policy for the bucket storing cedar metrics. This policy could then be included in poplar's wiki or readme for future projects to use.    I think something [like this|https://docs.aws.amazon.com/AmazonS3/latest/dev/example-walkthroughs-managing-access-example1.html#grant-permissions-to-user-in-your-account-step1] should work mostly out of the box after changing the Principal to Cedar's AWS user.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-6055","04/05/2019 16:53:33",2,"Check for system manager by OS/distro ""System manager differs by OS (WIndows, MacOS, Linux) and distro (e.g. rhel, suse, amazon, ubuntu).""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-6056","04/05/2019 16:54:46",0,"Modify user data to put Curator on host ""User data passed to instances should have user data with a command to download Curator.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-6057","04/05/2019 19:15:05",1,"Seeing some variants missing in the UI for an ""ignored files"" build ""Build is: https://evergreen.mongodb.com/version/mongodb_mongo_v4.0_fc525e2d9b0e4bceff5c2201457e564362909765#/0  Missing variant from the UI (and API) is: enterprise-rhel-70-64-bit    Not in an """"ignored files"""" version but same result: https://evergreen.mongodb.com/version/mongodb_mongo_v4.0_9c58f99b8c66e045881c921fb8bef70d93efc5ca""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-6059","04/06/2019 16:49:58",2,"Previous execution task history disappears after restarting task ""I restarted this task in a patch build to see if its failures were intermittent:    https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_rhel_62_64_bit_display_noPassthrough_patch_78a00318d39bc35c2091775e74bf0dde780d950f_5ca8ad8b3066156c387bc27d_19_04_06_13_45_48/    After I restarted it, switching the page to view a previous execution of the task no longer displays subtask outcomes. See attached video.""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-8380","04/08/2019 13:55:33",1,"Poplar not propagating bucket prefix to server. ""Also, Cedar has no bucket prefix field in the ArtifactInfo struct. Make sure to add this to the bucket creating with the ftdc rollups job.""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8407","04/08/2019 14:45:23",2,"Migrate existing cedar data to have prefix ""Try and add prefix field to existing data that does not have it (coordinate with TIG on prefix naming conventions)""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-6061","04/08/2019 14:55:19",2,"Failures: test-agent on OSX [Evergreen Self-Tests @ 0e29aaa3] (TestStatusSuite, TestAgentFailsToStartTwice) ""h2. [test-agent failed on OSX|https://evergreen.mongodb.com/task/mci_osx_test_agent_0e29aaa37e0c68fbfe7f2921d8ff26b3d732f17b_19_04_08_13_41_20/0]  Host: [macos-1012-76.macstadium.build.10gen.cc|https://evergreen.mongodb.com/host/macos-1012-76.macstadium.build.10gen.cc]  Project: [Evergreen Self-Tests|https://evergreen.mongodb.com/waterfall/mci]  Commit: [diff|https://github.com/evergreen-ci/evergreen/commit/0e29aaa37e0c68fbfe7f2921d8ff26b3d732f17b]: Revert """"EVG-6001: Change MongoDB Driver to go.mongodb.org/mongo-driver (#2164)""""    This reverts commit 8ca30bd10bcaeae9c1a67cae8d85d7624ecd0013. | 08 Apr 19 13:41 UTC  Evergreen Subscription: ; Evergreen Event:   *TestStatusSuite* - [Logs|https://evergreen.mongodb.com/test_log/5cab505f3066156c387d4ed1] | [History|https://evergreen.mongodb.com/task_history/mci/mci_osx_test_agent_0e29aaa37e0c68fbfe7f2921d8ff26b3d732f17b_19_04_08_13_41_20#TestStatusSuite=fail]  *TestAgentFailsToStartTwice* - [Logs|https://evergreen.mongodb.com/test_log/5cab505f3066156c387d4ed1] | [History|https://evergreen.mongodb.com/task_history/mci/mci_osx_test_agent_0e29aaa37e0c68fbfe7f2921d8ff26b3d732f17b_19_04_08_13_41_20#TestAgentFailsToStartTwice=fail]    ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-8661","04/08/2019 17:29:51",1,"Add ability to bootstrap certdepot with existing mongo client ""And make sure operations/service.go uses existing client""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8439","04/08/2019 20:51:32",1,"Rollups calculation overflow ""Due to assuming time data is not cumulative ""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-9047","04/08/2019 21:00:43",0,"Change distribution remote location to be more general ""Instead of pushing based on task name, it should push by GOOS/GOARCH.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-6065","04/09/2019 15:05:55",1,"Add Jasper CLI URL and version to admin page ""This is necessary so the provisioning jobs know where to get the Jasper CLI.""","",0,0,0,1,0,0,0,0,0,0,1,0,0,0,0
"EVG-6069","04/09/2019 16:46:58",1,"lobster filter default should be changed to ""and"" ""Could we change the default of """"Filter Logic"""" to be """"And"""" instead of """"Or""""?  In particular, the current default is not only unhelpful, the state of the toggle isn't included in the URL, so I always have to tell people to manually change it after sharing a lobster URL that includes filters.""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-6070","04/09/2019 16:54:53",1,"Change assignNextAvailableTask to use the distro settings instead of the embedded distro document ""Currently assignNextAvailableTask uses the embedded distro document, which means that we cannot simply flip a switch in the distro config in order to use the new task dispatching mechanism. We should change this to use a FindOne to get the distro.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8373","04/09/2019 19:26:54",1,"Download jobs can occasionally hang ""Task failure: [https://evergreen.mongodb.com/task/jasper_windows_test_4e2ac48a5d2fcf1cfa97379ef35557e00c9df813_19_04_09_14_11_36]    ¬†    It seems like the job is not being properly terminated after the context cancels. It might also make sense to add some retry logic to download.""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-6074","04/10/2019 17:16:49",1,"Inefficient query in GetParent() ""GetParent() includes checking if the tag equals the parentId, which is currently unindexed.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6075","04/10/2019 18:43:17",1,"Allow Jasper CLI options to be configurable ""The binary name (i.e. curator for now) should be configurable, as well as the RPC service port.""","",0,0,0,1,0,0,0,0,0,0,1,0,0,0,0
"EVG-6170","04/10/2019 19:21:27",8,"Turn on new task queue service in production ""After EVG-6070, I believe we can start experimenting with the new task queue service. We can turn it on on many distros in staging, and if that looks good, we could turn it on in production on a carefully selected and monitored distro as well.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-6198","04/11/2019 00:15:06",2,"Some tasks in a variant aren't getting scheduled ""See comment (5/20/19)""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6080","04/11/2019 21:48:17",1,"Create command to download files on host ""This will make getting Jasper CLI on the host easier.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-9325","04/12/2019 15:26:35",1,"Add dry-run flag to curator poplar report send ""Follow-up from discussion with [~sam.kleinman], to make it easier to run workloads locally without having to report data.¬†""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-6082","04/12/2019 18:12:10",2,"Evergreen patch command does not report the same errors as validate ""If a project config references a distro that does not exist, {{evergreen validate}} will fail. However, {{evergreen patch}} succeeds. It should not.          ""","  evergreen validate self-tests.yml  WARNING: buildvariant 'ubuntu1604-arm64' in project '' references a non-existent distro 'ubuntu1604-arm-small'.  Valid distros include:  [...]    evergreen patch -p mci -v ubuntu1604 -t all -y  Patch successfully created.          ID : 5cb0c6dc1e2d175b47dca8aa   Created : 2019-04-12 17:11:56.591 +0000 UTC      Description : <none>     Build : https://evergreen.mongodb.com/patch/5cb0c6dc1e2d175b47dca8aa        Finalized : No  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6083","04/12/2019 23:13:34",2,"Accommodate long variant names on the Versions Pages ""On the Versions by Variant page, long variant names are obscured.  If the long variant names are unique at the _end_ of the name, it is very hard to tell them apart.  For example, we have several variants that start with """"E2E w local & daemon"""" but then end with different qualifiers.  I cant' tell them apart on this view.    https://evergreen.mongodb.com/version/mms_e2a69e9b305c444bb6beb0ddd3b96c4ce3d2b7e5##0    !longnames.png|width=95%!""","",0,1,0,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-6085","04/15/2019 17:07:11",2,"Fix TestOOMSucceeds on OSX ""Failure: https://evergreen.mongodb.com/task/evergreen_osx_test_agent_d625fb79f8a41540fcebfcc55fd23e504a6f3463_19_04_15_15_22_47""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6087","04/15/2019 21:51:19",1,"Performance trend graphs not matching data ""Currently, the performance trend graph data is only displaying one of the rollup metrics from cedar and it is displaying it with the wrong metric (the data in the example below is the latency, but is showing up as ops/sec).    [Evergreen UI|https://evergreen.mongodb.com/task/sys_perf_linux_3_node_replSet_insert_remove_ffa171bc887edb1a08c06033f64b05cbe676cd7d_19_04_11_00_11_48]    [Cedar data|https://cedar.mongodb.com/rest/v1/perf/task_id/sys_perf_linux_3_node_replSet_insert_remove_ffa171bc887edb1a08c06033f64b05cbe676cd7d_19_04_11_00_11_48]""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-6088","04/16/2019 14:51:10",1,"Task shows as 'incomplete' (yellow box) even though all sub-tasks have succeeded ""In [this patch|https://evergreen.mongodb.com/version/5cb53177e3c3314d8d1c3a30], as of the time of filing of the ticket, the `multi_shard_multi_stmt_txn_jscore_passthrough `  task is shown in yellow (ETA: unknown), but when I [click on the task|https://evergreen.mongodb.com/task/mongodb_mongo_master_linux_64_debug_display_multi_shard_multi_stmt_txn_jscore_passthrough_patch_49436ebda24b3a36bfc84624d9da09850ed6e255_5cb53177e3c3314d8d1c3a30_19_04_16_01_36_07##%257B%2522compare%2522%253A%255B%257B%2522hash%2522%253A%252249436ebda24b3a36bfc84624d9da09850ed6e255%2522%257D%255D%257D], all the sub-tasks have succeeded.    NOTE: I am done with this patch build in case you want to mess around with it while investigating.""","",0,0,0,0,1,0,0,0,0,0,1,0,0,0,0
"EVG-9269","04/16/2019 20:11:57",2,"parallelize upload of data ""we should do some amount of parallelism (probably not amboy, just threads/etc.) of uploading/converting/sending multiple tests. ""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-6092","04/17/2019 15:50:45",1,"collect data for idle  ""probably need to set a created time field in the host document so we can see how much of each host is up plus idle time""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-6093","04/17/2019 17:41:54",2,"PR patch changing the project file in an invalid way doesn't show error ""This happened when someone accidentally introduced a syntax error in the project file as part of a PR. The PR checks didn't start running from what I can tell, and no error was reflected on GitHub.""","",0,0,0,0,0,0,1,0,0,1,0,0,0,0,0
"EVG-6094","04/17/2019 17:52:13",0,"Extend the PATCH project route to project admins ""Currently the route¬†https://evergreen.mongodb.com/api/rest/v2/projects/\{project_id}    is limited to superusers, it would be nice if it could be extended to project admins.    Part of our release process involves using the project UI to update the """"branch_name"""" field, it would be a huge help to us if it was possible to do this through the API as a project admin.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6095","04/17/2019 20:41:06",2,"Filter canaries in the perf discovery page ""Add configuration for easily filtering out canaries in the performance discovery page.   Currently users need to manually enter {{^((?!canary|fio|NetworkB).)\*$}} to filter tests.""","",0,1,0,0,0,0,0,0,0,0,1,1,0,0,0
"EVG-6096","04/17/2019 22:01:15",2,"Seeing 500 errors from task json history endpoint ""We have an ETL cron job that queries the task json history endpoint for various tasks. The job occasionally gets a 500 error when hitting the endpoint, which causes the cron job to have errors. The cron logs don't give us a whole lot of information about what causing the error.     The logs can be see in [splunk|https://mongodb.splunkcloud.com/en-US/app/search/search?s=%2FservicesNS%2Fnobody%2Fsearch%2Fsaved%2Fsearches%2FDSI%2520etl-evg-mongo%2520has%2520not%2520run%2520successfully&display.page.search.mode=smart&dispatch.sample_ratio=1&q=search%20index%3D%22server-dsi-prod%22%20sourcetype%3D%22kube%3Acontainer%3Aetl-evg-mongo%22&earliest=-7d&latest=now&display.prefs.events.offset=150&sid=1555534651.1656700]    One of the recent queries being made is https://evergreen.mongodb.com/api/2/task/sys_perf_linux_shard_lite_change_streams_throughput_d7fb557f6fc6d486fa7107a8f64342caf552eeb4_19_04_17_15_09_44/json/history/change_streams_throughput/perf    We are curious if there is a way to get more information on what is causing the 500.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-9194","04/18/2019 16:13:35",2,"Create Jasper CLI to interface with managers/processes ""The Jasper CLI gives remote Jasper managers an interface to communicate with local Jasper services without directly connecting to the Jasper service (i.e. the app server should be able to talk to hosts by invoking the Jasper CLI over SSH, which then forwards the request to the host's Jasper service and returns the result output).    ¬†    It should be able to accept arbitrary stdin input and write the result data to stdout. It should be able to send requests to either the REST service or RPC service.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-8436","04/18/2019 18:35:05",2,"Poplar shouldn't make metric values arrays ""For example https://cedar.mongodb.com/rest/v1/perf/task_id/sys_perf_wtdevelop_3_node_replSet_industry_benchmarks_secondary_reads_patch_89c2fb00ae1745ac04f5ca80911f432b13c66f7e_5c706835a4cf4720d1a64efa_19_02_22_21_24_52""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-6097","04/18/2019 19:21:55",1,"Distros should have different options to communicate with hosts ""The distro page should have options to configure how it executes commands on hosts. Each distro should have the option to:   * Use the existing behavior of directly running commands over SSH (legacy).   * Use SSH, but indirectly run commands through the host's Jasper service by invoking the Jasper CLI (new SSH).   * Use gRPC to make requests directly to the host's Jasper service.""","",0,0,0,1,0,0,0,0,0,0,1,0,0,0,0
"EVG-6099","04/18/2019 22:45:01",2,"Commit Queue completed, but didn't merge change ""I was trying out the commit queue for a project. It looks like the commit queue generated an evergreen version and all the tasks completed successfully, but the PR was not merged. It also didn't update github of the success of the version.     The PR is here: https://github.com/evergreen-ci/evergreen.py/pull/10 (i may manually merge this before you get a change to see it).  The evergreen version is here: https://evergreen.mongodb.com/version/5cb8e67f32f4173adf68c98b""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6100","04/19/2019 15:47:17",3,"Getting Logs/Status for Docker Container doesn't work ""Responses are flaky, almost certainly due to one of the jobs removing containers before host.create has exited. Possible solution is for jobs to never remove containers spawned by tasks.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8371","04/19/2019 16:29:19",0,"Processes don't correctly detect when underlying process has ended due to timeout ""Jasper has functionality to [run triggers when the process has terminated due to timeout|[https://github.com/mongodb/jasper/blob/c7473fd79ef6c88d90ed5a201d36096166062e35/triggers.go#L81-L99].] This currently will not execute, since the `Timeout` field is never set in the `ProcessInfo`. This functionality should be either removed or fixed in the process implementations to detect when the process has exited due to timeout.      Another potential issue with respawned processes is that respawned processes do not receive the default trigger since the¬† trigger is set [in the manager's `CreateProcess`|https://github.com/mongodb/jasper/blob/c7473fd79ef6c88d90ed5a201d36096166062e35/manager_basic.go#L58], but not in `Respawn`.""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8991","04/19/2019 17:59:20",0,"RPC should allow in-memory logs to be checked ""This functionality already exists in the [REST service|https://github.com/mongodb/jasper/blob/4cd0d9cec44f3d9c77bb6dca1fbb26b728425310/rest_service.go#L533-L576]. The logs should be sent as a buffered stream.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-8832","04/20/2019 00:33:08",2,"Failures: race-pool on Race Detector [Amboy @ 7cd8d05e] (TestRunnerImplementations, SingleCloseImpactsStateAsExpected) ""h2. [race-pool failed on Race Detector|https://evergreen.mongodb.com/task/amboy_race_detector_race_pool_7cd8d05ee7bfe909746b70ed61043dc441890964_19_04_19_14_26_21/0]  Host: [ec2-3-89-44-156.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-58f8422j]  Project: [Amboy|https://evergreen.mongodb.com/waterfall/amboy]  Commit: [diff|https://github.com/mongodb/amboy/commit/7cd8d05ee7bfe909746b70ed61043dc441890964]: MAKE-735: clewanup logging (#82) | 19 Apr 19 14:26 UTC  Evergreen Subscription: ; Evergreen Event:   *TestRunnerImplementations* - [Logs|https://evergreen.mongodb.com/test_log/5cb9df430ae606426d29a8c2] | [History|https://evergreen.mongodb.com/task_history/amboy/amboy_race_detector_race_pool_7cd8d05ee7bfe909746b70ed61043dc441890964_19_04_19_14_26_21#TestRunnerImplementations=fail]  *SingleCloseImpactsStateAsExpected* - [Logs|https://evergreen.mongodb.com/test_log/5cb9df430ae606426d29a8c2] | [History|https://evergreen.mongodb.com/task_history/amboy/amboy_race_detector_race_pool_7cd8d05ee7bfe909746b70ed61043dc441890964_19_04_19_14_26_21#SingleCloseImpactsStateAsExpected=fail]    ""","",0,0,0,0,1,0,0,0,0,0,0,0,1,0,0
"EVG-8823","04/20/2019 00:33:44",2,"Failures: race-queue on Race Detector [Amboy @ 7cd8d05e] (TestQueueGroupOperations, Mongo, Close, TestQueueGroupConstructorPruneSmokeTest, TestSmokeMongoDriverRemoteTwoQueueRunsJobsOnlyOnce, TestSmokeMongoDriverRemoteManyQueueRunsJobsOnlyOnce +11 more) ""h2. [race-queue failed on Race Detector|https://evergreen.mongodb.com/task/amboy_race_detector_race_queue_7cd8d05ee7bfe909746b70ed61043dc441890964_19_04_19_14_26_21/0]  Host: [ec2-18-212-114-126.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-d73i5qbg]  Project: [Amboy|https://evergreen.mongodb.com/waterfall/amboy]  Commit: [diff|https://github.com/mongodb/amboy/commit/7cd8d05ee7bfe909746b70ed61043dc441890964]: MAKE-735: clewanup logging (#82) | 19 Apr 19 14:26 UTC  Evergreen Subscription: ; Evergreen Event:   *TestQueueGroupOperations* - [Logs|https://evergreen.mongodb.com/test_log/5cb9dee13066150c55df1188] | [History|https://evergreen.mongodb.com/task_history/amboy/amboy_race_detector_race_queue_7cd8d05ee7bfe909746b70ed61043dc441890964_19_04_19_14_26_21#TestQueueGroupOperations=fail]  *Mongo* - [Logs|https://evergreen.mongodb.com/test_log/5cb9dee13066150c55df1188] | [History|https://evergreen.mongodb.com/task_history/amboy/amboy_race_detector_race_queue_7cd8d05ee7bfe909746b70ed61043dc441890964_19_04_19_14_26_21#Mongo=fail]  *Close* - [Logs|https://evergreen.mongodb.com/test_log/5cb9dee13066150c55df1188] | [History|https://evergreen.mongodb.com/task_history/amboy/amboy_race_detector_race_queue_7cd8d05ee7bfe909746b70ed61043dc441890964_19_04_19_14_26_21#Close=fail]  *TestQueueGroupConstructorPruneSmokeTest* - [Logs|https://evergreen.mongodb.com/test_log/5cb9dee13066150c55df1188] | [History|https://evergreen.mongodb.com/task_history/amboy/amboy_race_detector_race_queue_7cd8d05ee7bfe909746b70ed61043dc441890964_19_04_19_14_26_21#TestQueueGroupConstructorPruneSmokeTest=fail]  *TestSmokeMongoDriverRemoteTwoQueueRunsJobsOnlyOnce* - [Logs|https://evergreen.mongodb.com/test_log/5cb9dee13066150c55df1188] | [History|https://evergreen.mongodb.com/task_history/amboy/amboy_race_detector_race_queue_7cd8d05ee7bfe909746b70ed61043dc441890964_19_04_19_14_26_21#TestSmokeMongoDriverRemoteTwoQueueRunsJobsOnlyOnce=fail]  *TestSmokeMongoDriverRemoteManyQueueRunsJobsOnlyOnce* - [Logs|https://evergreen.mongodb.com/test_log/5cb9dee13066150c55df1188] | [History|https://evergreen.mongodb.com/task_history/amboy/amboy_race_detector_race_queue_7cd8d05ee7bfe909746b70ed61043dc441890964_19_04_19_14_26_21#TestSmokeMongoDriverRemoteManyQueueRunsJobsOnlyOnce=fail]  *TestSQSFifoQueueRunsJobsOnlyOnce* - [Logs|https://evergreen.mongodb.com/test_log/5cb9dee13066150c55df1188] | [History|https://evergreen.mongodb.com/task_history/amboy/amboy_race_detector_race_queue_7cd8d05ee7bfe909746b70ed61043dc441890964_19_04_19_14_26_21#TestSQSFifoQueueRunsJobsOnlyOnce=fail]  *TestMultipleSQSFifoQueueRunsJobsOnlyOnce* - [Logs|https://evergreen.mongodb.com/test_log/5cb9dee13066150c55df1188] | [History|https://evergreen.mongodb.com/task_history/amboy/amboy_race_detector_race_queue_7cd8d05ee7bfe909746b70ed61043dc441890964_19_04_19_14_26_21#TestMultipleSQSFifoQueueRunsJobsOnlyOnce=fail]  *TestSmokeRemoteUnorderedWorkerPoolsWithMongoDriver* - [Logs|https://evergreen.mongodb.com/test_log/5cb9dee13066150c55df1188] | [History|https://evergreen.mongodb.com/task_history/amboy/amboy_race_detector_race_queue_7cd8d05ee7bfe909746b70ed61043dc441890964_19_04_19_14_26_21#TestSmokeRemoteUnorderedWorkerPoolsWithMongoDriver=fail]  *TestSmokeMultipleMongoDriverRemoteUnorderedQueuesWithTheSameName* - [Logs|https://evergreen.mongodb.com/test_log/5cb9dee13066150c55df1188] | [History|https://evergreen.mongodb.com/task_history/amboy/amboy_race_detector_race_queue_7cd8d05ee7bfe909746b70ed61043dc441890964_19_04_19_14_26_21#TestSmokeMultipleMongoDriverRemoteUnorderedQueuesWithTheSameName=fail]  *TestSmokeMultipleMongoBackedRemoteUnorderedQueuesWithTheSameName* - [Logs|https://evergreen.mongodb.com/test_log/5cb9dee13066150c55df1188] | [History|https://evergreen.mongodb.com/task_history/amboy/amboy_race_detector_race_queue_7cd8d05ee7bfe909746b70ed61043dc441890964_19_04_19_14_26_21#TestSmokeMultipleMongoBackedRemoteUnorderedQueuesWithTheSameName=fail]  *TestSmokeMultipleMongoDriverRemoteOrderedQueuesWithTheSameName* - [Logs|https://evergreen.mongodb.com/test_log/5cb9dee13066150c55df1188] | [History|https://evergreen.mongodb.com/task_history/amboy/amboy_race_detector_race_queue_7cd8d05ee7bfe909746b70ed61043dc441890964_19_04_19_14_26_21#TestSmokeMultipleMongoDriverRemoteOrderedQueuesWithTheSameName=fail]  *TestSmokeWaitUntilMongoDriver* - [Logs|https://evergreen.mongodb.com/test_log/5cb9dee13066150c55df1188] | [History|https://evergreen.mongodb.com/task_history/amboy/amboy_race_detector_race_queue_7cd8d05ee7bfe909746b70ed61043dc441890964_19_04_19_14_26_21#TestSmokeWaitUntilMongoDriver=fail]  *TestQueueGroupOperations* - [Logs|https://evergreen.mongodb.com/test_log/5cb9dee13066150c55df1188] | [History|https://evergreen.mongodb.com/task_history/amboy/amboy_race_detector_race_queue_7cd8d05ee7bfe909746b70ed61043dc441890964_19_04_19_14_26_21#TestQueueGroupOperations=fail]  *Mongo* - [Logs|https://evergreen.mongodb.com/test_log/5cb9dee13066150c55df1188] | [History|https://evergreen.mongodb.com/task_history/amboy/amboy_race_detector_race_queue_7cd8d05ee7bfe909746b70ed61043dc441890964_19_04_19_14_26_21#Mongo=fail]  *PruneWithTTL* - [Logs|https://evergreen.mongodb.com/test_log/5cb9dee13066150c55df1188] | [History|https://evergreen.mongodb.com/task_history/amboy/amboy_race_detector_race_queue_7cd8d05ee7bfe909746b70ed61043dc441890964_19_04_19_14_26_21#PruneWithTTL=fail]  *TestSmokeMgoDriverRemoteManyQueueRunsJobsOnlyOnce* - [Logs|https://evergreen.mongodb.com/test_log/5cb9dee13066150c55df1188] | [History|https://evergreen.mongodb.com/task_history/amboy/amboy_race_detector_race_queue_7cd8d05ee7bfe909746b70ed61043dc441890964_19_04_19_14_26_21#TestSmokeMgoDriverRemoteManyQueueRunsJobsOnlyOnce=fail]    ""","",0,0,0,0,1,0,0,0,0,0,0,0,1,0,0
"EVG-6103","04/22/2019 15:00:46",1,"Do not send email for teardown failures ""This is already sent to Splunk. I'd like to reuse this email address for only high-value, actionable alerts.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-9223","04/22/2019 15:05:35",1,"jasper shell job implementation ""write an amboy job, probably in the jasper code base (separate package?), that is easily constructable, with regards to jasper fundamentals, to execute shell jobs in the background.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-9165","04/22/2019 15:07:00",2,"cli tools for accessing/reporting data from amboy interfaces ""using the reporting client.    to be eventually combined with the jasper SSH tools for remote acess.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-9130","04/22/2019 15:08:16",1,"amboy queue groups in one collection  ""to cover    https://github.com/mongodb/amboy/pull/83""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-6106","04/22/2019 22:00:54",0,"Some small Cedar Evergreen UI glitches ""Three major things:  1. Change points should only be displayed for their corresponding metric.  2. Any test for which a metric is not calculated should have it's name visible on the page but the graph collapsed when that metric is selected.  3. The numeric representation of the metric data (under the date on the left-hand side of the trend graph, an example in the screenshot below) always shows ops/sec even when another metric is selected.""","",0,0,1,0,0,0,0,0,0,0,0,1,0,0,0
"EVG-6108","04/24/2019 11:51:03",3,"Add a new 'Rejected Outliers' tab to support white listing. ""As a Performance BB / Perf Engineer  When I find a task that has been setup failed / rejected  And I know that this is a permanent / persistent change  Then I can whitelist a task from the build baron page (new 'Rejected Outliers' tab)  So that these results are not rejected and subsequent task runs will not be rejected.  ----    AC  The rejected status of the latest performance result will be cleared  # The test results should be visible without having to toggle the 'show rejected' data radio button.  # The status on the task page should be updated to show that this task is whitelisted. *We need to investigate if the status of a task can be changed in evergreen without rerunning a task as this would allow both the task and waterfall pages to update without the  need to rerun the task.*  Any subsequent run of this task will not be rejected.  ""","",0,1,0,0,0,0,0,0,0,0,0,1,0,0,0
"EVG-6109","04/24/2019 15:13:49",1,"Failure: js-test on Ubuntu 16.04 [Evergreen (release) @ a529aa11] (PerfPluginTests.PerfPluginTests_expanded_metrics_data_should_be_converted_correctly_to_legacy_data) "" h2. [js-test failed on Ubuntu 16.04|https://evergreen.mongodb.com/task/mci_ubuntu1604_js_test_a529aa11f7780cd9b53b0d6fafd6616c663f2c2a_19_04_23_19_50_18/0] Host: [ec2-3-94-95-54.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-wq9r7gnk] Project: [Evergreen (release)|https://evergreen.mongodb.com/waterfall/mci] Commit: [diff|https://github.com/evergreen-ci/evergreen/commit/a529aa11f7780cd9b53b0d6fafd6616c663f2c2a]: EVG-6018 Fix up agent deploy lock (#2219)  (cherry picked from commit ba8215d289e8001a6fd72daf8c7ee7f8a4aff7b6) | 23 Apr 19 19:50 UTC Evergreen Subscription: ; Evergreen Event:  *PerfPluginTests.PerfPluginTests_expanded_metrics_data_should_be_converted_correctly_to_legacy_data* - [Logs|https://evergreen.mongodb.com/test_log/5cbf706061837d5a4e791184] | [History|https://evergreen.mongodb.com/task_history/mci/mci_ubuntu1604_js_test_a529aa11f7780cd9b53b0d6fafd6616c663f2c2a_19_04_23_19_50_18#PerfPluginTests.PerfPluginTests_expanded_metrics_data_should_be_converted_correctly_to_legacy_data=fail]  ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-6110","04/24/2019 15:25:58",2,"Hidden change points should not be plotted on the trend charts ""At the moment, hidden change points are rendered as a [blue line|https://github.com/evergreen-ci/evergreen/blob/e23c4ce4d586236b99e25371fa0350dda48b3bfb/public/static/app/perf/trend_chart.js#L652-L659] on the trend charts.    By default, Hidden change points should not be rendered on the trend charts. (The [visibilty|https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/visibility] attribute would make this relatively straight forward).   But it should be possible to toggle visibility of any hidden change points in some fashion.  (The [toolbar|https://github.com/evergreen-ci/evergreen/blob/d84c85743a6e0a545ab412f58571516022ea7aa4/service/templates/task_perf_data.html#L317-L338] is getting a bit full now, another approach needs to be investigated).""","",0,0,1,0,0,0,0,0,0,0,0,1,0,0,0
"EVG-6113","04/24/2019 22:18:22",1,"Pushing a commit with a function that has no commands panics the repotracker ""I pushed a commit that commented out not quite enough evergreen.yml, which meant that there was a function that did not have commands. This caused the repotracker to panic and prevented the version from being created.  ""","  pool/abortable.go:138   runtime/asm_amd64.s:515   runtime/panic.go:489   runtime/panic.go:63   runtime/signal_unix.go:290   validator/project_validator.go:739   validator/project_validator.go:151   repotracker/repotracker.go:593   repotracker/repotracker.go:302   repotracker/repotracker.go:178   repotracker/wrappers.go:57   units/repotracker.go:109   pool/helpers.go:45   pool/helpers.go:24   pool/abortable.go:195   pool/abortable.go:167   runtime/asm_amd64.s:2197 ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6114","04/25/2019 14:27:43",2,"move attach xunit and gotest commands from usinsg filepath.Glob to gitignore-style globbing ""These commands should use util.BuildFileList so that they support gitignore-style globbing instead of the more limited set of globbing from filepath.Glob.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6116","04/25/2019 16:05:34",1,"Add documentation for ""Commit Queue"" on projects page ""I don't fully appreciate what the feature is about.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6122","04/26/2019 21:54:19",2,"Sort option does nothing for Tasks pane ""[Consider this page|https://evergreen.mongodb.com/task/mongodb_mongo_master_linux_64_debug_unittests_patch_36cccd4d5f3a1bbae2a4c04841204152e641514c_5cc2016732f417216b1a16c0_19_04_25_18_51_10/0#/sort=Status].    Attempt to change sort to """"Name"""" (or any other value). Notice how it does nothing. Screenshot here.""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-6123","04/28/2019 04:56:45",2,"evergreen list should able to list keys ""The evergreen host create command requires a --key flag which can be a key name. I currently have no way to list my saved keys except for using the spawn host UI which defeats the purpose of having the CLI command.    There should be a flag for evergreen list to get these keys: {{evergreen list --keys}} or --key-names or whatever you feel is appropriate.""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6125","04/29/2019 18:37:58",2,"Host running task group was terminated for being idle, causing later task in group to fail ""[Running a patch build|https://evergreen.mongodb.com/version/5cc4a89bc9ec442cd74095b5] off commit b6cc1fb89f8fbf92c66ef6274a1de1ad310b2fb1, with small changes only in .h and .cpp files. The tasks dbtest! and unittests! fail. The dbtest! failure logs:    And unittests! logs:  ""","  [2019/04/28 01:33:43.771] Traceback (most recent call last):  [2019/04/28 01:33:43.771]   File """"buildscripts/evergreen_run_tests.py"""", line 149, in <module>  [2019/04/28 01:33:43.771]     main.run()  [2019/04/28 01:33:43.771]   File """"/data/mci/02406ee2984a5f4f41629757fc28785a/src/buildscripts/resmoke.py"""", line 100, in run  [2019/04/28 01:33:43.771]     self.run_tests()  [2019/04/28 01:33:43.771]   File """"/data/mci/02406ee2984a5f4f41629757fc28785a/src/buildscripts/resmoke.py"""", line 155, in run_tests  [2019/04/28 01:33:43.771]     suites = self._get_suites()  [2019/04/28 01:33:43.771]   File """"buildscripts/evergreen_run_tests.py"""", line 114, in _get_suites  [2019/04/28 01:33:43.771]     for suite in resmoke.Resmoke._get_suites(self):  [2019/04/28 01:33:43.771]   File """"/data/mci/02406ee2984a5f4f41629757fc28785a/src/buildscripts/resmoke.py"""", line 239, in _get_suites  [2019/04/28 01:33:43.771]     return suitesconfig.get_suites(self._config.suite_files, self._config.test_files)  [2019/04/28 01:33:43.771]   File """"/data/mci/02406ee2984a5f4f41629757fc28785a/src/buildscripts/resmokelib/suitesconfig.py"""", line 89, in get_suites  [2019/04/28 01:33:43.771]     suite = _suite.Suite(suite_filename, suite_config)  [2019/04/28 01:33:43.771]   File """"/data/mci/02406ee2984a5f4f41629757fc28785a/src/buildscripts/resmokelib/testing/suite.py"""", line 72, in __init__  [2019/04/28 01:33:43.771]     self.tests, self.excluded = self._get_tests_for_kind(self.test_kind)  [2019/04/28 01:33:43.771]   File """"/data/mci/02406ee2984a5f4f41629757fc28785a/src/buildscripts/resmokelib/testing/suite.py"""", line 99, in _get_tests_for_kind  [2019/04/28 01:33:43.771]     return _selector.filter_tests(test_kind, selector_config)  [2019/04/28 01:33:43.771]   File """"/data/mci/02406ee2984a5f4f41629757fc28785a/src/buildscripts/resmokelib/selector.py"""", line 726, in filter_tests  [2019/04/28 01:33:43.771]     return selector.select(selector_config)  [2019/04/28 01:33:43.771]   File """"/data/mci/02406ee2984a5f4f41629757fc28785a/src/buildscripts/resmokelib/selector.py"""", line 615, in select  [2019/04/28 01:33:43.771]     raise IOError(errno.ENOENT, """"File not found"""", selector_config.binary)  [2019/04/28 01:33:43.771] FileNotFoundError: [Errno 2] File not found: './dbtest'     [2019/04/28 01:06:39.625] Traceback (most recent call last):   [2019/04/28 01:06:39.625]   File """"buildscripts/evergreen_run_tests.py"""", line 149, in <module>   [2019/04/28 01:06:39.625]     main.run()   [2019/04/28 01:06:39.625]   File """"/data/mci/d0eb417152fdd6c2e105ca8ae2dc27bc/src/buildscripts/resmoke.py"""", line 100, in run   [2019/04/28 01:06:39.625]     self.run_tests()   [2019/04/28 01:06:39.625]   File """"/data/mci/d0eb417152fdd6c2e105ca8ae2dc27bc/src/buildscripts/resmoke.py"""", line 155, in run_tests   [2019/04/28 01:06:39.625]     suites = self._get_suites()   [2019/04/28 01:06:39.625]   File """"buildscripts/evergreen_run_tests.py"""", line 114, in _get_suites   [2019/04/28 01:06:39.626]     for suite in resmoke.Resmoke._get_suites(self):   [2019/04/28 01:06:39.626]   File """"/data/mci/d0eb417152fdd6c2e105ca8ae2dc27bc/src/buildscripts/resmoke.py"""", line 239, in _get_suites   [2019/04/28 01:06:39.626]     return suitesconfig.get_suites(self._config.suite_files, self._config.test_files)   [2019/04/28 01:06:39.626]   File """"/data/mci/d0eb417152fdd6c2e105ca8ae2dc27bc/src/buildscripts/resmokelib/suitesconfig.py"""", line 89, in get_suites   [2019/04/28 01:06:39.626]     suite = _suite.Suite(suite_filename, suite_config)   [2019/04/28 01:06:39.626]   File """"/data/mci/d0eb417152fdd6c2e105ca8ae2dc27bc/src/buildscripts/resmokelib/testing/suite.py"""", line 72, in __init__   [2019/04/28 01:06:39.626]     self.tests, self.excluded = self._get_tests_for_kind(self.test_kind)   [2019/04/28 01:06:39.626]   File """"/data/mci/d0eb417152fdd6c2e105ca8ae2dc27bc/src/buildscripts/resmokelib/testing/suite.py"""", line 99, in _get_tests_for_kind   [2019/04/28 01:06:39.626]     return _selector.filter_tests(test_kind, selector_config)   [2019/04/28 01:06:39.626]   File """"/data/mci/d0eb417152fdd6c2e105ca8ae2dc27bc/src/buildscripts/resmokelib/selector.py"""", line 726, in filter_tests   [2019/04/28 01:06:39.626]     return selector.select(selector_config)   [2019/04/28 01:06:39.626]   File """"/data/mci/d0eb417152fdd6c2e105ca8ae2dc27bc/src/buildscripts/resmokelib/selector.py"""", line 581, in select   [2019/04/28 01:06:39.626]     return _Selector.select(self, selector_config)   [2019/04/28 01:06:39.626]   File """"/data/mci/d0eb417152fdd6c2e105ca8ae2dc27bc/src/buildscripts/resmokelib/selector.py"""", line 426, in select   [2019/04/28 01:06:39.626]     roots = self._test_file_explorer.read_root_file(selector_config.root)   [2019/04/28 01:06:39.626]   File """"/data/mci/d0eb417152fdd6c2e105ca8ae2dc27bc/src/buildscripts/resmokelib/selector.py"""", line 72, in read_root_file   [2019/04/28 01:06:39.626]     with open(root_file_path, """"r"""") as filep:   [2019/04/28 01:06:39.626] FileNotFoundError: [Errno 2] No such file or directory: 'build/unittests.txt'  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6124","04/29/2019 18:41:49",2,"Restarting a variant produces ""Error restarting build: undefined"" ""Attempting to restart all tasks in a variant in a patch build, here:    ¬†    [https://evergreen.mongodb.com/build/mongodb_mongo_master_enterprise_rhel_62_64_bit_patch_b6cc1fb89f8fbf92c66ef6274a1de1ad310b2fb1_5cc4a89bc9ec442cd74095b5_19_04_27_19_08_11]    ¬†    Produces this error:    ¬†    !image-2019-04-29-13-41-39-116.png!""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-6126","04/29/2019 19:52:13",1,"Purple due to timed out generate tasks ""Between 11am and 12pm EST there was a large amount of purple (e.g.,¬†[https://evergreen.mongodb.com/version/mongodb_mongo_v4.0_6a71c575a907af7af297f94401aea727ab28bd43]) due to agents timing out the generate.tasks command prior to the task finishing. While this should ultimately be resolved by using a queue group, in the meantime, we should increase the size of the pool to handle the current load.""","",0,0,0,0,0,0,0,1,0,1,0,0,0,0,0
"EVG-6129","04/29/2019 22:14:43",1,"Panics in production ""On Sunday April 28th, received [several panics|https://mongodb.slack.com/archives/C866SR2LR/p1556465068000400]¬†about """"invalid input to ObjectIdHex: """"evergreen_bcc363df2650d570ffdc3849e593217a69280fd0"""" from¬†path   /api/rest/v2/patches/evergreen_bcc363df2650d570ffdc3849e593217a69280fd0.    ""","    gimlet/middleware_grip.go:184   runtime/asm_amd64.s:515   runtime/panic.go:489   bson/bson.go:178   data/patch.go:34   route/patch.go:119   gimlet/framework.go:49   http/server.go:1942   mux/mux.go:212   negroni/negroni.go:46   negroni/negroni.go:29   negroni/negroni.go:38   negroni/negroni.go:38   negroni/static.go:41   negroni/negroni.go:38   negroni/negroni.go:38   negroni/static.go:53   negroni/negroni.go:38   negroni/negroni.go:38   gimlet/middleware_auth.go:37   negroni/negroni.go:38   negroni/negroni.go:38   gimlet/middleware_auth_user.go:202   negroni/negroni.go:38   negroni/negroni.go:38   gimlet/middleware_grip.go:192   negroni/negroni.go:38   negroni/negroni.go:86   http/server.go:2568   http/server.go:1825   runtime/asm_amd64.s:2197    ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6130","04/30/2019 15:53:56",0,"make remote-queue-group settings configurable in the admin ui/settings ""thinking mostly about:     DefaultWorkers, BackgroundCreateFrequency, and TTL""","",0,0,0,1,0,0,0,0,0,0,1,0,0,0,0
"EVG-6132","04/30/2019 21:49:16",0,"Delete Trend Table tab from perf plugin ""During discussion in the project review for Expanded Metrics, no one said they used this view. We should delete it.""","",0,1,0,0,0,0,0,0,0,0,0,1,0,0,0
"EVG-6134","05/01/2019 16:44:24",1,"Only 1 parent came up for a large number of container tasks ""There were many container tasks in the queue, but only a single parent came up. There may be a bug with scheduling parents.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8503","05/01/2019 22:43:02",1,"Command environment not being set in remote command ""[https://github.com/evergreen-ci/evergreen/blob/c2a86f466be7bb85d428737a606ae5aef6a0c0b9/units/provisioning_agent_deploy.go#L366]    ¬†    The semantics of a remote command should be that the environment variables are set on the remote command being executed, not the local SSH command.""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8800","05/02/2019 14:27:27",1,"Aviation logging should specify error  ""Currently, aviation logging will indicate whether an error has occurred for a given request but not what the error actually was. We should add this information to the logging.    Don't forget to revendor aviation in cedar!""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8365","05/02/2019 15:06:06",1,"Command does not correctly obey settings in OutputOptions ""[This logic|https://github.com/mongodb/jasper/blob/c7473fd79ef6c88d90ed5a201d36096166062e35/command.go#L472-L485] is not strictly correct in `Command` if, for example, output is redirected to error or output is suppressed.""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-6139","05/02/2019 15:08:40",2,"Failure: test-repotracker on Ubuntu 16.04 [Evergreen (develop) @ ca8baf4b] (TestFetchRevisions) ""h2. [test-repotracker failed on Ubuntu 16.04|https://evergreen.mongodb.com/task/evergreen_ubuntu1604_test_repotracker_ca8baf4b0ed06ece5e247f6726eb34cfea08fb70_19_05_02_13_50_37/0]  Host: [ec2-34-239-177-19.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-mn6g5fzj]  Project: [Evergreen (develop)|https://evergreen.mongodb.com/waterfall/evergreen]  Commit: [diff|https://github.com/evergreen-ci/evergreen/commit/ca8baf4b0ed06ece5e247f6726eb34cfea08fb70]: Revert """"EVG-6108 Add / Remove rejected outliers from whitelist. (#2251)""""    This reverts commit f0e7a0ef51cee7b09e00a91dd2fb8396b49186c1. | 02 May 19 13:50 UTC  Evergreen Subscription: ; Evergreen Event:   *TestFetchRevisions* - [Logs|https://evergreen.mongodb.com/test_log/5ccaf6969ccd4e257734555c] | [History|https://evergreen.mongodb.com/task_history/evergreen/evergreen_ubuntu1604_test_repotracker_ca8baf4b0ed06ece5e247f6726eb34cfea08fb70_19_05_02_13_50_37#TestFetchRevisions=fail]    ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-6141","05/02/2019 17:16:20",2,"set-module not picking up non-committed changes ""evergreen set-module is currently only picking up committed changes for me.¬†""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-9234","05/02/2019 18:00:58",2,"the started at time for an ftdc chunk should be the first point in the chunk ""I'm going to put up a patch for, what I think is the fix, given that I'm going to be out, it might make sense for you to run with this.     also maybe write a one-off cli to migrate existing data just both for testing. ""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-8379","05/02/2019 18:26:56",2,"Failed generate.tasks jobs do not log, but successful ones do ""‚Äúgenerate-tasks-mongodb_mongo_master_enterprise_rhel_62_64_bit_sharding_auth_gen_patch_c1e9a0774ce6e01ea55729cade50c1586cb6602d_5cca094057e85a55aee42c44_19_05_01_21_02_00‚Äù does not appear in the Splunk logs, but¬†‚Äúgenerate-tasks-mongodb_mongo_master_enterprise_rhel_62_64_bit_sharding_auth_gen_patch_2bb9313de4c53d31051e30af49a1ead10535e5d2_5ccb247832f4173bac87f5cc_19_05_02_17_10_35‚Äù dos.""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8808","05/02/2019 18:37:44",2,"gRPC logger with grip ""implement this [interface|https://godoc.org/google.golang.org/grpc/grpclog#LoggerV2] and create a wrapper in aviation ""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-6142","05/02/2019 19:27:38",2,"Evergreen CLI patch command should not submit uncommitted changes by default ""*Motivation*: The Evergreen CLI merge queue command submits only committed changes to Evergreen's merge queue, since we want to reduce the risk of a developer submitting changes to the merge queue that they don't actually wish to commit.    Evergreen GitHub pull request testing has a similar interface. To be included in a pull request, the code must be committed locally.    Evergreen's patch command differs. It includes changes to files tracked by git that have changed in the working directory but have not yet been committed. This has been confusing for users in the past (e.g., EVG-782). It also does not match the merge queue command, which will mean that users of the merge queue via the CLI might submit code reviews that differ from what they ship to the merge queue.    *Solution*: Evergreen's patch command currently supports submitting only committed changes by passing the {{--ref}} flag. This ticket will make that the default.    Many teams outside the server use pull request testing and will therefore be unaffected. However, some teams may rely on the current behavior and may be surprised by the change. To address this, we will   * Warn the user when they are submitting a patch if there uncommitted changes in their working directory.   * Send an email notifying users that we are making this change.   * Add an option to the {{patch}} command that preserves the old behavior.   * Add an option to the .evergreen.yml that will cause the old behavior to be the default    The feature is documented in the Evergreen Wiki:¬†[https://github.com/evergreen-ci/evergreen/wiki/Using-the-Command-Line-Tool#working-tree-changes]""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8758","05/02/2019 21:52:17",1,"Get last N perf results by task name sorted by version order ""For Evergreen's perf trend graphs, we need to get the last 100 results sorted by commit. Since we do not store the commit in cedar, we can use the version order field for sorting.""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-6147","05/03/2019 21:33:43",2,"Can't restart failed tasks ""I can't restart failed tasks in my patch build: https://evergreen.mongodb.com/version/5ccb1424e3c33114e2b1c65e""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-6148","05/03/2019 21:43:06",2,"git.get_project checked out module revision other than what was specified in manifest ""https://mongodb.slack.com/archives/C0V896UV8/p1556905336101400?thread_ts=1556885576.098500&cid=C0V896UV8""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-9080","05/06/2019 14:39:12",2,"Use new-style s3 URLs ""Amazon is no longer going to support the URL format we use when we link to artifacts ([https://forums.aws.amazon.com/ann.jspa?annID=6776]):    We should make sure that anywhere we use this format we switch to the new format. We should audit evergreen, curator, and the release tools. It is likely the case that pail is fine, since it uses the sdk, but we should double-check it as well.""","Amazon S3 currently supports two request URI styles in all regions: path-style (also known as V1) that includes bucket name in the path of the URI (example: //s3.amazonaws.com/<bucketname>/key), and virtual-hosted style (also known as V2) which uses the bucket name as part of the domain name (example: //<bucketname>.s3.amazonaws.com/key). In our effort to continuously improve customer experience, the path-style naming convention is being retired in favor of virtual-hosted style request format. Customers should update their applications to use the virtual-hosted style request format when making S3 API requests before September 30th, 2020 to avoid any service disruptions. Customers using the AWS SDK can upgrade to the most recent version of the SDK to ensure their applications are using the virtual-hosted style request format.¬†    Virtual-hosted style requests are supported for all S3 endpoints in all AWS regions. S3 will stop accepting requests made using the path-style request format in all regions starting September 30th, 2020. Any requests using the path-style request format made after this time will fail.    If there is any reason why your application is not able to utilize the virtual-hosted style request format, or if you have any questions or concerns, please reach out to¬†AWS Support. ",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-6149","05/06/2019 20:21:13",2,"Patch time reported to GitHub status was incorrect ""[https://github.com/evergreen-ci/evergreen/pull/2272]¬†reported that lint took¬†-2562047h47m16.854775808s.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6150","05/06/2019 20:29:19",1,"Persist project yaml as subdocument of version ""Currently we store the project yaml as a configuration string. This slows down generate.tasks substantially on the full server yaml, taking about 10 seconds per generator. Having to only parse the yaml once and saving it as a subdocument could speed this up a lot.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-9146","05/07/2019 19:12:04",0,"Put service/client Jasper CLI command in Curator CLI ""This is to enable the app server to able to SSH into a host, run the CLI, and interact with the host's running Jasper service.    ¬†    As part of this, the separate Curator/Jasper CLI functionality should be consolidated into a single repo for modularity.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-6152","05/07/2019 20:03:05",2,"Investigate short-lived spike in ""task does not exist"" errors in production ""*Time range of elevated error count*    [https://mongodb.splunkcloud.com/en-US/app/search/search?display.page.search.mode=fast&dispatch.sample_ratio=1&q=search%20index%3Devergreen%20metadata.level%20%3E%3D%2070%20NOT%20%22no%20entry%20found%20for%20host%22%20%22task%20does%20not%20exist%22&earliest=1557254481&latest=1557255381&display.page.search.tab=events&sid=1557256476.7644525]    *Example error signature*    *Origin of error*  ""","{        message:  task does not exist       metadata: { [-]         hostname:  evergreenapp-7.build.10gen.cc         level:  70         pid:  17538         process:  /srv/evergreen/current/clients/linux_amd64/evergreen         time:  2019-05-07T18:46:59.550592536Z      }       task_id:  mongodb_mongo_master_enterprise_rhel_62_64_bit_flow_control_off_compile_patch_be5df1fab8bd151b5b5405ba4500462c1a1f8db9_5cd1d1b4d6d80a675fa523d5_19_05_07_18_43_20   }  func (t *Task) blockedStatePrivate() (string, error)  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8384","05/07/2019 20:40:26",1,"95th percentile converted to 99th percentile ""[here|https://github.com/evergreen-ci/cedar/blob/master/rpc/internal/perf.ext.go#L51-L52]""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-6154","05/07/2019 22:23:21",1,"GitHub PR testing skipped a commit ""On this PR:¬†[https://github.com/evergreen-ci/evergreen/pull/2275]  Evergreen did not test this commit:¬†e7690a987639d131cc795c368ab3a1508de61571  Short of submitting a no-op commit, there is no way to get Evergreen to retry.    Also, Evergreen provides no feedback to the user so there's no way to know what to fix to get the patch to run.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8454","05/08/2019 16:11:56",1,"Use s3 to get testing files for ftdc ""Use updated ftdc files""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-6159","05/09/2019 12:01:39",2,"Unable to restart system-failed tasks in a version ""Restarting system-failed tasks from the version level does not appear to work, e.g., from this version https://evergreen.mongodb.com/version/mongodb_mongo_master_50ad28ae365ad63a83508d708cf2fc0b6f7fa161#/0.""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-6160","05/09/2019 14:37:36",1,"Log the output of what revision modules are cloned ""In BF-12741, it seems like the wrong version of the enterprise module was being used. However, since there is no indication of what version of the enterprise module was checked out, this is difficult to debug. It would be nice if evergreen logged what revisions of modules were being checked out. EVG-6043 added a log message for the project, but it doesn't look like the modules are being logged.""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6163","05/09/2019 22:44:42",2,"Performance graphs not displaying for Java driver ""I was looking at the performance graphs in Evergreen for the Java driver with [~david.daly] and we noticed that they are not displaying:    https://evergreen.mongodb.com/task/mongo_java_driver_perf__version~latest_os~linux_topology~standalone_auth~noauth_ssl~nossl_jdk~jdk9_perf_3c19b93b111dd315a2ee2892bad4fa213ac4ea39_19_05_03_12_56_32.    He suggested that I open a problem ticket to investigate.""","",0,0,0,0,0,0,1,0,0,0,1,1,0,0,0
"EVG-6164","05/10/2019 14:36:35",1,"Add Documentation for CLI Commit Queue ""Add a section about the server commit queue to the Wiki here:    [https://github.com/evergreen-ci/evergreen/wiki/Commit-Queue]    ¬†""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-6165","05/10/2019 14:43:20",1,"Add high-level overview to commit queue documentation ""The documentation would benefit from an even higher level view of what commit queue is trying to achieve - i.e. diagram style""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-6166","05/10/2019 16:20:03",2,"s3.put fails on Windows if directory contains long paths ""This happens even if nothing within the/short/prefix/* is a long path.    Command failed: error processing filter the/short/prefix/*: Error received by walkFunc for path \some\other\prefix\the\long\path: GetFileAttributesEx \some\other\prefix\the\long\path: The system cannot find the path specified""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8398","05/10/2019 20:09:08",0,"Fix race detector deadlock on self-clearing manager ""Logs: [https://evergreen.mongodb.com/task/jasper_race_detector_race_4cd0d9cec44f3d9c77bb6dca1fbb26b728425310_19_05_06_20_44_40]    ¬†    One possible error is that self-clearing manager is no longer thread-safe.""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-6167","05/10/2019 20:12:36",1,"Set up host Jasper service over SSH ""If bootstrapping the host over SSH (non-legacy), it should start the Jasper service using the Curator CLI functionality and ensure that it always runs on restart.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-6169","05/10/2019 20:52:24",2,"--alias Broken On patch-file ""In the evergreen cli with the patch command, I can specify a task alias via the --alias or -a flag. When trying to use the patch-file command, this flag seems to be ignored and no tasks are selected in the resulting patch.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6171","05/13/2019 16:20:30",2,"Inconsistent behavior when specifying a ""requires"" field at both a task and task group level ""https://evergreen.mongodb.com/version/5cd97dd93e8e8629c9d3d856 does not work but https://evergreen.mongodb.com/version/5cd984000305b95692a4222c does""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8511","05/13/2019 17:21:17",0,"curator ftdc should use 64bit ints for all integer fields ""ftdc should use 64 bit ints in more places.    Here's the """"curator ftdc export csv"""" output for rows 16 and 17 of [this metric file|https://s3.amazonaws.com/genny-metrics/sys_perf_linux_1_node_replSet_big_update_3b00dc385a99b576cee4d0f58d8a80e296b4b09c_19_05_08_15_18_47_0/Loader-IndividualBulkInsert]. Note the numbers for """"total"""" in the second to last column:        Here's the BSON/JSON output for the same rows; """"total"""" starts overflowing 2^32 on line 17 (and continues to overflow on subsequent lines):    ""","  2019-05-08T12:21:50-04:00,0,16,0,0,0,1762176871,2115994245,10  2019-05-08T12:21:50-04:00,7,17,0,0,0,1806031555,2219150418,10    { """"_id"""" : ObjectId(""""5cd6b103027cec34a207db62""""), """"ts"""" : ISODate(""""2019-05-08T16:21:50.446Z""""), """"id"""" : 0, """"counters"""" : { """"n"""" : 16, """"ops"""" : 0, """"size"""" : 0, """"errors"""" : 0 }, """"timers"""" : { """"duration"""" : 1762176871, """"total"""" : 2115994245 }, """"gauges"""" : { """"workers"""" : 10 } }  { """"_id"""" : ObjectId(""""5cd6b103027cec34a207db63""""), """"ts"""" : ISODate(""""2019-05-08T16:21:50.457Z""""), """"id"""" : 7, """"counters"""" : { """"n"""" : 17, """"ops"""" : 0, """"size"""" : 0, """"errors"""" : 0 }, """"timers"""" : { """"duration"""" : 1806031555, """"total"""" : -2075816878 }, """"gauges"""" : { """"workers"""" : 10 } }  ",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8502","05/13/2019 18:36:53",1,"We should not default empty artifact types to s3  ""Going to remove these [lines|https://github.com/evergreen-ci/cedar/blob/master/rpc/internal/service.go#L247-L249] and propagate s3 type from poplar.""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-6173","05/13/2019 20:42:04",2,"Incorrect max_containers  ""For ubuntu1604-container in prod, we have that max_containers is 8, whereas archlinux-parent sets it to 10. (Interestingly, max_containers is correctly set to 10 in prod.) This is not merely a display issue, as the parents on prod are only being assigned 8 containers.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6175","05/13/2019 21:41:23",1,"Update Documentation for Spawn Containers ""Update host.create and host.list documentation for docker.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-9182","05/14/2019 20:07:08",0,"Create Log and LogInfo struct for database model ""Create the Log struct and implement Setup, IsNil, Find, Save and Remove. Also, write the hashing function on the LogInfo struct for the id.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-9222","05/14/2019 20:07:09",1,"Create a top level pail logging configuration ""This should happen in model/config.go and environment.go, the latter having a bucket accessor that creates a bucket with the given top level configuration plus a passed in permissions argument.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-9152","05/14/2019 20:07:09",0,"Implement CreateLog function ""This function is analogous to CreateMetricSeries in model/perf.go. The function should take in a LogInfo struct and permissions type. This will be the entry point for creating a new log in the database.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-8901","05/14/2019 20:07:09",0,"Create a permissions type for AWS permissions ""Create a permissions type for AWS permissions""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-9188","05/14/2019 20:07:10",2,"Implement merger ""Merge multiple logs based on timestamp.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-9086","05/14/2019 20:07:10",2,"Implement downloader ""This is a function on a Log struct that downloads the log chunks from s3 and sorts the data by the prepended timestamp, separating the timestamp into a separate slice with each index of the timestamp slice corresponding to the same index of the log line slice.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-9017","05/14/2019 20:07:10",2,"Implement uploader ""This is a function on a Log struct that takes in a string and a timestamp, which is prepended to the byte array and uploaded to s3.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-9236","05/14/2019 20:07:11",1,"Implement API buildlogger model ""This includes satisfying the rest/data interface.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-9176","05/14/2019 20:07:11",1,"Add FindLogById to the connector interface ""Add FindLogById to the connector interface""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-8992","05/14/2019 20:07:11",2,"Add FindLogsByTaskId to the connector interface ""This will include filters to reduce logs returned. All logs from a given task id and filter will be merged.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-9310","05/14/2019 20:07:12",2,"Implement ext.go for buildlogger ""Turn gRPC generated structs into cedar buildlogger structs.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-9071","05/14/2019 20:07:12",1,"Create buildlogger protobuf ""Don‚Äôt forget to add permissions message (not in design doc). Add to makefile.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-8840","05/14/2019 20:07:12",1,"Implement buildlogger routes ""Don‚Äôt forget to add them to rest/service.go""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-9171","05/14/2019 20:07:13",1,"Implement gRPC CreateLog ""Implement gRPC CreateLog""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-9100","05/14/2019 20:07:13",1,"Implement gRPC AppendLog ""Implement gRPC AppendLog""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-8933","05/14/2019 20:07:13",1,"Create and attach gRPC service ""Create empty service and attach function (see how it is done in rpc/internal/service.go). Attach to existing grpc service (line 120 in rpc/service.go).""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-9075","05/14/2019 20:07:14",2,"Implement Grip sender ""Implement a grip Sender interface backed by cedar‚Äôs buildlogger. Should pass in the gRPC service client upon creation of the sender and buffer/flush logs (i.e. how we get log chunks).""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-9053","05/14/2019 20:07:14",1,"Implement gRPC CloseLog ""Implement gRPC CloseLog""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-9132","05/14/2019 20:07:50",1,"Get exit code from Commands ""Right now, the only way to get the exit code of the process underlying a command is to get the process ID from it, give it to the Jasper manager that created the command to get the underlying process, and check the return value of `Process.Wait()`. It would be more convenient to directly poll the Command for its exit code.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-6181","05/14/2019 21:21:47",1,"Improve updating builds and versions for mark end ""EVG-5977 moved updating builds and versions to a job, because this code would often take a minute to run, which would cause agents to exit, because their MarkEnd requests would time out.    However, moving it to a job may have been the cause of queueing in the database, which increased request latency and caused errors in the system. We therefore reverted that commit. I suspect that the queueing happens because marking a job ended requires many queries.    [~john.liu] suggested that persisting the blocked state of task would eliminate a large amount of these queries. This ticket is to do that or determine another way to improve the job.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8520","05/15/2019 17:19:36",2,"Expanded Metrics operation throughput is incorrect ""The operation throughput for the following task appears to be far lower than the correct ops/sec throughput:    https://evergreen.mongodb.com/task/sys_perf_linux_1_node_replSet_insert_remove_cd651e5e12eb5416883776ced095805bc585e8bc_19_05_14_18_37_02    I verified this by looking at the ops/sec reported in perf.json as well as downloading the genny csv and manually calculating the throughput. Both confirmed a throughput of around 17k ops/sec. In the rollup though - it says """"300"""".     ""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-6185","05/15/2019 20:03:23",2,"Notification preference can't be set to None ""When a notification setting is set to none for Build Break notifications the setting is not saved and the attached error is shown.    (Credit: [~kimberly.tao])""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6186","05/16/2019 04:07:20",1,"Task Timing Page Only Shows Jesse's Commits ""The task timing page for any task on Enterprise RHEL 6.2 only show's Jesse's commits. This doesn't seem to be the case for other buildvariants. E.g. here's the [task timing page for compile|https://evergreen.mongodb.com/task_timing/mongodb-mongo-master#/project=mongodb-mongo-master&buildVariant=enterprise-rhel-62-64-bit&taskName=compile&requester=patch_request&limit=100&onlySuccessful=false]    Additionally the labels for the X axis seem to be backwards. The dates should be in decreasing order from left to right, with the most recent date on the left, to be consistent with what the line in the graph shows.""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-9186","05/16/2019 14:17:49",0,"Need to be able to filter by variant in cedar ""In routes that don't have an implicit variant (ie. the task name one) there needs to be a way to filter by variant. https://cedar.mongodb.com/rest/v1/perf/task_name/industry_benchmarks has data from both linux standalone and sharded lite. To support this, I imagine poplar also needs to start sending variant/build data""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-6187","05/16/2019 20:35:37",1,"Modify API route to GET project ""Only project admins should be able to get the project.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-8826","05/16/2019 22:25:38",2,"Curator is hitting a 10 minute timeout on downloads ""We should either increase the timeout or regularly remove the files.""","",0,0,0,0,1,0,0,0,0,0,0,0,1,0,0
"EVG-6188","05/17/2019 15:55:54",0,"Create API route to copy projects ""Only project admins should be able to copy projects.  Variables should be automatically copied, and private variables should still be private.  ""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6189","05/17/2019 15:56:04",1,"Create API routes to get/modify project variables. ""Redacted credentials should be shown redacted.  Only project admins should have access.  ""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6191","05/17/2019 15:56:26",2,"Create API route to disable projects ""Ensure that disabled projects aren‚Äôt iterated over in jobs (such that many disabled projects would affect time complexity). Only to be done by project admins.""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6192","05/17/2019 15:56:47",2,"Create API route to change base revision. ""Want to change base revision to switch branches for a project. Currently we have a repo_revision route for the UI, will likely be similar.""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8418","05/17/2019 18:14:48",2,"amboy should create a status.completed: 1, status.mod_ts: 1 index ""Performance advisor reports inefficient aggregations on the amboy.evg.service.group collection with the shape    $or: [  """"status.completed"""": false,  {""""status.completed"""": true,  """"status.mod_ts:"""" {$gte: <now>}}  ]    It recommends adding a status.completed: 1, status.mod_ts: 1 index. This should likely happen in amboy.""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8396","05/17/2019 19:11:16",1,"fix failing window tests ""copy [this|https://github.com/evergreen-ci/cedar/blob/master/evergreen.yaml#L63-L84]""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-6194","05/17/2019 20:46:27",1,"minimum number of hosts per distro  ""we should add a setting to the distro that will set a minimum number of hosts.    the host allocator should be able to create these hosts if they don't exist. ""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-6195","05/17/2019 21:00:22",2,"git.get_project doesn't check patch's module hash ""https://github.com/evergreen-ci/evergreen/blob/c6438d3e557b3e9086c00a868227911eb03bc0c2/command/git.go#L430 uses the revision set in the project, which is usually HEAD""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6196","05/17/2019 22:37:47",1,"Evergreen alerts for aborted tasks ""This should not happen after EVG-2366.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6197","05/20/2019 14:35:30",2,"Task stuck in starting state on terminated container ""https://evergreen.mongodb.com/task/evergreen_ubuntu1604_docker_test_command_c6438d3e557b3e9086c00a868227911eb03bc0c2_19_05_17_21_15_44""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6199","05/20/2019 21:33:37",2,"Start agent monitor via SSH ""If bootstrapping the host using SSH, the app server should be able to use the Jasper binary on the host to make a request to the Jasper service (local to the host) to start an agent monitor. This does not require TLS credentials to be set up yet.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-6201","05/21/2019 15:08:24",2,"CLI get-update prints new version message ""_get-update --install_ shouldn't prompt the user to run _get-update --install_  ""","[jonathanbrill:evergreen (master)]$ evergreen get-update --install  A new version is available. Run 'evergreen get-update --install' to download and install it.  [evergreen] 2019/05/21 10:04:18 [p=info]: Fetching update from https://evergreen.mongodb.com/clients/darwin_amd64/evergreen  Upgraded binary downloaded to /var/folders/z2/9bdtmld95j1554pbrm7dk4400000gp/T/230664118 - verifying  [evergreen] 2019/05/21 10:04:22 [p=info]: Upgraded binary successfully downloaded to temporary file: /var/folders/z2/9bdtmld95j1554pbrm7dk4400000gp/T/230664118  [evergreen] 2019/05/21 10:04:22 [p=info]: Unlinking existing binary at /usr/local/bin/evergreen  [evergreen] 2019/05/21 10:04:22 [p=info]: Moving upgraded binary to: /usr/local/bin/evergreen  [evergreen] 2019/05/21 10:04:22 [p=info]: Setting binary permissions...  [evergreen] 2019/05/21 10:04:22 [p=info]: Upgrade complete!  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6206","05/21/2019 18:50:29",2,"Make a new endpoint for task status within a variant ""We would like an endpoint that would behave like the v1 REST endpoint (/v1/projects/{}/versions?limit={}""""), bu add support for pagination.    (For now, we partially resolved our need by fixing the amount of responses on the V1 REST endpoint by adding the limit, but not the skip/pagination functionality)    either add pagination support to V1 or add a new end point to V2.    The issue with V2 is that in order to find tasks within a variant, we need to traverse the json response in a very complicated manner.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6207","05/21/2019 22:28:11",1,"Failed: smoke-test-agent-monitor on Ubuntu 16.04 [Evergreen @ 659180eb]  "" h2. [smoke-test-agent-monitor failed on Ubuntu 16.04|https://evergreen.mongodb.com/task/evergreen_ubuntu1604_smoke_test_agent_monitor_659180eb4df576582b1b6340ba7db9db78196a17_19_05_21_14_39_40/0] Host: [ec2-18-207-158-136.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-ssqi565h] Project: [Evergreen|https://evergreen.mongodb.com/waterfall/evergreen] Commit: [diff|https://github.com/evergreen-ci/evergreen/commit/659180eb4df576582b1b6340ba7db9db78196a17]: EVG-5996: implement agent monitor (#2286) | 21 May 19 14:39 UTC Evergreen Subscription: ; Evergreen Event:   ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-6212","05/23/2019 14:41:51",2,"Agent panic when getting working directory ""  ""","  {       """"message"""":""""hit panic; adding error"""",     """"metadata"""":{          """"level"""":90,        """"hostname"""":""""ip-10-122-9-21.ec2.internal"""",        """"time"""":""""2019-05-22T20:29:03.260781115Z"""",        """"process"""":""""/root/evergreen"""",        """"pid"""":2934     },     """"operation"""":""""problem running command 'shell.exec'"""",     """"panic"""":""""runtime error: invalid memory address or nil pointer dereference"""",     """"stack"""":[          {             """"function"""":""""github.com/evergreen-ci/evergreen/agent.(*Agent).runCommandSet.func2.1"""",           """"file"""":""""/data/mci/b2c20c58787b4827028dc64e73eaeab5/gopath/src/github.com/evergreen-ci/evergreen/agent/command.go"""",           """"line"""":116        },        {             """"function"""":""""runtime.call32"""",           """"file"""":""""/opt/golang/go1.9/src/runtime/asm_amd64.s"""",           """"line"""":509        },        {             """"function"""":""""runtime.gopanic"""",           """"file"""":""""/opt/golang/go1.9/src/runtime/panic.go"""",           """"line"""":491        },        {             """"function"""":""""runtime.panicmem"""",           """"file"""":""""/opt/golang/go1.9/src/runtime/panic.go"""",           """"line"""":63        },        {             """"function"""":""""runtime.sigpanic"""",           """"file"""":""""/opt/golang/go1.9/src/runtime/signal_unix.go"""",           """"line"""":367        },        {             """"function"""":""""github.com/evergreen-ci/evergreen/model.(*TaskConfig).GetWorkingDirectory"""",           """"file"""":""""/data/mci/b2c20c58787b4827028dc64e73eaeab5/gopath/src/github.com/evergreen-ci/evergreen/model/task_config.go"""",           """"line"""":106        },        {             """"function"""":""""github.com/evergreen-ci/evergreen/command.(*shellExec).Execute"""",           """"file"""":""""/data/mci/b2c20c58787b4827028dc64e73eaeab5/gopath/src/github.com/evergreen-ci/evergreen/command/shell.go"""",           """"line"""":101        },        {             """"function"""":""""github.com/evergreen-ci/evergreen/agent.(*Agent).runCommandSet.func2"""",           """"file"""":""""/data/mci/b2c20c58787b4827028dc64e73eaeab5/gopath/src/github.com/evergreen-ci/evergreen/agent/command.go"""",           """"line"""":119        },        {             """"function"""":""""runtime.goexit"""",           """"file"""":""""/opt/golang/go1.9/src/runtime/asm_amd64.s"""",           """"line"""":2337        }     ]  }  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6214","05/24/2019 14:53:43",2,"Nil task on queue errors """"","  {    """"error"""":""""error in agent loop, exiting: error getting next task: failed to get task: server returned 400 (    {\n \""""status\"""": 400,\n \""""error\"""": \""""nil task on the queue\""""\n}    \n)"""",   """"extended"""":""""server returned 400 (    {\n \""""status\"""": 400,\n \""""error\"""": \""""nil task on the queue\""""\n}    \n)\ngithub.com/evergreen-ci/evergreen/rest/client.(*communicatorImpl).retryRequest\n\t/data/mci/bd533b05c8d687d7eab8ba9ea5651faa/gopath/src/github.com/evergreen-ci/evergreen/rest/client/request.go:212\ngithub.com/evergreen-ci/evergreen/rest/client.(*communicatorImpl).GetNextTask\n\t/data/mci/bd533b05c8d687d7eab8ba9ea5651faa/gopath/src/github.com/evergreen-ci/evergreen/rest/client/methods.go:285\ngithub.com/evergreen-ci/evergreen/agent.(*Agent).loop\n\t/data/mci/bd533b05c8d687d7eab8ba9ea5651faa/gopath/src/github.com/evergreen-ci/evergreen/agent/agent.go:136\ngithub.com/evergreen-ci/evergreen/agent.(*Agent).Start\n\t/data/mci/bd533b05c8d687d7eab8ba9ea5651faa/gopath/src/github.com/evergreen-ci/evergreen/agent/agent.go:103\ngithub.com/evergreen-ci/evergreen/operations.Agent.func2\n\t/data/mci/bd533b05c8d687d7eab8ba9ea5651faa/gopath/src/github.com/evergreen-ci/evergreen/operations/agent.go:147\nruntime.call32\n\t/opt/golang/go1.9/src/runtime/asm_amd64.s:509\nreflect.Value.call\n\t/opt/golang/go1.9/src/reflect/value.go:434\nreflect.Value.Call\n\t/opt/golang/go1.9/src/reflect/value.go:302\ngithub.com/evergreen-ci/evergreen/vendor/github.com/urfave/cli.HandleAction\n\t/data/mci/bd533b05c8d687d7eab8ba9ea5651faa/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/urfave/cli/app.go:480\ngithub.com/evergreen-ci/evergreen/vendor/github.com/urfave/cli.(*App).RunAsSubcommand\n\t/data/mci/bd533b05c8d687d7eab8ba9ea5651faa/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/urfave/cli/app.go:361\ngithub.com/evergreen-ci/evergreen/vendor/github.com/urfave/cli.Command.startApp\n\t/data/mci/bd533b05c8d687d7eab8ba9ea5651faa/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/urfave/cli/command.go:273\ngithub.com/evergreen-ci/evergreen/vendor/github.com/urfave/cli.Command.Run\n\t/data/mci/bd533b05c8d687d7eab8ba9ea5651faa/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/urfave/cli/command.go:74\ngithub.com/evergreen-ci/evergreen/vendor/github.com/urfave/cli.(*App).Run\n\t/data/mci/bd533b05c8d687d7eab8ba9ea5651faa/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/urfave/cli/app.go:236\nmain.main\n\t/data/mci/bd533b05c8d687d7eab8ba9ea5651faa/gopath/src/github.com/evergreen-ci/evergreen/cmd/evergreen/evergreen.go:28\nruntime.main\n\t/opt/golang/go1.9/src/runtime/proc.go:195\nruntime.goexit\n\t/opt/golang/go1.9/src/runtime/asm_amd64.s:2337\nfailed to get task\ngithub.com/evergreen-ci/evergreen/rest/client.(*communicatorImpl).GetNextTask\n\t/data/mci/bd533b05c8d687d7eab8ba9ea5651faa/gopath/src/github.com/evergreen-ci/evergreen/rest/client/methods.go:287\ngithub.com/evergreen-ci/evergreen/agent.(*Agent).loop\n\t/data/mci/bd533b05c8d687d7eab8ba9ea5651faa/gopath/src/github.com/evergreen-ci/evergreen/agent/agent.go:136\ngithub.com/evergreen-ci/evergreen/agent.(*Agent).Start\n\t/data/mci/bd533b05c8d687d7eab8ba9ea5651faa/gopath/src/github.com/evergreen-ci/evergreen/agent/agent.go:103\ngithub.com/evergreen-ci/evergreen/operations.Agent.func2\n\t/data/mci/bd533b05c8d687d7eab8ba9ea5651faa/gopath/src/github.com/evergreen-ci/evergreen/operations/agent.go:147\nruntime.call32\n\t/opt/golang/go1.9/src/runtime/asm_amd64.s:509\nreflect.Value.call\n\t/opt/golang/go1.9/src/reflect/value.go:434\nreflect.Value.Call\n\t/opt/golang/go1.9/src/reflect/value.go:302\ngithub.com/evergreen-ci/evergreen/vendor/github.com/urfave/cli.HandleAction\n\t/data/mci/bd533b05c8d687d7eab8ba9ea5651faa/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/urfave/cli/app.go:480\ngithub.com/evergreen-ci/evergreen/vendor/github.com/urfave/cli.(*App).RunAsSubcommand\n\t/data/mci/bd533b05c8d687d7eab8ba9ea5651faa/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/urfave/cli/app.go:361\ngithub.com/evergreen-ci/evergreen/vendor/github.com/urfave/cli.Command.startApp\n\t/data/mci/bd533b05c8d687d7eab8ba9ea5651faa/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/urfave/cli/command.go:273\ngithub.com/evergreen-ci/evergreen/vendor/github.com/urfave/cli.Command.Run\n\t/data/mci/bd533b05c8d687d7eab8ba9ea5651faa/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/urfave/cli/command.go:74\ngithub.com/evergreen-ci/evergreen/vendor/github.com/urfave/cli.(*App).Run\n\t/data/mci/bd533b05c8d687d7eab8ba9ea5651faa/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/urfave/cli/app.go:236\nmain.main\n\t/data/mci/bd533b05c8d687d7eab8ba9ea5651faa/gopath/src/github.com/evergreen-ci/evergreen/cmd/evergreen/evergreen.go:28\nruntime.main\n\t/opt/golang/go1.9/src/runtime/proc.go:195\nruntime.goexit\n\t/opt/golang/go1.9/src/runtime/asm_amd64.s:2337\nerror getting next task\ngithub.com/evergreen-ci/evergreen/agent.(*Agent).loop\n\t/data/mci/bd533b05c8d687d7eab8ba9ea5651faa/gopath/src/github.com/evergreen-ci/evergreen/agent/agent.go:143\ngithub.com/evergreen-ci/evergreen/agent.(*Agent).Start\n\t/data/mci/bd533b05c8d687d7eab8ba9ea5651faa/gopath/src/github.com/evergreen-ci/evergreen/agent/agent.go:103\ngithub.com/evergreen-ci/evergreen/operations.Agent.func2\n\t/data/mci/bd533b05c8d687d7eab8ba9ea5651faa/gopath/src/github.com/evergreen-ci/evergreen/operations/agent.go:147\nruntime.call32\n\t/opt/golang/go1.9/src/runtime/asm_amd64.s:509\nreflect.Value.call\n\t/opt/golang/go1.9/src/reflect/value.go:434\nreflect.Value.Call\n\t/opt/golang/go1.9/src/reflect/value.go:302\ngithub.com/evergreen-ci/evergreen/vendor/github.com/urfave/cli.HandleAction\n\t/data/mci/bd533b05c8d687d7eab8ba9ea5651faa/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/urfave/cli/app.go:480\ngithub.com/evergreen-ci/evergreen/vendor/github.com/urfave/cli.(*App).RunAsSubcommand\n\t/data/mci/bd533b05c8d687d7eab8ba9ea5651faa/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/urfave/cli/app.go:361\ngithub.com/evergreen-ci/evergreen/vendor/github.com/urfave/cli.Command.startApp\n\t/data/mci/bd533b05c8d687d7eab8ba9ea5651faa/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/urfave/cli/command.go:273\ngithub.com/evergreen-ci/evergreen/vendor/github.com/urfave/cli.Command.Run\n\t/data/mci/bd533b05c8d687d7eab8ba9ea5651faa/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/urfave/cli/command.go:74\ngithub.com/evergreen-ci/evergreen/vendor/github.com/urfave/cli.(*App).Run\n\t/data/mci/bd533b05c8d687d7eab8ba9ea5651faa/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/urfave/cli/app.go:236\nmain.main\n\t/data/mci/bd533b05c8d687d7eab8ba9ea5651faa/gopath/src/github.com/evergreen-ci/evergreen/cmd/evergreen/evergreen.go:28\nruntime.main\n\t/opt/golang/go1.9/src/runtime/proc.go:195\nruntime.goexit\n\t/opt/golang/go1.9/src/runtime/asm_amd64.s:2337\nerror in agent loop, exiting\ngithub.com/evergreen-ci/evergreen/agent.(*Agent).Start\n\t/data/mci/bd533b05c8d687d7eab8ba9ea5651faa/gopath/src/github.com/evergreen-ci/evergreen/agent/agent.go:103\ngithub.com/evergreen-ci/evergreen/operations.Agent.func2\n\t/data/mci/bd533b05c8d687d7eab8ba9ea5651faa/gopath/src/github.com/evergreen-ci/evergreen/operations/agent.go:147\nruntime.call32\n\t/opt/golang/go1.9/src/runtime/asm_amd64.s:509\nreflect.Value.call\n\t/opt/golang/go1.9/src/reflect/value.go:434\nreflect.Value.Call\n\t/opt/golang/go1.9/src/reflect/value.go:302\ngithub.com/evergreen-ci/evergreen/vendor/github.com/urfave/cli.HandleAction\n\t/data/mci/bd533b05c8d687d7eab8ba9ea5651faa/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/urfave/cli/app.go:480\ngithub.com/evergreen-ci/evergreen/vendor/github.com/urfave/cli.(*App).RunAsSubcommand\n\t/data/mci/bd533b05c8d687d7eab8ba9ea5651faa/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/urfave/cli/app.go:361\ngithub.com/evergreen-ci/evergreen/vendor/github.com/urfave/cli.Command.startApp\n\t/data/mci/bd533b05c8d687d7eab8ba9ea5651faa/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/urfave/cli/command.go:273\ngithub.com/evergreen-ci/evergreen/vendor/github.com/urfave/cli.Command.Run\n\t/data/mci/bd533b05c8d687d7eab8ba9ea5651faa/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/urfave/cli/command.go:74\ngithub.com/evergreen-ci/evergreen/vendor/github.com/urfave/cli.(*App).Run\n\t/data/mci/bd533b05c8d687d7eab8ba9ea5651faa/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/urfave/cli/app.go:236\nmain.main\n\t/data/mci/bd533b05c8d687d7eab8ba9ea5651faa/gopath/src/github.com/evergreen-ci/evergreen/cmd/evergreen/evergreen.go:28\nruntime.main\n\t/opt/golang/go1.9/src/runtime/proc.go:195\nruntime.goexit\n\t/opt/golang/go1.9/src/runtime/asm_amd64.s:2337"""",   """"metadata"""":    { """"level"""":100, """"hostname"""":""""ip-10-122-20-250"""", """"time"""":""""2019-05-24T05:58:44.807816862Z"""", """"process"""":""""/root/evergreen"""", """"pid"""":1769 }    }  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6216","05/24/2019 20:37:45",2,"Wrong commit order on waterfall page ""Commit {{efe7bc8007aa932a1533af95d980909cd4a39670}} and {{202ba6150bcc276f2734479ef853dc38cf8d4d3f}} are shown in the wrong order on waterfall page. Vessy's commit {{efe7bc8}} is after Mathew's {{202ba615}}, but the waterfall pages shows Vessy's is before Mathew's. Here is the git log. Attached is the screenshot.        ""","  commit 8205eb6955fb0e21f98e280d5e9e8dc2b91b73d5 (origin/master, origin/HEAD, master)  Author: Bernard Gorman <bernard.gorman@gmail.com>  Date:   Wed May 22 10:51:50 2019 +0100        PERF-1826 Update $out performance tests to use $merge    commit efe7bc8007aa932a1533af95d980909cd4a39670  Author: Vesselina Ratcheva <vesselina.ratcheva@10gen.com>  Date:   Wed May 22 18:44:51 2019 -0400        SERVER-39770 Add retry logic to FSM connection cache setup    commit 202ba6150bcc276f2734479ef853dc38cf8d4d3f  Author: Mathew Robinson <chasinglogic@gmail.com>  Date:   Wed May 22 13:04:39 2019 -0400        SERVER-40944 Provide SCons variables files to enable icecream on OSX    commit c15db22ece7eb515f83df5052844dde9b6a0fbac  Author: Max Hirschhorn <max.hirschhorn@mongodb.com>  Date:   Fri May 24 11:08:01 2019 -0400        SERVER-41304 Add positive versions of Windows exit codes to resmoke.py.  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6218","05/28/2019 18:06:02",1,"--patch Ignored By list-patches In CLI ""When using the --patch argument in both the Linux and MacOS CLIs I see the full output of my last 5 patches rather than just the patch matching the specified ID.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8497","05/28/2019 21:05:10",2,"Local git command hangs for over an hour ""In [this task|https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_rhel_62_64_bit_burn_in_tags_gen_patch_efd0267a75f0d8de8a451f77b0447484f7d0ee48_5ced53a53e8e8622ccbaa21d_19_05_28_15_28_48/0##%257B%2522compare%2522%253A%255B%257B%2522hash%2522%253A%2522efd0267a75f0d8de8a451f77b0447484f7d0ee48%2522%257D%255D%257D], the git.get_project command inexplicably hanged for over 1.5 hours. From the stack, it appears due to the shell commands themselves hanging. I was able to reproduce the hang by restarting the task, but not by writing a test mimicking the git command nor was Brian M able to reproduce by running the exact shell commands on the host""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-6220","05/29/2019 15:11:43",1,"Ending a task clears the aborted flag ""This makes the change in EVG-6196 effectively useless""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6221","05/29/2019 15:24:59",2,"Setup Failure: smoke-test-endpoints on Ubuntu 16.04 (Docker) [Evergreen @ 36745734]  "" h2. [smoke-test-endpoints failed on Ubuntu 16.04 (Docker)|https://evergreen.mongodb.com/task/evergreen_ubuntu1604_docker_smoke_test_endpoints_36745734109b51c17378d5ce85c0e0f54e41d53c_19_05_29_13_48_31/0] Host: [|https://evergreen.mongodb.com/host/container-5349148375510172845] Project: [Evergreen|https://evergreen.mongodb.com/waterfall/evergreen] Commit: [diff|https://github.com/evergreen-ci/evergreen/commit/36745734109b51c17378d5ce85c0e0f54e41d53c]: EVG-5888 use more comprehensive query for task history (#2330) | 29 May 19 13:48 UTC Evergreen Subscription: ; Evergreen Event:   ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-6223","05/30/2019 14:18:35",2,"Host disappeared but wasn't cleaned up ""https://evergreen.mongodb.com/host/sir-mm5g713k""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6224","05/30/2019 20:50:49",2,"load-smoke-data loads corrupt-looking data into test db ""It's correct enough to not cause runtime errors, but wrong enough to be nonsense""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8907","05/30/2019 22:20:38",1,"Remove superfluous locking to initialize basic process ""Basic process [unnecessarily locks to perform an initialization step|[https://github.com/mongodb/jasper/blob/c4ab0543b5ce03ca5d84f44680638c3f2ac9643a/process_basic.go#L78-L86].] This can be removed, since all of this information is known before `(*basicProcess).transition()` is called.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-6225","05/31/2019 14:30:43",1,"Add distro config option for curator directory ""Since buildhosts have different binary directories for each platform (e.g. /usr/local/bin on UNIX-based systems, C:\Windows on Windows), we need to know where curator can be found on each platform.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-6226","05/31/2019 19:11:17",8,"Create a list view component for patches page ""This will be the list of patches on https://mongodb.invisionapp.com/share/AWS69QV2BFP#/screens/365050843  - Don't worry about the filter bar, top menu, or contents of the list expand yet  - The date/time of the patch should probably be in the list  - Use a mock Evergreen REST client as your data source. Loading real data from the Evergreen DB will be implemented later  - The list should be its own component, though it will likely contain sub-components""","",0,0,0,1,0,0,0,0,0,0,1,0,0,0,0
"EVG-6227","05/31/2019 19:36:30",2,"Have a default description for patches ""The text in the lines on https://mongodb.invisionapp.com/share/AWS69QV2BFP#/screens/365050843 is not required - we should either figure out some default text to display to help identify the patch, or set the description in the db to some default text""","",0,0,0,1,0,0,0,0,0,0,1,0,0,0,0
"EVG-8976","05/31/2019 21:00:35",0,"Change default Jasper ports ""The Jasper default ports are currently 2286 for RPC and 2287 for REST. Since the agent uses port 2285, there is a high likelihood that the port will conflict with the ports currently used by Evergreen so we should use a different port range.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-6229","05/31/2019 21:25:56",2,"Stop agent monitor on host quarantine/decommission ""Hosts that have been quarantined/decommissioned should not have a running agent, so the agent monitor has to be terminated. This can probably be tracked similar to how `NeedsNewAgent` is done.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-6230","05/31/2019 21:29:56",2,"Add credentials file to host if communicating using RPC ""The Jasper service should run the RPC service with a key and certificate signed by the CA. This should be done differently depending on the bootstrap method (i.e. user data, SSH).""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-6232","05/31/2019 21:49:45",1,"Start agent monitor via RPC ""Hosts that communicate directly with app servers using RPC need to start their agent monitors via RPC.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-6234","05/31/2019 22:03:32",1,"Add an additional status to the next task endpoint for task groups ""The agent's current workflow is the following when it finishes a task group. """"A"""" is the last task in the task group. """"B"""" is the task that follows. This description skips a few things for simplicity.  # Finish running commands in task A.  # Ask for a next task.  # Since that task B is not in the task group, run teardown_group.  # Ask for a next task again. Get task B back.    The problem is that asking for a next task twice strands task B until after teardown_group finishes running. We've worked around this a bit with a query to prevent task B from being marked system-unresponsive. However, a better solution would be for the next_task endpoint to indicate to the host whether there are more tasks in the group without actually assigning that task to the host. There may be several possible solutions along these lines.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-6235","05/31/2019 22:05:43",2,"Don't sort task groups to top of queue ""We currently sort task groups to the top of the queue in order to hack around a problem with sorting them in the legacy scheduler. With the tunable scheduler, it is not important that task groups appear grouped together in the queue. We should therefore stop doing this, since doing this makes build times worse for tasks not in task groups.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-6240","06/03/2019 20:50:28",2,"Create API routes to modify/create subscriptions ""Could potentially be part of the existing modify projects route?""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-6242","06/04/2019 16:26:43",1,"Commit Queue: Module merge order ""Modules should be merged before main repo so the manifest for the main repo's commit will reflect the new module hashes.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8919","06/04/2019 18:09:26",1,"Add sudo option to Command ""Command should have the option to run with elevated privileges.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-6243","06/04/2019 21:02:05",1,"Add environment variables to docker ""Should be able to use -e variables with host.create (port, etc).""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-6244","06/04/2019 21:02:59",2,"Add environment variables to docker ""Should be able to use -e variables with host.create (port, etc).""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-6245","06/04/2019 22:30:18",2,"Waterfall page shows name instead of display_name for dynamically generated build variants ""In a recent script DAG team added (see commit [here|[https://github.com/mongodb/mongo/commit/ff945d4698dfcc61236537d7a5912ddd1abd9695]]), we started dynamically generating the following build variants rather than hard coding them in etc/evergreen.yml:   * ! Enterprise RHEL 6.2 (inMemory)   * ! Linux (No Journal)    As a result, they no longer show on the waterfall page by their display name. Instead, they show up on the waterfall page by their name:   * enterprise-rhel-62-64-bit-inmem-required   * linux-64-duroff-required    (NOTE: They only show up if jsTests have been changed or added to in the past few commits.)    However, they show up on the version page by their display names still:¬†[https://evergreen.mongodb.com/version/mongodb_mongo_master_34ff5d6e6ddb302634185549a2a5ee558d629ba2|https://evergreen.mongodb.com/version/mongodb_mongo_master_34ff5d6e6ddb302634185549a2a5ee558d629ba2:]    ¬†""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-6248","06/05/2019 19:43:48",2,"Display task shows overall status as success despite unfinished execution tasks ""I was expecting the restarted task to show up as """"yellow"""" after the _gen succeeded and before generated tasks ran.""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-6249","06/05/2019 20:53:01",2,"copy projects should also copy subscriptions ""This should be changed in the UI modifyProject (where we do the actual copying) and the project copy route.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-9082","06/06/2019 17:00:17",1,"Check usage of single/double quotes in getCreateOpt ""{{getCreateOpt()}} has a¬†[line|https://github.com/mongodb/jasper/blob/e7ecfbbf797d8925e9a97ffc28ff2d3d11073924/command.go#L525] in which it checks for the usage of quotes/spaces in the 1st arg (presumably because the command's args been passed in as a string containing all the args rather than a slice, where each arg is an element in the slice). This should probably be {{ContainsAny}}, although it could end up breaking functionality unintentionally.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-8994","06/06/2019 18:54:41",2,"Write more tests for Command coverage ""Since Command is becoming particularly large in scope but also lacking in coverage, we need more tests to ensure that Command still behaves as expected.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-6254","06/06/2019 21:34:04",1,"Patch page should differ for commit queue patches ""When a user submits a commit queue patch, the URL they receive has a big green button on it. Clicking on that button will prevent the user's patch from being processed by the queue and it will linger in the queue indefinitely. We should hide this button.    Other things on this page don't really make sense either. We could just display the user's position in the queue, with a link to the version (or a redirect) if there is one.""","",0,1,0,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-6257","06/06/2019 21:40:03",2,"Commit queue should not run steps in pre ""These steps can be potentially expensive, and therefore slow down the queue.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8876","06/06/2019 22:38:59",1,"Start RPC Jasper service with single credentials file ""The RPC service should be run from a single credentials file containing the client CA certificate (for client certificate authentication), the server certificate, and the server private key.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-6259","06/07/2019 14:47:58",3,"Update display canary perf tasks to indicate they are canaries ""Update evergreen perf displays to clearly indicate which tests are canaries. Fold down and hide all canary results in the trend graphs by default.   ----  As a Server engineer,  I want the evergreen task display to indicate which tests are canaries  So that I can focus more on the actual performance results.  ----  AC  * By default canary results on the task page for a performance test have a visual indication that they are canaries.   ** This could be a special icon, some sort of coloring, or hiding the canary results by default.""","",0,1,0,0,0,0,0,0,0,0,0,1,0,0,0
"EVG-6262","06/07/2019 18:44:35",1,"Deleted private properties show up in plain text in the events view ""If you delete a property that has been marked as private, its original value still shows up in plain text upon deletion in the events view as the `BEFORE` value in the UI.    Is it intended that it is possible to see original values in events?    ¬†    ¬†    !image-2019-06-07-18-42-20-727.png!""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-6263","06/07/2019 19:16:48",2,"Create login modal for new UI ""We need to put together a simple login modal for the new UI in order to authenticate and use the Evergreen REST APIs (might be using the wrong term here, but you get the idea).""","",0,0,0,1,0,0,0,0,0,0,1,0,0,0,0
"EVG-6265","06/07/2019 22:36:11",1,"Database queueing when hosts become idle ""When we increased maxhosts from 500 to 1000, we observed that read tickets dropped to 0 a couple times a day. I believe this is because there were only undispatchable task group tasks present in the queue, so the idle hosts were causing lots of queries that validated that task group tasks should not be run. This will be fixed in the new scheduler, but we turned that on for a single distro today. Since we may discover bugs in the new scheduler and need to revert back to the legacy scheduler, we should put in some improvements to reduce database load when hosts are idle for the legacy scheduler. These should include  1. Persist the entire queue. If the queue is long, and the head of the queue contains only undispatchable task group tasks, there may be dispatchable tasks at the tail.  2. Agents should back off getting the next task. Currently they only jitter, with a 10-second interval.  3. Revert the change to increase idle host time for hosts that just ran a task group. I believe they were terminated and didn't run the next task because the entire queue wasn't persisted.""","",0,0,0,0,0,0,1,0,0,1,0,0,0,0,0
"EVG-6266","06/10/2019 09:12:13",2,"Dependencies are scheduled in tunable scheduler ""After switching to a new task scheduler our builds got broken because {{depends_on}} stopped working:  https://evergreen.mongodb.com/version/5cfe0d58c9ec444a61bc3211  As an example: our tasks must be invoked after {{setup_e2e}} task is finished:      But seems the tasks are run quite randomly and don't wait for the setup task to finish    Even more: the setup task is run after all others:  !screenshot-1.png|thumbnail! ""","  - name: e2e_openshift_cloud_qa    display_name: """"e2e_openshift_cloud_qa""""    run_on:    - archlinux-test    stepback: false    expansions:      <<: *cloud_manager_qa    tasks:    - name: """"setup_e2e""""    - name: """"e2e_core_task_group""""      depends_on:      - name: setup_e2e    - name: """"e2e_tls_task_group""""      depends_on:      - name: setup_e2e    - name: """"e2e_x509_task_group""""      depends_on:        - name: setup_e2e  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6272","06/10/2019 17:53:35",1,"Users can extend expiration times beyond expire-on tag ""Currently users have the power to extend spawn host expiration times for more than 1 week. Although you can only set the spawnhost expiration to 1 week, if you wait several days, you can extend the expiration time again. This means that a user could keep extending the expiration time. Then, after a month has gone by, the reaper, which uses the """"expire-on"""" tag, will stop their host.    This recently happened to a user. We should either have a hard limit for how long a spawn host can stay up, or we should extend the expire-on tag if the spawn hosts's expiration time is being extended beyond it.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-9061","06/11/2019 22:35:23",1,"RPC client should retry on non-logical errors ""The RPC client should already perform retrying to dial the server by default, but doesn't retry requests after the connection is set up.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-6277","06/12/2019 14:48:04",0,"Single-host task groups with failed tasks add dependencies, which breaks single-host behavior on restart ""If a task in a single-host task group fails, for example with system-unresponsive, this automatically adds dependencies to later tasks in the group. This breaks the single-host task group behavior, because the later tasks in the group will no longer be scheduled at the same time as the previous tasks. Although this will be fixed in the new scheduler, we should fix this in the legacy scheduler as well, since it currently causes problems in people's patches. The solution that suggests itself is not to preserve dependencies in single-host task groups on restart.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6282","06/12/2019 18:00:48",1,"Add distro config option for client download directory ""The agent monitor has to download the latest client onto the host, but the app server should be able to choose the location of the client depending on the distro.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-8664","06/12/2019 18:25:20",0,"Distinguish public read and authorized read for logs ""This will happen on the cedar level""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-6283","06/12/2019 18:33:53",2,"Discrepancy in timing display of tests ""I am investigating a [Time out build failure|https://jira.mongodb.org/browse/BF-13500], and I see from the [task view|https://evergreen.mongodb.com/task/mongodb_mongo_master_ubuntu1604_jstestfuzz_concurrent_replication_continuous_stepdown_flow_control_07_ubuntu1604_34f4722ea7ac90720e8b691007c5ec3939d7f59d_19_06_02_19_11_04/0] that when I mouse over a certain test, it is reported to have taken ~31 minutes:   !image-2019-06-12-13-28-12-025.png|width=447,height=224!    However, I looked at the task logs for this task, and the same test is reported to have taken 1.86 seconds:    !image-2019-06-12-13-29-34-655.png|width=1731,height=747!  I also notice that when I open up the Lobster logs for a particular test in the task, they don't necessarily include the complete logs of the test, e.g., [job0_fixture_teardown|https://logkeeper.mongodb.org/lobster/build/7b997c3fa97a1247574c3972d03d55bd/test/5cf4a819c2ab683a3ee1d7d2#bookmarks=0%2C153590&l=1].  ¬†  Is there a way to obtain the definitive source of a timeout other than looking at all job logs for outliers?""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-6284","06/12/2019 18:40:33",2,"Agent should send its client version when fetching next task ""The app server currently checks if the agent version is old based on the doc in the host collection (updated by the agent deploy job), but since the agent monitor updates the agent without the app server's intervention, it should be able to notify the app server of its version to determine if it should exit so the monitor can restart it. This would also be useful to be able to add event logs when the agent revision changes. ""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-6285","06/12/2019 19:24:49",2,"Report error to user in case where GitHub PR testing will not create any variants or tasks ""If we encounter https://github.com/evergreen-ci/evergreen/blob/c71adab4e46533bacb9625945bc5e012e7d4ded5/units/patch_intent.go#L258, we should return a more specific error than {{OtherErrors}} https://github.com/evergreen-ci/evergreen/blob/c71adab4e46533bacb9625945bc5e012e7d4ded5/units/github_status_api.go#L41.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6286","06/12/2019 21:09:39",0,"Parent hosts are sometimes getting terminated immediately ""See https://evergreen.mongodb.com/host/evg-archlinux-parent-20190612195309-7560620844551020799  We didn't log the termination event, but the AWS console currently show a user-initiated termination""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6288","06/12/2019 21:44:41",0,"Fleet Spawn Host ""Replace auto host provider with AWS fleet""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6290","06/12/2019 23:33:49",2,"Trend chart displays wrong number on hover ""https://evergreen.mongodb.com/task/performance_4.2_linux_wt_standalone_views_aggregation_fdb56a92bfea1af0344044856df04af4d464a3b4_19_06_11_19_19_54    See Aggregation.IdentityView.DistinctWithIndex for bc2514e""","",0,0,1,0,0,0,0,0,0,0,0,1,0,0,0
"EVG-6291","06/13/2019 11:17:53",3,"Update the performance plugin to find the closest revision for a BF ""At the moment, when there is a BF for an unrun revision, the performance plugin will not display the green caret symbol to indicate that there is a known issue.    In this case, the performance plugin should query by order (a range of orders, rather than straight revision).    The caret displayed should be a different color to indicate that this is not an exact match. ""","",0,1,0,0,0,0,0,0,0,0,0,1,0,0,0
"EVG-6293","06/13/2019 16:45:13",2,"min hosts not preserved for rhel70-stitch distro ""From the hosts page, it looks like we are not correctly keeping up min hosts for the rhel70-stitch distro. The minimum hosts is set to 3, but I only saw a single host, which was provisioning. There should have been 3 running hosts.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6296","06/13/2019 17:19:47",2,"patch command should print warnings ""We currently surface warnings to users in {{evergreen validate}} but not in {{evergreen patch}}. These means that sometimes users will submit patches with warnings and not realize that this is the source of the patch failing to build. In some cases we can increase the warning level to error, but in other cases (EVG-6082) we may not.    The {{evergreen patch}} command should print warnings. We should also probably provide a way for users to suppress warnings with a setting in their ~/.evergreen.yml, and indicate in the warnings message how to do this.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6297","06/13/2019 18:31:16",1,"Add distro config option for Jasper credentials file location ""The Jasper service running on a host needs to know where to load the credentials file from.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-9079","06/13/2019 18:49:18",0,"Fix flaky REST download test ""`DownloadFileCreatesResourceAndExtract` fails often on Windows, most likely because it has to download the entire mongodb tarball and extract it.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-9289","06/13/2019 18:52:53",1,"Make mock Jasper interface available for testing ""Ideally should have a mock manager, process, and command.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-9209","06/13/2019 19:07:54",1,"Add expiration field to certdepot docs ""Currently, it is possible to check if a particular certificate is going to expire. It should be easier to find any certificates that are expired or about to expire within some period of time.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-9305","06/13/2019 19:10:33",0,"Allow certs to be created without inserting to database ""Operations on certificates (e.g. `CertificateOptions.Sign()`) should ideally have operations that return the created certificate but don't modify the database.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-9060","06/13/2019 19:16:38",1,"Allow docs to be found/removed from certdepot ""Currently, you can unset certain tagged items (e.g. cert requests, keys, etc). However, it would be good to be able to delete documents entirely.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-6298","06/13/2019 19:52:01",2,"Trendchart sidebar shows different from trend op/sec number ""1. Open test with 128 https://evergreen.mongodb.com/task/sys_perf_linux_3_node_replSet_noflowcontrol_crud_workloads_3d7e1566f455b2ba17ccf661f78eff6fefe5e1ee_19_06_05_17_26_58##updatemulti_jtru from Performance Baron plugin  2. Check trends and compare to number on trend chart sidebar    !Screen Shot 2019-06-13 at 14.50.00.png!       *Expected*: op/sec number in trend should be the same as on trend  ""","",0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
"EVG-6299","06/13/2019 20:12:09",2,"Dates on trends are mixed ""1. Open https://evergreen.mongodb.com/task/sys_perf_linux_standalone_genny_overhead_bbec06ea1e489cf3325caadee8928918e9395d15_19_06_13_00_11_42  or  https://evergreen.mongodb.com/task/sys_perf_linux_standalone_big_update_bbec06ea1e489cf3325caadee8928918e9395d15_19_06_13_00_11_42  2. Check date line on trends    !Screen Shot 2019-06-13 at 15.12.54.png!     Expected: dates should be placed in chronological order""","",0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
"EVG-6300","06/13/2019 22:30:11",1,"Restart Tasks hangs when there is an error ""When there's an error restarting a task, the green restart task """"pending"""" icon continues to spin, and there's no way to x out of the module, so you have to reload the page.""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-6304","06/14/2019 15:42:58",2,"Lobster page doesn't load ""Adding this combination of filters and bookmarks breaks lobster: https://logkeeper.mongodb.org/lobster/build/817a10f82d35dfb9d1fcc152fcace160/all#bookmarks=0%2C167924%2C167988%2C168196%2C168531%2C274710&f~=000~mongodb%20starting&f~=000~transition%20to%20primary&f~=000~stepping%20down%20from%20primary&f~=000~transition%20to%20secondary&f~=100~%5BContinuousStepdown%3A&l=1""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-8837","06/14/2019 16:08:34",1,"Benchmarking/Investigation Hold ""Need to start to investigating the ideal buffering size for the buildlogger client, along with figuring out how much data will be coming in and how fast.    The result of this work should help us determine:  * DB scaling  * Application scaling (hosts and load balancers)""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-9143","06/14/2019 16:17:08",1,"push file via jasper interfaces ""should build an interface that makes it possible to take a local file (or buffer/io.Reader) and have jasper write it out to a local interface.       this can be added to rest or jasper/rpc only and doesn't (necessarily) have to be in the manager interface.       the goal is to be able to replace use of scp in some operations without needing to write shell commands.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-9025","06/14/2019 16:18:00",1,"integrage jasperCMD interface into curator  ""to provide user-friendly interface for running commands via jasper on remote systems.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-8996","06/14/2019 16:34:51",2,"New saving pattern in cedar perf ""We should not let users of the model package completely change essential data in existing perf results, this saving and updating perf results in the database should follow a pattern similar to that in buildlogger.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-6306","06/14/2019 18:07:22",2,"Add a way to configure spruce to point at Evergreen's server ""- The immediate goal is to be able to specify the Evergreen web server URL when starting spruce  - The way to configure this should accommodate the ways to deploy the UI mentioned in MCI-3008  - The method we come up with should be generic enough to accommodate future configuration options""","",0,0,0,1,0,0,0,0,0,0,1,0,0,0,0
"EVG-6307","06/14/2019 18:09:00",2,"Plumb real evergreen API to patch page ""- Create a mock for the API to get user's patches  - Populate current placeholders on the patch page from the API  - Add tests for the patch page using the same methodology as the login page  - Don't do the patch details yet (anything in the expand). That comes later""","",0,0,0,1,0,0,0,0,0,0,1,0,0,0,0
"EVG-6308","06/14/2019 18:10:13",2,"Add searching of patches ""Allow searching/filtering of the patch list by description""","",0,0,0,1,0,0,0,0,0,0,1,0,0,0,0
"EVG-6310","06/14/2019 20:49:26",2,"Create an API wrapper to retrieve a user's patches in evergreen.js ""GET /json/patches/user/{user_id}  Add more to the patch model (stop if this part gets too tedious though)""","",0,0,0,1,0,0,0,0,0,0,1,0,0,0,0
"EVG-9238","06/14/2019 21:01:34",1,"investigate amboy indexes in cedar  ""    Saw the above from cedar, so I made a commit to remove priority sorting in amboy and also to skip building indexes (in case removing priority caused a different index to be built.)     Should take this as an oppertunity to check the indexes in the amboy collection, see if the indexes are right and if it makes sense to change things (and possibly revert some or all of my commit. ""","   [id='cedar.service.cedarapp-1.build.10gen.cc.489b1179-0880-4f78-9c63-51042965ce76' message='problem generating query' operation='retrieving next job' service='amboy.queue.mongo']: (OperationFailed) Sort operation used more than the maximum 33554432 bytes of RAM. Add an index, or specify a smaller limit.   ",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-6311","06/14/2019 21:14:01",1,"Commit Queue CLI should check a project before uploading a patch  ""    The CLI should check the project has an enabled commit queue before uploading the patch.  ""","  evergreen commit-queue merge -p mci  ...  [evergreen] 2019/06/14 16:03:29 [p=info]: Patch successfully created.  [evergreen] 2019/06/14 16:03:29 [p=info]:        ID : 5d03fd91b237361e7fa1db86   Created : 2019-06-14 20:03:29.717 +0000 UTC      Description : EVG-6302_Config_path     Build : https://evergreen-staging.corp.mongodb.com//patch/5d03fd91b237361e7fa1db86    Status : created        Finalized : No    [evergreen] 2019/06/14 16:03:29 [p=emergency]: 500 (Internal Server Error): can't enqueue item: can't query for queue id mci: document not found  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6313","06/16/2019 01:15:08",0,"Task page for earlier executions of a display task has incorrect links ""The links to the individual execution tasks have the execution number as part of the task id. For example, [this task page|https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_rhel_62_64_bit_display_rollback_fuzzer_unclean_shutdowns_patch_a368e90685fdaa5d855ecd54769f5ca0c09d4378_5d04308d850e6160f69b880e_19_06_14_23_46_06/5] links to https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_rhel_62_64_bit_rollback_fuzzer_unclean_shutdowns_93_enterprise_rhel_62_64_bit_patch_a368e90685fdaa5d855ecd54769f5ca0c09d4378_5d04308d850e6160f69b880e_19_06_14_23_46_06_5/5 when the correct link is actually https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_rhel_62_64_bit_rollback_fuzzer_unclean_shutdowns_93_enterprise_rhel_62_64_bit_patch_a368e90685fdaa5d855ecd54769f5ca0c09d4378_5d04308d850e6160f69b880e_19_06_14_23_46_06/5.    It's also confusing because the test results load but the task, system, and agent logs do not.""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-6317","06/17/2019 15:12:11",2,"system-unresponsive tasks missing HOST_TERMINATED_EXTERNALLY message ""See system-unresponsive tasks in this version https://evergreen.mongodb.com/version/mongodb_mongo_v4.0_5f93fc9db3a3475dd2c7543b9f1e1179e6f9065f.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6318","06/17/2019 15:57:07",2,"Version page shows aborting task as yellow ""The task page shows the correct status, but the version page has a yellow box and started status tooltip.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6319","06/17/2019 18:45:10",2,"Perf discovery -- use existing comparison from task page ""A common scenario is to look at a performance task page, and then select the perf discovery link. Often we have added a comparison to a different commit. It would be nice if perf discovery automatically compared to that commit when following the link. It does not do that today, but instead goes to a generic default.¬†    Also, we can compare to multiple commits on the task page. In that scenario we should do something simple to pick one commit (maybe the first?).¬†""","",0,0,0,1,0,0,0,0,0,0,0,1,0,0,0
"EVG-6324","06/17/2019 22:00:04",2,"""Override Dependencies"" isn't deactivated after enabling ""I'd expect this option to be greyed out to indicate it's in effect. It currently doesn't grey out that option even after it's enabled.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6326","06/18/2019 15:12:19",0,"Handle credentials expiration ""When the Jasper server certificate is about to expire, it should be able to deploy new credentials and restart the Jasper service with the new credentials (also probably restarting the agent monitor). This is most likely going to be a job, similar to the setup host job. The host may have to revert to a provisioning state""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-6327","06/18/2019 20:41:16",2,"Artifact filenames get truncated on spawn hosts ""It appears that when I spawn a host from a task with a long task name, the artifact filenames get truncated and I have to rename the files to a .tar.gz file in order to unzip them:      Ideally, the truncation would not remove the extension.""","ubuntu@ip-10-122-3-138:/data/mci/artifacts-0dea57-ubuntu1804-asan_jstestfuzz_sharded_causal_consistency_4_ubuntu1804-asan$ ls -alF  total 25448  drwxrwxr-x 2 ubuntu ubuntu     4096 Jun 18 18:41 ./  drwxrwxr-x 5 ubuntu ubuntu      192 Jun 18 18:41 ../  -rw-rw-r-- 1 ubuntu ubuntu    79237 Jun 18 18:41 Running-Tests-from-Evergreen-Tasks-Locally  -rw-rw-r-- 1 ubuntu ubuntu 24042547 Jun 18 18:41 mongo-coredumps-mongodb_mongo_master_ubuntu1804_asan_0dea5729cd3cf2fb219aeeb7fdbbdfa58c8c7bb3_19_05_17_15_25_22-jstestfuzz_sharded_causal_consistency_  -rw-rw-r-- 1 ubuntu ubuntu     4646 Jun 18 18:41 mongo-diskstats-mongodb_mongo_master_ubuntu1804_asan_jstestfuzz_sharded_causal_consistency_4_ubuntu1804_asan_0dea5729cd3cf2fb219aeeb7fdbbdfa58c8c7bb3_  -rw-rw-r-- 1 ubuntu ubuntu    41256 Jun 18 18:41 mongo-system-resource-info-mongodb_mongo_master_ubuntu1804_asan_jstestfuzz_sharded_causal_consistency_4_ubuntu1804_asan_0dea5729cd3cf2fb219aeeb7fdbbdf  -rw-rw-r-- 1 ubuntu ubuntu  1872102 Jun 18 18:41 mongodb_mongo_master_ubuntu1804_asan_jstestfuzz_sharded_causal_consistency_4_ubuntu1804_asan_0dea5729cd3cf2fb219aeeb7fdbbdfa58c8c7bb3_19_05_17_15_25_2  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8451","06/19/2019 23:08:44",1,"Fix various bugs in Jasper user-friendly CLI ""The wait flag does the opposite of expected, some CLI commands have conflicting names, the ID field is deceptive because it's not the actual Jasper process ID and therefore you cannot query the manager for that ID, usage text is incorrect, some spelling mistakes.""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8481","06/20/2019 19:15:19",2,"Flaky cedar tests ""two tests fail occasionally:  * TestBuildloggerAppend/AppendToBucketAndDB  * TestAttachResultData/TestAttachResultData     Figure out what is going on and how to make them pass everytime.""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-6331","06/20/2019 21:20:28",2,"add reporting on host pool sizes and utilization for static hosts ""highest priority is getting quarantined number of hosts vs total numbers of hosts;     if it's possible to easily determine how many hosts are running tassk vs idle (probably is) then we should do that too.     Might have to add a new stats job, but may be able to quickly extend where the scheduler reports stats. ""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-6333","06/21/2019 14:58:09",2,"Add commit message and username to `commit-queue list` command ""Currently the `commit-queue list` command only lists version IDs. It would be useful for it to list the commit message and username so that it was more easily readable.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6334","06/21/2019 15:21:26",2,"Move provisioning setup logic to user data ""If bootstrapping with user data, ideally the work done by the provisioning setup host job should be done in user data.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-8413","06/21/2019 16:07:47",1,"Fix Command tags ""Tags are unused in Command currently, and they should be set in the CreateOptions instead of its own field.""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-6337","06/21/2019 21:00:41",0,"Implement expanded view for a patch ""(note this is not the task expand popup)  - Display an at-a-glance view of the statuses of tasks within a variant  - This should load real data, but test with a mock that returns some hardcoded patches  - Figure out if users care about seeing individual variants. If so, figure out a good way to display potentially 60+ variants. If not, figure out how to best combine the results of variants  - Think about sorting - what do users want to see first?  - Clicking elements in this view will eventually open details, but don't implement that yet""","",0,0,0,1,0,0,0,0,0,0,1,0,0,0,0
"EVG-6339","06/24/2019 13:54:25",1,"Add link to task log in BFG ticket ""Add link to task log in BFG ticket""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6340","06/24/2019 15:04:12",2,"Restarting failed generate.tasks should re-run generate.tasks ""Currently, generate.tasks will only execute a single time, since only a single job with a task's ID can exist in the database. If a generate.tasks job has failed to be _put_, then restarting a task containing generate.tasks will put that job, and the job will execute. This allows people to restart a task that, for example, went system-unresponsive before getting to the {{generate.tasks}} step.    However, if the job has already run, and has failed, then restarting the generate.tasks task will not cause the job to retry. In this server version https://evergreen.mongodb.com/version/mongodb_mongo_master_6b4bf643ce6a68c3c0c0d17075b3ef264ecb243d, for example, restarting the purple tasks will not cause the generate.tasks step to retry. These jobs failed because of a deploy, which canceled the context of a database operation. We should allow re-running generate.tasks jobs which have failed, but we should re-run successful jobs.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-9115","06/24/2019 17:50:00",2,"Change client verification for Jasper clients to verify host ID ""Since the instance does not have an IP at the time that the TLS certifiicate is generated, the server credentials will not pass the TLS handshake because the common name/IP will be invalid. Since the common name is set to the host ID, the Jasper client should do the TLS handshake but accept common names that match the host ID instead of a real domain name.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-6342","06/24/2019 18:08:12",1,"Test bootstrapping and provisioning on staging archlinux distro ""Bootstrapping and provisioning needs to be tested in archilnux.    Initial testing should be using non-legacy SSH for bootstrapping, provisioning, and host communication.    Once there is sufficient confidence that the SSH system is functional, we should test user data for bootstrapping and RPC communication.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-9280","06/24/2019 20:50:04",2,"Implement gRPC StreamLog ""Implement gRPC StreamLog""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-6343","06/24/2019 21:21:33",2,"Generate.tasks error ""https://mongodb.splunkcloud.com/en-US/app/search/search?display.page.search.mode=fast&dispatch.sample_ratio=1&q=search%20index%3Devergreen%20metadata.level%20%3E%3D%2070%20%22generated%20project%20is%20invalid%22&earliest=1561406400&latest=1561407000&sid=1561407411.8100473        ""","         error:     400 (Bad Request): generated project is invalid: cannot redefine tasks in 'generate.tasks' (jstestfuzz_concurrent_00_enterprise-rhel-62-64-bit)  cannot redefine tasks in 'generate.tasks' (jstestfuzz_concurrent_07_enterprise-rhel-62-64-bit)  cannot redefine tasks in 'generate.tasks' (jstestfuzz_concurrent_14_enterprise-rhel-62-64-bit)  cannot redefine tasks in 'generate.tasks' (jstestfuzz_concurrent_08_enterprise-rhel-62-64-bit)  cannot redefine tasks in 'generate.tasks' (jstestfuzz_concurrent_12_enterprise-rhel-62-64-bit)  cannot redefine tasks in 'generate.tasks' (jstestfuzz_concurrent_04_enterprise-rhel-62-64-bit)  cannot redefine tasks in 'generate.tasks' (jstestfuzz_concurrent_05_enterprise-rhel-62-64-bit)  cannot redefine tasks in 'generate.tasks' (jstestfuzz_concurrent_09_enterprise-rhel-62-64-bit)  cannot redefine tasks in 'generate.tasks' (jstestfuzz_concurrent_10_enterprise-rhel-62-64-bit)  cannot redefine tasks in 'generate.tasks' (jstestfuzz_concurrent_11_enterprise-rhel-62-64-bit)  cannot redefine tasks in 'generate.tasks' (jstestfuzz_concurrent_01_enterprise-rhel-62-64-bit)  cannot redefine tasks in 'generate.tasks' (jstestfuzz_concurrent_02_enterprise-rhel-62-64-bit)  cannot redefine tasks in 'generate.tasks' (jstestfuzz_concurrent_03_enterprise-rhel-62-64-bit)  cannot redefine tasks in 'generate.tasks' (jstestfuzz_concurrent_13_enterprise-rhel-62-64-bit)  cannot redefine tasks in 'generate.tasks' (jstestfuzz_concurrent_06_enterprise-rhel-62-64-bit)             job:     generate-tasks-mongodb_mongo_master_enterprise_rhel_62_64_bit_jstestfuzz_concurrent_gen_patch_710be037cc2817f066c41bb0140f397f5b703a82_5d1129787742ae061cfd1b26_19_06_24_20_02_39  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8920","06/24/2019 22:50:55",2,"add ""dispatch before"" timestamp to amboy queue ""add a """"dispatch before"""" timestamp to give us a way to avoid dispatching jobs that we know will fail because they've been stuck behind a backlog. ""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-6345","06/25/2019 00:12:40",1,"Failures: test-model-alertrecord on Ubuntu 16.04 [Evergreen @ ee871638] (TestAlertRecord, TestInsertNewTaskRegressionByTestRecord) ""h2. [test-model-alertrecord failed on Ubuntu 16.04|https://evergreen.mongodb.com/task/evergreen_ubuntu1604_test_model_alertrecord_ee871638754055e58ddd808fba4ebd5ab9718da9_19_06_24_21_24_48/0]  Host: [ec2-54-210-158-253.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-mx986tnj]  Project: [Evergreen|https://evergreen.mongodb.com/waterfall/evergreen]  Commit: [diff|https://github.com/evergreen-ci/evergreen/commit/ee871638754055e58ddd808fba4ebd5ab9718da9]: EVG-6331: Host Pool Stats (#2420) | 24 Jun 19 21:24 UTC  Evergreen Subscription: ; Evergreen Event:   *TestAlertRecord* - [Logs|https://evergreen.mongodb.com/test_log/5d114b5f0ae60640cf0b385d] | [History|https://evergreen.mongodb.com/task_history/evergreen/evergreen_ubuntu1604_test_model_alertrecord_ee871638754055e58ddd808fba4ebd5ab9718da9_19_06_24_21_24_48#TestAlertRecord=fail]  *TestInsertNewTaskRegressionByTestRecord* - [Logs|https://evergreen.mongodb.com/test_log/5d114b5f0ae60640cf0b385d] | [History|https://evergreen.mongodb.com/task_history/evergreen/evergreen_ubuntu1604_test_model_alertrecord_ee871638754055e58ddd808fba4ebd5ab9718da9_19_06_24_21_24_48#TestInsertNewTaskRegressionByTestRecord=fail]    ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-6347","06/25/2019 15:27:30",1,"Allow each host to own an SSH/RPC Jasper client ""Once hosts have been bootstrapped with Jasper, they should be able to create their own SSH/RPC Jasper clients without needing to check the communication type of the host. This will reduce the complexity of contacting the Jasper service in different ways.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-6348","06/25/2019 15:41:58",0,"AWS took host away, but task did not restart ""mongodb_mongo_master_enterprise_amazon2_sharded_causally_consistent_jscore_txns_passthrough_gen_54ca8a7112746c7637a295b6d57b6f2c3b4df9b7_19_06_25_13_11_09 and some of the other ones in the same commit""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6349","06/25/2019 16:11:11",1,"Nil project_ref returned by projCtxMiddleware ""If the \{project_id} supplied in the URL does not correspond to a project_ref in the db the   projCtxMiddleware¬†middleware will pass along a nil projectRef in the _RequestContext_ context.    The symptom was a panic generated when a user tried to enqueue something on the commit queue with a non-existent project_ref. Since the projectRef was nil, the commit queue middleware panicked when it tried to access a field in the projectRef. (https://mongodb.slack.com/archives/C866SR2LR/p1561473066004100)""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8467","06/25/2019 16:19:06",2,"In-progress amboy group jobs will never be cleaned up ""If there is a deploy while a job in a group is in progress, and no other jobs in that group are pending, then that job will become stranded. Presumably this is because the periodic query that creates queues for groups does not search for jobs that are in progress.""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-6353","06/25/2019 20:46:31",2,"StaleRunningTaskIDs query is slow ""During some recent queueing on the database, I saw a very long-running StaleRunningTaskIDs query. Is there something we can do to improve this query? It may be contributing to load on the db.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6354","06/25/2019 22:13:04",1,"Should scheduled overridden tasks schedule their dependencies? ""Setup:   # All tasks in a build are pending   # All tasks are unscheduled   # A task """"E"""", with a dependency on task """"A"""" is overridden   # The task """"E"""" is then scheduled¬†    Step 4 above causes task """"A"""" to be scheduled as well. Is this the expected behavior? I was hoping to _only_ schedule task """"E"""" and not have task """"A"""" run.    In practice, I've had to manually unschedule several transitive dependencies to achieve my desired behavior.""","",0,0,0,0,0,1,0,0,0,0,1,0,0,0,0
"EVG-6356","06/26/2019 15:22:31",1,"CLI and patch page commit queue order are off by one ""The commit queue CLI considers the currently executing commit queue version to be 1, while the patch page considers the first pending commit queue version to be 1. This causes the two representations of the queue to be off by 1.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6358","06/26/2019 16:28:55",1,"Expose blocked field in API ""EVG-5960 creates a concept of blocked status for a task. We should expose this in the API.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-9158","06/26/2019 18:48:10",1,"Fix REST test setup ""The function to create REST services for testing can fail to create the service and cause timeouts on Windows occasionally.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-9258","06/26/2019 19:43:18",2,"Allow Command.Run to be more configurable ""Currently, the only configurable behavior in Command.Run is the creation of the underlying processes via {{(*Command).ProcConstructor()}}. However, for some use cases, it needs to behave differently when run. For example, by the semantics of the {{sshManager}},¬†{{(*sshManager).CreateProcess()}} should logically configure the command and run it over SSH.¬† Since¬†{{sshManager}} itself relies on¬†{{Command}} for its underlying behavior, the in-memory¬†{{Command}} needs¬†{{Run()}} to actually serialize its fields into JSON input to the CLI on the remote machine over SSH in order to run the command with the correct semantics.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-9172","06/26/2019 21:44:02",2,"Allow Jasper service to kill itself for restart ""The command that must be used to kill a Jasper service within a Jasper-spawned process is platform-dependent (for example, using the service restart command to make a Jasper service restart itself won't work on MacOS).""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-6362","06/27/2019 15:24:45",1,"Commit queue resume merge project not needed ""The user should not need to enter the project""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-9318","06/27/2019 18:22:18",1,"Add RemoteClient interface to SSH manager ""Would be useful to have other methods, such as download and log streaming.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-6364","06/27/2019 18:26:02",1,"Set description to name of latest commit if not otherwise set ""If the description of the patch is not set, Evergreen should set its description to the latest commit on the branch. This will allow people to use the search function on the new patch page without having to pass a description. We should _not_ set a description if the user sets one or if this is a PR or commit queue version. (The latter already set descriptions.)  ""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6365","06/28/2019 13:25:25",2,"Tasks that use Cedar show no metrics in the perf plugin ""The perf plugin does not show data for any of the graph/table/trend views for tasks that use Cedar. I first observed this in [this patch build|https://evergreen.mongodb.com/task/sys_perf_linux_standalone_validate_cmd_patch_c0c64c95637f8f0700ac40e89dc39c30ec6f5f41_5d1242fa3e8e86513ddfe22a_19_06_25_15_51_44#]. But it looks like mainline is also affected. E.g. [this task|https://evergreen.mongodb.com/task/sys_perf_linux_3_node_replSet_service_architecture_workloads_a07912c7919d5cec360f628df445279800c66667_19_06_27_11_54_58#] but the errors I'm getting from the Chrome console are slightly different for the two tasks.    I chatted with [~julian.edwards] on Slack and Cedar does have the task. So it could be a perf-plugin or UI issue.""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-6366","06/28/2019 16:26:20",2,"TypeError in /task/cloud_automation_master_ubuntu16_LinuxTestGroup13_patch_8220204da05769860f6569fbb08c9a011638ce01_5d1130300305b96e985958e9_19_06_24_20_18_57 ""h1. Error in Evergreen  *TypeError* in */task/cloud_automation_master_ubuntu16_LinuxTestGroup13_patch_8220204da05769860f6569fbb08c9a011638ce01_5d1130300305b96e985...* Cannot set property 'innerHTML' of null  [View on Bugsnag|https://app.bugsnag.com/mongodb/evergreen/errors/5cd5b9e9d8998f00193f20ec?event_id=5d1631870045ec5c36bf0000&i=jr&m=ci]  h1. Stacktrace    [View full stacktrace|https://app.bugsnag.com/mongodb/evergreen/errors/5cd5b9e9d8998f00193f20ec?event_id=5d1631870045ec5c36bf0000&i=jr&m=ci]  ~Created by Brian Samek via Bugsnag~""","    https://evergreen.mongodb.com/static/app/perf/trend_chart.js:63 -  ",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-6367","06/28/2019 16:58:45",0,"Create role model ""Create role model""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8713","06/28/2019 16:58:51",2,"Add interfaces to retrieve LDAP groups ""Add interfaces to retrieve LDAP groups""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-6369","06/28/2019 16:58:59",2,"API route - GET /roles ""API route - GET /roles""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6370","06/28/2019 16:59:10",0,"API route - POST /roles ""API route - POST /roles""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6371","06/28/2019 16:59:25",0,"Create permissions model ""Create permissions model""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6372","06/28/2019 16:59:32",2,"Add GetRolesForUser to gimlet ""Add GetRolesForUser to gimlet""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6373","06/28/2019 16:59:45",2,"Create distro permissions model ""Create distro permissions model""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6374","06/28/2019 17:00:02",1,"Enforce distro permissions  ""Enforce distro permissions""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6378","06/28/2019 17:00:38",8,"Private flag for variants ""Private flag for variants""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6379","06/28/2019 17:00:45",1,"API route - PATCH /roles ""API route - PATCH /roles""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6380","06/28/2019 17:00:54",8,"Existing role migration ""Existing role migration""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6381","06/28/2019 17:01:05",8,"Placeholder for integration testing with MANA ""Placeholder for integration testing with MANA""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6383","06/28/2019 18:52:08",0,"Retry commit queue versions within a time frame ""As an Evergreen administrator,  I want to be able to be able to re-enqueue commit queue versions within a timeframe  so that if some outage (e.g., GitHub, AWS, Evergreen, Logkeeper) causes commit queue tasks to fail, I can restart them in bulk.    Acceptance criteria: There is a UI element at https://evergreen.mongodb.com/admin similar to the """"Restart Tasks"""" element, which will retry commit queue versions within a timeframe. This will mean creating new versions for these tasks.    I'm not sure whether some way of letting the user know that this has happened should be in scope of this ticket. You could imagine that another iteration of this feature would be to allow users to retry their own commit queue versions. If we do this, there may be some UI element which changes to indicate that the version has been retried.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6391","07/02/2019 15:01:20",0,"Failures: test-agent on Windows [Evergreen @ 9755507b] (TestStatusSuite, TestAgentFailsToStartTwice) ""h2. [test-agent failed on Windows|https://evergreen.mongodb.com/task/evergreen_windows_test_agent_patch_9755507b2276ec16131f4d9f157e404fbb5975e0_5d1a8241c9ec442782d0c0d2_19_07_01_21_59_30/0]  Host: [ec2-54-161-122-158.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/sir-579r6qcj]  Project: [Evergreen|https://evergreen.mongodb.com/waterfall/evergreen]  Commit: [diff|https://github.com/evergreen-ci/evergreen/commit/9755507b2276ec16131f4d9f157e404fbb5975e0]: 'evergreen-ci/evergreen' pull request #2438 by Kimchelly: EVG-6347: hide Jasper communication internals behind host utility methods (https://github.com/evergreen-ci/evergreen/pull/2438) | 01 Jul 19 13:22 UTC  Evergreen Subscription: ; Evergreen Event:   *TestStatusSuite* - [Logs|https://evergreen.mongodb.com/test_log/5d1a850f32f417724e637c91] | [History|https://evergreen.mongodb.com/task_history/evergreen/evergreen_windows_test_agent_patch_9755507b2276ec16131f4d9f157e404fbb5975e0_5d1a8241c9ec442782d0c0d2_19_07_01_21_59_30#TestStatusSuite=fail]  *TestAgentFailsToStartTwice* - [Logs|https://evergreen.mongodb.com/test_log/5d1a850f32f417724e637c91] | [History|https://evergreen.mongodb.com/task_history/evergreen/evergreen_windows_test_agent_patch_9755507b2276ec16131f4d9f157e404fbb5975e0_5d1a8241c9ec442782d0c0d2_19_07_01_21_59_30#TestAgentFailsToStartTwice=fail]    ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-9321","07/02/2019 15:53:09",1,"CLI commands should be easier to build ""Currently a user of the CLI who wants to build a command string has to do so manually. It would be good to have functions that build CLI subcommand strings for convenience and avoiding error-prone string building.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-9023","07/02/2019 17:43:01",1,"Fix download job race ""Logs: https://evergreen.mongodb.com/test_log/5d1b7f7032f417063ca03e5f#L3701""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-6395","07/02/2019 20:25:23",2,"Long env var name overflows onto text box  ""If you have a long enough env variable name, it overflows onto the value box and you can't read what it is set to.      !image-2019-07-02-15-24-28-291.png|thumbnail! ""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-6396","07/02/2019 21:56:02",2,"Rework authentication for spruce ""We'll work on this together, but the current mechanism isn't secure. We can't store an API key in the config file, so we'll need to get the user's key""","",0,0,0,1,0,0,0,0,0,0,1,0,0,0,0
"EVG-6397","07/02/2019 23:11:24",1,"S3copy always continues on error regardless of optional parameter ""https://github.com/evergreen-ci/evergreen/blob/master/command/s3_copy.go#L200 should probably have a return statement""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6399","07/03/2019 15:22:35",2,"List items in commit queue in UI ""Currently the CLI lists the items in the commit queue. This display will be improved by EVG-6333. Currently the patches page for a pending commit shows what number it is in the queue. We should also display the queue in the UI and link to it from the patch page and possibly elsewhere.""","",0,1,0,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-6400","07/03/2019 15:39:49",1,"evergreen/commitqueue added to queue links to PR instead of patches page ""# The message that an item has been added to the queue in the GitHub-backed commit queue should link to the patch, but instead it links back to the PR itself.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6405","07/03/2019 21:41:32",0,"The CLI commit queue creates a module in the primary repository ""Since the CLI commit queue runs both pushes in the same directory, it adds the module as a submodule of the main repository.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6407","07/03/2019 22:18:04",2,"Add filtering of patches ""- By project  - By status (probably just success/fail/not done)  - By pull request/not    maybe more?""","",0,1,0,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-6408","07/05/2019 11:54:35",1,"Evergreen does not list or terminate hosts which have been created in a non-default aws account ""¬†When spawning a host in a different aws account, the host gets created successfully but the evergreen run hangs on a call to `host.list`. It reports """"Command failed: problem getting hosts list: 0 hosts of 1 are up, waiting"""" and upon task end, the host does not get terminated.    Run: https://evergreen.mongodb.com/version/5d1f0fbfa4cf471affebdbc9    Evergreen.yml snippet        Note: Same result for ipv4 & ipv6""","  - command: host.create        type: system        params:  # mms-build          aws_access_key_id: ${mms_build_s3_aws_access_key}          aws_secret_access_key: ${mms_build_s3_aws_secret}          key_name: evg_mms_prod_ipv6_tests          ami: ami-026c8acd92718196b # ubuntu-bionic-18.04-amd64-server-20190627.1          ipv6: true          provider: ec2          num_hosts: ${e2e_remote_num_hosts}          vpc_id: vpc-ea8f5e8f          subnet_id: subnet-0900c608700af40f2          instance_type: m4.large          security_group_ids: [sg-0fc565f6c3e208379] # Allows hosts to talk to each other for MongoDB replication      - command: host.list        type: system        params:          wait: true          timeout_seconds: 600          num_hosts: ${e2e_remote_num_hosts}          path: ${e2e_remote_hosts}  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6410","07/08/2019 19:36:44",1,"Add distro options for root directory of user ""Because the Jasper service runs as a Windows service, it has no knowledge of (and therefore has no access to) the assumed cygwin mount (e.g. {{C:\cygwin}} is mounted as the root directory {{/}}) for SSH. The setup scripts might also need to be fixed to explicitly set the root and also remove usages of `/cygdrive`, which is not mounted in a non-cygwin SSH process.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-6411","07/08/2019 19:40:22",1,"Patch expand panels collapse when a new page of patches is loaded ""I wonder if something is clearing the state of the expansion panels. We may need to maintain the expanded state of them ourselves, but we should avoid that if possible""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-6415","07/08/2019 21:53:18",2,"Commit queue delete should deactivate a running version ""If a user deletes an item from the queue that's already being processed the version should be deactivated so it won't merge if the tests pass.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6416","07/09/2019 14:48:08",2,"Build project and branch are incorrect in rest v2 ""https://evergreen.mongodb.com/rest/v2/versions/mongodb_mongo_master_83292f18bc75726a548ab7c9c5c650d779c90684 has project: """"mongodb-mongo-master"""" and branch: """"master"""", which is correct. https://evergreen.mongodb.com/rest/v2/builds/mongodb_mongo_master_enterprise_rhel_62_64_bit_83292f18bc75726a548ab7c9c5c650d779c90684_19_07_09_10_28_13 has project_id: """"mongo"""" and branch: """"mongodb-mongo-master"""", which is not correct.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-9040","07/09/2019 16:20:29",1,"Allow Jasper service to run as configurable user ""Currently the Jasper service will run as the system default privileged user (e.g. root on Linux/Mac, LocalSystem on Windows). This should be configurable.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-8952","07/09/2019 21:08:22",1,"method on ceder model.ArtifactInfo to get a io.ReadCloser from the artifact ""internal api ""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-9088","07/09/2019 21:23:25",1,"populate processed_at timestamp field in rollup results "" maybe also valid? ""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-6423","07/09/2019 22:00:31",1,"Revendor amboy ""Disable ttl indexes on all queues for now""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-6425","07/09/2019 22:02:11",1,"Remove configure button for commit queue patches ""On the /patches/mine page, there is a configure button for commit queue patches. Although it leads you to the patches page, which is useful, there's nothing to configure there, so the name of the button is confusing.""","",0,1,0,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-6427","07/09/2019 22:08:41",1,"Paused commit queue patches report they are at position -1 ""If a patch is at position -1, there should be a helpful message instead of reporting -1.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6432","07/10/2019 20:55:21",2,"create cedar.js library  ""mirror the core parts of evergreen.js to support pulling performance (and log!) data, and the eventual integration of lobster into the new logging framework.     this should just be simple project infrastructure, and some simple classes to handle authentication/etc.""","",0,0,0,1,0,0,0,0,0,0,1,0,0,0,0
"EVG-9032","07/10/2019 22:15:02",1,"Allow TTL to be set without needing certificate request ""The TTL can only be set if using a CertificateOptions struct and calling {{PutCertFromMemory}}. It would be more convenient to be able to access this field like the other fields via tags.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-6437","07/11/2019 17:40:37",2,"Log if a process is not cleaned up between tasks ""[This task|https://evergreen.mongodb.com/task/jstestfuzz_self_tests_replication_fuzzers_v4.0_rollback_fuzzer_MMv1_0_patch_9c46f46e08293d456fa64d6d092885e77bf84363_5d273a86d1fe0770b75ef0c4_19_07_11_13_32_55] was aborted by {{github_pull_request}} user likely due to a new commit being pushed the branch being tested. [The next task|https://evergreen.mongodb.com/task/jstestfuzz_self_tests_update_fuzzer_v4.2_update_multiversion_fuzzer_replication_flowCtlOff_0_328e56d0f185b6fc6e22538365fa420786a8c8c7_19_07_11_13_52_59] run on the [sir-df5i6akg|https://evergreen.mongodb.com/host/sir-df5i6akg] host then failed due to the address already being in use when starting up mongod.    h6. System logs from second task        h6. Test logs from first task        https://logkeeper.mongodb.org/lobster/build/1b95d451c3b52d5c5bd68f8d0c91a5e6/test/5d273f379041302837556c44#bookmarks=0%2C11558&f~=100~pid%3D&l=1    Note from [~brian.samek]: The agent should log if a process has not cleaned up between tasks. This will help us understand how often this occurs.""","  [2019/07/11 13:56:51.809] root     27235  0.5  0.0      0     0 ?        Z    13:52   0:01 [mongod] <defunct>  [2019/07/11 13:56:51.809] root     27264  0.1  0.0      0     0 ?        Z    13:52   0:00 [mongod] <defunct>    [js_test:rollback_test-e428-1562852989988-2] 2019-07-11T13:52:55.782+0000 d20030| 2019-07-11T13:52:55.782+0000 I CONTROL  [initandlisten] MongoDB starting : pid=27206 port=20030 dbpath=/data/db/job0/mongorunner/RollbackFuzzerTest-0 64-bit host=ip-10-122-27-174  [js_test:rollback_test-e428-1562852989988-2] 2019-07-11T13:52:55.986+0000 d20031| 2019-07-11T13:52:55.986+0000 I CONTROL  [initandlisten] MongoDB starting : pid=27235 port=20031 dbpath=/data/db/job0/mongorunner/RollbackFuzzerTest-1 64-bit host=ip-10-122-27-174  [js_test:rollback_test-e428-1562852989988-2] 2019-07-11T13:52:56.193+0000 d20032| 2019-07-11T13:52:56.193+0000 I CONTROL  [initandlisten] MongoDB starting : pid=27264 port=20032 dbpath=/data/db/job0/mongorunner/RollbackFuzzerTest-2 64-bit host=ip-10-122-27-174  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6438","07/11/2019 20:42:25",1,"Support ""description"" and ""d"" in addition to ""message"" and ""m"" in the commit queue ""[~david.bradford] noted that users habitually type --description or --d when they use the evergreen patch command.    Although the --message and --m commands better match the effect of this flag‚Äîsetting the git commit message‚Äîit would be more natural if users could use the argument they are used to from the evergreen patch command.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6439","07/11/2019 20:50:38",2,"Trend chart displays incorrect comparisons ""https://evergreen.mongodb.com/task/performance_linux_wt_standalone_query_patch_135c88363bdb5e7b353825f3fec4aa0d7db80571_5d275c647742ae016a76b6f4_19_07_11_15_57_50##%257B%2522compare%2522%253A%255B%257B%2522hash%2522%253A%2522135c88363bdb5e7b353825f3fec4aa0d7db80571%2522%257D%255D%257D is showing drops in the 70% range, but looking at the raw numbers this is incorrect""","",0,0,1,0,0,0,0,0,0,0,0,1,0,0,0
"EVG-8909","07/12/2019 17:21:59",1,"Add ID function to manager ""Processes already have the manager environment variable available through ProcessInfo, but a user should be able to ask a manager for its id without having to request it from one of its processes.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-6445","07/12/2019 20:51:21",2,"Allow access to commit queue message in an evergreen task ""With the commit queue rollout to server, we would like to be able to convert existing githooks into evergreen tasks that can be run as part of the commit queue. Most of these are fairly easy, but there is a hook that checks if a given commit message starts with a jira ticket number.     Would it be possible for a task in evergreen to have access to: (1) whether this task is part of a commit queue execution, and (2) what the commit queue message is for the given patch?    If these were expansions, that would make it easy for tasks to have access to them, but other ways would work as well.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6448","07/12/2019 21:45:59",2,"Fix smaller UI issues with spruce ""* make styling consistent with Evergreen  * run through workflows and look for usability issues  * pretty up the menu (maybe)""","",0,0,0,1,0,0,0,0,0,0,1,0,0,0,0
"EVG-6449","07/12/2019 21:55:33",2,"Task groups executing in wrong order.  ""While running a patch build I had some strange stuff happen. The first task (dbtest_compile) got stuck in the dispatch state, and the second task (detest) ran even though it shouldn't have.¬†    ¬†    https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_rhel_62_64_bit_display_dbtest!_patch_a8a8fabb17e9700aab633a67b24fe6147290bb92_5d28d0dce3c3311db1c93d5f_19_07_12_18_27_10#/%23%257B%2522compare%2522%253A%255B%257B%2522hash%2522%253A%2522a8a8fabb17e9700aab633a67b24fe6147290bb92%2522%257D%255D%257D#%257B%2522compare%2522%253A%255B%257B%2522hash%2522%253A%2522a8a8fabb17e9700aab633a67b24fe6147290bb92%2522%257D%255D%257D""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-8905","07/12/2019 22:39:19",1,"Move revendor to curator ""Evergreen already has a revendoring target available for automated revendoring. It would be nice to have this for other repositories, as well as potentially handle duplicate nested vendored packages.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-6450","07/15/2019 15:29:23",2,"Timeout job should clean up stranded tasks that aren't the most recent running task on a host ""be very careful about task groups, especially ones running teardown_group since the last task will be different but should not be cleaned up    https://evergreen.mongodb.com/task/performance_linux_wt_standalone_compile_deaf23e643efa664338d602b419589639409b33a_19_07_12_20_23_52""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-9185","07/16/2019 22:07:48",0,"Vendor mongorpc and ftdc ""These dependencies are necessary for implementing a Jasper service built on the mongo wire protocol.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-8470","07/17/2019 01:34:33",1,"github.com/mongodb/grip (and github.com/mongodb/ftdc) are broken on !linux ""https://github.com/mongodb/grip/pull/56 started depending on CPUTick from https://github.com/shirou/gopsutil, but that only defines CPUTick for linux.""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-6454","07/17/2019 15:26:00",2,"Evergreen patch attaches to wrong enterprise commit ""In the patch [here|https://evergreen.mongodb.com/version/mongodb_mongo_master_8696830b93eaea25cb8573a3b63db52d283933da] evergreen selects the wrong enterprise commit. At the time, the head of enterprise was {{011070b30a821083e6605151b50bcfb6a9018647}} whereas the patch chose {{d7d8e25ecb4b027d018ffd200e20bdcae2b0d066}}.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6455","07/17/2019 15:51:38",2,"Spawn host doesn't have patch applied for tasks from certain patch builds ""Clicking the """"Spawn..."""" link in https://evergreen.mongodb.com/task/jstestfuzz_self_tests_unittest_t_test_linux_patch_d0fa191e0eb6d78ec5eab02c5aad1ff57229acaa_5d2de7f33627e048a6091b7c_19_07_16_15_06_28 leads to a {{/data/mci/source-jstestfuzz-self-tests-d0fa19/}} directory checked out to the appropriate commit but without the patch applied.    From discussing with [~john.liu] a bit over Slack, I've also found that {{evergreen fetch}} fails for tasks from other patch builds:    ""","  $ evergreen fetch --source --task mongodb_mongo_master_enterprise_rhel_70_64_bit_external_auth_patch_386dc8c2ab8c886ca84a4111493ed93796099008_5cfeb94be3c3313e378de265_19_06_10_20_13_03 --token <your own token>  ...  HEAD is now at 91730c3 SERVER-40442 Support multiple ldap query bind passwords at runtime  error: unrecognized input  exit status 128  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6456","07/17/2019 19:48:11",2,"Move the API client to the app's context ""Rather than passing it into every component. Also will probably need to rename the context object""","",0,1,0,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-9173","07/19/2019 16:17:32",0,"Prevent duplicate tags within process info creation options ""The tags in the ProcessInfo's CreateOptions currently duplicate append tags in the CreateOptions passed into newBasicProcess/newBlockingProcess.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-9154","07/19/2019 19:22:08",1,"Integrate wire protocol POC ""The POC implements the bare-bones manager functionality. It needs to still be cleaned up, implement the process functionality, and tested.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-8878","07/22/2019 16:36:32",0,"Omit server name field from rpc credentials ""Server name should not be marshalled as part of the RPC credentials since it is only used as an in-memory way of handling the case in which the name on the TLS certificate doesn't match the host name.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-6462","07/23/2019 11:03:48",3,"Implement Task Reliability API new REST API v2 endpoint with kill switch enabled by default. ""As the commitQ,  When the task reliability service is disabled,  And the task_reliability endpoint is accessed,  Then a 503 Http Service unavailable status should be returned.     As the commitQ,  When the task reliability service is enabled,  And the task_reliability endpoint is accessed,  Then an empty record should be returned.     ----    AC:    * Basic Routing is implemented.    * Kill switch returning a 503 should be enabled by default.    * An empty array should be returned when the kill switch is disabled.    ** The Project parameter should be validated from the router.  ""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6464","07/23/2019 11:13:36",3,"Calculate the limited (20 days) reliability score for a single task name and a significance parameter. ""As the commitQ,   When the task_reliability endpoint is accessed,   And no task name is provided ,   Then a status 400 """"Missing Tasks values"""" error should be returned.    As the commitQ,   When the task_reliability endpoint is accessed,   And 51 task names are provided ,   Then a status 400 """"Too Many Tasks values"""" error should be returned.    As the commitQ,   When the task_reliability endpoint is accessed,   And a task name is set to """"aggregation_expression_multiversion_fuzzer"""",   Then an array of up to 50 Task Reliability Score Record should be returned using the defaults parameters.    As the commitQ,   When the task_reliability endpoint is accessed,   And a task name is set to """"aggregation_expression_multiversion_fuzzer"""",   And a limit of 1 is provided,   Then an array of 1 Task Reliability Score Record should be returned using the defaults parameters.    As the commitQ,   When the task_reliability endpoint is accessed,   And a task name is set to """"no_such_task"""",   Then an empty array should be returned.    As the commitQ,   When the task_reliability endpoint is accessed,   And a task name is set to """"aggregation_expression_multiversion_fuzzer"""",   And a significance value is provided,   Then an array of up to 50 Task Reliability Score Record should be returned with the correct reliability.    As the commitQ,   When the task_reliability endpoint is accessed,   And a task name is set to """"aggregation_expression_multiversion_fuzzer"""",   And a significance value is provided,   And a limit of 2 is provided,   Then an array of 2 Task Reliability Score Records should be returned.  ----  AC:   * Basic task name validation is implemented.   * The significance parameter is validated and handled correctly. Invalid, default(.05) and specified.   * The limit parameter is validated and handled correctly. Invalid, default(1) and specified.""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6465","07/23/2019 11:14:13",2,"Add full task filtering support (task_names, variants, distros). ""As the commitQ,  When the task_reliability endpoint is accessed,  And incorrect project, task name, variant or distro combinations are provided ,  Then an empty should be returned.    As the commitQ,  When the task_reliability endpoint is accessed,  And multiple correct project, task name, variant or distro combinations are provided ,  Then an array of 1000 Task Reliability Score Record should be returned.      ----  AC:    * Full filtering by project, variant, task and distro is supported.    * The parameters are correctly validated and appropriate errors raised.    * The defaults are correctly applied.  ""","",1,0,0,0,0,0,0,0,0,0,0,1,0,0,0
"EVG-6466","07/23/2019 11:14:43",2,"Add num_days support for arbitrary grouping. ""As the commitQ,   When the task_reliability endpoint is accessed,   And a valid or default¬†num_days is provided,   Then the Task reliability records are correctly calculated.    As the commitQ,   When the task_reliability endpoint is accessed,   And an invalid num_days is provided,   Then a status 400 error document is returned.  ----  AC:   * The num_days parameter is correctly validated and applied.   * The success reliability score is calculated from the available task stats.""","",1,0,0,0,0,0,0,0,0,0,0,1,0,0,0
"EVG-6467","07/23/2019 11:15:15",2,"Add date filtering support (before and after dates). ""As the commitQ,  When the task_reliability endpoint is accessed,  And a valid after_date is provided,  Then the Task reliability records between after_date and tomorrow are generated.    As the commitQ,  When the task_reliability endpoint is accessed,  And a valid after_date and before_date are provided,  Then the Task reliability records between after_date and before_date are generated.    As the commitQ,  When the task_reliability endpoint is accessed,  And a valid before_date is provided,  Then the Task reliability records between (before_date - group_num_days) and before_date are generated.    As the commitQ,  When the task_reliability endpoint is accessed,  And no before_date or after_date is provided,  Then the Task reliability records between (today - group_num_days) and tomorrow are generated.    As the commitQ,  When the task_reliability endpoint is accessed,  And an invalid date is provided,  Then a status 400 error (""""Invalid AfterDate/BeforeDate values"""") document is returned.    Invalid dates are:    * invalid date formats    * before date earlier than after_date    * before date equal to after_date    ----  AC:    * Dates are correctly validated and proper errors returned.    * Default dates are correctly applied.    * Date dates are correcly generated. Default before_date is tomorrow to capture all available      data, default after_date is before_date - group_days to get one complete record.  ""","",1,0,0,0,0,0,0,0,0,0,0,1,0,0,0
"EVG-6468","07/23/2019 11:15:46",2,"Add support for pagination and limits (start_at param and interaction with limit). ""As the commitQ,   When the task_reliability endpoint is accessed,   And no start_at value is provided,   And there is less than one page of data,   Then the Task reliability records are returned.   And the response does not contains a start_at header.    As the commitQ,   When the task_reliability endpoint is accessed,   And no start_at value is provided,   And there is more than one page of data,   Then the Task reliability records for the first page of data are returned.   And the response contains the correct start_at header for the next page of data.    As the commitQ,   When the task_reliability endpoint is accessed,   And no start_at value is provided,   And there is exactly one page of data,   Then the Task reliability records for the that page of data are returned.   And the response contains a start_at header.    As the commitQ,   When the task_reliability endpoint is accessed,   And an invalid start_at value is provided,   Then 400 error status document is returned.    As the commitQ,   When the task_reliability endpoint is accessed,   And a start_at parameter is provided,    Then the Task reliability records for that page of data are returned.   And the response contains the correct start_at header for the next page of data.    As the commitQ,   When the task_reliability endpoint is accessed,   And a start_at parameter is provided,    And there is no more data,    Then an empty array is returned,   And the response does not contains a start_at header.  ----  AC:   * Pagination data is not provided in the case where there is no more data.   * The first page of data is always provided.""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6470","07/23/2019 11:16:50",2,"Document new api endpoint and usage. ""As a Server Engineer,   I want to read the task_reliability end point documented,   So that I can correctly use the api.  ----  AC:   * task_reliability API is documented.   * All parameters usage is clear.   * The documentation should be easily located. ""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6472","07/23/2019 14:12:56",2,"Removing an entry from the commit queue after it has started running doesn't prevent merge ""I had removed https://github.com/10gen/jstestfuzz/pull/114 from the commit queue while it was running because of the performance impact the changes would have on how the fuzzer compares query results. I found that despite doing so, after all the tasks finished, the commit was merged in master anyway. I wouldn't necessarily want to forced to abort the patch build to prevent the merge because it can be useful to allow the tasks to finish in order to demonstrate the problematic behavior.    I understand there isn't likely to be a perfect solution here but I figured we could at least discuss some options.""","",0,0,0,0,0,1,0,0,0,1,0,0,0,0,0
"EVG-6473","07/23/2019 15:23:49",2,"Commit-queue merge errors on messages containing quotes ""I noticed an error on `commit-queue merge` when the message I passed in contained quotes.    When I ran the below command, the version failed: https://evergreen.mongodb.com/version/5d3710200305b960bd5450ac      When I ran the below command, it succeeded: https://evergreen.mongodb.com/version/5d3712553e8e863ceba54eae  ""","  evergreen commit-queue merge --project build-baron-tools --message 'TIG-1747 Remove """"Log Visualization"""" button from Build Baron Tool'    evergreen commit-queue merge --project build-baron-tools --message 'TIG-1747 Remove Log Visualization button from Build Baron Tool'  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6474","07/23/2019 17:59:49",1,"Add author to commit-queue list command ""The commit-queue list command currently shows some metadata about the elements in the commit queue. This should also include the author, since people will likely be looking for their own commits.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6481","07/24/2019 14:40:12",1,"Rounder.js console error on waterfall, other pages ""When I load the waterfall, there is a console error: """"Rounder.js:1 Failed to load resource: the server responded with a status of 404 (Not Found)"""".""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-6482","07/24/2019 14:50:42",1,"Make it easy to run a script on all hosts in a distro  ""This came from the Artifactory outage post-mortem as an improvement item that would aid in future incident triage.    ¬†    ¬†""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6483","07/24/2019 14:51:43",2,"Pause task dispatching with greater granularity ""Pause task dispatching with greater granularity (per distro, patches, project)    ¬†    This came as an improvement item from the Artifactory outage post-mortem.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6486","07/24/2019 16:56:50",1,"On build page, failed/success summary doesn't match detailed view "" !image-2019-07-24-17-54-48-950.png|thumbnail! from https://evergreen.mongodb.com/build/mongodb_mongo_master_enterprise_rhel_62_64_bit_5c9f7fb5d38df176bda950bdea6aaadbcb73e8e1_19_07_24_12_09_43.    Note that the summaries say Not Scheduled, F, F, S, F, F, but the details look like Not Scheduled, F (and still running), S, F, F, F.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6495","07/25/2019 19:20:56",0,"Run host's Jasper service as distro-configured user ""Currently, Jasper will run at the default privilege level for the system (e.g. root on Linux. This should be fixed so that it runs as the user given in the distro settings.    ¬†    This doesn't include fixing Windows, which will require more work.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-6499","07/25/2019 22:02:12",1,"Add robots.txt file to prevent search engine crawling ""Read tickets were low for many hours on 7/25. There were a number of queries against the inefficient task history endpoints, which appear to come from a range of IP addresses belonging to Google's web crawler. We should add a robots.txt file to prevent this from happening again.""","",0,1,0,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-8986","07/26/2019 14:49:08",0,"SetInput should return Command object ""To match all of the other command-building methods, it should also return the command object.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-6501","07/26/2019 22:18:30",2,"host.create should create hosts that are accessible without a custom security group ""(See comment for detail)""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-9036","07/29/2019 18:48:51",0,"Include server name in credentials ""This is required to be able to re-use the same credentials file if the client is on the same host as the RPC service.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-6503","07/29/2019 19:03:35",0,"Allow SCP to put files in non-home directories ""The SCP command in the setup host job only works currently because it assumes that all files go into the home directory.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-6504","07/29/2019 19:38:11",0,"Fix curl command args ""Curl doesn't allow {{\-\-flag=value}} syntax, only {{\-\-flag value}}.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-6508","07/30/2019 15:16:17",2,"Create user for Jasper service on Windows machines ""The Jasper service can't run as Administrator on Windows machines because it requires a password (which is not known by evergreen). There should be a new user created (e.g. mci-exec) with administrator privileges and the ability to start a service (i.e. """"Log on as a service"""" right)""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-6509","07/30/2019 18:15:58",0,"Set ServerName in Jasper exported JSON credentials ""The host Jasper credentials file should contain the ServerName so that if using Jasper with SSH communication, it can re-use that same file to authenticate the Jasper CLI connection.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-8923","07/30/2019 18:27:55",0,"Suppress SSH-related output from CLI over SSH ""The Jasper SSH client depends on the output of a command being only the JSON output of the Jasper CLI. Output from SSH itself will cause it to fail to parse the JSON, which is particularly problematic since the default log level will warn about trying to add a new host to the list of known hosts.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-8416","07/30/2019 20:12:15",0,"Only return error from SSH client if non-empty ""The CLI over SSH process has [a line|https://github.com/mongodb/jasper/blob/31d54de8c9ad68f5820112e68bc6a5ea8a8f1883/cli/ssh_process.go#L120] in which it creates an error from the error text resulting from the CLI wait command. However, it should only create an error if the error text is non-empty.""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-6511","07/31/2019 16:25:44",0,"Agent monitor command needs home directory ""The agent monitor command needs tilde expansion to find the home directory but fork/exec processes don't have this shell feature.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-8863","07/31/2019 17:08:27",0,"Allow logging to be configured from CLI ""There are [interceptors|https://github.com/mongodb/jasper/blob/f67da3ffa80bfe02fae5f0960198cc34aff41dd4/rpc/service.go#L36-L37] in the Jasper RPC service that allow you to log the RPC requests made. This would be useful to enable for debugging hosts in the future.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-6513","07/31/2019 17:39:43",0,"Idle host termination should check waiting for agent monitor ""Currently, the idle host termination job [checks if the host is waiting for an agent based on a flag|https://github.com/evergreen-ci/evergreen/blob/be7a4bea6bbfd9341b2ce800ef8837e8e394e970/model/host/host.go#L659-L675] but this flag is not relevant for non-legacy hosts. On non-legacy hosts, it should check if the host needs an agent monitor deployed as an indicator of idleness.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-6516","08/01/2019 16:04:21",2,"Test names get cut off on Evergreen task page ""When viewing [certain test results|https://evergreen.mongodb.com/task/mongodb_mongo_v4.0_osx_1010_read_concern_majority_passthrough_1_osx_1010_4a0def0129ae5aa6c8ea951b5c452c8938cf4d83_19_07_31_17_28_00/0] on an Evergreen task page, the names of tests get cut off on the left. This occurs in Chrome:  !chrome_default_zoom.png|thumbnail!    Safari:   !safari_default_zoom.png|thumbnail!     and Firefox:   !firefox_default_zoom.png|thumbnail!     all at default browser zoom levels on a 13 inch Macbook Pro. The problem seems to be alleviated at a lower zoom level e.g. 80% zoom in Chrome:   !chrome_80percent_zoom.png|thumbnail! ""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-9155","08/01/2019 20:31:35",0,"Depot functions should handle internal name conversions ""Currently, certificate generation internally modifies the ID for users when generating certificates by replacing several non-alphanumeric characters with underscores. This can cause unexpected behavior, because it is then impossible for an external caller to find the user in the depot without knowing the exact transformation done on the original name.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-8843","08/01/2019 21:23:02",0,"Run non-interactive sudo check ""The [sudo check in the OOM tracker|https://github.com/mongodb/jasper/blob/88f51a01ba3d780c866571693a2e67d1157238d4/subtree_oom.go#L32-L43] needs to run in non-interactive mode since the OOM tracker won't supply a password.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-6521","08/02/2019 15:48:38",1,"Date in priority changed notification both wrong and redundant ""Aug 2, 2019 10:35:51 amPriority Changed at Dec 31, 0000, 7:03:58 pm to 2 by brian.samek    https://evergreen.mongodb.com/task/evergreen_ubuntu1604_smoke_test_agent_monitor_b447bbdb2740263b2ce8fd4217b9263ed715f51c_19_08_02_14_29_37#/log/EV""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-6522","08/02/2019 16:27:44",1,"Improve commit queue error for non-enabled project ""Trying to enqueue from the CLI to a project without a commit queue gives a misleading error: """"item is not an integer""""  Improve error handling for this case to help the user know what really went wrong.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6525","08/05/2019 20:24:39",0,"Agent monitor needs its own log prefix ""This should be done to allow the agent monitor log files to be differentiated from the agent log files.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-6528","08/05/2019 21:56:12",0,"Set host flag for Jasper service ""Jasper automatically uses localhost as its host unless one is defined.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-6530","08/06/2019 16:16:43",1,"Webhook response for projects without a commit queue ""If a PR for a project without a commit queue is closed the response to the webhook will be a 400 code with an error that we couldn't find the corresponding project.        ""","  {    """"status"""": 400,    """"error"""": """"can't find projectRef for <owner/repo>, branch master: can't query for projectRef <owner/repo> tracking master: can't query for project with commit queue. owner: <owner>, repo: <repo>, branch: master: document not found""""  }  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6531","08/06/2019 16:49:25",2,"Evergreen missing commits ""Commit:¬†53a9785cff7def49a94cd7d1c6538e69e2e0f680    Commit time: ~03:30 PM¬†Mon Aug 05 2019    Merge time into master: ~8:00am Tues Aug 06 2019    Merged via a PR using a merge commit. Evergreen was able to see the merge commit    ¬†""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6533","08/06/2019 18:47:45",2,"Host failed to spawn with an error that ""describe instances response has no reservations"" ""Evergreen should either retry or fail. Instead it left the host up in the building state. https://evergreen.mongodb.com/host/evg-rhel62-large-20190806161144-4606364672920218135    ""","  describe instances response has no reservations  github.com/evergreen-ci/evergreen/cloud.(*ec2Manager).spawnOnDemandHost   /data/mci/4dc65407d876a5e10f70b397af70d4f1/gopath/src/github.com/evergreen-ci/evergreen/cloud/ec2.go:284  github.com/evergreen-ci/evergreen/cloud.(*ec2Manager).SpawnHost   /data/mci/4dc65407d876a5e10f70b397af70d4f1/gopath/src/github.com/evergreen-ci/evergreen/cloud/ec2.go:444  github.com/evergreen-ci/evergreen/units.(*createHostJob).createHost   /data/mci/4dc65407d876a5e10f70b397af70d4f1/gopath/src/github.com/evergreen-ci/evergreen/units/provisioning_create_host.go:217  github.com/evergreen-ci/evergreen/units.(*createHostJob).Run   /data/mci/4dc65407d876a5e10f70b397af70d4f1/gopath/src/github.com/evergreen-ci/evergreen/units/provisioning_create_host.go:162  github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool.runJob   /data/mci/4dc65407d876a5e10f70b397af70d4f1/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool/helpers.go:53  github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool.executeJob   /data/mci/4dc65407d876a5e10f70b397af70d4f1/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool/helpers.go:21  github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool.(*abortablePool).runJob   /data/mci/4dc65407d876a5e10f70b397af70d4f1/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool/abortable.go:188  github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool.(*abortablePool).worker   /data/mci/4dc65407d876a5e10f70b397af70d4f1/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool/abortable.go:162  runtime.goexit   /opt/golang/go1.9/src/runtime/asm_amd64.s:2337   ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6534","08/06/2019 18:59:28",0,"Do not quote command line args to agent monitor ""Since the agent monitor process gets spawned from fork/exec, it won't interpret the quotes in a shell context, unlike the legacy agent deploy job which is done in the context of an bash session over SSH.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6535","08/06/2019 19:28:21",0,"Agent monitor should only listen on loopback ""Currently it listens on the given port for all IPs tied to the host.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-6536","08/06/2019 19:52:25",1,"add global admin UI options for tunable scheduler options ""time in queue  estimated runtime""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6537","08/06/2019 19:53:00",0,"distro admin ui for tunable scheduler options ""time in queue  expected runtime     (maybe rename zipper factor?)""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6538","08/06/2019 19:55:39",2,"remove task group caching backfill job from pre-scheduler jobs ""we should figure out if there's a case where we need to continue to backfill task group order number in the scheduler, and if not we should remove it (and all task group caching?) ""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6539","08/06/2019 19:56:46",2,"dependency aware task dispatching should ensure task groups are in order ""tasks now have a task group order number that's populated, and it probably makes sense that within a schedule-able unit in the task dispatcher, we should ensure that task groups are ordered correctly. ""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6540","08/06/2019 19:58:52",2,"Check if webhooks exist in a repository before creating them ""When a repository is moved in GitHub (from one org to another) it seems to retain the webhooks that were set up before the move. When the Evergreen project is adjusted to point to the new owner it tries to create a webhook on the repo, but it fails since the webhook already exists.    Perhaps a solution is to check which whether Evergreen hooks have already been created for the repo and if so just save them instead of trying to create them.    Not sure what to do about the orphaned webhooks in the database when a GitHub repo is deleted (and then possibly reinstated and tracked in Evergreen).""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8569","08/06/2019 20:01:21",2,"move tychoish/mongorpc into anser ""also use bsonx.Document for rpc wire messages""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-6541","08/06/2019 20:03:56",0,"Fix monitor file logging ""File logging needs to be given absolute path.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6546","08/06/2019 22:49:01",1,"Allow intent host IDs to pass host validation when using user data ""The API server performs various checks on the host payload when contacted by the agent, including checking that the given host ID matches the host ID in the database. However, when the host is bootstrapped with user data, it only has the intent host ID available to it at the time that it's initialized. The API server should accept the intent host ID in the case of a host bootstrapped with user data. ""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-8705","08/07/2019 17:05:29",1,"processed at field in cedar pref api shouldn't be nil ""saw nil processed-at fields, which seemed wrong: https://cedar.mongodb.com/rest/v1/perf/task_id/sys_perf_linux_standalone_validate_cmd_944b2d06d8a51719722d96055d738e59d7e45d8f_19_07_06_20_55_01    It seems reasonable to remove this field from the API. ""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-6549","08/07/2019 20:00:37",8,"Support Cedar data in perf discovery ""We need a way to compare expanded metrics data across different builds and to a known baseline. We use performance discovery for this for legacy data. This includes some way to label a baseline in cedar data, although it doesn't have to be the same tagging method used by the legacy data""","",0,0,0,1,0,0,0,0,0,0,0,1,0,0,0
"EVG-8471","08/07/2019 21:27:10",1,"The ""err_count"" field is never incremented, but it is used in the reporting package, and persisted as 0 ""There is, however, a method to get it dynamically, though that's never called.""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-6551","08/08/2019 13:59:25",2,"CLONE - Accommodate long variant names on the Versions Pages ""On the Versions by Variant page, long variant names are obscured.  If the long variant names are unique at the _end_ of the name, it is very hard to tell them apart.  For example, we have several variants that start with """"E2E w local & daemon"""" but then end with different qualifiers.  I cant' tell them apart on this view.    https://evergreen.mongodb.com/version/mms_e2a69e9b305c444bb6beb0ddd3b96c4ce3d2b7e5##0    !https://jira.mongodb.org/secure/attachment/213962/longnames.png|width=95%!""","",0,1,0,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-6553","08/08/2019 14:43:30",2,"Host allocator should allocate additional hosts if tasks run for much longer than expected ""A user can submit a patch build which substantially changes the runtime of a task. Since the host allocator starts new hosts based on the historical runtime of a task, if many tasks take substantially longer than usual, the host allocator will not allocate enough hosts to run the tasks in the queue. The long-running tasks can fully occupy the running hosts. We should consider adding logic to the host allocator that will allocate new hosts if currently-running tasks are taking much longer than their estimated runtime.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6554","08/08/2019 15:00:27",2,"Spruce patches page show different results for clicking the filters in a different order ""If I select """"failed"""", """"buildhost-configuration"""", I get what I expect, the AND of those two selections. If I select """"buildhost-configuration"""" first, however, selecting failed expands the list of patches, potentially treating it as an OR.""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-6557","08/08/2019 15:14:14",0,"Update host communication time when bootstrapping with user data ""This prevents the agent monitor deploy job from running, since the agent monitor should be started through user data.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-6558","08/08/2019 15:17:41",0,"Jasper client should have explicit timeout ""Currently the connection cancellation relies on the context passed to {{JasperClient()}}, but it should also have an explicit deadline (e.g. <30s)""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-6559","08/08/2019 15:38:10",2,"New patch page doesn't work in firefox or safari ""I got it to load my patches in chrome, but in firefox there are no patches.""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-6562","08/08/2019 18:22:41",1,"NeedsNewAgent should not be set for non-legacy hosts ""NeedsNewAgent is only used to run the agent deploy job. Since non-legacy hosts don't deploy agents directly, NeedsNewAgent does not need to be set.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-6566","08/08/2019 20:09:58",2,"User data should be able to indicate when a spawn host is ready ""This can be used by the app server to verify when a spawn host is actually ready, including task data (e.g. via a cron job).    Furthermore, hosts running tasks should only be considered running once an agent contacts the app server for a task.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-6568","08/08/2019 23:13:58",0,"New patch page loads huge documents containing data not immediately needed by views ""When I go to http://evergreen.spruce.s3-website-us-east-1.amazonaws.com/#/patches?user=oleg.pudeyev, I see that https://evergreen.mongodb.com/json/patches/user/oleg.pudeyev?page=0 is loaded which - currently for me - is a 6 MB json document. Processing this amount of data brings Firefox to its knees, and while Chromium appears to more or less cope it still takes a long time.    The application should intelligently load a sensible amount of data that it requires for presenting the current views instead of trying to load all data it might ever need up front.""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-6572","08/09/2019 14:44:43",2,"Module-only commits do not work ""The two problems that occurred to Jonathan and me are  1. Requiring a single commit on community means you cannot commit enterprise-only.  2. Getting the commit message form community means that an enterprise-only commit will have the commit message of whatever happens to be on HEAD of community.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6575","08/09/2019 17:42:20",0,"scheduler support for planning distro aliases ""need to write a query to look for alaised tasks and then make sure the scheduler can persist alias queues to a seperate collection""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6579","08/09/2019 20:52:07",1,"Log time to from host creation to next task ""This would be a useful metric to measure the performance of legacy vs. non-legacy hosts. Currently, hosts only log the time to finish the setup host job.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-6580","08/12/2019 15:14:57",2,"It's not possible to set min hosts in the UI unless a distro is set to tunable ""Even though it's supported for the legacy scheduler""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-6581","08/12/2019 16:38:36",0,"Jasper service should log errors to splunk ""Would be useful for debugging the Jasper service on hosts.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-6582","08/12/2019 18:11:50",1,"GPG metadata in commit queue commit message when showSignatures enabled in Git ""In my ~/.gitconfig, I've set the following:      When using the commit queue, this has created the following commit in evergreen:  https://evergreen.mongodb.com/version/mongodb_mongo_master_22e98452c5eb9a4a0c08616a421e4894751966c9    The signature confirmation messages from {{git log}} appear to have propagated to the commit message.""","  [log]      showSignature = true  ",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-6583","08/12/2019 19:52:10",0,"Patch page filter on patch type ""Like the status and project filters, there could be a filter on type (cli, PR, commit queue).""","",0,1,0,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-6585","08/12/2019 21:17:50",2,"New patch page expand/collapse slows down as you scroll further down. ""If I try scrolling down a few times (~3-4 pages) in infinite scroll, the response time on¬† expanding/collapsing a more recent patch patch became slower each time I opened a new one. I tested in Chrome and Firefox with no add-ons.    Example after triggering infinite scroll twice:    [^Aug-12-2019 16-09-17.mp4]""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-8938","08/12/2019 23:09:06",0,"Log warning should check mongo driver error instead of mgo error ""The¬†{{mongoDepot}} should check for the mongo driver error for no documents instead of the mgo driver error.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-6590","08/13/2019 15:21:31",1,"Improve distro bootstrap config validation ""There are many fields related to distro bootstrapping that should be validated since fields are required depending on their bootstrapping method.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-6592","08/13/2019 16:27:05",2,"Capture commit queue patches in Mbox format ""If commit queue patches are captured in Mbox format they will retain author info and commit messages and merge mode will work for CLI queues.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6594","08/13/2019 19:35:13",1,"Intent hosts that fail to spawn should have their credentials removed ""In some testing, hosts that failed to come up (e.g. due to hitting EC2 limits) did not delete their Jasper credentials because their intent host doc is removed instead of decommissioned/terminated.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-8526","08/13/2019 19:49:08",2,"verbose/debug logging for pail/repobuilder ""particularly for Push/Pull operations it would be nice to have more insight into what's happening for longer operations. ""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8743","08/13/2019 20:16:24",2,"s3 bucket.Pull/Push hangs for large numbers of files ""in the context of building index pages (which is admittedly done in a weird way currently) the s3 bucket does Pulls and I witnessed not all of the files downloading, (maybe list timesout or hits a max and we don't do more iteration), also hangs in cases when the files exist.""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-6600","08/14/2019 19:16:09",2,"Merge queue submits should not show up on my patch queue page ""It is very confusing, because they show up as non-finalized patch queues. It is doubly confusing when I've just actually patch tested the same thing to make sure it works before sending it to the merge queue, but when I got back to the patch page to look at something else it looks like I forgot to actually run my tests.""","",0,1,0,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-6604","08/16/2019 15:41:33",1,"Legacy task finder does not skip undispatchable tasks ""This means that the dequeue op is a noop, and we rely on the scheduler running again to remove them from the task queue. ""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6607","08/16/2019 18:44:54",2,"New patch page top menu requires clicking on menu option text ""In Evergreen menus are designed so that you can click anywhere in a rectangle to select an option, and the rectangle is highlighted. On the new patches page you have to click on the text itself. We should make the patches page menu be more like Evergreen's.""","",0,1,0,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-9225","08/16/2019 21:06:13",0,"Splunk logger panics if setup fails ""Closers being called before checking error causes panics if there's an error.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-6609","08/19/2019 15:31:30",0,"Static mac hosts should be able to be bootstrapped with SSH ""Currently the provisioning setup host job does not run on static hosts. This prevents static hosts from being bootstrapped with the Jasper service via SSH.    ¬†    The scope of this ticket only covers mac hosts. Static linux hosts will need to be handled separately because they do not have root permissions.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-6610","08/19/2019 17:01:02",1,"Close Jasper connections ""Operations that open connections to Jasper services need to close them.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-6612","08/20/2019 14:40:15",2,"The v2 distros endpoint should log to the event log ""Editing a distro from the UI logs to the event log, but logging to the v2 distros endpoint does not. They should have consistent behavior, especially because automated processes have now moved to the v2 endpoint.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-9043","08/20/2019 16:28:40",2,"Stop retrying failed amboy ftdc rollup jobs ""When jobs fail because of bad data given to cedar by users, we should be notified. But, the amboy job should not continue to retry these jobs over and over. There should be some type of indicator to stop trying to calculate rollups after a certain number of failures, but this should be done keeping in mind that the data may not be bad but the there is some other issue with the application. If the latter is the case, the job should be retried once the application's issue is fixed.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-9263","08/20/2019 16:35:28",1,"Loggers should have configurable send thresholds ""Loggers are currently set to log everything that is sent to them. However, it may be desirable to configure this. For example, only log at the error level or above.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-6617","08/20/2019 20:33:31",0,"Display configurable expiration ""Add configurable expiration to the Spawn hosts page (this is mostly done, need to handle the non expirable case).""","",0,1,0,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-6616","08/20/2019 20:33:31",0,"Make expiration for spawn hosts configurable ""If no expiration, spawn host shouldn‚Äôt be reaped (will need to do some AWS research on how to make this happen).¬† Should for now impose some default limit per user (probably 1) on non-expirable hosts.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6619","08/20/2019 20:33:32",2,"Display spawn host tags ""Make spawn host tags editable from the spawn host page""","",0,1,0,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-6622","08/20/2019 20:33:33",2,"Display alerts on notification page ""Allow users to turn on/off alerts, and choose a delivery method.""","",0,1,0,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-6621","08/20/2019 20:33:33",2,"Set up alerts regarding the host. ""Alerts about the expiration of the host.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6620","08/20/2019 20:33:33",2,"Support EBS volumes for spawn hosts ""We can create/attach volumes to instances, and detach/delete volumes. Volumes must be in the same availability zone as the instance.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6624","08/20/2019 20:33:34",2,"Modify type of spawn hosts ""This can only be done on stopped instances.¬†This should be configurable when creating a host (host create --type <value>) or modifying a host. (host modify --type <value>)¬†    For general context:¬†[https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html]""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6627","08/20/2019 20:33:35",2,"Stop and start instances ""Users should be able to stop/start instances via commandline. ( {{evergreen host stop <host> or evergreen host modify --stop}}). This will involve adding a new status for stopped hosts.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6626","08/20/2019 20:33:35",0,"Allow admins to set quota/limit ""Should be able to restrict the size of hosts/block devices for users, as well as the number of expirable hosts. This would be from Admin Settings and for now would apply to all users. Should consider what to do if something is lowered and users already have more than the new limit‚Äì-should this only apply to future changes?¬†""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6625","08/20/2019 20:33:35",2,"Display modify instance type for spawn hosts ""This will probably be a drop down list in a row below updating expiration time. If the Update button is pressed and the instance isn't stopped should tell the user. This shouldn't need a modal.""","",0,1,0,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-6628","08/20/2019 20:33:36",2,"Stop and start instances via the spawn host page ""Similar to the trash button we have currently.""","",0,1,0,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-6629","08/20/2019 20:33:37",0,"Add option to run commands on host ""Jasper will need to be provisioned on hosts. This may be available only from the CLI.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6632","08/20/2019 20:33:38",2,"Specify the distro when creating cloud managers in order to get correct key/secrets. ""Currently we only use a default region for spawn hosts. We want Admin Settings (Providers.AWS) to allow for multiple keys/secrets (map region -> key or value). Region from EC2ProviderSettings should be passed through so we know which key/secret to use (if no region, use us-east-1 as the default).""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6631","08/20/2019 20:33:38",1,"Modifying Admin Settings to take multiple EC2 keys/secrets. ""Should be able to add additional EC2 Region/Key/Secrets within the AWS admin card with a [+] (this region should correspond to the alias tacked on to the end of the distro, for example ‚Äúeurope‚Äù).Should also add to admin settings route.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6634","08/20/2019 20:33:39",1,"Update documentation ""Update commandline documentation for spawn hosts""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8964","08/20/2019 21:53:16",1,"Migrate perf model functions that use old driver to new driver ""don't forget to pass in context rather that use env's context""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-6635","08/20/2019 22:02:52",1,"Remove credentials dependency on global environment ""Currently, there are some calls to get the global environment (e.g. [here|https://github.com/evergreen-ci/evergreen/blob/c3257d957e89b278855db9b0baf85f933b59fc6b/cloud/ec2.go#L228]). Passing the global environment can be removed if we assume that the database name and connection URI are fixed at bootstrap time.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-6636","08/21/2019 14:58:43",0,"Failure: test-units on Ubuntu 16.04 (Docker) [Evergreen @ 1a819721] (TestHostCosts) ""h2. [test-units failed on Ubuntu 16.04 (Docker)|https://evergreen.mongodb.com/task/evergreen_ubuntu1604_docker_test_units_1a819721ac1d4cf63c57e715f24a72ff91bfa82f_19_08_20_15_29_11/0]  Host: [|https://evergreen.mongodb.com/host/container-2899237677854148294]  Project: [Evergreen|https://evergreen.mongodb.com/waterfall/evergreen]  Commit: [diff|https://github.com/evergreen-ci/evergreen/commit/1a819721ac1d4cf63c57e715f24a72ff91bfa82f]: EVG-6420 consistently load graphs with legacy trend data (#2579) | 20 Aug 19 15:29 UTC  Evergreen Subscription: ; Evergreen Event:   *TestHostCosts* - [Logs|https://evergreen.mongodb.com/test_log/5d5c223d30661554e19546b1] | [History|https://evergreen.mongodb.com/task_history/evergreen/evergreen_ubuntu1604_docker_test_units_1a819721ac1d4cf63c57e715f24a72ff91bfa82f_19_08_20_15_29_11#TestHostCosts=fail]    ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-9281","08/21/2019 20:50:47",1,"Handle empty build_variants_status in evergreen.py ""This [version|https://evergreen.mongodb.com/rest/v2/versions/sys_perf_cf57e33764ba12a6a30ba6b75ef2aa3ccc192a78] has an empty 'build_variants_status'. Currently the client will crash if it tries to create a version object for that version. We should fix that.  ----  As an evergreen.py user,  I want evergreen.py to handle versions with empty 'build_variants_status' values,  So that I can perform actions on those versions.  ----  AC:   * evergreen.py does not crash trying to access the above version.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-6638","08/21/2019 21:28:20",2,"bg_* test results is not displayed on graph ""h2. [bg_* test results is not displayed on graph on move_chunk_workloads on Linux Shard Lite Cluster|https://evergreen.mongodb.com/task/sys_perf_linux_shard_lite_move_chunk_workloads_ac41c65f6355f83aac70136324c98561ac79daa1_19_08_21_05_23_37]   !Screenshot from 2019-08-21 16-25-23.png|width=600!     Known that graphs for bg_* tests were in place on Apr 14, 2019 - see BF-12525""","",0,0,0,0,0,0,1,0,0,0,0,1,0,0,0
"EVG-9284","08/21/2019 22:13:19",1,"macOS linking fails on go1.9 ""https://evergreen.mongodb.com/task/grip_macos_test_27c1b78bd559da919311877940bd8e605fb473b2_19_06_11_18_27_24""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-8622","08/21/2019 23:13:19",1,"invert locking model ""the current background locking model needs to get called from the pool rather than the queue because jobs can't reasonably mark themselves complete if they take longer than the lockout timer, which may lead to re-execution.    my last change to locking reduced re-execution bugs for all short running jobs by causing us to lock-ping less often, but these longer running jobs, I think.""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-6642","08/22/2019 23:47:51",2,"perf charts is not exposed for some sys-perf tasks ""Please note there is a workaround - graphs are exposed only if """"All"""" Thread Levels checkbox selected    h2. [out_of_cache_scanner on Linux 1-Node ReplSet 15 GB WiredTiger Cache|https://evergreen.mongodb.com/task/sys_perf_linux_1_node_15gbwtcache_out_of_cache_scanner_1a39fab6a77a6fdddc889aaffa116b3376bfc488_19_08_15_19_02_30]     h2. [industry_benchmarks/ycsb_* on Linux Shard Lite Cluster|https://evergreen.mongodb.com/task/sys_perf_linux_shard_lite_industry_benchmarks_8c49a9e761e6c829e91fac0369db470c198d43ec_19_08_16_23_03_25]   !Screenshot from 2019-09-03 11-25-38.png|thumbnail!     h2. [retryable_writes_workloads/mixed_* on M60-Like 3-Node ReplSet|https://evergreen.mongodb.com/task/sys_perf_atlas_like_M60_retryable_writes_workloads_ba434d76511a28336d23c0bb2985f5cf8164670a_19_08_02_22_05_05##mixed_insert_retry]    h2. [map_reduce_workloads/map_reduce_doc_* on Linux 3-Shard Cluster|https://evergreen.mongodb.com/task/sys_perf_linux_3_shard_map_reduce_workloads_fdc2af124b38652be53ff46ad658e86f7dd1f47a_19_08_26_18_44_08]""","",0,0,0,0,1,0,0,0,0,0,0,1,0,0,0
"EVG-8537","08/23/2019 20:45:51",2,"allow configurable locktimeouts ""add methods to pool interface, and then manage it in the queue (no changes to the queue interface), pushing config down in SetRunner as needed.     this will make it possible to test lock timeout handling. ""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-6799","08/23/2019 22:16:04",2,"Support multiple commits in one batch in commit queue ""It's a best practice to separate logically separate code into multiple git commits. It's clearer for readers and easier for partial backport and revert. However, commit queue only supports a single commit and encourage developers to squash commits into larger ones. If the commits are not logically relevant but dependent, they'd have to be pushed separately, one after the other gets merged.¬†SERVER-42219 is an example. The code change broke an unnecessary unrelated test, so it depends on the test removal. Ideally these commits can be pushed together, when one of them failed, either the following commits get rejected or all get rejected as a whole.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6645","08/23/2019 22:52:09",2,"The Commit queue tried to process two entries at the same time ""Two entries to the commit queue processed at the same time. One had disappeared from the queue, but was still processing and caused the next entry to fail. Here are the evergreen version in question:    Currently on the queue: 5d604db30305b93646e618b7  Was skipped: 5d6047af3627e0407809c458""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-9028","08/24/2019 19:00:37",2,"manger implmenetation that runs single commands (locally) over ssh ""I think this is a minor change, but might make bootstrapping easier/clearer, and looks like a functional gap in the library""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-6648","08/25/2019 00:42:43",2,"evergreen services closers should be ordered  ""currently they're a map internally, and they get terminated in random order, which means that clean shutdown can be hard because the database and logger could disappear before the queue terminates. ""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-6649","08/25/2019 08:32:05",2,"Single-host task groups scheduling subsequent tasks on same machine despite prior failure ""{{setup_group}} failing (system failure): https://evergreen.mongodb.com/version/5d605c2a7742ae5639e5ae2a  first task in task group failing (task failure): https://evergreen.mongodb.com/version/5d607711850e616ed5256b5c    My expectation was that implicit dependencies between tasks within a single-host task group would still apply.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6650","08/25/2019 08:32:49",2,"Allow absolute paths to be specified for working_dir parameter ""The {{working_dir}} parameter is prefixed with the contents of the {{$\{workdir\}}} expansion despite possibly already being an absolute path.    https://evergreen.mongodb.com/task/realm_sync_mongo_proto_ubuntu_debug_t_compile_core_patch_08de2f1d23f3bb266eb76e89bb6941d1bd74d443_5d6073d0e3c3311f0038517d_19_08_23_23_16_55        In particular, it prevents    {code:yaml}  working_dir: ${workdir}  {code}    from being specified and requires that the {{working_dir}} parameter be entirely omitted.""","  [2019/08/23 23:17:23.363] Running command 'shell.exec' in """"f_install_build_tools"""" (step 3 of 4)  [2019/08/23 23:17:23.363] Command failed: directory /data/mci/528d620be0ecb73e4c90a4a2484ff63d/data/mci/528d620be0ecb73e4c90a4a2484ff63d does not exist  [2019/08/23 23:17:23.364] Task completed - FAILURE.    working_dir: ${workdir}  ",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6651","08/25/2019 08:39:00",2,"subprocess.exec should have an option to add prefixes to the PATH environment variable ""The following pattern is currently only possible with the {{shell.exec}} command:    {code:yaml}  f_install_third_party:  - command: shell.exec    params:      working_dir: *a_project_root      shell: bash      script: |        set -euo pipefail        PATH=""""${workdir}/prefix/bin:$PATH"""" ./scripts/install_third_party.sh  {code}    (You could technically use {{expansions.update}} to have a script write the contents of {{""""$\{workdir\}/prefix/bin:$PATH""""}} and then specify that in {{env}} to {{subprocess.exec}} but that's way more work than the above.)""","  f_install_third_party:  - command: shell.exec    params:      working_dir: *a_project_root      shell: bash      script: |        set -euo pipefail        PATH=""""${workdir}/prefix/bin:$PATH"""" ./scripts/install_third_party.sh  ",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8922","08/25/2019 13:58:03",2,"split up test, local, and remote queue implementations ""mostly to be able to get 5min make spans by splitting up the queue package which is too large ""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-9160","08/25/2019 13:59:46",2,"revise queue/remote/driver interfaces ""with the inverted locking model (pools take locks rather than queues,) the existing interfaces are a bit too broad and a bit duplicated. SaveStatus can be removed, etc, and it would be good to take a high level look at these interfaces to see if there's some cleanup worth doing""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-9243","08/25/2019 14:05:17",2,"measure/benchmark overhead of job dispatching ""Test throughput of dispatcher with mock and and scoped job.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-9144","08/25/2019 14:06:50",2,"add management interface support for more advanced job cancelation  ""e.g. mark jobs complete to clear backlogs in pathological cases (we do this in the database now, but it might be nice to pave the cowpath a bit. ""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-8961","08/25/2019 14:09:49",2,"distributed in-progress job cancelation  ""after MAKE-906 (and MAKE-902) we might be able to have a better story about stopping distributed jobs. Currently, the only way to cancel an in-progress job is to identify which application server is running the job and then use the abortable queue to cancel its context (or restart that app server,) but we could have some mode to invalidate the lock and mark the job complete, which would cause it to stop executing and prevent another server from picking it up.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-9159","08/25/2019 14:11:03",2,"reduce duplication in remote queue drivers  ""see if we can push remote-group and remote-single drivers into single implementations. ""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-8958","08/26/2019 15:42:23",2,"investigate deadlock in pail push/pull sync ""ran into problems with deadlock using the index generation job on versions of curator that use pail. ""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-9278","08/26/2019 15:43:06",2,"pail/curator should respect tokens from enviornment variables  ""`AWS_ACCESS_KEY_ID`,  `AWS_SECRET_ACCESS_KEY`, and `AWS_SESSION_TOKEN`""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-6653","08/26/2019 17:19:02",0,"Evergreen Spawn Host Page modify option ""Currently, the only configurable detail for spawn hosts is the expiration, which is displayed in a row on the details page for the spawn host. Now that we're adding many configurable details, this should look more like a list with an overall """"Save"""" option.""","",0,1,0,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-8382","08/26/2019 21:19:49",1,"TestArtifact changes not propagating when Upload called ""This is causing the artifacts to upload correctly to S3 but the metadata in the Cedar database does not have the correct bucket/key info.""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8490","08/26/2019 21:54:45",1,"amboy waituntil uses stale value for now ""While working on something that requeues jobs in the group queue, I noticed that adding WaitUntil to a job causes that job not to execute. I believe this is because the value of now is stale in the the drivers' Next() methods.""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-6655","08/26/2019 22:44:00",1,"Evergreen waterfall page is missing variants ""Example: !Screen Shot 2019-08-26 at 5.42.54 PM.png!""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-9004","08/27/2019 03:12:00",2,"move jasper options types into their own package ""would reduce chances of circular dependencies and make it possible to simplify test infrastructure ""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-9312","08/27/2019 13:47:12",1,"annotating sender  ""would call message.Annotate before sending the message, and otherwise pass through to sub senders""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-6658","08/27/2019 15:20:07",2,"Failure: test-service on Race Detector [Evergreen @ 05e9f6e6] (TestNextTask) ""h2. [test-service failed on Race Detector|https://evergreen.mongodb.com/task/evergreen_race_detector_test_service_05e9f6e631b98ed600ba6e2ac8cca1104e70f07a_19_08_26_21_55_10/0]  Host: [ec2-52-204-110-192.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/i-030c575e302e9c490]  Project: [Evergreen|https://evergreen.mongodb.com/waterfall/evergreen]  Commit: [diff|https://github.com/evergreen-ci/evergreen/commit/05e9f6e631b98ed600ba6e2ac8cca1104e70f07a]: EVG-6581: log errors from host's Jasper service to Splunk (#2598) | 26 Aug 19 21:55 UTC  Evergreen Subscription: ; Evergreen Event:   *TestNextTask* - [Logs|https://evergreen.mongodb.com/test_log/5d645fc3d6d80a038ae2652f] | [History|https://evergreen.mongodb.com/task_history/evergreen/evergreen_race_detector_test_service_05e9f6e631b98ed600ba6e2ac8cca1104e70f07a_19_08_26_21_55_10#TestNextTask=fail]    ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-8888","08/27/2019 22:08:37",2,"amboy pool internals should get rid of workUnits as their main use case was removed ""this is tricky because maybe it causes a deadlock in context cancelation.     the work unit channel was a way that we passed a cancel func that could cancel the lock pinging in the old logging model, but now that the pools are responsible for lock pinging the current mechanism will stop a background lock pinging. ""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-6665","08/28/2019 15:07:36",2,"Create modify host command for spawn hosts ""To start should only be able to add/remove tags, and should only be available for spawn hosts.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6666","08/28/2019 15:10:17",2,"Put provisioning-create-host in its own queue ""With EC2 fleet, provisioning-create-host jobs take longer if Evergreen has hit its AWS API limits. This can cause other jobs to become blocked behind these jobs. We should move these to their own group queue. See {{startSystemCronJobs}} for an example.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6668","08/28/2019 16:56:11",2,"restarted system failure tasks shouldn't lead to notifications ""I just got a """"failure caused regression"""" notification for https://evergreen.mongodb.com/task/evergreen_ubuntu1604_docker_dist_75a7439d74793fffa5fc76e182d25f140db6a0d8_19_08_28_15_19_17/0 which system failed, had restarted, and succeeded by the time I looked at it. No harm in the current behavior but it looks/smells bad. ""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-6669","08/28/2019 18:26:14",2,"Handle malformed AWS DescribeInstances response ""On https://github.com/evergreen-ci/evergreen/blob/75a7439d74793fffa5fc76e182d25f140db6a0d8/cloud/ec2.go#L549  we will panic if the response is missing information.  Add validation to make sure it's complete.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8736","08/28/2019 19:52:32",2,"Auto deploy evergreen.py to pypi on merge to master ""Right now, changes to evergreen.py must be manually pushed to pypi after being merged to master. We could update to the evergreen configuration to automatically push changes to pypi as part of mainline runs on master. In doing this, we should add checks that the project version has been updated so that we don't overwrite a preexisting version.  ----  As a DAG engineer,  I want change to evergreen.py to automatically push to pypi  So that I don't have to manually publish changes.  ----  AC:  * Changes on evergreen.py master are automatically pushed to pypi.  * A test is put in place to block merge to master if the evergreen.py version has not been updated.""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-6671","08/29/2019 13:46:31",2,"Add new endpoints for test/task details over ""x"" versions ""For Foliage, it's required to see how a task performed in some """"x"""" amount of versions starting from some version """"Y"""" (or the latest).     Can you add an endpoint that would return a json with:  {    """"version1"""" : {<task/test_object>},    """"version2"""" : {<task/test_object>},    .....    """"versionx"""" : {<task/test_object>},  }    the parameters we would need for it to be useful is:  * start_version=<version> (Optional, if not sent, use most recent  * limit=<number-of-versions> (optional, if not sent - have some default)  * variant_name=<The variant where the task """"lives""""> (maybe this could be optional and then the return structure is a bit more complex, having variants as the top elements and inside them the versions, and the task/test. If this is too hard, it's less important, normally we would do this per variant, and making this mandatory would be perfectly fine.  * task_name=mandatory - the task name we want to know about  * test name=optional (if none is sent, return the task data, otherwise - return the test data  * pagination support    Note: Another optional argument could be: skip unscheduled versions. That would allow us to make a much smaller amount of calls to evergreen. Every time we check a task/test that runs on a batch timer, we hit plenty of unscheduled versions until we actually get to that """"X"""" amount of versions with statuses.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8974","08/29/2019 18:25:41",2,"expand certdepot interface to include practical items from evergreen's credentials  ""make the ergonomics of certdepot better. ""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-6675","08/30/2019 10:33:28",1,"Why are patch names truncated? ""Look at all that blank space! So much room!     !image-2019-08-30-11-31-59-833.png!""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-6676","08/30/2019 10:34:36",2,"Task in task group ran in order different from how it is listed in project configuration ""[The {{t_realm_sync_tests_with_simulated_txn_errors}} task|https://evergreen.mongodb.com/task/realm_sync_mongo_proto_ubuntu_release_t_realm_sync_tests_with_simulated_txn_errors_patch_8850b71cae3aeb9dbb9b49b86c394633b74bfb0d_5d67fbde2fbabe17685294c7_19_08_29_16_22_56/1] ran before [the {{t_realm_sync_tests}} task|https://evergreen.mongodb.com/task/realm_sync_mongo_proto_ubuntu_release_t_realm_sync_tests_patch_8850b71cae3aeb9dbb9b49b86c394633b74bfb0d_5d67fbde2fbabe17685294c7_19_08_29_16_22_56/0] despite them appearing in the opposite order in the list of tasks the {{tg_compile_and_test}} task group runs.    {code:yaml}  - name: tg_compile_and_test    max_hosts: 1    setup_group_can_fail_task: true    setup_group:    - command: manifest.load    - func: f_fetch_source    - func: f_create_python_virtualenv    - func: f_install_build_tools    - func: f_install_third_party    teardown_group: []    setup_task: []    teardown_task:    - func: f_post_resmoke_test    tasks:    - t_compile_core    - t_compile_sync    - t_realm_sync_tests    - t_realm_sync_tests_with_simulated_txn_errors  {code}""","  - name: tg_compile_and_test    max_hosts: 1    setup_group_can_fail_task: true    setup_group:    - command: manifest.load    - func: f_fetch_source    - func: f_create_python_virtualenv    - func: f_install_build_tools    - func: f_install_third_party    teardown_group: []    setup_task: []    teardown_task:    - func: f_post_resmoke_test    tasks:    - t_compile_core    - t_compile_sync    - t_realm_sync_tests    - t_realm_sync_tests_with_simulated_txn_errors  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6679","09/03/2019 10:10:07",1,"Updating the ""ref"" field for a module has no effect in a patch build ""https://evergreen.mongodb.com/version/5d6e27753066150e9e7c53ad continued to use the manifest from the base commit despite the """"modules"""" section being modified. The current behavior makes it awkward because using the {{evergreen set\-module}} to update the entry in the patch build's manifest doesn't demonstrate whether the Evergreen project configuration syntax is actually correct.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6682","09/03/2019 15:42:03",2,"Track commit queue length and time from submission to start and finish ""Currently we don't know what wait times for the commit queue or its length over time is. We should log both (1) the length of the queue and (2) how long each item waited in the queue before it was popped. Both could probably be logged each time an item is popped.""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6684","09/03/2019 20:53:34",2,"Investigate occurrences of a task being dispatched despite a task it depends_on failing  ""*Staging Example:*¬†    [https://evergreen-staging.corp.mongodb.com/task/mci_lint_lint_rest_data_patch_bda9f6dd6b703f6a11379786f4bf1818b94ac660_5d0a91f29dbe321e48f5137d_19_06_19_19_50_18]    *Production Example:*¬†    [https://evergreen.mongodb.com/task/evergreen_ubuntu1604_test_rest_route_patch_b0f5cd4077aa92e65072a93a896e000a619d2809_5d66e25c2fbabe628b4f9c47_19_08_28_20_22_12]    ¬†    ¬†    ¬†""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8662","09/04/2019 18:36:01",2,"Create periodic queue group operation ""See [https://github.com/evergreen-ci/evergreen/pull/2630/files#r320848758]¬†for the origin of this ticket.    Currently Populate* jobs in Evergreen return a function that takes as its second argument an amboy.Queue. This doesn't make sense for a queue group, since there is no single queue to pass. There should probably be a new type, amboy.QueueGroupOperation.""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8565","09/04/2019 19:40:50",2,"investigate negative duration and total times  ""[example here|https://cedar.mongodb.com/rest/v1/perf/task_id/sys_perf_linux_3_node_replSet_big_update_03c012864560206b7d8716584cbe96b4de0235cc_19_09_04_04_17_46]""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-6686","09/04/2019 19:54:35",0,"Batch Fleet AWS API calls ""Fleet appears to make more API calls than the previous spot implementation. We should see if it's possible to batch more Fleet calls.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6688","09/04/2019 20:16:38",2,"Make self-tests on Docker green ""Currently js-test, test-agent, and test-command fail when run in Docker. We should either skip these tests or make them pass.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6692","09/05/2019 15:11:05",2,"Task Groups broken for Distro Aliases ""The problem (from Brian):   # Host asks for task. There's no task in its distro queue, so we get a task from an alias queue.   # The host finishes the task and asks for another one. In the meantime, tasks have entered the distro queue.   # We iterate over the distro queue, and, having not found a task in the host's current task group, we return a different task.    We should instead check both queues for task group tasks before returning a different task.""","",0,1,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-6693","09/05/2019 15:34:17",2,"Validate base commit sent to patch-file command ""It's currently possible to set {{-b}} of the {{evergreen patch-file}} command to a string that is not a commit in the repository you are patching. This can break the scheduler, because a patch without a base commit does not have the project yaml and therefore cannot sort task groups, for example. Presumably this breaks other parts of the scheduler as well, but sorting task groups happens early so is the thing that visibly breaks.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-9099","09/06/2019 22:52:36",2,"Group and/or parent concept for buildlogger logs ""we need someway to group logs since logs have a flat hierarchy... or add concept of parents logs""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-9297","09/09/2019 16:01:19",2,"Grouping mechanism for buildlogger logs ""We need some way to group related logs, whether this is by a simple group id or parent mechanism.    ""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-6701","09/09/2019 17:28:23",1,"Use cached task group order ""EVG-6441 stopped saving full projects to the database by fixing a bug where we should have been saving the parserProject. However, it appears that [calling model.LoadProjectInto|https://github.com/evergreen-ci/evergreen/commit/039d385f79e63472bd660c91afcecbe318be54ee#diff-f6193ab04bcefcdbc748b1761aa54e9dL50] in {{cacheTaskGroups}} occasionally spikes CPU on the application servers. Since we may have been caching task group order elsewhere, we should see if we can use that cached order.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6703","09/09/2019 18:28:45",2,"The project API does not provide the PR tasks ""it seems like it was supposed to be as part of the aliases with a tag:    """"alias"""":""""__github"""",  """"variant"""":""""^bazel_linux_x86_64$"""",  """"task"""":"""""""",  """"tags"""":[  """"pr_check""""  ],  """"_id"""":""""5c9e8a88850e61524f891a74""""    but this was the only result of a PR task, and we have many more (this is for mms master project)""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6717","09/11/2019 15:55:54",0,"Display issues with blocked tasks ""Since the new change of blocked tasks, it is really hard to read the UI.    1. scheduled tasks and blocked tasks both appear as dark grey.  2. a dependent task will be shown as scheduled while it's actually blocked (see attached)""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-9126","09/11/2019 16:15:53",2,"publish_packages is failing on rhel on master ""E.g;,    https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_rhel_62_64_bit_publish_packages_8cd307c097460f10ca0a6255a1dfcfa7f2a4ebbb_19_09_11_13_00_29    https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_rhel_70_64_bit_publish_packages_8cd307c097460f10ca0a6255a1dfcfa7f2a4ebbb_19_09_11_13_00_29    It looks like the failure started with this commit https://github.com/mongodb/curator/commit/ec14f6b0da1df67cc762fdc02e86845d05f6ea3d.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-6719","09/11/2019 16:23:34",3,"optimize efficency of cache-historical-data jobs  ""See document [here|https://docs.google.com/document/d/1ThGk7NqM9Dy_Y1zvBaQZOs7k5ZoFIVq3ue89-TmllVg/edit#heading=h.4s07yeciuzvf].""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-6721","09/11/2019 17:09:49",2,"Provisioning Host Errors ""There were many more provisioning hosts errors than usual in the time frame from 9/10 at 9:00pm to 9/11 at 11:30am""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6724","09/11/2019 18:50:14",1,"fail more gracefully when task.Task.GetHistoricRuntime errors ""we're seeing a bunch of errors {{got unexpected task runtimes data points (0)}} in the logs for the {{collect-task-end-data}} job.     we should figure out why this errors, and potentially not mark the jobs as errored when it happens.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-6726","09/11/2019 20:02:20",2,"avoid running the scheduler so often ""in part we'll run fewer scheduler jobs when we reduce the number of distros, but in the mean time, we spend a lot of time sorting and resorting slower moving static queues, so I think that we should figure out some way to insert fewer jobs in queues with lots of pending tasks. ""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-6727","09/11/2019 20:03:18",2,"increase frequency of cache historical stats jobs  ""run them more often so that they're less expensive.     particularly after EVG-6719 and EVG-6718""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-9184","09/11/2019 20:35:53",2,"poplar helpers for setting up test environment ""it seems like there's a bunch of things that users end up needing to do to get a poplar test set up (credentials management, etc.) and we should see if we can get nearly all of that to happen automatically using environment variables and functions which do all of the setup. ""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-8839","09/12/2019 15:23:14",2,"add indexes to support reporting queries to queue/driver_mongo.go ""currently there are queries in the reporting interface that aren't supported by indexes and should be. We need to identify what those indexes are, and add them to the setupDB function in the driver so they get built. Users should be able to opt into indexing reporting queries in the DB options.     we should also work to build these indexes in production before deploying this change (or opting into/onti it. ""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-8883","09/12/2019 20:40:45",1,"Remove sleep from poplar benchmark case ""[here|https://github.com/evergreen-ci/poplar/blob/master/harness_case.go#L311]""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-9298","09/12/2019 22:06:52",2,"Special API endpoint for resmoke ""This end point should take in a task_id, task_name, time range (can be zero), and group_id. The task will first get the time range of the test (if tr is zero), get all logs for that test, get all logs with the given group_id (assumed to be in tags) but no test name.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-6738","09/13/2019 15:57:55",1,"User data provisioning should have deadline  ""Currently, a host that is provisioning depends on the provisioning host job to try SSHing until it succeeds or uses up all attempts, at which point it is decommissioned and terminated. However, user data independently provisions the host and the app server will not be able to know when provisioning is done unless the agent contacts it. If user data fails (i.e. the agent never contacts the app server), the host should be terminated. Ideally the idle host termination job should catch when the host has been provisioning for too long.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-6739","09/13/2019 17:41:13",0,"depends on with all three asterisks fails. ""when trying to run a patch that contains a task within a variant,  if the task depends on settings are as follows:   depends_on:     - name: """"*""""       variant:  """"*""""       status: """"*""""  the variant doesn't appear in the tasks to run.  even if I check that task in the UI, it will not show up.  this is the command I ran:  evergreen patch -p mms -v evg_foliage,unit_python,unit_js,unit_java,code_health -t all -u  (the task I changed locally is within evg_foliage, it's named stat_check_init. The only change I made is to make the depends on as mentioned above)    here's a link to the patch: https://evergreen.mongodb.com/version/5d7bc47ee3c33105bdfada04    (note, I unscheduled and aborted since this would not help me test the deps, so ignore task failures here)  ""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6742","09/13/2019 18:03:48",1,"Ensure required provisioning directories exist ""Current new provisioning assumes that all parent directories exist already.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-6743","09/13/2019 20:00:58",0,"Have a way of speeding up a long commit queue. ""When the commit queue gets long, it would be nice to be able to change the tasks that are part of the commit queue in order to speed up processing time and clear the queue. However, it appears that tasks for queue items are determined when the user submits the queue entry, so changing items in the queue isn't helpful.    Having some way to quickly drain the queue could be helpful if the queue gets really backed up. Assigning tasks when an entry reaches the head of the queue would provide a way to do that, but if there is another way of solving this that could work as well.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6745","09/16/2019 14:29:20",2,"Regression in overriding dependencies ""EVG-5960 may have introduced a regression in EVG-2723.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6747","09/16/2019 15:30:33",2,"Statics hosts show terminated when moving between distros ""When a static host is removed from a distro its status changes to 'terminated'.¬† There is no way to change it back to running from the UI.""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-8819","09/16/2019 16:26:15",1,"Failed: test on Windows [Grip (Logging) @ 955dc7ef]  ""h2. [test failed on Windows|https://evergreen.mongodb.com/task/grip_windows_test_955dc7efb4b47d32d77efd5793288dea9837f559_19_09_10_21_16_08/0]  Host: [ec2-34-239-153-41.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/i-067efdb8ef8a33581]  Project: [Grip (Logging)|https://evergreen.mongodb.com/waterfall/grip]  Commit: [diff|https://github.com/mongodb/grip/commit/955dc7efb4b47d32d77efd5793288dea9837f559]: MAKE-922: new annotating sender (#59) | 10 Sep 19 21:16 UTC  Evergreen Subscription: ; Evergreen Event:     ""","",0,0,0,0,1,0,0,0,0,0,0,0,1,0,0
"EVG-8912","09/16/2019 21:46:59",0,"RedirectErrorToOutput is should actually redirect stderr to stdout ""It currently does the opposite of what it's supposed to do.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-9277","09/17/2019 17:17:39",1,"Fix latency percentiles to use latency per operation instead of per iteration ""Currently the average latency calculated in cedar uses latency per operation, the latency percentile calculations uses latency per iteration. While neither calculation is """"incorrect"""" we should be consistent. For performance analysis, latency per operation seems to make the most sense.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-6754","09/18/2019 12:37:05",1,"reduce size of catchup historical stats job ""max 1 day, run every 2 hours ""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-6755","09/19/2019 17:22:44",2,"Restarting tasks does not appear to unblock dependencies ""https://evergreen.mongodb.com/task/gosre_rhel7_gotest_patch_ee12121052f4edd8375bdbe77cfae5c0923361e9_5d83a25be3c33118a00b1377_19_09_19_15_44_28 was restarted and passed, but https://evergreen.mongodb.com/task/gosre_rhel7_rpm_systemd_patch_ee12121052f4edd8375bdbe77cfae5c0923361e9_5d83a25be3c33118a00b1377_19_09_19_15_44_28 was not unblocked.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6756","09/20/2019 15:06:26",0,"allow DAG dispatcher without tunable scheduler ""currently you you have to change the scheduler (planner) and dispatcher as one, but there's no reason we can't use the new dispatching code with the legacy planning infrastructure, and it might be easier to gain confidence in the new dispatching code. ""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-6757","09/20/2019 15:07:48",1,"turning off the tunable scheduler should delete the cached plans ""probably enough to just do removeOne operations on the distros when we go from tunable to legacy planning. ""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-6759","09/20/2019 16:25:25",0,"Store strings instead of bytes in task document for generate.tasks ""Currently we store bytes in the task document for generate tasks. Instead of bytes, we should store strings so that someone reading the task document in the database can examine the JSON.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6760","09/20/2019 16:50:25",2,"Ensure a task outside of a group can depend on a single task within a task group ""Although it's possible to depend on an entire task group, we should ensure that it's possible to depend on task within a group, which would allow work to start when only part of work in a group has finished.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6761","09/20/2019 17:00:06",2,"Errors of the form ""<task group name> does not exist in project <project>"" in the logs ""These errors occur in the logs occasionally, and I'm concerned that this might signify some kind problem in task group processing.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-9218","09/20/2019 20:35:22",2,"tail function for buildlogger ""tail last 100 lines of a log""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-6764","09/20/2019 21:19:10",1,"""Failed to update cached display task"" errors in production ""This is currently our most frequent error in production.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6765","09/20/2019 21:39:45",2,"Documentation for tunable scheduler  ""Document the use of new configuration options for system and project maintainers.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-6766","09/23/2019 14:11:05",0,"Client directory needs non-root permisssions ""The agent monitor has to put the evergreen executable in this directory so it needs to be able to write to it, but currently it is created by the user data script.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-6768","09/23/2019 18:32:38",0,"Log Fleet response that causes an error ""When Fleet gives a response that doesn't contain an instance ID we should log the response to get more insight as to what went wrong""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6773","09/24/2019 18:46:16",2,"Aborting tasks blocks the commit queue ""If a commit queue version is unscheduled while it's running the version completion is not logged and the item is not removed from the queue.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6774","09/24/2019 19:16:55",1,"Perf plugin can't show expanded metrics ""Perf plugin is showing the following error. E.g. [this task|https://evergreen.mongodb.com/task/sys_perf_linux_1_node_replSet_big_update_397f0556a9e2d4fa3106d9490611b405d0e1ecf3_19_09_23_23_10_40]    ""","  console-breadcrumbs.js:33 TypeError: Cannot read property 'task_id' of null      at perf.js:698      at underscore-min.js:5      at underscore-min.js:5      at Function.m.each.m.forEach (underscore-min.js:5)      at Function.m.filter.m.select (underscore-min.js:5)      at Function.m.reject (underscore-min.js:5)      at perf.js:698      at perf.js:614      at angular.js:17051      at m.$digest (angular.js:18233) """"Possibly unhandled rejection: {}""""  ",0,0,1,0,0,0,0,0,0,0,0,1,0,0,0
"EVG-6778","09/25/2019 18:42:11",2,"The -d option for ""evergreen commit-queue set-module"" does not work ""The --help for """"commit-queue set-module"""" indicates that """"-d"""" or """"--description"""" flag should use the given commit message instead of the contents of the git commit, like the """"-m"""" flag in the """"commit-queue merge"""" command. It doesn't seem to work currently, however.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8999","09/25/2019 18:49:46",0,"Windows needs password for running service ""The CLI should provide a password flag/environment variable to allow users to run the service with a password.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-6782","09/26/2019 15:06:25",1,"Don't dereference a nil projectRef ""[This error message|https://github.com/evergreen-ci/evergreen/blob/433ccd02f80781848e2e31636a7784fab8fa5e33/service/timeline.go#L73] dereferences a project when it's nil.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6789","09/27/2019 15:39:16",2,"Hosts can leak in create host job ""One host started successfully in the host create job but for some reason, the app server never ran the setup host job on it and the host intent document doesn't exist (e.g. it may have been removed), preventing the app server from being able to stop the agent monitor (since the IP is taken from the host document and the setup host job must run in order to get the IP addres from EC2).  ¬†  It seems that if the create host job fails after the cloud manager spawns the host, the host is leaked and never terminated despite the fact that it may have actually started.    There also seems to be an issue with multiple createt host jobs running simultaneously and creating multiple hosts from a single intent host (e.g. {{evg-rhel62-large-20190927045902-7097260184595140677}}).""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6790","09/27/2019 16:21:57",1,"Host Jasper service should read splunk credentials from a file ""Jasper should instead read the token from a file.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-9161","09/27/2019 16:48:44",0,"Splunk token should be readable from a file ""The splunk token is visible from the output of {{ps}}, so users should have an option to read from a credentials file containing the token.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-6791","09/27/2019 18:40:39",1,"commit queue patches use an outdated project config ""Because we cache projectConfig we don't update it when a commit queue patch comes to the front of the queue. It's set when the patch is created and then never updated.  If a patch is enqueued and the project config is updated in an intervening commit the old config will be used when the patch is tested.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6792","09/27/2019 21:30:38",0,"Refactor scheduler-related database model ""Create discrete sub-documents¬†within the distro document to contain stage specific fields:   # finder_settings   # planner_settings   # dispatcher_settings   # host_allocator_settings (while not scheduler specific, this information is currently defined within the catch-all _planner_settings_¬†sub-document )""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6793","09/30/2019 15:11:28",1,"Host agent should no-op until the setup host job has run  ""The agent might start before the provisioning setup host job has run.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6794","09/30/2019 15:32:12",1,"Save/log termination reason when requesting to terminate a host ""To aid in troubleshooting""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6796","09/30/2019 17:06:17",0,"Validate instance type when creating/modifying spawn host ""Currently, the create and modify spawn host commands do not check whether the specified instance type is a valid one (even though the EC2 API should return an error in this case). It might be a good idea to have a list of allowed instance types for the EC2 provider and validate the instance type field when creating or modifying hosts.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6797","09/30/2019 17:37:46",1,"New expiry selector does not provide useful information ""It allows me to pick arbitrary dates but the validation rules prevent me from picking one that's too far in the future. The old style provided this guidance by saying """"Extend by Some Valid Value"""".    The date picker should not show me dates I cannot actually select or should indicate what the valid values are in some way.     !screenshot-1.png|thumbnail! ""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-6798","09/30/2019 18:15:13",2,"User data hosts should be terminated if the DNS name is not set ""If the setup host job does not run or it fails to get the DNS name for the host, the host should be terminated. Otherwise, the agent monitor (which will start sometime after the host is spawned) cannot be contacted at all and will repeatedly attempt to contact the server and there is no way for the app server to terminate it since it needs an IP to contact the Jasper service.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6800","09/30/2019 21:38:28",2,"Failures: test-cloud on Ubuntu 16.04 (Docker) [Evergreen @ 6696fb39] (TestDockerIntegrationSuite, TestImagePull, TestGCESuite, TestCostForDuration) "" h2. [test-cloud failed on Ubuntu 16.04 (Docker)|https://evergreen.mongodb.com/task/evergreen_ubuntu1604_docker_test_cloud_6696fb3919b8b10b31f254a97fdaec04dd174e53_19_09_30_16_04_41/0] Host: [|https://evergreen.mongodb.com/host/container-5089955620005571190] Project: [Evergreen|https://evergreen.mongodb.com/waterfall/evergreen] Commit: [diff|https://github.com/evergreen-ci/evergreen/commit/6696fb3919b8b10b31f254a97fdaec04dd174e53]: EVG-6793: fix test-model-host | 30 Sep 19 16:04 UTC Evergreen Subscription: ; Evergreen Event:  *TestDockerIntegrationSuite* - [Logs|https://evergreen.mongodb.com/test_log/5d923861562343280a074b3c] | [History|https://evergreen.mongodb.com/task_history/evergreen/evergreen_ubuntu1604_docker_test_cloud_6696fb3919b8b10b31f254a97fdaec04dd174e53_19_09_30_16_04_41#TestDockerIntegrationSuite=fail] *TestImagePull* - [Logs|https://evergreen.mongodb.com/test_log/5d923861562343280a074b3c] | [History|https://evergreen.mongodb.com/task_history/evergreen/evergreen_ubuntu1604_docker_test_cloud_6696fb3919b8b10b31f254a97fdaec04dd174e53_19_09_30_16_04_41#TestImagePull=fail] *TestGCESuite* - [Logs|https://evergreen.mongodb.com/test_log/5d923861562343280a074b3c] | [History|https://evergreen.mongodb.com/task_history/evergreen/evergreen_ubuntu1604_docker_test_cloud_6696fb3919b8b10b31f254a97fdaec04dd174e53_19_09_30_16_04_41#TestGCESuite=fail] *TestCostForDuration* - [Logs|https://evergreen.mongodb.com/test_log/5d923861562343280a074b3c] | [History|https://evergreen.mongodb.com/task_history/evergreen/evergreen_ubuntu1604_docker_test_cloud_6696fb3919b8b10b31f254a97fdaec04dd174e53_19_09_30_16_04_41#TestCostForDuration=fail]  ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-6802","10/01/2019 14:34:16",1,"Finalized: No is misleading in evergree commit-queue merge ""When running a patch build from the CLI the message {{Finalized: No}} means that I as the user have work to do and must go to the patch page to schedule tasks or manually update the tasks to run. When running {{evergreen commit-queue merge}} however it always states {{Finalized: No}} even if the commit is actually queued and will run without any further interaction required on my part.    It should probably just be omitted since it seems it doesn't have any meaning for a commit-queue merge?    Command line ran:        Output received:    ""","  evergreen commit-queue merge \            --project mongodb-mongo-master \            --message """"My message""""                 ID : 5d9354e67742ae2f1a72df98          Created : 2019-10-01 13:30:14.816 +0000 UTC      Description : SERVER-43471 scons.py should not swallow ImportError            Build : https://evergreen.mongodb.com/patch/5d9354e67742ae2f1a72df98           Status : created        Finalized : No  ",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6803","10/01/2019 14:57:07",2,"New patch creation behavior times out queries too aggressively ""https://mongodb.splunkcloud.com/en-US/app/search/search?q=search%20index%3Devergreen%20error%3D%22Error%20finalizing%20patch%3A%20error%20inserting%20tasks%20for%20build%20mongodb_mongo_master_enterprise_rhel_62_64_bit_inmem_patch_15c6c085126f5d459f30191ef736c10607bea3f6_5d930d46e3c3314ac8dbf79f_19_10_01_13_30_26%3A%20context%20deadline%20exceeded%22&display.page.search.mode=verbose&dispatch.sample_ratio=1&earliest=1569934980&latest=1569936783&sid=1569938172.2719352    https://mongodb.slack.com/archives/C7CFR3FUP/p1569918524016800""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-9042","10/01/2019 20:54:07",0,"Rename macos distro ""The distro name should be macos-1014 since macos-1014-i7 was deleted.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-6810","10/02/2019 21:14:36",1,"Avoid parsing project in loop for bulk task restart ""    ""","  github.com/evergreen-ci/evergreen/model.newDisplayTaskSelectorEvaluator(0xc42a400620, 0x1f, 0xc423d01b90, 0x24, 0xc46860d7a0, 0xc47af29d70, 0x1, 0x1, 0x0, 0x0, ...)   /data/mci/c65f3a68b379212d926f3e5322690c51/gopath/src/github.com/evergreen-ci/evergreen/model/project_selector.go:296 +0x4d9  github.com/evergreen-ci/evergreen/model.evaluateBuildVariants(0xc43ca16f50, 0xc468db4030, 0xc468db4120, 0xc443108000, 0x61, 0x8e, 0xc49b0dc000, 0x2a86, 0x2a86, 0xc4c316f680, ...)   /data/mci/c65f3a68b379212d926f3e5322690c51/gopath/src/github.com/evergreen-ci/evergreen/model/project_parser.go:651 +0x13c7  github.com/evergreen-ci/evergreen/model.translateProject(0xc4eb20cb00, 0x89528f, 0x896000, 0xc4eb20cb00, 0x0)   /data/mci/c65f3a68b379212d926f3e5322690c51/gopath/src/github.com/evergreen-ci/evergreen/model/project_parser.go:502 +0x81d  github.com/evergreen-ci/evergreen/model.projectFromYAML(0xc54448c000, 0x89528f, 0x896000, 0xc547494580, 0x449e51, 0xc544d2128f, 0xd71)   /data/mci/c65f3a68b379212d926f3e5322690c51/gopath/src/github.com/evergreen-ci/evergreen/model/project_parser.go:440 +0x87  github.com/evergreen-ci/evergreen/model.LoadProjectInto(0xc54448c000, 0x89528f, 0x896000, 0xc448e2d720, 0x12, 0xc4eb20c6e0, 0x0, 0x0)   /data/mci/c65f3a68b379212d926f3e5322690c51/gopath/src/github.com/evergreen-ci/evergreen/model/project_parser.go:416 +0x5a  github.com/evergreen-ci/evergreen/model.FindProjectFromVersionID(0xc4705ed4c0, 0x3b, 0x2707099, 0x5, 0xc46a7e54f8)   /data/mci/c65f3a68b379212d926f3e5322690c51/gopath/src/github.com/evergreen-ci/evergreen/model/project.go:974 +0x355  github.com/evergreen-ci/evergreen/model.doRestartFailedTasks(0xc5298ec000, 0x2bbc, 0x333f, 0xc468002a58, 0x8, 0xc43a1f3000, 0x4ee, 0x500, 0x0, 0x0, ...)   /data/mci/c65f3a68b379212d926f3e5322690c51/gopath/src/github.com/evergreen-ci/evergreen/model/task_lifecycle.go:914 +0x136  github.com/evergreen-ci/evergreen/model.RestartFailedTasks(0x0, 0x0, 0xed526b270, 0x3e502a0, 0x0, 0xed5275b30, 0x3e502a0, 0xc468002a58, 0x8, 0x10000, ...)   /data/mci/c65f3a68b379212d926f3e5322690c51/gopath/src/github.com/evergreen-ci/evergreen/model/task_lifecycle.go:907 +0x459  github.com/evergreen-ci/evergreen/units.(*restartTasksJob).Run(0xc450fcd040, 0x3de3da0, 0xc427949f40)   /data/mci/c65f3a68b379212d926f3e5322690c51/gopath/src/github.com/evergreen-ci/evergreen/units/tasks_restart.go:52 +0xb2  github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool.runJob(0x3de3da0, 0xc422e19280, 0x3deff60, 0xc450fcd040, 0x3ded9e0, 0xc4202ba048, 0xbf5d59884bae1b1e, 0x5e3cb968416c, 0x3e502a0, 0xc450ce0000)   /data/mci/c65f3a68b379212d926f3e5322690c51/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool/helpers.go:120 +0x3a4  github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool.executeJob(0x3de3da0, 0xc422e19280, 0x270d3a1, 0x9, 0x3deff60, 0xc450fcd040, 0x3ded9e0, 0xc4202ba048)   /data/mci/c65f3a68b379212d926f3e5322690c51/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool/helpers.go:28 +0xa6  github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool.(*abortablePool).runJob(0xc420060360, 0x3de3da0, 0xc422e19280, 0x3deff60, 0xc450fcd040)   /data/mci/c65f3a68b379212d926f3e5322690c51/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool/abortable.go:189 +0x115  github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool.(*abortablePool).worker(0xc420060360, 0x3de3da0, 0xc4207cac80)   /data/mci/c65f3a68b379212d926f3e5322690c51/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool/abortable.go:162 +0x2fd  created by github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool.(*abortablePool).Start   /data/mci/c65f3a68b379212d926f3e5322690c51/gopath/src/github.com/evergreen-ci/evergreen/vendor/github.com/mongodb/amboy/pool/abortable.go:111 +0x170  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6811","10/03/2019 18:10:37",1,"Change switch value to d.PlannerSettings.Version within PrioritizeTasks() ""    =>           ¬†    ¬†""","  switch d.PlannerSettings.TaskOrdering    switch d.PlannerSettings.Version  ",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6812","10/03/2019 19:30:32",2,"Frozen webpage for task with many tests ""The BIC team has some large tasks with many tests, and we find that the task webpage often gets stuck rendering for a long time, sometimes so long that Chrome suggests killing the page (screenshot included below). We noticed that this happens only when the task has failing tests, and that it actually renders quite quickly when the task is passing. Perhaps it's searching for the failing tests to display them at the top of the """"Tests"""" panel? We could of course split up the task but thought we should flag this as this might be indicative of an issue on your end.    Here's the link to one such task (the one showed in the screenshot): https://evergreen.mongodb.com/task/sqlproxy_full_matrix__os_full_matrix~osx_mongodb_version~latest_mongodb_topology~standalone_module_tests_patch_bb2a884fe1453485ce29f489cca281276862f4e3_5d962ead61837d0adbc54a27_19_10_03_17_23_58##%257B%2522compare%2522%253A%255B%257B%2522hash%2522%253A%2522bb2a884fe1453485ce29f489cca281276862f4e3%2522%257D%255D%257D""","",0,1,0,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-9309","10/03/2019 21:47:16",0,"Only attempt to shlex arguments for non-remote commands ""In the case of SSH commands, it's undesirable to shlex the bash commands before they get evaluated by bash on the remote host (e.g. if you have quotation marks in a string and want to preserve them, you can't shlex the string). This would effectively parse the string twice instead of once.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-6815","10/04/2019 14:50:16",1,"Host should be able to run setup script as PowerShell ""PowerShell has some requirements such as running with the extension ps1. The evergreen binary also has to check if the script being run is a regular shell script or a powershell script.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-6816","10/04/2019 14:53:02",1,"SSH commands should be able to run without parsing ""Some commands rely on preserving the command or shell script without. By default, the current SSH invocation ({{(*host.Host).RunSSHCommand()}}) automatically splits the string using shell lexing rules.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-6817","10/04/2019 14:59:26",2,"Add a delete button to a commit queue patch's patch page ""Currently if a user has a patch they want to remove from the queue they need to use the CLI. Add a way to remove a patch from the queue through the UI.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6819","10/04/2019 18:51:16",1,"App server cannot connect to Jasper service on Windows hosts ""This most likely has to do with the credentials file path not being valid (i.e. it has to be specified as a native path, not a cygwin path).    The scope of this ticket only fixes new SSH provisioning, not user data provisioning.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-6820","10/04/2019 20:10:50",1,"scheduler does not schedule all tasks of a single build at the same time ""I have a task (stat_check_init) that does the following:  1. goes over all build variants in its version  2. IF for that build variant there are tasks that are not task[""""activated""""], skip  3. IF not - create a new task within that variant that depends on all other tasks in that variant  I made sure that stat_check_init depends on all other tasks that have generate tasks in them  but I see now that sometimes, it does not create tasks for some of the variants  for example, variant thirdparty (f4c. Thirdparty Int......) usually has 3 tasks in it, unless stat_check_init creates the fourth:  did create: https://evergreen.mongodb.com/version/mms_6a6463038824dd3405491eb81a435436650ddd65  did not create: https://evergreen.mongodb.com/version/mms_83cfbc131a893b6c31cfff274e843b38e49ede24  I think this is because all tasks in f4c depend on another task.... and until that task is not done - they don't get to the activated status.    (I get the task above with the API call: """"/v2/builds/{}/tasks"""")    I clearly see that the cases in which stat_check_init doesn't create the fourth task are cases where it finishes its run BEFORE the other tasks get their schedule time (according to the event logs)""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6821","10/04/2019 20:18:57",2,"Turn on the DAG dispatcher and Tunable Planner in production (Take 1) ""Take 1 will be  limited to ""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6822","10/04/2019 20:23:36",2,"[Tunable dispatcher] Investigate why orphaned tasks get stuck in the queue after a common depends_on task has failed ""We need to understand why these tasks became orphaned in the queue: why was """"unattainable"""" : true not set after the _depends_on_ task (evergreen_lint_lint_units_patch_65408b97b6b0f0c56eaecc4b0d2507e3a2a21145_5d9793032fbabe207dc6697e_19_10_04_18_44_20)¬†failed?    ""","mci:SECONDARY> db.task_queues.find({""""distro"""": """"archlinux-test""""}).pretty()  {   """"_id"""" : ObjectId(""""567ac11eb6ae5e589d331ede""""),   """"distro"""" : """"archlinux-test"""",   """"queue"""" : [    {     """"_id"""" : """"evergreen_lint_lint_cloud_patch_65408b97b6b0f0c56eaecc4b0d2507e3a2a21145_5d9793032fbabe207dc6697e_19_10_04_18_44_20"""",     """"dispatched"""" : false,     """"display_name"""" : """"lint-cloud"""",     """"group_name"""" : """"lint-group"""",     """"group_max_hosts"""" : 1,     """"group_index"""" : 2,     """"version"""" : """"5d9793032fbabe207dc6697e"""",     """"build_variant"""" : """"lint"""",     """"order"""" : 246,     """"requester"""" : """"github_pull_request"""",     """"gitspec"""" : """"65408b97b6b0f0c56eaecc4b0d2507e3a2a21145"""",     """"project"""" : """"evergreen"""",     """"exp_dur"""" : NumberLong(""""55145451451""""),     """"priority"""" : NumberLong(0),     """"dependencies"""" : [      """"evergreen_lint_lint_units_patch_65408b97b6b0f0c56eaecc4b0d2507e3a2a21145_5d9793032fbabe207dc6697e_19_10_04_18_44_20""""     ]    },    {     """"_id"""" : """"evergreen_lint_lint_model_host_patch_65408b97b6b0f0c56eaecc4b0d2507e3a2a21145_5d9793032fbabe207dc6697e_19_10_04_18_44_20"""",     """"dispatched"""" : false,     """"display_name"""" : """"lint-model-host"""",     """"group_name"""" : """"lint-group"""",     """"group_max_hosts"""" : 1,     """"group_index"""" : 3,     """"version"""" : """"5d9793032fbabe207dc6697e"""",     """"build_variant"""" : """"lint"""",     """"order"""" : 246,     """"requester"""" : """"github_pull_request"""",     """"gitspec"""" : """"65408b97b6b0f0c56eaecc4b0d2507e3a2a21145"""",     """"project"""" : """"evergreen"""",     """"exp_dur"""" : NumberLong(""""38494749827""""),     """"priority"""" : NumberLong(0),     """"dependencies"""" : [      """"evergreen_lint_lint_units_patch_65408b97b6b0f0c56eaecc4b0d2507e3a2a21145_5d9793032fbabe207dc6697e_19_10_04_18_44_20""""     ]    },    {     """"_id"""" : """"evergreen_lint_lint_operations_patch_65408b97b6b0f0c56eaecc4b0d2507e3a2a21145_5d9793032fbabe207dc6697e_19_10_04_18_44_20"""",     """"dispatched"""" : false,     """"display_name"""" : """"lint-operations"""",     """"group_name"""" : """"lint-group"""",     """"group_max_hosts"""" : 1,     """"group_index"""" : 4,     """"version"""" : """"5d9793032fbabe207dc6697e"""",     """"build_variant"""" : """"lint"""",     """"order"""" : 246,     """"requester"""" : """"github_pull_request"""",     """"gitspec"""" : """"65408b97b6b0f0c56eaecc4b0d2507e3a2a21145"""",     """"project"""" : """"evergreen"""",     """"exp_dur"""" : NumberLong(""""60661711004""""),     """"priority"""" : NumberLong(0),     """"dependencies"""" : [      """"evergreen_lint_lint_units_patch_65408b97b6b0f0c56eaecc4b0d2507e3a2a21145_5d9793032fbabe207dc6697e_19_10_04_18_44_20""""     ]    },    {     """"_id"""" : """"evergreen_lint_lint_rest_data_patch_65408b97b6b0f0c56eaecc4b0d2507e3a2a21145_5d9793032fbabe207dc6697e_19_10_04_18_44_20"""",     """"dispatched"""" : false,     """"display_name"""" : """"lint-rest-data"""",     """"group_name"""" : """"lint-group"""",     """"group_max_hosts"""" : 1,     """"group_index"""" : 5,     """"version"""" : """"5d9793032fbabe207dc6697e"""",     """"build_variant"""" : """"lint"""",     """"order"""" : 246,     """"requester"""" : """"github_pull_request"""",     """"gitspec"""" : """"65408b97b6b0f0c56eaecc4b0d2507e3a2a21145"""",     """"project"""" : """"evergreen"""",     """"exp_dur"""" : NumberLong(""""60717688286""""),     """"priority"""" : NumberLong(0),     """"dependencies"""" : [      """"evergreen_lint_lint_units_patch_65408b97b6b0f0c56eaecc4b0d2507e3a2a21145_5d9793032fbabe207dc6697e_19_10_04_18_44_20""""     ]    },    {     """"_id"""" : """"evergreen_lint_lint_rest_model_patch_65408b97b6b0f0c56eaecc4b0d2507e3a2a21145_5d9793032fbabe207dc6697e_19_10_04_18_44_20"""",     """"dispatched"""" : false,     """"display_name"""" : """"lint-rest-model"""",     """"group_name"""" : """"lint-group"""",     """"group_max_hosts"""" : 1,     """"group_index"""" : 6,     """"version"""" : """"5d9793032fbabe207dc6697e"""",     """"build_variant"""" : """"lint"""",     """"order"""" : 246,     """"requester"""" : """"github_pull_request"""",     """"gitspec"""" : """"65408b97b6b0f0c56eaecc4b0d2507e3a2a21145"""",     """"project"""" : """"evergreen"""",     """"exp_dur"""" : NumberLong(""""38932380444""""),     """"priority"""" : NumberLong(0),     """"dependencies"""" : [      """"evergreen_lint_lint_units_patch_65408b97b6b0f0c56eaecc4b0d2507e3a2a21145_5d9793032fbabe207dc6697e_19_10_04_18_44_20""""     ]    },    {     """"_id"""" : """"evergreen_lint_lint_rest_route_patch_65408b97b6b0f0c56eaecc4b0d2507e3a2a21145_5d9793032fbabe207dc6697e_19_10_04_18_44_20"""",     """"dispatched"""" : false,     """"display_name"""" : """"lint-rest-route"""",     """"group_name"""" : """"lint-group"""",     """"group_max_hosts"""" : 1,     """"group_index"""" : 7,     """"version"""" : """"5d9793032fbabe207dc6697e"""",     """"build_variant"""" : """"lint"""",     """"order"""" : 246,     """"requester"""" : """"github_pull_request"""",     """"gitspec"""" : """"65408b97b6b0f0c56eaecc4b0d2507e3a2a21145"""",     """"project"""" : """"evergreen"""",     """"exp_dur"""" : NumberLong(""""94021631999""""),     """"priority"""" : NumberLong(0),     """"dependencies"""" : [      """"evergreen_lint_lint_units_patch_65408b97b6b0f0c56eaecc4b0d2507e3a2a21145_5d9793032fbabe207dc6697e_19_10_04_18_44_20""""     ]    }   ],   """"generated_at"""" : ISODate(""""2019-10-04T19:14:01Z""""),   """"distro_queue_info"""" : {    """"length"""" : 6,    """"expected_duration"""" : NumberLong(""""347973613011""""),    """"max_duration_threshold"""" : NumberLong(""""1800000000000""""),    """"created_at"""" : ISODate(""""2019-10-04T19:14:00.982Z""""),    """"count_over_threshold"""" : 0,    """"task_group_infos"""" : [     {      """"name"""" : """"lint-group_lint_evergreen_5d9793032fbabe207dc6697e"""",      """"count"""" : 6,      """"max_hosts"""" : 1,      """"expected_duration"""" : NumberLong(""""347973613011""""),      """"count_over_threshold"""" : 0,      """"duration_over_threshold"""" : NumberLong(0)     }    ],    """"alias_queue"""" : false   }  }  mci:SECONDARY> db.tasks.find({""""build_id"""": """"evergreen_lint_patch_65408b97b6b0f0c56eaecc4b0d2507e3a2a21145_5d9793032fbabe207dc6697e_19_10_04_18_44_20""""},{""""status"""": 1, """"depends_on"""": 1}).pretty()  {   """"_id"""" : """"evergreen_lint_generate_lint_patch_65408b97b6b0f0c56eaecc4b0d2507e3a2a21145_5d9793032fbabe207dc6697e_19_10_04_18_44_20"""",   """"depends_on"""" : [ ],   """"status"""" : """"success""""  }  {   """"_id"""" : """"evergreen_lint_lint_cloud_patch_65408b97b6b0f0c56eaecc4b0d2507e3a2a21145_5d9793032fbabe207dc6697e_19_10_04_18_44_20"""",   """"depends_on"""" : [    {     """"_id"""" : """"evergreen_lint_lint_units_patch_65408b97b6b0f0c56eaecc4b0d2507e3a2a21145_5d9793032fbabe207dc6697e_19_10_04_18_44_20"""",     """"status"""" : """"success"""",     """"unattainable"""" : false    }   ],   """"status"""" : """"undispatched""""  }  {   """"_id"""" : """"evergreen_lint_lint_model_host_patch_65408b97b6b0f0c56eaecc4b0d2507e3a2a21145_5d9793032fbabe207dc6697e_19_10_04_18_44_20"""",   """"depends_on"""" : [    {     """"_id"""" : """"evergreen_lint_lint_units_patch_65408b97b6b0f0c56eaecc4b0d2507e3a2a21145_5d9793032fbabe207dc6697e_19_10_04_18_44_20"""",     """"status"""" : """"success"""",     """"unattainable"""" : false    }   ],   """"status"""" : """"undispatched""""  }  {   """"_id"""" : """"evergreen_lint_lint_operations_patch_65408b97b6b0f0c56eaecc4b0d2507e3a2a21145_5d9793032fbabe207dc6697e_19_10_04_18_44_20"""",   """"depends_on"""" : [    {     """"_id"""" : """"evergreen_lint_lint_units_patch_65408b97b6b0f0c56eaecc4b0d2507e3a2a21145_5d9793032fbabe207dc6697e_19_10_04_18_44_20"""",     """"status"""" : """"success"""",     """"unattainable"""" : false    }   ],   """"status"""" : """"undispatched""""  }  {   """"_id"""" : """"evergreen_lint_lint_rest_data_patch_65408b97b6b0f0c56eaecc4b0d2507e3a2a21145_5d9793032fbabe207dc6697e_19_10_04_18_44_20"""",   """"depends_on"""" : [    {     """"_id"""" : """"evergreen_lint_lint_units_patch_65408b97b6b0f0c56eaecc4b0d2507e3a2a21145_5d9793032fbabe207dc6697e_19_10_04_18_44_20"""",     """"status"""" : """"success"""",     """"unattainable"""" : false    }   ],   """"status"""" : """"undispatched""""  }  {   """"_id"""" : """"evergreen_lint_lint_rest_model_patch_65408b97b6b0f0c56eaecc4b0d2507e3a2a21145_5d9793032fbabe207dc6697e_19_10_04_18_44_20"""",   """"depends_on"""" : [    {     """"_id"""" : """"evergreen_lint_lint_units_patch_65408b97b6b0f0c56eaecc4b0d2507e3a2a21145_5d9793032fbabe207dc6697e_19_10_04_18_44_20"""",     """"status"""" : """"success"""",     """"unattainable"""" : false    }   ],   """"status"""" : """"undispatched""""  }  {   """"_id"""" : """"evergreen_lint_lint_rest_route_patch_65408b97b6b0f0c56eaecc4b0d2507e3a2a21145_5d9793032fbabe207dc6697e_19_10_04_18_44_20"""",   """"depends_on"""" : [    {     """"_id"""" : """"evergreen_lint_lint_units_patch_65408b97b6b0f0c56eaecc4b0d2507e3a2a21145_5d9793032fbabe207dc6697e_19_10_04_18_44_20"""",     """"status"""" : """"success"""",     """"unattainable"""" : false    }   ],   """"status"""" : """"undispatched""""  }  {   """"_id"""" : """"evergreen_lint_lint_units_patch_65408b97b6b0f0c56eaecc4b0d2507e3a2a21145_5d9793032fbabe207dc6697e_19_10_04_18_44_20"""",   """"depends_on"""" : [ ],   """"status"""" : """"failed""""  }  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6823","10/04/2019 21:01:37",1,"Allow patch tasks to be specified in the same way as variants ""The {{variants}} flag allows the user to submit a comma-separated list but {{task}} does not.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-6824","10/04/2019 21:25:43",0,"Host allocator should delete credentials for uninitialized stale hosts ""{{host.RemoveStaleInitializing()}} removes all intent host documents that are stuck in initializing or building, meaning a cloud host was never successfully spawned. However, this can leave dangling host credentials in the database, which should logically also be deleted with the removed documents.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-6825","10/07/2019 15:28:28",2,"Tasks specified in depends_on not being respected ""I ran the following command manually    """"evergreen patch -p ops-manager-kubernetes -t all -v all""""    I then removed all of the tasks I didn't want to run. The resulting run didn't respect the order based on the """"depends_on"""" field. The tasks still appeared in the depends on section, but they weren't run beforehand.    I experienced the same behaviour on multiple attempts.    Sample:¬†[https://evergreen.mongodb.com/version/5d9b46ed2fbabe301b7435f7]""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6826","10/07/2019 16:39:26",1,"Add Alert for Stuck Commit Queues ""Add an alert when a queue gets stuck.    As a possible implementation, since we log when an item is enqueued, if when adding an item to a queue the item at the head of the queue has been on the queue for a """"long time"""" we know the queue is stuck and can trigger a Splunk alert.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6827","10/07/2019 16:52:21",2,"Mark notifications as processed only once they've been dispatched ""If the event-metajob is interrupted after an event is marked processed the NewEventNotificationJob will not make it to the database and the event will not be processed by the next event-metajob run.    Assess the feasibility of moving MarkProcessed to after the event is dispatched.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6828","10/07/2019 17:13:19",0,"Rate Limit Host Creation ""Host creation is supposed only create 16 hosts at a time, but doesn't because of a bug where the count is not incremented.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6829","10/07/2019 18:48:57",1,"Add dependencies check prior to dispatching a task via the Revised Dispatcher ""In an ideal world we should never have to check dependencies prior to dispatching a task via the _Revised Dispatcher_.     This guard maintains the desired dependency relationships (and associated task dispatch ordering) in case the independent _task_finder_ stage adds tasks with unsatisfied dependencies to the _task_queue_.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6832","10/08/2019 16:36:09",1,"Build/task outcome triggers don't work ""They have a mismatch of the event type and the object in the selectors""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8579","10/08/2019 19:50:50",1,"move dial cedar convenience function to aviation  ""[This|https://github.com/evergreen-ci/poplar/blob/master/setup.go#L128-L166] should be in aviation so it can be used by both poplar and timber (and any other future clients of cedar).""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-6834","10/08/2019 22:16:25",2,"Missing RHEL8 artifacts ""When I spawn a host from [this task|https://evergreen.mongodb.com/version/5d9cc03de3c331217608fb52], I do not seem to get artifacts provisioned into {{/data/mci}}. Instead, I get a copy of the source code called {{source-patch-1305_mongodb-mongo-master}}.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6840","10/10/2019 15:33:13",0,"Include provisioning type in idle host statistics ""This would be useful for tracking host utilization by provisioning type (legacy vs new).""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-6841","10/10/2019 16:31:00",2,"Create a list volumes command ""There should be a command available through the CLI (perhaps evergreen host list-volumes) that lists a user's volumes. This should include ID, size, type, and a host ID if the volume is attached to a host.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6842","10/10/2019 20:34:59",2,"Collect stats on hosts that never finish provisioning ""Hosts that are provisioned with user data will never indicate that they are running until the agent starts. If they fail to start for any reason, this should be tracked in Splunk. Currently, the idle host job will only run on hosts that managed to start the agent. More useful would be the ability to track hosts that were started in EC2 but never managed to start an agent.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-6843","10/10/2019 21:16:57",0,"Collect unsent notification stats for the CLI commit queue ""Add the subscriber type to the switch statement.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6844","10/11/2019 14:40:48",2,"Fix questionable lookups of builds by revision ""https://github.com/evergreen-ci/evergreen/blob/06d4d0ebac0602152942984337de11edb3aeff00/service/version.go#L98 is definitely wrong, and there may be others""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6847","10/11/2019 19:15:22",1,"Remove string buildvariants for patches ""Buildvariants should now be passed in the patch submission request (i.e. {{evergreen patch}}) as a string slice instead of string of comma-separated buildvariant names. However, users must first update their evergreen binaries, so they should be given a grace period to update before switching to the new JSON payload.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-6850","10/14/2019 14:30:24",0,"commit-queue support git commit specification syntax ""It would be really nice if commit-queue could take a parameter that allowed me to specify which commit to submit, a la the """"SPECIFYING REVISIONS"""" section in gitrevisions(7) man page.  Then I would be able to do something like:    And this would work even if that particular commit wasn't at the HEAD of my local tree and there were other differences in my tree compared to upstream.""","  evergreen commit-queue --merge f447efbcb28186fb22d5b2e73d434c41ee0ea3c3  ",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6851","10/14/2019 15:12:53",1,"Generate and Validate Device name ""Currently has to be specified by the user via commandline. Per Thomas' comment:    With this new struct, it should be easier to validate the device name specified by the user when attaching volumes using the Volumes field of the struct and the guidelines here:¬†[https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/device_naming.html]¬†(we should loop through the possibilities and assign the first device name that isn't taken!).""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6852","10/14/2019 15:58:01",1,"Set GOCACHE to task directory ""We see static hosts running out of disk space and in most cases go cache folder is the biggest offender.  We talked to a few project owners about setting GOCACHE in their project to task's temp dir and they did it but it looks like there are more projects and it feels we're playing whack-a-mole here.    Brian and Sam said we can do this on the agent level.  Let's please set this to task's temp dir.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-9261","10/14/2019 21:31:28",2,"fix pail ""deleteOnSync"" semantics  ""should be """"delete local if remote doesn't exist"""" rather than """"delete all after operation"""" ""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-6858","10/15/2019 15:03:14",2,"Provide a way to download a subset of the logs ""Often on test timeouts the logs have hundreds of thousands of lines, but only the first few thousand or first hundred thousand are helpful. Sometimes the logs are even too long to download at all. It would be great if there were a way to download the raw logs for the first """"n"""" lines, and/or a way for the lobster view to only download the first """"n"""" lines.     CC [~jesse] and [~jason.chan]""","",1,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-6859","10/15/2019 16:01:22",1,"Agent deploys jobs should not wait until MaxLCT elapses to attempt redeploy ""Currently, if a deploy fails on an SSH command, it will not set the """"needs new agent"""" flag, which is used to determine if the agent still needs to be deployed. Therefore, if SSH fails (the most likely thing to fail in the job), it will have to wait until MaxLCT elapses (5 mins) before attempting to deploy again. This wastes host compute minutes and increases the likelihood that the host will be idle terminated.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-6863","10/16/2019 18:39:29",1,"Commit Queue doesn't allow submitting as someone else ""Currently the commit queue doesn't allow submitting a commit with someone else as the author. This breaks the worfklow we have for accepting [external pull requests|https://wiki.corp.mongodb.com/display/KERNEL/How+We+Handle+Pull+Requests] as external users can no longer be the author of any MongoDB commits. We need a way to allow specifying a different author.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6872","10/18/2019 14:31:13",1,"Cannot update host expiration date ""I would like to update my spawn host's expiration date. However, when I select a new date, I am told that the expiration date was updated to the existing expiration date (tomorrow).¬† !Screen Shot 2019-10-18 at 9.26.22 AM.png|width=100%!""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-6879","10/21/2019 16:21:50",2,"Update testresults schema to support efficient hourly and daily test stats generation  ""As an evergreen engineer,  I want testresults to contain extra fields,  So that the hourly / daily test stats aggregations can use $merge as efficiently as possible.    ----  AC:  * testresults will be amended to add the following extra fields:   ** branch (the project)   ** build_variant   ** distro   ** r (requester)   **  display_name, the task display name   ** execution_display_name, the execution task display name (can be null or missing).   ** create_time, the task create time.    ----""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6884","10/21/2019 21:26:59",1,"Fix permissions on evergreen host setup ""In the setup script, {{/data}} is owned by root and all subdirectories obey its umask. Root's umask prevents setting options to give write permission to user subdirectories in other. The setup command should either not be run or should be run as the distro user.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-8675","10/21/2019 22:30:14",1,"support streaming logs in evergreen.py ""As a DAG engineer,  I want to be able to read logs from evergreen via a stream,  so that I can iterator over long log files.  ""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-6885","10/21/2019 22:36:39",2,"Apparent multiple execution of generate.tasks jobs ""Consider this task https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_rhel_62_64_bit_display_sharding_ese_patch_b3b494a72f0e19d7556bee627da7ae9b79e26a03_5dadc8ef30661551b09da831_19_10_21_15_04_43. (There are many similar examples in that version.) The generator clearly finished, since it generated tasks. However, there is an error that returns early, which suggests there must have been multiple executions.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6886","10/21/2019 22:52:32",1,"Put commit-queue diff on its own line ""    The first line of the output from git should print on its own line.""","  commit-queue merge --project mongodb-mongo-master  [evergreen] 2019/10/14 18:30:49 [p=info]: SConstruct | 6 +++  jstests/SConscript | 16 ++++++--  site_scons/libdeps.py | 18 ++++++---  site_scons/site_tools/auto_install_binaries.py | 54 +++++++++++++++++++-------  ",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6887","10/22/2019 11:46:44",1,"Refactor BlockTaskGroupTasks in model/task_queue.go ""Refactor the updating of blocked dependencies as a batch to avoid doing many updates in a for-loop.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7049","10/22/2019 16:02:55",1,"Windows spawnhost administrator bash misconfiguration ""When I ssh into a fresh Windows spawnhost bash emits an error    It's just one big PATH= statement.    $cat /home/Administrator/.bash_profile  PATH=/bin:/cygdrive/c/Python27:/cygdrive/c/Python27/Scripts:/cygdrive/c/Python38/Scripts:/cygdrive/c/Python38:/cygdrive/c/Perl64/site/bin:/cygdrive/c/Windows/system32:/cygdrive/c/Windows:/cygdrive/c/Windows/System32/Wbem:/cygdrive/c/Windows/System32/WindowsPowerShell/v1.0:/cygdrive/c/Program Files/Amazon/cfn-bootstrap:/cygdrive/c/ProgramData/chocolatey/bin:/cygdrive/c/Program Files/dotnet:/cygdrive/c/Program Files/Git/cmd:/cygdrive/c/Python27:/cygdrive/c/Python27/Scripts:/cygdrive/c/openssl/bin:/cygdrive/c/sasl/bin:/cygdrive/c/snmp/bin:/cygdrive/c/go/bin:/cygdrive/c/Program Files/Git/bin:/cygdrive/c/Program Files/nodejs:/cygdrive/c/Perl64/bin:/cygdrive/c/curl/dlls:/cygdrive/c/Program Files/nodejs:/cygdrive/c/Users/Administrator/AppData/Local/Microsoft/WindowsApps:/cygdrive/c/Users/Administrator/AppData/Roaming/npm:/cygdrive/c/go/bin:/cygdrive/c/Windows/Sysnative:/home/Administrator/cli_bin    The PATH=""""..."""" needs quotes to make it all one word.  Currently there's an error printed on login and I get an incomplete PATH.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8965","10/22/2019 19:12:52",0,"Remove unused lint package ""github.com/surullabs/lint is unused.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-9102","10/22/2019 19:14:58",1,"Rename local manager ""The name is not particularly illuminating to its purpose as a thread-safe manager.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-8435","10/23/2019 16:58:20",1,"Fix recursive directory walk in pail ""Symlinks not checked""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-6889","10/23/2019 22:14:53",2,"Add notifications for silent API routes ""Some of the new API routes (modify host, etc) create a job and return OK to the user because it takes too long to complete in the request. I'd like to add a way for users to indicate notification (maybe just notification=true or something) so they can get a slack message or related with any updates.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-9174","10/23/2019 22:33:53",2,"sort out Flush api on events.Recorder interface ""the implementations of flush are a bit weird""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-6890","10/24/2019 14:43:54",2,"It is possible to enable the commit queue with no variants and tasks ""We should not create commit queue versions if there are no variants and tasks. (Validation is probably not sufficient, because a person could add variant and task regexes, but those regexes might not pick out existing variants and tasks.) If a commit queue version is created with no variants and tasks, it will block the queue, since it will never be dequeued.""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-6891","10/24/2019 15:43:32",2,"Logs that processes are failed to be cleaned up, but none that processes are being killed ""[~robert.guo] noted that he saw a process with pid 23571 leak between https://evergreen.mongodb.com/task/jstestfuzz_self_tests_mutational_fuzzer_master_jstestfuzz_replication_session_concurrent_patch_2a11d50c783f555d524909936efba0ceed77dcdc_5db196d0c9ec44772070ce14_19_10_24_12_19_29 and https://evergreen.mongodb.com/task/jstestfuzz_self_tests_mutational_fuzzer_v4.2_jstestfuzz_replication_continuous_stepdown_flowCtlLow_concurrent_patch_2a11d50c783f555d524909936efba0ceed77dcdc_5db190d45623437f20d415b4_19_10_24_11_53_58. When I look at the agent logs, I see https://github.com/evergreen-ci/evergreen/blob/7e3b481d4caaa0ac5ca10bcc73de1f7456443848/util/subtree_linux.go#L97 but not https://github.com/evergreen-ci/evergreen/blob/7e3b481d4caaa0ac5ca10bcc73de1f7456443848/util/subtree_linux.go#L67. Going back in time, I don't see """"Killed process"""". I went back to July and still don't see it, so I'm not sure what's going on.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6892","10/24/2019 15:50:50",2,"Staging hosts not marked as externally terminated ""The hosts (i-0100d98816ddbc085 and¬†i-06167e9cabc05bd0b) were reclaimed by AWS but for some reason the host was marked as needing a new agent monitor. This started the agent monitor deploy job, which updates the LCT and prevented the external termination job from running.    ¬†    The host alerting job indicated that the host was running a task for a long time but the running task was cleared before the host could be checked for external termination.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6893","10/24/2019 18:37:07",2,"Add feature to bump a commit queue merge request to the top of the queue ""With the commit queue, the build can be broken for longer. Sometimes the Build Baron wishes to revert a commit in order to fix the build, but that commit must wait for the rest of the queue to be processed.    This feature will be a flag, which, at commit queue item submission time, will put this item at the top of the queue. Explicitly out of scope is reordering the queue in any other way or putting the new item behind the other higher-priority items.    We will not in this ticket create an authorization mechanism for this feature. Instead, we should log each time this happens so that we can audit abuses of this feature if they occur.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6895","10/24/2019 19:15:23",2,"evergreen host modify should update expiration on UI ""If you extend the expiration via the CLI ({{evergreen host modify --host <host> --extend <hours>}}, the spawn host modify job does not seem to actually update the expiration time in the database so the UI expiration shows the wrong expiration time.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6898","10/25/2019 14:18:26",2,"Use only one update button for spawn hosts ""The spawn host page currently has a separate """"Update"""" button for every type of update (RDP password, Host Expiration, etc). It would be much more intuitive/less cluttered if users could make all the updates they wanted and then have a single Update button.""","",0,1,0,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-6901","10/25/2019 18:00:46",2,"Embedded task ordering issue ""Looking at this patch build: https://evergreen.mongodb.com/build/mongodb_mongo_master_embedded_sdk_android_x86_64_patch_4403da71126ea32e37f059ce848898dfab22f720_5db259d632f4173e9269dbfe_19_10_25_02_12_34    The first execution of this install_dev task ran before its required prerequisite, the build_cdriver phase:    - https://evergreen.mongodb.com/task/mongodb_mongo_master_embedded_sdk_android_x86_64_embedded_sdk_install_dev_patch_4403da71126ea32e37f059ce848898dfab22f720_5db259d632f4173e9269dbfe_19_10_25_02_12_34/0##%257B%2522compare%2522%253A%255B%257B%2522hash%2522%253A%25224403da71126ea32e37f059ce848898dfab22f720%2522%257D%255D%257D    - https://evergreen.mongodb.com/task/mongodb_mongo_master_embedded_sdk_android_x86_64_embedded_sdk_build_cdriver_patch_4403da71126ea32e37f059ce848898dfab22f720_5db259d632f4173e9269dbfe_19_10_25_02_12_34##%257B%2522compare%2522%253A%255B%257B%2522hash%2522%253A%25224403da71126ea32e37f059ce848898dfab22f720%2522%257D%255D%257D    Though they did run on the same machine. The restart of the install_dev task ran on a different machine:    - https://evergreen.mongodb.com/task/mongodb_mongo_master_embedded_sdk_android_x86_64_embedded_sdk_install_dev_patch_4403da71126ea32e37f059ce848898dfab22f720_5db259d632f4173e9269dbfe_19_10_25_02_12_34##%257B%2522compare%2522%253A%255B%257B%2522hash%2522%253A%25224403da71126ea32e37f059ce848898dfab22f720%2522%257D%255D%257D    So it seems there are some lingering dependency ordering issues. Perhaps we need to (or now can) specify dependencies among the various embedded tasks now that other evergreen issues are fixed?    While the embedded builders are probably going to be torn down, the ability to sequence dependent tasks that will run on the same machine is important to future projects to improve server build performance.    CC [~brian.samek] and [~billy.donahue]""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6902","10/25/2019 18:41:13",0,"Remove unused Host.DispatchTime ""This field is never set anywhere so it can be removed.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-6903","10/25/2019 19:22:53",0,"Remove cloud manager GetSSHOptions ""This method has been replaced by {{(*host.Host).GetSSHOptions()}}.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-6904","10/25/2019 19:23:48",2,"Failures: test-cloud on Ubuntu 16.04 [Evergreen @ a416596a] (TestDockerIntegrationSuite, TestImagePull) "" h2. [test-cloud failed on Ubuntu 16.04|https://evergreen.mongodb.com/task/evergreen_ubuntu1604_test_cloud_a416596a6789e622f901bd35894223faf0dedbc2_19_10_25_17_25_38/0] Host: [ec2-54-160-68-104.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/i-0c4258cf6b188d2ac] Project: [Evergreen|https://evergreen.mongodb.com/waterfall/evergreen] Commit: [diff|https://github.com/evergreen-ci/evergreen/commit/a416596a6789e622f901bd35894223faf0dedbc2]: EVG-6270 persist parser project by introducing a new collection (#2804) | 25 Oct 19 17:25 UTC Evergreen Subscription: ; Evergreen Event:  *TestDockerIntegrationSuite* - [Logs|https://evergreen.mongodb.com/test_log/5db332e13627e01b1ce0d64b] | [History|https://evergreen.mongodb.com/task_history/evergreen/evergreen_ubuntu1604_test_cloud_a416596a6789e622f901bd35894223faf0dedbc2_19_10_25_17_25_38#TestDockerIntegrationSuite=fail] *TestImagePull* - [Logs|https://evergreen.mongodb.com/test_log/5db332e13627e01b1ce0d64b] | [History|https://evergreen.mongodb.com/task_history/evergreen/evergreen_ubuntu1604_test_cloud_a416596a6789e622f901bd35894223faf0dedbc2_19_10_25_17_25_38#TestImagePull=fail]  [Task Logs | https://evergreen.mongodb.com/task_log_raw/evergreen_ubuntu1604_test_cloud_a416596a6789e622f901bd35894223faf0dedbc2_19_10_25_17_25_38/0?type=T ] ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-6906","10/28/2019 17:41:25",1,"host.list broken for staging ""The host list command seems to be hardwired for prod""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6909","10/28/2019 20:57:47",2,"Sorting tests by sequence doesn't do anything ""No visible errors""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-8970","10/29/2019 13:41:03",1,"OpScope message should be able to register handlers for all contexts ""Currently, the OP_SCOPE implementation requires that a handler be registered that matches the exact collection/db name currently being used. However, for some operations (e.g. {{getFreeMonitoringStatus()}}, {{buildInfo()}}), it would make more sense for commands to be able to register handlers for all contexts.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-8869","10/29/2019 15:48:40",1,"Handle service panics ""The mongorpc service starts goroutines to handle connection requests but does not have panic recovery.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-8949","10/29/2019 17:02:01",0,"Fix op types ""They're of type int instead of OpType.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-6912","10/30/2019 13:42:35",1,"Fix test-cloud ""The fleet tests for {{GetInstanceStatuses}} fail due to caching host data and seemingly some fields not being properly populated in the mock AWS client.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-9000","10/30/2019 14:11:05",2,"better avoid reflection in performance event processing ""I did this for the events.Performance type, but we should do it for HDR    also add a """"DocumentExport"""" interface for producing a bsonx.Document to avoid needing to over-marshal documents, or use reflection, and then make the collectors a bit smarter.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-8860","10/30/2019 15:51:02",0,"Allow address to be retrieved from service ""The service has to reply to {{whatmyuri}} as part of mongo wire, which is easier if the address can be read.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-9314","10/30/2019 17:17:21",0,"Fix updating process info options ""Since the options were refactored, the options stored in process implementations were changed so the options are no longer stored as pointers, causing issues with returning the wrong process information.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-6915","10/30/2019 17:47:03",2,"Hosts spawned by tasks never marked as running ""[This task|https://evergreen.mongodb.com/task/mms_on_prem_4.0_e2e_opsman_os_sanity_E2E_OpsManager_SanityTests_RemoteAutomation_Debian92_patch_ccfe0cff5242e683d2eb2423266526e78320dee4_5db970a432f4170a00c7525f_19_10_30_11_14_46] fails and the host (i-0f5c1d925f18ee459) was never reachable by Jasper when polling for user data done. The host should do all the steps to start up, minus starting an agent (and also maybe running the setup script).    The user data done job errors trying to contact the Jasper service, suggesting that it may not have provisioned successfully.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-8967","10/30/2019 21:47:27",1,"placeholder for productionizing poplar metrics collector service ""mostly performance and robustness checks:     - event metrics export should be more safe for missing fields.  - potentially avoid copying things in the conversion from protobuf to birch.Document  - error check timestamp conversions  - testing the service (integration or otherwise.)  - summing cumulative stats (may break out into its own ticket)   - making a buffering ftdc collector""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-9103","10/31/2019 13:24:16",0,"Command reply needs constructor ""It's currently impossible to construct a commandReplyMessage struct since it's unexported.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-8862","10/31/2019 14:36:13",0,"Remove slices of pointers from messages ""Slices of pointers are currently used in two places ([here|https://github.com/tychoish/mongorpc/blob/92e26d3d5f8e011ad5a39923a04d4dcf2040fff1/mongowire/message.go#L24] and [here|https://github.com/tychoish/mongorpc/blob/92e26d3d5f8e011ad5a39923a04d4dcf2040fff1/mongowire/message.go#L69].""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-8885","10/31/2019 14:39:38",0,"Add lint to pull request tasks ""Lint is not currently tested in PRs.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-8726","10/31/2019 15:30:14",3,"Create backstop change point bootstrapper in Cedar ""As a DAG engineer,  I'd like to have a backstop route in Cedar to reprovision its entire database with change points.  Such that, we can have an initial dataset to use, can use the functionality in other areas, and can reprovision the database if needed.    AC:  * Expose a route """"/perf/signal_processing/recalculate"""" that raises a change point reprovisioning event and then returns '200/OK'  * Add change point reprovisioning event handler to handle the raised event:    - -Block any further events in the analysis/change_points channel (however that is implemented in Cedar)-  - -Cancel any jobs related to analysis/change_points that may already be running (they should exit gracefully on their own)-  - Sequentially load time series metric by metric; use change point detector interface to generate change points for them; once new change points are acquired, evict the old ones for the metric and persist the new ones --> continue to next metric in new transaction  - Log progress and milestones appropriately  - Close out the job gracefully regardless of outcome --> log success or metric by metric exceptions as need be and finish successfully  ""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8589","10/31/2019 15:35:57",3,"Add change point detector to cedar ""As a DAG engineer,  I'd like cedar to consume DAG's change point detection microservice using a nice interface.  Such that, Cedar can detect changes in its performance data.    AC:  * Cedar consumes signal-processing-microservice web service (name may change) according to following interface pseudocode:    ""","  interface Detector {      Array<ChangePoint> detect_changes(Array<float>)  }     interface ChangePoint {      int index      Algorithm algorithm      datetime created_at  }      * Tests that mock out the microservice implementation  interface Algorithm {      string name      int version      object configuration  }  ",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8794","10/31/2019 15:41:57",2,"New data change point detection in Cedar ""As a DAG engineer,  I'd like to evict change points before data at the tip of a metric's time series, and recalculate the change points in order to reflect the latest test data.  Such that, the change points are kept up to date.    AC:  * Hook into Cedar's event infrastructure and raise a """"new data at tip of metric XYZ"""" event for each statistic in a rollup when a new test run event is raised  * Create handler that handles these events by evicting all change points 50-10,000 (configurable) points before the tip of the time series, recalculates them, and persists them (in one transaction)  * Handler should exit gracefully, notifying cedar of success or errors to look into""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8585","10/31/2019 15:45:00",2,"Revised data change point detection in Cedar  ""As a DAG engineer,  I'd like to evict change points around data being revised in a metric's time series, and recalculate the change points in order to reflect the latest test data.  Such that, the change points are kept up to date.    AC:  * Hook into Cedar's event infrastructure and raise a """"revised data at index I, version V of metric XYZ"""" event for each statistic in a rollup when a rollup statistic is being revised  * Create handler that handles these events by evicting all change points 50-10,000 (configurable) points around the tip of the time series, recalculates them, and persists them (in one transaction)  * Handler should exit gracefully, notifying cedar of success or errors to look into""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-6917","10/31/2019 17:27:47",2,"Display task shows multiple dependencies but should only be one ""In https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_rhel_62_64_bit_display_noPassthrough_patch_b78aaa49979b02b92f62f8917edc5689b5cea2c8_5dbaf338e3c3312096458c22_19_10_31_14_44_21, there is a list of dependencies which is in fact the same dependency repeated multiple times. It looks like the execution tasks correctly only display it once, but this display task shows it multiple times. I'm not sure if display tasks should have no dependencies or just one.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6918","10/31/2019 21:02:05",1,"No instance ID in create fleet response errors ""We regularly have errors that look like this:      We should handle this case differently. It occurs frequently enough from the API that it seems like it's not actually an error.""","  error spawning host evg-rhel70-small-20191031205607-2272248930922144288: error spawning spot host with Fleet: can't request fleet: invalid create fleet response: no instance ID in create fleet response  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-9140","11/01/2019 13:31:37",0,"Connection handler should use context ""This is to prevent reads/writes from hanging, as well as handling service cancellation/signals.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-6922","11/01/2019 17:57:44",1,"Can't read gimlet error responder into error response ""When getting an error from a route (specifically noticed for CreateVolume), the body was:    ```    {    ¬† """"status"""": 400,    ¬† """"error"""": """"volume size limit 100 exceeded""""    }    ```    but trying to read this into a &gimlet.ErrorResponse{} gave the error: `problem creating volume and parsing error message: error attempting to unmarshal into *gimlet.ErrorResponse: unexpected end of JSON input`.    ¬†""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6926","11/04/2019 12:35:48",2,"Add a last_id field to hour / daily historical test and task collections. ""As an evergreen engineer.  I want the current daily / hourly cache historical testr aggregations to add the last processed id,  So that the $merge pipeline can take over from the current implementation .    ----  AC:  * The current pipeline using lookup add a last_id field to test stats containing the last processed test result.   * The current pipeline using lookup add a last_id field to task stats containing the last processed task.     ""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6928","11/04/2019 14:33:38",1,"Use Parser Project ""Reference EVG-6270‚Äìwe need to flip UseParserProject to true (and make sure this logic is right) to start using the parser project.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-6929","11/04/2019 14:34:26",1,"Cleanup ParserProject ""Assuming UseParserProject is true, go through and remove it, and potentially remove writing the config string at all.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6931","11/04/2019 18:52:34",2,"Malformed version configs should not break UI ""If the version config in a project's most recent config is malformed, it will cause errors when finding the last known good config for a project, which breaks all UI pages where the project context is set to that. We should safeguard against this""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-6934","11/04/2019 23:02:09",2,"Moving a Repo Breaks Webhooks ""EVG-6540 was supposed to allow us to use existing webhooks, such as when a repo is moved from one owner to another. It doesn't appear to be working.    [https://mongodb.splunkcloud.com/en-US/app/search/search?q=search%20index%3D%22evergreen%22%20%22can%27t%20get%20existing%20webhook%22&display.page.search.mode=verbose&dispatch.sample_ratio=1&earliest=-24h%40h&latest=now&sid=1572908025.4001655]""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6935","11/05/2019 00:03:55",2,"Trying to retrieve recent versions for a nonexistent project produces 500 error ""Getting 500 from the api for the following request:    Evergreen GET rest/v2/projects/mongo-ruby-toolchain/recent_versions failed: 500: request aborted    Info from ops-alerts channel:        The correct project name is """"mongo-ruby-driver-toolchain"""", not """"mongo-ruby-toolchain"""".    When asked to retrieve recent versions for a nonexistent project, api should return a response indicating the project does not exist rather than a 500 error.""","    Journal  evergreen  priority  alert  message  hit panic; adding error  action  aborted  remote  207.251.78.34  length  0  stack  gimlet/middleware_grip.go:177 runtime/asm_amd64.s:510 runtime/panic.go:491 runtime/panic.go:63 runtime/signal_unix.go:367 route/project.go:178 gimlet/framework.go:48 http/server.go:1918 negroni/negroni.go:46 negroni/negroni.go:29 negroni/negroni.go:38 negroni/negroni.go:38 route/middleware.go:402 negroni/negroni.go:38 negroni/negroni.go:38 gimlet/middleware_auth.go:192 negroni/negroni.go:38 negroni/negroni.go:86 mux/mux.go:212 negroni/negroni.go:46 negroni/negroni.go:29 negroni/negroni.go:38 negroni/negroni.go:38 negroni/static.go:41 negroni/negroni.go:38 negroni/negroni.go:38 negroni/static.go:53 negroni/negroni.go:38 negroni/negroni.go:38 gimlet/middleware_auth.go:37 negroni/negroni.go:38 negroni/negroni.go:38 gimlet/middleware_auth_user.go:204 negroni/negroni.go:38 negroni/negroni.go:38 gimlet/middleware_grip.go:192 negroni/negroni.go:38 negroni/negroni.go:86 http/server.go:2619 http/server.go:1801 runtime/asm_amd64.s:2337  request  547813  duration  4.838761ms  path  /api/rest/v2/projects/mongo-ruby-toolchain/recent_versions  panic  runtime error: invalid memory address or nil pointer dereference  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-9244","11/05/2019 14:29:21",0,"Fix linting, makefile, and synchronize process error handling ""Several packages are not being linted. There are also multiple makefile issues due to the linting changes that need to be resolved.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-6939","11/05/2019 17:34:54",0,"Delete task_event_log collection ""It is empty and unused.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-9085","11/07/2019 16:23:28",0,"Support different wire protocol versions ""Depending on the version sent by the shell, the wire protocol service has to respond to OP_QUERY/OP_MSG requests with OP_REPLY/OP_MSG. For example, on v4.2, the shell sends only OP_MSG. However, on v4.0, it still sends OP_QUERY which is then converted to OP_COMMAND.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-8850","11/07/2019 17:29:00",1,"Standardize cache pruning behavior ""Context cancellation/timeout does not gracefully stop the goroutine running the RPC service.    ¬†    Each service has slightly different cache behavior. For example, the REST service handles panics while the RPC service does not. The RPC service cache pruning shouid be cancelled by a context.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-9123","11/07/2019 18:48:50",1,"Vendor dependencies ""It currently does not vendor any of its dependencies and this causes the test failures in its evergreen tasks.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-6943","11/07/2019 18:57:24",2,"Test provisioning on upstart and init in staging ""This is in preparation for deploying to RHEL 6.2 (uses init) and other distros like ubuntu 14.04 (uses upstart).    ¬†    If this succeeds, new provisioning should be turned on for more distros using init/upstart.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-6945","11/07/2019 20:55:31",1,"Fix Attach/Detach Volumes ""¬†Something is going on with volumes! Test more.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8367","11/07/2019 22:43:28",0,"Header sizes incorrect for large message body size ""When sending large payloads (approx. 1mB), the header size is incorrect. It can send smaller payloads without issue (approx. 1kB).""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-6949","11/08/2019 14:05:40",1,"add rest route for getting projects that match tags ""add both """"give me a list of matching projects"""" and """"give me all project refs that match""""""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-9124","11/08/2019 14:56:20",1,"add synchronized ftdc collector ""simple wrapper that adds locks to the collector (will also fix race detector on anser""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-8875","11/08/2019 14:56:56",1,"collector wrapper that handles events.Performance events ""should handle cumulative summing across events.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-9169","11/08/2019 15:08:06",2,"Add service account and credentials to LDAP query for isMemberOf ""Add service account and credentials to LDAP query for isMemberOf""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-9119","11/08/2019 15:08:30",2,"Instrument LDAP call timing ""Instrument LDAP call timing""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-9051","11/08/2019 15:25:16",0,"Fix linux init template ""It is missing end tags.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-6951","11/08/2019 16:43:53",1,"document periodic builds ""it would be good to have this in the wiki""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-9033","11/11/2019 15:13:11",1,"Make it possible to wrap RPC server for mongo client ""The mongo client sends some initialization requests such as isMaster and getLogs that must be handled by the server in order to begin transferring information between them. It would be good to have a convenience base server that can handle this automatically. It should also be able to do things like respond based on the shell version sent to it.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-6954","11/11/2019 20:30:47",2,"rhel76-test spawn host authorized_keys is incorrect ""One spawn host (i-091488ba317364495) had its public key cut off. The cloud-init logs are unusual in that they don't show the user data script execution.    I can reproduce this on rhel70-small and rhel76-test, but not ubuntu1804-build.    One guess I have is that, given that it seems to be confined to rhel and only occurs occasionally, the awssshkey service is trying to write to the file concurrently with the user data script. Redirects might be atomic [if writes are small enough|https://linux.die.net/man/3/write].""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6957","11/11/2019 22:12:07",1,"Some CLI subcommands do not obey specified configuration file  ""For example, {{evergreen host list}} will use the configuration specified in {{~/.evergreen.yml}} even if you set the config file explicitly (i.e. {{evergreen -c <conf_file> host list --mine}})""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6958","11/11/2019 22:32:22",2,"linux-64-amzn cannot provision hosts ""The linux-64-amzn-test and linux-64-amzn-build distros can't provision the host with user data or new SSH because of an error while curling the agent, stating: """"curl: (35) Cannot communicate securely with peer: no common encryption algorithm(s).""""    This does not occur if you curl the binary through SSH.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6961","11/12/2019 15:09:31",1,"ubuntu1404 missing HOME environment variable ""Other distros (e.g. rhel70, ubuntu1604) were confirmed to have an agent with the HOME environment variable set. This is an issue with upstart not providing some common environment variables like $SHELL, $USER, $HOME, etc. Systemd [already provides HOME as an environment variable|https://www.freedesktop.org/software/systemd/man/systemd.exec.html#Environment%20variables%20in%20spawned%20processes].    These can probably be pulled from {{/etc/passwd}}.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8634","11/12/2019 16:26:53",1,"Add environment variables on service via CLI ""Some commonly-used environment variables are [set in systemd by default|https://www.freedesktop.org/software/systemd/man/systemd.exec.html#Environment%20variables%20in%20spawned%20processes], but this behavior is not mirrored for older init systems (sysv, upstart). GIven that many programs implicitly rely on the presence of environment variables like HOME, it should be possible to set these values.""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-6962","11/12/2019 20:41:27",2,"Reduce host cycling when using evergreen.DispatcherVersionRevisedWithDependencies ""When running with _evergreen.DispatcherVersionRevisedWithDependencies_ It is possible for a single _depends_on_ task to """"block"""" a significant number (or all) the tasks present in the _task_queue_ if they are dependent on this single task.    For example, at one point every task (33 tasks) in the _archlinux-test_ _task_queue_ were """"blocked"""" from being dispatched as they all had a _depends_on_ for the same dispatched/running task:    While waiting for this _depends_on_ task to complete, the _host_allocator_ is cycling hosts for work that cannot be dispatched as the length of the _task_queue_ is a factor in determining how many hosts to provision.    We should try to minimise, and ideally avoid this scenario.""","db.tasks.find({""""depends_on._id"""": """"ops_manager_kubernetes_init_test_run_build_images_ubuntu_patch_cad4b3570aac75693c9e3b549927e2edecfdda93_5dcb02032a60ed3b8526660f_19_11_12_19_03_32""""}).count()  33  ",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6967","11/13/2019 16:43:43",2,"Undispatchable display tasks are stuck in the task_queue when when running with evergreen.DispatcherVersionRevisedWithDependencies ""[~sam.kleinman] - as discussed in person yesterday:    Here is an arbitrary _task\_queue_ which contains 52 tasks over 24 hours old.          Some of the _tasks_ that we inspected, you identified as (undispatchable) display tasks, e.g.:    https://evergreen.mongodb.com/task/mongodb_mongo_v4.2_enterprise_ubuntu1604_64_aggregation_multiversion_fuzzer_5_enterprise_ubuntu1604_64_1006ba7736ec24da479de805c7777e63315711fb_19_11_06_19_34_42    We need to address this particular subset of undispatchable tasks remaining in the queue.    ""","  > db.tasks.find({""""activated_time"""": {$lt: ISODate(""""2019-11-12T00:00:00.000Z"""")}, """"distro"""": """"ubuntu1604-test"""", """"activated"""": true, """"status"""": """"undispatched"""", """"priority"""": {""""$gte"""": 0}, $or: [{""""depends_on.unattainable"""": {""""$ne"""": true}},{""""override_dependencies"""": true}]}).count()  52  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6968","11/13/2019 17:54:42",2,"amazon1-linux distros do not have /usr/local/bin in PATH ""The amazon1-linux distros run on a very old version of upstart (0.6.5, released in 2010). This means that it does not have the setuid stanza (added in v1.4.3). This is not an issue on other distros (e.g. ubuntu12/14), which have a more recent version of upstart.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8328","11/14/2019 14:51:09",1,"Performance results start/end do not return consistent results ""The 'start' and 'end' values in performance results are not stored in a consistent type. So we should not automatically try to convert them to a type.""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-6971","11/14/2019 15:19:59",2,"Resolve issue where a task is status ""dispatched"" for a number of days, blocking (and enqueuing) its dependent tasks when running with evergreen.DispatcherVersionRevisedWithDependencies ""Another scenario where we end up with orphaned tasks stuck in the _task_queue_ when running with _evergreen.DispatcherVersionRevisedWithDependencies_.             Why is this blocking task stuck in status: """"dispatched"""" for so long?     ""","> new Date()  ISODate(""""2019-11-14T15:26:45.291Z"""")    > db.task_queues.find({""""distro"""": """"archlinux-test""""},{""""distro_queue_info.length"""": 1}).pretty()  {   """"_id"""" : ObjectId(""""567ac11eb6ae5e589d331ede""""),   """"distro_queue_info"""" : {    """"length"""" : 28   }  }    > db.tasks.find({""""depends_on._id"""": """"ops_manager_kubernetes_init_test_run_prepare_cluster_vanilla_1_15_patch_cad4b3570aac75693c9e3b549927e2edecfdda93_5dcb02032a60ed3b8526660f_19_11_12_19_03_32""""}).count()  28    > db.tasks.find({""""_id"""": """"ops_manager_kubernetes_init_test_run_prepare_cluster_vanilla_1_15_patch_cad4b3570aac75693c9e3b549927e2edecfdda93_5dcb02032a60ed3b8526660f_19_11_12_19_03_32""""},{""""activated_time"""": 1, """"dispatch_time"""": 1, """"status"""": 1}).pretty()  {   """"_id"""" : """"ops_manager_kubernetes_init_test_run_prepare_cluster_vanilla_1_15_patch_cad4b3570aac75693c9e3b549927e2edecfdda93_5dcb02032a60ed3b8526660f_19_11_12_19_03_32"""",   """"dispatch_time"""" : ISODate(""""2019-11-12T19:11:36.377Z""""),   """"activated_time"""" : ISODate(""""2019-11-12T19:03:32.359Z""""),   """"status"""" : """"dispatched""""  }    ops_manager_kubernetes_init_test_run_prepare_cluster_vanilla_1_15_patch_cad4b3570aac75693c9e3b549927e2edecfdda93_5dcb02032a60ed3b8526660f_19_11_12_19_03_32  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6972","11/14/2019 17:02:43",1,"Allow Volumes to be spawned using a different region ""GetManager uses the DefaultEC2Region for creating volumes. Should be able to specify this region.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6973","11/14/2019 17:12:12",0,"JasperClient should not generate Jasper credentials ""After the certdepot refactor, [this line|https://github.com/evergreen-ci/evergreen/blob/50df9cd27639e7e3cd0962ab5c22ef3cf96f9dcf/model/host/hostutil.go#L739] deletes the current Jasper credentials for a host that is already assumed to be running Jasper. *This is incorrect because it will delete the host's Jasper credentials and replace them with new ones, causing a data inconsistency between the host's Jasper credentials on disk and the app server's copy of the credentials.*""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6975","11/14/2019 22:28:28",1,"Increase HTTP client timeout for s3 commands ""Maybe to 20 min?""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-6976","11/15/2019 12:48:08",0,"Host should be marked running even if evergreen fetch fails to get task data ""Hosts should not have fetching task data be required to be considered 'running'. A spawn host that is supposed to be loaded with task data might fail at {{evergreen fetch}}, but should still be marked as running. This is the current legacy SSH behavior.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6977","11/15/2019 12:58:43",0,"evergreen fetch needs to clone as unprivileged user ""User data runs as root, but we want it to actually run as the user defined in the distro settings. This will prevent issues with cloning repositories, which requires the github SSH keys.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6978","11/15/2019 13:26:19",0,"Fix when spawn host page shows user data command ""For new provisioning, the host should only show the SSH command once its status is running. There was a minor distro bootstrap settings change so the current page will not correctly wait for the host to be running before showing the command.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-6980","11/15/2019 14:31:34",2,"Add Browser Load Times to New Relic Evergreen Monitoring ""As an Evergreen Engineer  When a user visits the Evergreen website  Then I'd like to know how long it takes that user to load/render the entire page  ""","",1,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-6982","11/15/2019 15:42:01",1,"Spawn host start time displays invalid time if host hasn't started yet ""Time is weird. I spawned a host and since it hadn't reached starting yet, it displayed uptime as 2020 years and the start time suggested we had gone back to the age of the Roman empire:    !Screen Shot 2019-11-15 at 10.36.39 AM.png!""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-6983","11/15/2019 15:49:22",0,"Fix unexpirable host error message ""On the spawn host page, if you exceed the number of unexpirable hosts, it gives an error stating: """"Error extending host expiration: can only have 0 expirable hosts""""    This should probably say 0 _unexpirable_ hosts.""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-8513","11/15/2019 21:02:52",0,"Re-add ExtendRemoteArgs to Jasper ""This was accidentally removed in the SSH library change.""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-6996","11/18/2019 16:00:14",1,"Lobster: upgrade React to v16.8+  ""Use hooks!""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7001","11/18/2019 20:30:24",1,"Add service credentials to admin settings ""The Okta LDAP auth needs to use a special service user's credentials for performing LDAP operations (e.g. ismemberof).""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-7003","11/19/2019 12:40:08",0,"Properly set go environment ""Tests are failing because GOROOT (which determines standard library) and gobin (which determines the go binary) are not explicitly set in the build images anymore.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7004","11/19/2019 16:09:38",0,"Failures: test-model-host on Race Detector [Evergreen @ ad317055] (TestFindByExpiringJasperCredentials, IgnoresNotRunning, TestJasperProcess, RunJasperProcessPasses, StartJasperProcessPasses, RunJasperProcessFailsIfProcessExitsWithError +1 more) ""h2. [test-model-host failed on Race Detector|https://evergreen.mongodb.com/task/evergreen_race_detector_test_model_host_patch_ad3170559f038d2951ab6442dab5add2878d3012_5dd4050957e85a0dc21c4dba_19_11_19_15_06_50/0]  Host: [ec2-3-84-161-130.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/i-07f056d6fa482f77a]  Project: [Evergreen|https://evergreen.mongodb.com/waterfall/evergreen]  Commit: [diff|https://github.com/evergreen-ci/evergreen/commit/ad3170559f038d2951ab6442dab5add2878d3012]: 'evergreen-ci/evergreen' pull request #2890 by Kimchelly: EVG-7003: fix go environment in evergreen config (https://github.com/evergreen-ci/evergreen/pull/2890) | 18 Nov 19 22:41 UTC  Evergreen Subscription: ; Evergreen Event:   *TestFindByExpiringJasperCredentials* - [Logs|https://evergreen.mongodb.com/test_log/5dd40c5c9ccd4e283271bb5a] | [History|https://evergreen.mongodb.com/task_history/evergreen/evergreen_race_detector_test_model_host_patch_ad3170559f038d2951ab6442dab5add2878d3012_5dd4050957e85a0dc21c4dba_19_11_19_15_06_50#TestFindByExpiringJasperCredentials=fail]  *IgnoresNotRunning* - [Logs|https://evergreen.mongodb.com/test_log/5dd40c5c9ccd4e283271bb5a] | [History|https://evergreen.mongodb.com/task_history/evergreen/evergreen_race_detector_test_model_host_patch_ad3170559f038d2951ab6442dab5add2878d3012_5dd4050957e85a0dc21c4dba_19_11_19_15_06_50#IgnoresNotRunning=fail]  *TestJasperProcess* - [Logs|https://evergreen.mongodb.com/test_log/5dd40c5c9ccd4e283271bb5a] | [History|https://evergreen.mongodb.com/task_history/evergreen/evergreen_race_detector_test_model_host_patch_ad3170559f038d2951ab6442dab5add2878d3012_5dd4050957e85a0dc21c4dba_19_11_19_15_06_50#TestJasperProcess=fail]  *RunJasperProcessPasses* - [Logs|https://evergreen.mongodb.com/test_log/5dd40c5c9ccd4e283271bb5a] | [History|https://evergreen.mongodb.com/task_history/evergreen/evergreen_race_detector_test_model_host_patch_ad3170559f038d2951ab6442dab5add2878d3012_5dd4050957e85a0dc21c4dba_19_11_19_15_06_50#RunJasperProcessPasses=fail]  *StartJasperProcessPasses* - [Logs|https://evergreen.mongodb.com/test_log/5dd40c5c9ccd4e283271bb5a] | [History|https://evergreen.mongodb.com/task_history/evergreen/evergreen_race_detector_test_model_host_patch_ad3170559f038d2951ab6442dab5add2878d3012_5dd4050957e85a0dc21c4dba_19_11_19_15_06_50#StartJasperProcessPasses=fail]  *RunJasperProcessFailsIfProcessExitsWithError* - [Logs|https://evergreen.mongodb.com/test_log/5dd40c5c9ccd4e283271bb5a] | [History|https://evergreen.mongodb.com/task_history/evergreen/evergreen_race_detector_test_model_host_patch_ad3170559f038d2951ab6442dab5add2878d3012_5dd4050957e85a0dc21c4dba_19_11_19_15_06_50#RunJasperProcessFailsIfProcessExitsWithError=fail]  *StartJasperProcessFailsIfProcessCreationFails* - [Logs|https://evergreen.mongodb.com/test_log/5dd40c5c9ccd4e283271bb5a] | [History|https://evergreen.mongodb.com/task_history/evergreen/evergreen_race_detector_test_model_host_patch_ad3170559f038d2951ab6442dab5add2878d3012_5dd4050957e85a0dc21c4dba_19_11_19_15_06_50#StartJasperProcessFailsIfProcessCreationFails=fail]    [Task Logs | https://evergreen.mongodb.com/task_log_raw/evergreen_race_detector_test_model_host_patch_ad3170559f038d2951ab6442dab5add2878d3012_5dd4050957e85a0dc21c4dba_19_11_19_15_06_50/0?type=T ]  ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-8478","11/19/2019 16:22:59",1,"APM flusher goroutine races¬†when logging message ""Example logs: https://evergreen.mongodb.com/task/evergreen_race_detector_test_scheduler_eb377d1e36be021b4075a5536aa34d5d9dd2b417_19_11_13_20_32_17""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-7008","11/20/2019 14:39:38",2,"Patch builds have ""No patch status available for this page"" ""Some ordinary patch builds have no patch status in Evergreen:    https://evergreen.mongodb.com/version/5dd51e88d1fe0728cc337115  https://evergreen.mongodb.com/version/5dd51ecf1e2d17344ae44bd2    I don't know if it's something about how I create patch builds? I see that another patch build in the mongodb-mongo-master project has a patch status as usual:    https://evergreen.mongodb.com/version/5dd51f3ed6d80a7b15ddfd03""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-9052","11/20/2019 16:00:24",0,"Support OP_MSG ""OP_MSG is not completely implemented in the mongowire package yet.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-9091","11/20/2019 16:55:43",1,"Fix go environment for all linted projects ""All projects that use a similar gometalinter copy-paste in the makefile will likely fail to lint due to changes in the golang toolchain and default go version.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-7011","11/20/2019 21:57:12",2,"parent-decommission-job should not decommission parent hosts with task-spawned containers ""or if the containers aren't up yet, move them to another parent""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7013","11/20/2019 23:42:02",2,"Over 20 slack notifications received for a single patch build ""After some time creating a patch build, I suddenly received over 200 email notifications saying my patch has succeeded (though in reality only a small portion of the patch turned green at that time).¬†    The patch build: [https://evergreen.mongodb.com/version/5dd5bb40e3c3315db82f82f3]    Attaching a few notifications as below. Please note they are for the same patch build but having different event IDs.    And I did not customize my evergreen notification settings recently.¬†""","The patch¬†5dd5bb40e3c3315db82f82f3¬†in 'mongodb-mongo-master' has succeeded!Evergreen Patchtest-wtdrop-for-master (with WT branch: develop, githash: 8124d929c48ae8e4c0b1311374ea69b6ae4c48c5)Subscription: 5aff7cbb2fbabe21e5715fa7; Event: 5dd5c7ba1e2d1749ef3b828fThe patch¬†5dd5bb40e3c3315db82f82f3¬†in 'mongodb-mongo-master' has succeeded!Evergreen Patchtest-wtdrop-for-master (with WT branch: develop, githash: 8124d929c48ae8e4c0b1311374ea69b6ae4c48c5)Subscription: 5aff7cbb2fbabe21e5715fa7; Event: 5dd5c7ba2a60ed7e9b2e1e3dThe patch¬†5dd5bb40e3c3315db82f82f3¬†in 'mongodb-mongo-master' has succeeded!Evergreen Patchtest-wtdrop-for-master (with WT branch: develop, githash: 8124d929c48ae8e4c0b1311374ea69b6ae4c48c5)Subscription: 5aff7cbb2fbabe21e5715fa7; Event: 5dd5c7ba3e8e864e1540b100",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-9286","11/21/2019 15:51:47",0,"Add license ""Apache 2.0""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-9205","11/21/2019 18:35:06",1,"Run lint and tests in task group ""Similar to how cedar currently does it.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-7014","11/21/2019 20:55:09",2,"Commit queue was blocked ""The Genny commit queue got stuck because the version completion wasn't logged.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7017","11/22/2019 15:12:28",1,"Remove path parameter from mock environment ""This field has been unused for at least a year.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-7021","11/22/2019 17:39:20",0,"ProjectRef changes through the API aren't logged  ""If a ProjectRef is changed through its project page the before/after will be logged to the event_log, but not if the change is made through the API.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7022","11/22/2019 18:22:42",0,"Host should turn off needs new agent or monitor flag when contacting host ""Some agents could not contact the app server for several minutes when attempting to heartbeat and this caused the app server to attempt to deploy a new agent monitor since the db's max LCT elapsed even though the agent and agent monitor were both alive on the host's side.    ¬†    This can be fixed by clearing the needs new agent/monitor flag when the agent contacts the app server (all cases in which the agent/agent monitor should be signaled to shut down are handled within the agent REST API anyways).    ¬†    Example host: [https://evergreen.mongodb.com/host/i-0a30a5a74b5896a02|https://evergreen.mongodb.com/event_log/host/i-0a30a5a74b5896a02]    Running task: [https://evergreen.mongodb.com/task/mms_int_mdb_latest_INT_JAVA_BRS_36_MM_705ed64b2f9a7b130e8139c94ead0a3c9d51d5f5_19_11_22_13_42_09]    ¬†""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-7024","11/22/2019 22:07:32",2,"Poisoned host check should also decommission docker parents ""If it has to decommission too many containers due to tasks turning purple""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8787","11/25/2019 16:18:45",2,"Explore using golangci lint instead of gometalinter ""If golangci lint is feasible to use, it would be preferable to gometalinter, which has been deprecated and requires some makefile configuration to work properly.""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-7032","11/25/2019 21:51:26",1,"Add distro API and UI for shallow clone ""We should be able to turn on shallow clone on a distro by distro basis, since some distros don't support shallow clone.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7033","11/25/2019 21:56:26",2,"Support shallow clone on configured distros in GitHub patches and mainline commits ""Shallow clone is easier here, since cloning the latest commit is already the right thing to do.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8340","11/26/2019 13:03:36",0,"Set stdin/stdout/stderr when exec.Command is not resolved ""The SSH binary implementation panics because stdin is set before {{exec.CommandContext}} is called.""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-7042","12/02/2019 20:02:15",2,"Move evg logs to cedar buildlogger ""* Make sure that the logs appear correctly in the UI (talk with John)   * Figure out how to transition away from logkeeper/evergreen""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-7045","12/03/2019 03:26:36",1,"Github push webhook got 400 response for non-tracked branches ""After turning on """"Pushes"""" event in the Evergreen webhook ([https://evergreen.mongodb.com/rest/v2/hooks/github)]¬†for the wiredtiger/wiredtiger repository on Github, I saw 400 responses returned from Evergreen for push events associated to branches that are not tracked by Evergreen (i.e. branches that have no Evergreen project to test against). It is actually quite usual push events being generated from those short-lived feature branches for pull request changes. And the 400 response code feels a bit misleading as well.¬†    ¬†    It would be nice if Evergreen could tolerate push events from those non-tracked branches with a positive response code.¬†""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7046","12/03/2019 14:39:29",1,"Include version requester type in rest v2 endpoint ""An ETL job was relying on URLs to determine whether something was a patch build. An object ID is a patch build, while something with a project name prepended to an object ID is a mainline build. This is awkward, and it now has broken, since periodic builds look like patch builds.    We should provide the version requester type itself in the rest v2 endpoint for versions. The list of types is here: https://github.com/evergreen-ci/evergreen/blob/13546d429c9c218b5024b0d329004db52fab7d01/globals.go#L300-L306.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7047","12/03/2019 15:22:59",2,"No notification generated for blocked task group ""This does not have a notification for the lint buildvariant, but it should https://github.com/evergreen-ci/evergreen/pull/2923. It's also missing a version notification.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8908","12/03/2019 22:29:28",2,"jasper test compile failures don't fail tasks ""e. g.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-8725","12/04/2019 15:56:54",1,"Support requester field in versions ""The `requester` field was recently added to [versions|https://github.com/evergreen-ci/evergreen/wiki/REST-V2-Usage#id9] in the evergreen api. This allows a much better way of testing if a version is patch or not. We should switch to using it.  ----  As a DAG engineer,  I want to use requester for checking if a version is a patch,  So that I can more reliably know what triggered a version.  ----  AC:  * requester can be retrieved from Version object.  * is_patch uses requester to determine if a version is a patch.""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8362","12/04/2019 18:16:46",1,"Fix wire test ""Logs: https://evergreen.mongodb.com/task/jasper_ubuntu1604_test_wire_bfb108fd91424eb6e405fe9640b54b2547b39ae0_19_12_04_16_59_25    It should be {{assert.NoError}}, not {{assert.Error}}.    This can probably be fixed by changing the contexts so that writing responses occurs in a separate context.""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8723","12/05/2019 14:35:30",2,"Add error handling to signal processing detector client ""As a DAG engineer:  I'd like to handle """"common"""" errors that come up while using signal processing microservice in cedar gracefully.  Such that,  Cedar doesn't fail randomly due to issues that can be gracefully recovered from.    AC:  * Use results from stress testing signal processing microservice to implement appropriate handling of error codes with retrying/panic policy.""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-9252","12/05/2019 18:02:15",0,"Upstart should handle environment without setuid ""Upstart scripts might fail to inherit the desired environment in some cases (e.g. PATH might not be modified by setting environment variables if {{secure_path}} is set in {{/etc/sudoers}}).""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-7053","12/05/2019 18:51:34",1,"Document how new provisioning works ""In evergreen developer's guide.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-7054","12/05/2019 19:28:26",2,"Set up golangci-lint ""golangci-lint will go in the other MAKE repos assuming this goes well.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-7058","12/05/2019 23:14:54",1,"windows-64-vs2017-test spawn host bash: export 'Files/...' not a valid identifier errors  ""When I ssh into a windows-64-vs2017-test spawn host I get these errors:      Fixing the paths in .bash_profile (escape space with backslash) and reloading seems to fix the issue:    ""","  \Last login: Thu Dec  5 22:57:00 2019 from 34.232.8.152  \-bash: export: `Files/Amazon/cfn-bootstrap:/cygdrive/c/ProgramData/chocolatey/bin:/cygdrive/c/Program': not a valid identifier  -bash: export: `Files/dotnet:/cygdrive/c/Program': not a valid identifier  -bash: export: `Files/Git/cmd:/cygdrive/c/Python27:/cygdrive/c/Python27/Scripts:/cygdrive/c/openssl/bin:/cygdrive/c/sasl/bin:/cygdrive/c/snmp/bin:/cygdrive/c/go/bin:/cygdrive/c/Program': not a valid identifier  -bash: export: `Files/Git/bin:/cygdrive/c/Program': not a valid identifier  -bash: export: `Files/nodejs:/cygdrive/c/Perl64/bin:/cygdrive/c/curl/dlls:/cygdrive/c/Program': not a valid identifier  -bash: export: `Files/nodejs:/cygdrive/c/Users/Administrator/AppData/Local/Microsoft/WindowsApps:/cygdrive/c/Users/Administrator/AppData/Roaming/npm:/cygdrive/c/go/bin:/cygdrive/c/Windows/Sysnative:~/cli_bin': not a valid identifier  Administrator@EC2AMAZ-20F6VD2 ~  $ git  -bash: git: command not found  Administrator@EC2AMAZ-20F6VD2 ~  $ cat .bash_profile  [ -f ~/.bashrc ] && source ~/.bashrc  export PATH=/bin:/cygdrive/c/Python27:/cygdrive/c/Python27/Scripts:/cygdrive/c/Python38/Scripts:/cygdrive/c/Python38:/cygdrive/c/Perl64/site/bin:/cygdrive/c/Windows/system32:/cygdrive/c/Windows:/cygdrive/c/Windows/System32/Wbem:/cygdrive/c/Windows/System32/WindowsPowerShell/v1.0:/cygdrive/c/Program Files/Amazon/cfn-bootstrap:/cygdrive/c/ProgramData/chocolatey/bin:/cygdrive/c/Program Files/dotnet:/cygdrive/c/Program Files/Git/cmd:/cygdrive/c/Python27:/cygdrive/c/Python27/Scripts:/cygdrive/c/openssl/bin:/cygdrive/c/sasl/bin:/cygdrive/c/snmp/bin:/cygdrive/c/go/bin:/cygdrive/c/Program Files/Git/bin:/cygdrive/c/Program Files/nodejs:/cygdrive/c/Perl64/bin:/cygdrive/c/curl/dlls:/cygdrive/c/Program Files/nodejs:/cygdrive/c/Users/Administrator/AppData/Local/Microsoft/WindowsApps:/cygdrive/c/Users/Administrator/AppData/Roaming/npm:/cygdrive/c/go/bin:/cygdrive/c/Windows/Sysnative:~/cli_bin  Administrator@EC2AMAZ-20F6VD2 ~  $ . .bash_profile  -bash: export: `Files/Amazon/cfn-bootstrap:/cygdrive/c/ProgramData/chocolatey/bin:/cygdrive/c/Program': not a valid identifier  -bash: export: `Files/dotnet:/cygdrive/c/Program': not a valid identifier  -bash: export: `Files/Git/cmd:/cygdrive/c/Python27:/cygdrive/c/Python27/Scripts:/cygdrive/c/openssl/bin:/cygdrive/c/sasl/bin:/cygdrive/c/snmp/bin:/cygdrive/c/go/bin:/cygdrive/c/Program': not a valid identifier  -bash: export: `Files/Git/bin:/cygdrive/c/Program': not a valid identifier  -bash: export: `Files/nodejs:/cygdrive/c/Perl64/bin:/cygdrive/c/curl/dlls:/cygdrive/c/Program': not a valid identifier  -bash: export: `Files/nodejs:/cygdrive/c/Users/Administrator/AppData/Local/Microsoft/WindowsApps:/cygdrive/c/Users/Administrator/AppData/Roaming/npm:/cygdrive/c/go/bin:/cygdrive/c/Windows/Sysnative:~/cli_bin': not a valid identifier    $ cat ~/.bash_profile  [ -f ~/.bashrc ] && source ~/.bashrc  export PATH=/bin:/cygdrive/c/Python27:/cygdrive/c/Python27/Scripts:/cygdrive/c/Python38/Scripts:/cygdrive/c/Python38:/cygdrive/c/Perl64/site/bin:/cygdrive/c/Windows/system32:/cygdrive/c/Windows:/cygdrive/c/Windows/System32/Wbem:/cygdrive/c/Windows/System32/WindowsPowerShell/v1.0:/cygdrive/c/Program\ Files/Amazon/cfn-bootstrap:/cygdrive/c/ProgramData/chocolatey/bin:/cygdrive/c/Program\ Files/dotnet:/cygdrive/c/Program\ Files/Git/cmd:/cygdrive/c/Python27:/cygdrive/c/Python27/Scripts:/cygdrive/c/openssl/bin:/cygdrive/c/sasl/bin:/cygdrive/c/snmp/bin:/cygdrive/c/go/bin:/cygdrive/c/Program\ Files/Git/bin:/cygdrive/c/Program\ Files/nodejs:/cygdrive/c/Perl64/bin:/cygdrive/c/curl/dlls:/cygdrive/c/Program\ Files/nodejs:/cygdrive/c/Users/Administrator/AppData/Local/Microsoft/WindowsApps:/cygdrive/c/Users/Administrator/AppData/Roaming/npm:/cygdrive/c/go/bin:/cygdrive/c/Windows/Sysnative:~/cli_bin  $ . ~/.bash_profile  $ git --version  git version 2.16.2.windows.1  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7059","12/06/2019 14:15:04",1,"Windows agent depends on .gitconfig in HOME ""In new provisioning, HOME is C:/Users/<service_user>, not C:/cygwin/home/Administrator. This means that environment variables are not exported.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-7069","12/06/2019 22:01:44",2,"Parameterize New Relic spruce browser plugin ""EVG-7028 parameterized New Relic for the legacy Evergreen UI. We should also parameterize it for Spruce. Unlike the Evergreen UI, where something can be stored in the admin interface, this will need to passed in to the Spruce buildsystem.""","",0,1,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7070","12/09/2019 14:15:04",0,"Fix static host reprovisioning to legacy and tune job enqueueing ""Fix various issues:  * If we're converting a static host to legacy provisioning, it has to be able to use a Jasper client to stop the agent monitor.  * The host event page has the wrong event type name.  * Jobs should be rounded to the nearest minute for uniqueness to allow provisioning to be changed multiple times per hour. Otherwise, the host will have to wait until the next deploy to be reprovisioned.  * Needs new agent/monitor should be checked only after the job is locked.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-8674","12/09/2019 19:36:22",1,"Simplify RunCMD ""This was suggested by the gocognit linter and I do think that the method is excessively complicated and should be broken into some helper functions.""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-7074","12/09/2019 22:44:21",1,"Change the TAG API to be part of the update project API (or at least similar to it) ""There are a few reasons to ask for this:    1. someone may want to add/remove more than a single tag.  2. someone may want to change from one tag to another (would require two calls instead of a single call with {tags: ['new'], tags_to_remove: [""""old""""]}  3. most likely someone may want to already make some other changes to a project in addition to changing its tags. This way a single update call can be used to make all the required changes.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7075","12/10/2019 14:40:05",1,"evg-lint needs to handle nolint ""It must be able to handle nolint comment directives as part of migration to golangci-lint instead of gometalinter. golangci-lint does not have easy integration with custom linters because it does not support running linter binaries.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7076","12/10/2019 14:43:12",0,"Host that does not come up can cause all host provisioning to fail ""At 6:07pm EST on 12/09/19, a user requested spawn host i-0489a525d49f1af12. This spawn host hit the [host not ready for setup|https://github.com/evergreen-ci/evergreen/blob/f50768d851142375ee202210e4f6424128199c79/units/host_status.go#L130] case from 6:08pm to 7:10pm, suggesting either that it's possible for a host to get stuck in some pending status or that there is some failed status that Evergreen does not handle correctly.    After the hour passed, AWS no longer returned data about that host. This caused Evergreen to [return early|https://github.com/evergreen-ci/evergreen/blob/f50768d851142375ee202210e4f6424128199c79/cloud/ec2.go#L724] from GetInstanceStatuses, because that host was no longer included in the DescribeInstances response.    This in turn blocked on host provisioning that went through that DescribeInstances code path. Since fleet is its own provider, most task hosts did come up, but hosts spawned by users, hosts spawned by host.create, and on-demand hosts (i.e., perf) did not. We fixed this in production by terminating all on-demand hosts older than 1 hour.    One possible fix for this is to terminate a host in the database if it is not included in the DescribeInstances response. Another is to figure out the additional case we are failing to handle in setCloudHostStatus.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7080","12/10/2019 21:50:03",2,"Setup Failure: test-cloud on Ubuntu 16.04 [Evergreen @ b5d79830]  ""h2. [test-cloud failed on Ubuntu 16.04|https://evergreen.mongodb.com/task/evergreen_ubuntu1604_test_cloud_b5d798308e84a22c9f8aece21c506c3fdd0037e7_19_12_10_20_37_30/1]  Host: [ec2-3-91-38-130.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/i-0526f1bd337f73f84]  Project: [Evergreen|https://evergreen.mongodb.com/waterfall/evergreen]  Commit: [diff|https://github.com/evergreen-ci/evergreen/commit/b5d798308e84a22c9f8aece21c506c3fdd0037e7]: EVG-6882 prevent triggered builds for disabled projects (#2952) | 10 Dec 19 20:37 UTC  Evergreen Subscription: ; Evergreen Event:     [Task Logs | https://evergreen.mongodb.com/task_log_raw/evergreen_ubuntu1604_test_cloud_b5d798308e84a22c9f8aece21c506c3fdd0037e7_19_12_10_20_37_30/1?type=T ]  ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-8836","12/11/2019 13:42:58",1,"Deduplicate Jasper remote tests and do not skip tests ""There are many copy-pasted tests in the remote package which are named slightly differently but test the exact same things. They should be unified under the common remote tests.    ¬†    Fix this test: [https://evergreen.mongodb.com/task/jasper_windows_test_remote_61a695020101f18236583d806735d4ea1ccfd1fe_19_12_11_15_47_40]    ¬†    The tests that are being skipped should most likely not be skipped and should be fixed.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-7100","12/11/2019 16:10:09",2,"Remove TaskOrdering from code ""ubuntu1604-test is running the new tunable scheduler. I observed that a patch was at the top of the queue https://evergreen.mongodb.com/version/5df10c3030661525ab8d4acf, followed by all the tasks for this mainline commit https://evergreen.mongodb.com/version/mongodb_mongo_v3.6_919b7c1ce02104a22a06b14016d152440f66161d, followed by all the tasks in other patches https://evergreen.mongodb.com/version/5df112e2a4cf47113ff144d7.    This is unexpected because I would expect """"interleave"""", which is what, to interleave patch and mainline commits.""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7085","12/11/2019 19:20:49",2,"Toggle UseParserProject to true ""This cannot be done until EVG-7077. Test extensively in staging. Once this is done and in for a safe amount of time we can revisit EVG-5313.¬†¬†""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-8870","12/11/2019 20:00:13",2,"fix model.TestGetDownloadWindows ""I've added a skip""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-8459","12/11/2019 20:01:33",1,"Task mapping creation should increment source_file_seen_count even when no tasks flip ""For this file in src/evergreen/__init__.py file in evergreen.py, it has changed in 14 commits since this commit on May 4: https://github.com/evergreen-ci/evergreen.py/commit/61ee0d619d4adb31c84abc02dd9d52d41ae45f63. Thus, when I run the following command in the selected-tests repo, the task mapping that is created should have a source_file_seen_count of 14.         Currently the task mapping has a source_file_seen_count of 2 (see below). This is because we are only incrementing source_file_seen_count when tasks in Evergreen have flipped for that commit. Instead, we want to increment source_file_seen_count regardless of whether tasks have flipped.      ""","  task-mappings create evergreen.py --source-file-regex """"^src/evergreen/__init__.py"""" --after 2019-05-04T00:00:12 --output-file output.txt    [      {          """"source_file"""": """"src/evergreen/__init__.py"""",          """"project"""": """"evergreen.py"""",          """"repo"""": """"evergreen.py"""",          """"branch"""": """"master"""",          """"source_file_seen_count"""": 2,          """"tasks"""": [              {                  """"name"""": """"unit_tests"""",                  """"variant"""": """"ubuntu1604"""",                  """"flip_count"""": 2              }          ]      }  ]  ",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-7088","12/11/2019 22:48:13",2,"Slack notification says succeeded but task actually failed ""This PR patch was cancelled because I pushed another commit, but the slack notification says that it succeeded: [https://evergreen.mongodb.com/version/5df17050c9ec444c0b932df0]    ¬†    Subscription: 5bd86621e3c331358aa373f3  Event: 5df1718e3066155171dbbe2a""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7089","12/12/2019 15:17:14",0,"Copy teardown script to host ""This might cause user data to hit its limit (it has a 16kb limit) since the teardown script can be arbitrarily large.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-7090","12/12/2019 18:04:59",1,"pip failure on windows-64-vs2017-compile server ""Our automation agent MSI builds have been failing since yesterday (12/11/2019) on windows-64-vs2017-compile.   Here is a link  to the failed build:  https://evergreen.mongodb.com/task/cloud_automation_master_build_windows_msi_Automation_Agent_Generic_0a37709a3505599f828defd6e1df66fc0782671f_19_12_12_17_14_00    cc [~kimberly.tao] [~tomer.yakir]  ""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7092","12/12/2019 19:04:45",2,"Improve host creation throttling ""Since all task hosts are throttled together it's possible to starve out a single distro and tasks waiting on that distro will not run.    Perhaps a round-robin over the distros would allow each distro to be serviced.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7093","12/12/2019 19:37:05",1,"Updating spawn hosts doesn't refresh the page ""Clicking the Update button doesn't refresh the spawn hosts page to show the new properties and the banner.""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-7095","12/13/2019 17:50:34",1,"Periodic builds include all tasks ""Periodic builds include all tasks, not just the ones that match the alias.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7097","12/13/2019 19:29:36",0,"Task directories not being cleaned up between tasks ""Windows agents are failing to clean up their task directories and leave behind files between tasks.    Example errors in agent logs:    {{agent-3424-14.log:[evergreen.agent] 2019/12/13 17:57:46 [p=critical]: Error removing working directory for the task: \data\mci\24b47f5b24b3be8ac822dea79146ea26: remove \data\mci\24b47f5b24b3be8ac822dea79146ea26\mms\server\build\java\classes\com\xgen\svc\mms\api\view\atlas_private\dataLake: The directory is not empty.}}   {{agent-3424-16.log:[evergreen.agent] 2019/12/13 18:15:22 [p=critical]: Error removing working directory for the task: \data\mci\5d8f220a77d23a59aba3912c4a97d73f: remove \data\mci\5d8f220a77d23a59aba3912c4a97d73f\mms\server\build\java\classes\com\xgen\svc\mms\api\view\atlas_private\dataLake: The directory is not empty.}}   {{agent-3424-18.log:[evergreen.agent] 2019/12/13 18:33:11 [p=critical]: Error removing working directory for the task: \data\mci\4b701a6ca0f7fbaac61a430895e05133: remove \data\mci\4b701a6ca0f7fbaac61a430895e05133\mms\server\build\java\classes\com\xgen\svc\mms\api\view\atlas_private\dataLake: The directory is not empty.}}    ¬†    There is also a related issue where a Windows agent is cleaning up a task directory but then stops communicating with the app server, causing the app server to attempt to deploy agents/agent monitors to the host when the agent is still running.    ¬†    This applies to both non-legacy and legacy provisioning on Windows machines. I checked on windows-64-vs2013-small and windows-64-vs2015-compile and both had this issue.    ¬†    Example of a legacy host (windows-64-2019) in production that had this issue: https://evergreen.mongodb.com/host/i-00807d0b61df6bdfc    ¬†    I quarantined some hosts in staging that seem to have this issue (using legacy provisioning). I'm unsure if they're the same issue but they have the same symptom of not being able to clean up the task directory:    [https://evergreen-staging.corp.mongodb.com/host/i-035a2aab525bd8c77]    [https://evergreen-staging.corp.mongodb.com/host/i-0218a3aa604dbfa88]""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7098","12/13/2019 19:49:50",1,"Add a notes field to distros ""We have created more custom distros which have very specific use cases. If you don't have a knowledge of the history of the distro, it's easy to change distro settings in a way that breaks implicit assumptions about how the distro will be used. We should add a notes field to the distro, visible in the UI, so that administrators can record facts about the distros.""","",0,0,0,1,0,0,0,0,0,0,1,0,0,0,0
"EVG-8973","12/13/2019 20:57:18",1,"make bson documents json marshalable (native) ""this shouldn't be extended json support.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-8607","12/16/2019 18:53:56",2,"Cron backfiller for signal processing recalculation ""I'd like a schedule based backstop to recalculate change points over cedar's data. Such that, any stale time series get refreshed regularly.    AC:  * Recalculate change points for all cedar metrics with new data. Run every hour.""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-7101","12/17/2019 14:58:02",2,"Sys Perf trend charts in patchbuilds can misorder results ""In this [patchbuild|https://evergreen.mongodb.com/task/sys_perf_linux_standalone_audit_industry_benchmarks_patch_58abcf6577982367232a6c76d1ee277a4031ed3c_5dead5740ae6060c325daab9_19_12_06_22_26_35##%257B%2522compare%2522%253A%255B%257B%2522hash%2522%253A%252258abcf6577982367232a6c76d1ee277a4031ed3c%2522%257D%255D%257D], the output was rendered on the far left of the trend chart. The patchbuild was performed December 6th 2019 off of a recent commit. However, the visualization places it near patches from 2018.    Placing the results for the patchbuild far away from related results makes it more difficult to visualize changes.    This commit:   !image-2019-12-17-09-55-56-482.png|thumbnail!     The """"next"""" commit:   !image-2019-12-17-09-56-28-389.png|thumbnail! ""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-8468","12/17/2019 15:11:51",1,"Task mapping creation should set repo value to module's repo name for module-related task mappings ""When I create task mappings for the mongodb-mongo-master project and enterprise module, the task mappings that are generated for the enterprise module have their repo value set to the project repo rather than to the module repo.    Command to create task mappings:      Here is one of the task mappings created by the above command:    This mapping corresponds to [this file|https://github.com/10gen/mongo-enterprise-modules/blob/master/src/queryable/SConscript] in the mongo-enterprise-modules repo. The """"repo"""" field says """"mongo"""" when it should say """"mongo-enterprise-modules"""".   ""","  task-mappings create mongodb-mongo-master --source-file-regex """"^src"""" --after 2019-05-04T00:00:12 --source-file-regex """"^src"""" --module-name """"enterprise"""" --module-source-file-regex """"^src"""" --build-variant-regex """"^\!"""" --output-file output.txt    { """"source_file"""" : """"src/queryable/blockstore/SConscript"""", """"project"""" : """"mongodb-mongo-master"""", """"repo"""" : """"mongo"""", """"branch"""" : """"master"""", """"source_file_seen_count"""" : 4, """"tasks"""" : [ { """"name"""" : """"aggregation_multiversion_fuzzer_1_enterprise-rhel-62-64-bit"""", """"variant"""" : """"enterprise-rhel-62-64-bit"""", """"flip_count"""" : 1 }, { """"name""""  : """"aggregation_multiversion_fuzzer"""", """"variant"""" : """"enterprise-rhel-62-64-bit"""", """"flip_count"""" : 1 }, { """"name"""" : """"aggregation_wildcard_fuzzer"""", """"variant"""" : """"enterprise-rhel-62-64-bit"""", """"flip_count"""" : 1 }, { """"name"""" : """"multiversion_auth"""", """"variant"""" : """"enterprise-rhel-62-64-bit"""", """"flip_count"""" : 1 }, { """"name"""" : """"rollback_fuzzer_clean_shutdowns_1_enterprise-rhel-62-64-bi  t"""", """"variant"""" : """"enterprise-rhel-62-64-bit"""", """"flip_count"""" : 2 }] }  ",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-7104","12/17/2019 22:58:13",1,"Prevent using regular patch and set-module commands for commit queue patches ""Users should not be able to create a commit queue patch with the regular patch command.   Also, if a module is added with the regular set-module command the message will be empty and the commit will fail. We should error if a user does this.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7105","12/17/2019 23:02:07",0,"Commit queue set-module won't use the description argument ""Since the message flag was removed (https://github.com/evergreen-ci/evergreen/commit/8f99d8f744f39051ee6fd5338ce977e15483b4a6) pulling the message flag from the context will get the empty string.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8391","12/18/2019 20:13:52",1,"Cedar: problem persisting argument adding sample #10002: collector is overfull ""After adding O(1000000) events closing the stream fails with an error similar to the following:    problem persisting argument adding sample #10002: collector is overfull  ""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8627","12/18/2019 22:13:57",1,"Move selected-tests to python 3.7 ""It recently came up that using Python 3.6 prohibits us from using annotations: https://github.com/mongodb/selected-tests/pull/30#discussion_r359564871     We should move our selected-tests deployment onto Python 3.7 by updating our Docker image.""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-7107","12/19/2019 19:31:25",2,"Design GQL schema ""Final version of the schema depends on getting final version of the mockups from product designer.¬†""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7108","12/19/2019 19:32:43",1,"Map schema to database models ""Design doc:¬†[https://docs.google.com/document/d/1vvvPkIgjgFq4iFq239b37kjzQ-gcf2Xw1suc730SyWo/edit#heading=h.4jq6vrtk2brz]""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7109","12/19/2019 19:34:08",2,"Handle authentication ""Design doc:¬†[https://docs.google.com/document/d/1vvvPkIgjgFq4iFq239b37kjzQ-gcf2Xw1suc730SyWo/edit#heading=h.lazhk4iywuu2]    Handling authentication in graphQL server should be done using middleware to inspect the cookie from incoming requests.¬†""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7111","12/19/2019 19:40:22",1,"Configure CORS in gql server ""Design doc:¬†[https://docs.google.com/document/d/1vvvPkIgjgFq4iFq239b37kjzQ-gcf2Xw1suc730SyWo/edit#heading=h.gzmckhx4wevo]   # Support queries from localhost when in dev or test environment   # Support origin url of spruce""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7112","12/19/2019 19:41:26",1,"Disable introspection in production ""Design doc:¬†[https://docs.google.com/document/d/1vvvPkIgjgFq4iFq239b37kjzQ-gcf2Xw1suc730SyWo/edit#heading=h.4va3kae6h7ev]""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7113","12/19/2019 19:42:16",2,"Support pagination in queries ""This is the full stack feature for supporting pagination in GQL queries between the client and server.    Apollo Client queries for paginated requests include a cursor and the GQL server returns paginated data based on that cursor.    Design doc:¬†[https://docs.google.com/document/d/1vvvPkIgjgFq4iFq239b37kjzQ-gcf2Xw1suc730SyWo/edit#heading=h.yqh5m6v86y8s]""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7114","12/19/2019 19:48:41",2,"Dependency inject mock data connector for integration testing ""Design doc:¬†[https://docs.google.com/document/d/1vvvPkIgjgFq4iFq239b37kjzQ-gcf2Xw1suc730SyWo/edit#heading=h.rpf8yyiq0cg5]    Support integration tests for the server by instantiating a test gql server with the mock data connector""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7115","12/19/2019 19:55:33",2,"Start gql server in evergreen behind feature flag ""Design doc:¬†[https://docs.google.com/document/d/1vvvPkIgjgFq4iFq239b37kjzQ-gcf2Xw1suc730SyWo/edit#heading=h.l5hu22fsyoxi]""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7118","12/20/2019 14:55:11",1,"Add styled lib to Spruce ""Adding the library and some default styles should be enough. The existing styles do not need to be replaced because most of Spruce UI (the patches page) will be deleted once we get the mockups for the new UI.""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7120","12/20/2019 15:36:47",1,"Add distro feature to download legacy agent ""EVG-7119 adds the ability to build a legacy agent on an older Go. We should have a feature to opt a distro into deploying this older agent.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7121","12/21/2019 21:10:02",2,"Add created_date to collections that do not have it ""This would aid in dumping a limited set of data, to aid in creating local Evergreen for development, and also for DR to quickly get a limited set of data up. This does not apply to the logs or test results collections, which are large enough to be ignored for any local Evergreen or DR initial restore.    Remember also add an index on this field.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8476","12/27/2019 18:45:19",1,"test selection should return data as json ""It looks like the test-selection service is returning most of the data as a string instead of json. This will be annoying to consumers of the service and should be changed. See [here|https://selected-tests.server-tig.prod.corp.mongodb.com/projects/evergreen.py/test-mappings?changed_files=src%2Fevergreen%2Futil.py&threshold=0.5] for an example.  ----  As a test-selection consumer,  I want all the data returned as json,  So that I can easily parse it.  ----  AC:  * All endpoints return their data as json.  * Tests are written to ensure this is the case.""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-7127","12/30/2019 16:32:20",1,"Duplicating a project creates empty redacted variables ""If you create a project by clicking """"New Project"""" and selecting """"Duplicate current project"""", the new project will include the keys of the redacted variables from the old project, but their values will be empty. This is confusing for users, as it appears that the redacted variables were copied successfully.""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-7130","01/02/2020 19:35:51",2,"Adding a tag fails before AWS gives us an instance ""Trying to add a tag to a spawnhost before we get an instance fails because we try to add tags to the instance and its resources before they actually exist. It's not made clear to the user what went wrong (the request eventually returns 500).    We should prevent a user from attempting to set tags until the host is provisioning.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7132","01/06/2020 12:33:28",1,"create_time is being over ridden with the default ""The ordering in [getDefaultFiltering|https://github.com/evergreen-ci/evergreen/blob/060c9dac8bf27c860857275185843a0743659d61/public/static/app/perf-bb/SignalProcessingCtrl.js#L38-L45] of __Settings.perf.signalProcessing.persistentFiltering__ and __mandatoryDefaultFiltering__ needs to be swapped in the following extract:     ""","    const getDefaultFiltering = function() {      return _.extend(        {},        secondaryDefaultFiltering,        Settings.perf.signalProcessing.persistentFiltering,        mandatoryDefaultFiltering      );    };  ",0,0,1,0,0,0,0,0,0,0,0,1,0,0,0
"EVG-8624","01/06/2020 16:01:18",2,"Integrate mypy ""As a DAG engineer, I want to know that functions and methods in the selected-tests repo have correct type annotations, so that fewer bugs are introduced to the code base.    AC  * mypy is run through pytest as part of CI""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8849","01/06/2020 16:05:03",2,"Set up Okta user manager ""Similar to the OAuth client for GitHub.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-7138","01/06/2020 18:44:37",2,"Volume attach command times out ""Trying to attach a volume to a host from the CLI consistently times out and cancels the context so the volume never gets attached.  Maybe we should return immediately and optionally subscribe for notifications, similar to what we do for spawning hosts from the CLI.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8884","01/06/2020 18:56:30",1,"Implement user manager logout ""This should clear the user in the database so that evergreen considers them logged out (i.e. delete their cached login tokens). Their Okta login status should be unchanged.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-7139","01/06/2020 20:24:59",1,"Retry failed GQL requests ""Decide on how we should implement apollo-link-retry""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7140","01/06/2020 21:06:02",2,"Update local GQL schema from GitHub as a dev build step ""Conditionally update local GQL schema from evergreen GitHub repo as a dev build step""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7145","01/06/2020 22:28:12",1,"Document VS Code remote development setup and workflow ""Document VS Code remote development setup and workflow""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8562","01/06/2020 22:28:13",2,"Jasper managed daemon processes (auto-restart option on creation) ""Jasper managed daemon processes (auto-restart option on creation)""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-7148","01/06/2020 22:28:13",1,"Start code-server on spawnhosts ""Start code-server on spawnhosts""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7149","01/06/2020 22:28:14",0,"Reverse-proxy code-server through Evergreen app servers ""Reverse-proxy code-server through Evergreen app servers""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7152","01/06/2020 22:28:15",0,"Admins can run a script on groups of hosts ""Admins can run a script on groups of hosts""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7151","01/06/2020 22:28:15",0,"Spawnhost option to mount a volume on a user‚Äôs home directory ""Spawnhost option to mount a volume on a user‚Äôs home directory""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8753","01/06/2020 23:12:26",2,"Switch to FastAPI framework ""As a DAG engineer,  I would like to use FastAPI rather than Flask + flask-restplus to build selected-tests service, so that my endpoints have faster response times and so that coding in the application code is faster and easier to do.    AC:  * Use FastAPI  * Endpoints maintain good documentation equivalent to current flask-restplus documentation  * HTTP requests are logged to stdout so we can see them in Splunk""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-7153","01/07/2020 13:41:06",2,"Add admin settings for Okta auth ""Requires client ID, client secret, issuer, reauthorization TTL, and user group name.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-7154","01/07/2020 13:44:44",0,"Create admin setting to select auth method ""Currently, the auth method is chosen based on which auth fields in the admin settings are populated in {{LoadUserManager}}. It would be nice to be able to manually select one if multiple auth methods are supported.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-8997","01/07/2020 14:35:13",0,"Handle reauthorization after given expiration time ""The current LDAP manager reauthorizes users after a TTL (configured to one hour right now) by checking the user's LDAP groups. The new Okta user manager should also do some kind of periodic checks against Okta.    Checking the user group (in a similar way as LDAP is currentl ydone) requires using the user's access token, which expires after some amount of time. When the token is expired, we have to handle getting a new one. This could potentially be achieved by requesting refresh tokens.    If the access token and refresh token are invalid, then we have to redo authentication to get more tokens.    ¬†    There's also the possibility that we can't use refresh tokens (i.e. due to security policies), so we might have the user go through silent reauthentication (without a login prompt). If we go this route, we have to somehow know where to redirect the user.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-7156","01/07/2020 15:22:43",2,"Integrate Okta user manager ""Mostly this is passing the admin settings to the Okta user manager to create it. Additionally, we have to set the access and refresh tokens with the caching functions.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-8792","01/07/2020 16:34:43",2,"add support for okta ldap to gimlet ""be able to support okta and legacy/standard ldap""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-7159","01/07/2020 18:12:23",0,"Uneject Create React App ""our current version of create react app has been ejected. we should be running a version of create react app that has not been ejected.    The unejected CRA should have:    1) the fractal file layout pattern    2) the same deploy steps as before w/ npm scripts    3) the GQLWrapper and tests    4) environment variable utils    5) New Relic plugin    6) Bugsnag integration    7) absolute imports instead of relative imports    8) same readme as before    9) same npm scripts to start mock & dev server    ¬†""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7163","01/07/2020 20:20:26",2,"Parent hosts shouldn't be running agents ""https://evergreen.mongodb.com/host/i-07f82fbbe9fcfa38c  https://mongodb.splunkcloud.com/en-US/app/search/search?q=search%20index%3Devergreen%20i-07f82fbbe9fcfa38c&display.page.search.mode=verbose&dispatch.sample_ratio=1&earliest=1578426540&latest=1578428377&sid=1578428433.4285417""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7166","01/07/2020 21:55:10",1,"Hide Never expire checkbox when there are 0 unexpirable hosts ""(On the spawn host page)""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-7167","01/07/2020 21:57:41",0,"Send Parser Project over the wire instead of yaml ""For example,¬†[https://github.com/evergreen-ci/evergreen/blob/master/service/rest_version.go#L310]¬†converts ParserProject back into yaml, which won't be necessary when Parser project is done.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7168","01/08/2020 13:18:35",1,"Query linting ""All GraphQL queries on the client should be linted. This can be achieved by using the GQL schema.""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7174","01/08/2020 18:39:04",0,"fix perf charts for stitch (BAAS) ""perf charts still not showing up for projects that do not have legacy perf data (such as stitch)""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-8859","01/08/2020 18:42:15",1,"Implement and persist nonce and state ""For the authentication process, we have to get access/ID tokens so we can authenticate/authorize the user. To do so, we have to temporarily store two secrets (nonce and state) because it is required to get the access/ID tokens when the redirect URI callback is invoked.    The nonce and state should have a TTL since they are not used after the user is authenticated.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-7176","01/08/2020 22:30:47",2,"Automate migrating between instances ""Detach the old instance's home volume and attach it to the new host.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7177","01/09/2020 14:38:16",2,"Create model for storing required Okta auth information ""¬†    Once we've authenticated the user, we need to store each user's token (to find users in the database), access token (for checking groups), refresh token (for getting new access tokens without having to reauthenticate the user), TTL (to reauthorize the user periodically).""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-7178","01/09/2020 15:37:39",1,"Updating a project without projectVars panics ""projectVars is dereferenced [here|https://github.com/evergreen-ci/evergreen/blob/f036124c01bd7de98e2b03e660636d08634a6fe9/service/project.go#L526] and if it isn't found [here|https://github.com/evergreen-ci/evergreen/blob/f036124c01bd7de98e2b03e660636d08634a6fe9/service/project.go#L458], projectVars will be nil.    It's hard to know how a project could have been created without [also inserting projectVars|https://github.com/evergreen-ci/evergreen/blob/f036124c01bd7de98e2b03e660636d08634a6fe9/service/project.go#L636].""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7183","01/09/2020 18:54:21",0,"Cleanup from mbox formatting ""A lot of code from EVG-6592 cases on the fact that old commit queue items won't be mbox formatted. Can now go back and remove that.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-9220","01/10/2020 14:43:34",1,"Manage Okta user cache ""Once the has functions to manage the cache, it should be possible to save access/refresh tokens for later use. The access token can be used to reauthorize the user periodically (like what is currently done for LDAP). Access tokens might be less useful to store since they are very short-lived, while refresh tokens have a much longer lifetime.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-9224","01/10/2020 15:10:22",2,"Instrument Okta calls ""It would be useful to know how long re-authorization of a user takes after they've already logged in. Since users are periodically re-authorized, it would be good to know the impact on page load times.    It would also be valuable to know how long each individual request takes.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-7190","01/10/2020 18:15:59",0,"Commit queue merges without community changes get the wrong commit message ""If a commit queue patch is created that contains no community changes the message will be set to the default patch message [here|https://github.com/evergreen-ci/evergreen/blob/6fd48e04af41e4c05285cac628e4e67d8be95685/operations/patch_util.go#L100], instead of waiting for the message to get filled in when the modules are added.¬†""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7191","01/10/2020 19:19:59",1,"Stranded task job should be able to handle docker containers ""could not check host with timed out task for external termination: error getting cloud status for host container-1691131538922827018: Failed to get container information for host 'container-1691131538922827018': Docker inspect API call failed for container 'container-1691131538922827018': Cannot connect to the Docker daemon at tcp://ec2-34-205-72-241.compute-1.amazonaws.com:2376. Is the docker daemon running?""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7196","01/13/2020 02:47:03",2,"Determine caching mechanism for REST API responses ""It is likely that we will need to make REST API calls in some parts of our application. We should determine how we want to cache responses from these endpoints.""","",0,0,0,1,0,0,0,0,0,0,0,0,0,1,0
"EVG-7205","01/13/2020 14:01:00",0,"Spruce Auth ""Protected routes redirect user to login page if not authenticated   # Login page (nothing special since need designs for final version)   # Auth context/state that holds global auth state about current user   # Auth wrapper for protected routes   # Query response middleware/afterware that updates auth context based on request response""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7199","01/13/2020 14:37:37",2,"Query for Evergreen projects ""Get all Evergreen projects to be displayed in the projects dropdown. Only project name and ID are needed.""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7207","01/13/2020 14:38:28",2,"Query for user's favorites ""Query for user's favorites projects. Only project name and ID are needed.""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7203","01/13/2020 14:48:50",2,"Query for individual task ""Given a task id get all data needed for that task    Separate queries for task metadata and task tests, execution tasks, files and build baron since these will be fetched separately""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7209","01/13/2020 14:51:42",2,"Task page route ""Route for task page `/task/\{taskId}`""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7208","01/13/2020 14:56:09",0,"Tests table "".Queries for the tests for a task. This ticket only includes the table itself. It does NOT include the tabs, i.e. Tests, Execution Tasks, etc    Shows a row for each test with Name, Status and Time. Showing logs for each test done in a separate ticket. Infinite scroll is also in another ticket.    !Task Page - Tests - Branch.png!""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7201","01/13/2020 15:00:10",2,"Sorting tests table updates the URL query params ""When table is sorted, update url query params and re-fetch task tests data""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7206","01/13/2020 15:04:49",2,"Query for task tests ""Given a task ID and sort/filter params, fetch paginated task tests""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7210","01/13/2020 15:20:46",2,"Logs column in Tests table ""HTML button directs user to Lobster    RAW button directs user to raw logs""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-8631","01/13/2020 16:35:54",2,"add default reporting jobs to barque  ""amboy job status  cron setup and addr  system stats  ""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-7213","01/13/2020 17:19:43",2,"Investigate large numbers of TerminateInstance calls to AWS ""We make many calls to TerminateInstances, even more than calls to CreateFleet and RunInstances combined. We should investigate if this is necessary since it eats up AWS API calls and increases host-intent queue length.    The attached image is a search over the past week.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7214","01/13/2020 18:40:33",2,"Enable Copying redacted variables between projects ""Can we add a way to copy REDACTED variables into a different EXISTING project (and leave then redacted)    Potentially, also have a ‚Äúdry-run‚Äù option to tell if a value will or will not change    ""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7215","01/13/2020 20:37:47",1,"Unable to add variables to a new project ""After creating a new project I tried adding two variables and saved the project.  I get a message that the project was saved successfully, but the variables are not there.     If I close down the browser and go back into the project in a new browser window, the new variables still do not show up.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-9240","01/14/2020 14:22:33",2,"Add Okta mock tests ""In order to do this, we have to create a mock HTTP server that can return mock responses for each endpoint.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-9153","01/14/2020 14:31:25",2,"Validate access and ID tokens, acquire refresh token ""The token can be easily verified by using the /introspect endpoint to validate the token. However, this requires one network call per authorization, which has to be done often. If we don't care about performance and number of requests made, this might be good enough.    The best way to do this would be to add application logic for caching and periodic refreshing of the keys from the authorization server. If the access token is expired, get a new one using the refresh token. If the access token key does not match the authorization server key, try getting a new access token first. If the keys still do not match, only then do we try getting the authorization server keys. That way, will only ask for new keys if the validation fails (due to key mismatch) or if the caching TTL has expired.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-7219","01/14/2020 16:20:19",2,"Increase time in queue factor & (maybe) reduce boost for mainline commits ""boost from 48 hrs to 12 or 24""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7220","01/15/2020 14:29:03",2,"Docker host terminated while running a task ""https://evergreen.mongodb.com/task/mongodb_mongo_master_ubuntu1604_container_cwrwc_rc_majority_passthrough_gen_patch_e32c7e7b2a4f8680090616c256b4cd8ad2a047ee_5e1c98e67742ae47a535cea1_20_01_13_16_20_55##%257B%2522compare%2522%253A%255B%257B%2522hash%2522%253A%2522e32c7e7b2a4f8680090616c256b4cd8ad2a047ee%2522%257D%255D%257D""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-9198","01/15/2020 16:13:35",1,"Migrate poplar off of github.com/satori/go.uuid ""It has an insecure randomness vulnerability.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-8701","01/16/2020 18:49:42",1,"Trigger signal processing job in cedar when YCSB added manually ""As a DAG engineer,  I want YCSB metrics being added to cedar to trigger signal processing jobs.  Such that,  Signals get processed.    AC:  * YCSB signals processed when they are updated""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-7226","01/17/2020 00:14:40",2,"s3.put should handle absolute paths to ""local_file"" ""The s3.put command seems to always concatenate the working directory to the {{local_file}} argument.    It may be desirable to use the full path instead of a relative path because the path that {{local_file}} is relative to is not immediately obvious.    See example output here where local_file is ${workdir}/mongod.log    ""","   [2020/01/16 21:14:11.261] Running command 's3.put' (step 2 of 5)   [2020/01/16 21:14:11.308] Putting /data/mci/ec0b598fee99990d3f7316852c57a61e/mongod.log into https://s3.amazonaws.com//mciuploads/perf/linux-wt-standalone/d6dad3428ca5773f8fcb7e75767e4817f7a185dd/performance_linux_wt_standalone_genny_scale_InsertRemove_patch_d6dad3428ca5773f8fcb7e75767e4817f7a185dd_5e20b96857e85a0902b35424_20_01_16_19_28_57/5e20b96857e85a0902b35424/logs/mongod-performance_linux_wt_standalone_patch_d6dad3428ca5773f8fcb7e75767e4817f7a185dd_5e20b96857e85a0902b35424_20_01_16_19_28_57.log   [2020/01/16 21:14:11.308] performing s3 put to mciuploads of perf/linux-wt-standalone/d6dad3428ca5773f8fcb7e75767e4817f7a185dd/performance_linux_wt_standalone_genny_scale_InsertRemove_patch_d6dad3428ca5773f8fcb7e75767e4817f7a185dd_5e20b96857e85a0902b35424_20_01_16_19_28_57/5e20b96857e85a0902b35424/logs/mongod-performance_linux_wt_standalone_patch_d6dad3428ca5773f8fcb7e75767e4817f7a185dd_5e20b96857e85a0902b35424_20_01_16_19_28_57.log [1 of 10]   [2020/01/16 21:14:11.308] Command failed: missing file /data/mci/ec0b598fee99990d3f7316852c57a61e/data/mci/ec0b598fee99990d3f7316852c57a61e/mongod.log: problem opening file /data/mci/ec0b598fee99990d3f7316852c57a61e/data/mci/ec0b598fee99990d3f7316852c57a61e/mongod.log: open /data/mci/ec0b598fee99990d3f7316852c57a61e/data/mci/ec0b598fee99990d3f7316852c57a61e/mongod.log: no such file or directory   [2020/01/16 21:14:11.308]  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7227","01/17/2020 15:02:14",2,"optimize task gql query when testResults is omitted ""only query db for TestResults when testResults is included as a task query field    include integration tests""","",0,0,0,1,0,0,0,0,0,0,0,0,0,1,0
"EVG-8348","01/17/2020 16:39:26",2,"GET Task mappings should return just display tasks, not execution tasks, for generated tasks that are split into display and execution tasks ""Background:  The GET /projects/\{project\}/task-mappings endpoint returns *all* tasks that are related to a list of changed source files. This means that if there is a display task """"replica_sets_large_txns_format"""" that contains numerous executions tasks (i.e. """"replica_sets_large_txns_format_01_enterprise-rhel-62-64-bit"""", """"replica_sets_large_txns_format_02_enterprise-rhel-62-64-bit""""), both the display task and the execution tasks are returned by the endpoint. You can see an example of this if you make a GET /projects/\{project\}/task-mappings request with the src/mongo/db/storage/storage_engine_impl.cpp changed file.    User story:  As a MongoDB engineer, I should be confident that, for generated tasks that are split into display and execution tasks, the selected-tests GET /projects/\{project\}/task-mappings endpoint only returns the display task, and not a display tasks's execution tasks, so that I am not being returned duplicate tasks to run.    AC:  *  Making a GET /projects/\{project\}/task-mappings request with the src/mongo/db/storage/storage_engine_impl.cpp changed file should return the """"replica_sets_large_txns_format"""" task but not its execution tasks""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-7229","01/18/2020 15:10:11",2,"BFGs are created for every stepback commit ""It look like BFGs are being created for every stepback commit instead of the first one that failed. One example is BFG-393900 and BFG-394834. They were created from two consecutive commits on the same variant with the same failing task name and test name.    I have not checked other occurrences of stepback since Jira search in the build baron plugin has been timing out for me.    This is causing pain for build barons and it would be great if it could be prioritized.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7230","01/20/2020 23:46:46",2,"populate logs field in Task gql query ""populate the logs field in Task gql query in Task resolver""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-7235","01/21/2020 14:53:53",0,"Consider region when creating a client ""Now modify GetManagerOptions and fromDistroSettings to choose ProviderSettings by region, although initially can set this always to a default, and potentially other places.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7234","01/21/2020 14:53:53",0,"Cleanup from ProviderSettings move ""Potentially two fields will be considered while moving data in provider settings to a new provider settings variable, so after some point we need to go back and remove support for the old field.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7238","01/21/2020 14:53:54",1,"Add region option to spawn host API routes ""Modify spawn host routes in service.go""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7237","01/21/2020 14:53:54",1,"Specify default spawn host region in User Settings ""Should default to us-east-1, our current default""","",0,1,0,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-7236","01/21/2020 14:53:54",2,"Consider region for Hosts ""Add Region to Host struct, and consider this region when creating a client for a given host document (to create/modify/query a host)""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7241","01/21/2020 14:53:55",1,"Add flag to filter CLI `host list` by region ""Should be optional""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7240","01/21/2020 14:53:55",2,"Add region option to spawn host page ""Should default to the region in UserSettings.If this region isn‚Äôt available for this instance type, should return a helpful error to the user.Add region (or perhaps more helpfully availability zone) to the Spawn Host details card.Should also modify the UI API routes.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7239","01/21/2020 14:53:55",1,"Add region option to spawn host CLI ""Should default to the region in UserSettings.If this region isn‚Äôt available for this instance type, should return a helpful error to the user.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7242","01/21/2020 18:20:33",2,"Improve timeouts in Evergreen ""Timeouts can be confusing, and it is not obvious to users which one was hit.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-7247","01/21/2020 20:59:56",2,"Require explicit confirmation for unexpirable instance and volume deletion ""Perhaps have users type """"delete"""" if they really want to delete, i.e. less automatic than typing y to our usual prompts. This should handle the spawn host page as well as the CLI.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7248","01/21/2020 21:18:33",1,"Cleanup the string copy of a patch from the upload ""When we've concluded most users have updated their CLI past [f03612|https://github.com/evergreen-ci/evergreen/commit/f036124c01bd7de98e2b03e660636d08634a6fe9] we should remove the extra copy of the patch from the upload.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7249","01/21/2020 22:35:47",2,"Docker containers get decommissioned too aggressively ""https://evergreen.mongodb.com/host/container-3894847770651935761""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7250","01/21/2020 22:43:34",1,"Validator should check for empty functions ""Functions without commands cause panics bc we assume that they don't exist (but also they shouldn't exist so the validator should handle this)""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8710","01/23/2020 21:15:50",1,"Add index for signal processing to cedar ""As a DAG engineer,  I'd like an index to cover the queries I issue during signal processing.    AC:  * Cover get performance data queries with an appropriate index""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8722","01/24/2020 14:52:15",1,"Null coalesce rollup statistic values to 0 ""We have experienced failure processing signals in cedar when getting time series with null values in them --> Golang bson driver does not know how to convert these to floats.    As a DAG engineer,  I'd like to coalesce these nulls to 0, such that I can process signals!    AC:  * Null coalesce to statistic values to 0 during performance data aggregation.""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8697","01/24/2020 15:45:06",1,"Log url and auth user when signal processing client fails to detect change points ""As a DAG engineer,  I'd like to log out service url and auth user when failing to detect change points.  Such that,  I can debug failures.""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-7262","01/24/2020 16:58:39",2,"Commit queue tasks aborted by the failure of another task should indicate what task had a real failure ""as it is people waste a lot of time trying to track down the actual error message.""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-7263","01/24/2020 17:16:51",2,"Automatically authenticate user ""Right now, user must login to be authenticated even if they have an evergreen cookie in their browser. The app should automatically authenticate the user if a cookie is present and the user can make successful requests to the API.¬†""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7264","01/24/2020 18:19:24",0,"configurable logging to s3 should not use environment variables ""either shared credentials file or IAM roles.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-8693","01/24/2020 18:21:26",1,"Add resource limits to selected-tests ""We should implement resource limits in Kanopy as described here: https://github.com/10gen/kanopy-docs/blob/master/docs/production_checklist.md#resource-requestslimits    See this ticket for more information about default resource limits: https://jira.mongodb.org/browse/TIG-2051    User story:  As a DAG engineer, I should know that there are resource limits set on the selected-tests service, so that I am following the process advised by the Kanopy docs and so that resources and resource requests are distributed properly across services.    AC:  * selected-tests has resource limits for cpu and memory  * resource limits and resource requests are distributed across services""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8577","01/24/2020 18:24:33",2,"Expose analysis results through cedar API ""As a DAG engineer,  I'd like to expose analysis results through cedar's API, such that, consumers can see them!    AC:  * expose analysis results through cedar's API""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-7271","01/24/2020 20:11:32",2,"Schedule task mutation ""Mutation to schedule a task""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7274","01/24/2020 20:12:43",2,"Restart task mutation ""mutation to restart task""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-8835","01/27/2020 13:55:30",2,"Try using library for access token validator instead of endpoint ""Access tokens can be validated by polling the introspect endpoint but it's slower than using the Okta library to verify the access token. For some reason, the access token doesn't validate when used with the library (it says that its¬†{{kid}}, which is a value used to check which public key to use for decoding, does not match any of the keys returned by the authorization server).""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-8739","01/27/2020 14:46:24",0,"Add rate limited jobs to Amboy ""Right now, there exists a concept of rate limited jobs in the sense that you can set their id with a rounded off timestamp, generating a duplicate key error on collision that you then ignore.    It would be nice if we had some more formal notion of a rate limited job, that doesn't generate errors to handle in the specific case that it is enqueued when another of its type is still in the queue.""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8555","01/27/2020 14:48:01",1,"Don't generate errors due to duplicate keys for recalculate-change-points job queueing ""As a DAG engineer,  I'd like not to generate errors when failing to enqueue a job due to rate limiting.  Such that,  I don't get errors about a system that functions properly!    AC:  * No errors generated due to rate limiting""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-7280","01/27/2020 15:28:16",2,"Query for a Task's files ""query for a tasks files. the files should be grouped by exec task""","",0,0,0,1,0,0,0,0,0,0,0,0,0,1,0
"EVG-7433","01/27/2020 15:34:02",2,"Allow downloading of very long log files ""Using curl (with no timeout)""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7284","01/27/2020 19:42:22",0,"Fix copied host allocator settings ""It has a misspelling in the JS file so it isn't be copied when we clone the distro.""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-7288","01/28/2020 15:45:50",1,"Creating a new project doesn't make it visible in the UI immediately ""Also it adds it to the list of all projects twice""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7289","01/28/2020 16:28:32",2,"Local evergreen server is unresponsive in CI environment ""Making calls to local evergreen server in CI results in a 500 error and an ECONREFUSED error because the local evergreen server is unresponsive. Figure out how to successfully talk to local evg server in ci.¬†""","",0,0,1,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-8342","01/28/2020 16:34:45",0,"LDAP URL is ambiguous ""Since URL parsing is ambiguous, checking the scheme in the LDAP url is insufficient since it might interpret host:port format as the scheme.""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8611","01/28/2020 16:40:44",1,"Fix periodic change point job ""As a DAG engineer,  I'd like to fix the periodic change point job, such that, it works.    AC:  * Periodic change point job works""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8390","01/28/2020 16:49:28",0,"Specify cookie domain when clearing it ""If the cookie domain is not specified when cookies are cleared, it will fail to clear the correct cookie because it will assume the domain is the current domain.""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8708","01/28/2020 17:23:43",1,"Handle case of no measurements ""As a DAG engineer,  I want signal processing for performance results with no recorded measurements not to panic, such that, people don't have to deal with meaningless panics.    AC:  * GetPerformanceData should return empty performance results if no measurements are recorded in the DB.""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-7290","01/28/2020 18:35:32",1,"Catch nil when no user is found ""[Here|https://github.com/evergreen-ci/evergreen/blob/6e3a626a35b044c27bf3af4c62b244d307452a4f/model/project_ref.go#L718]""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8772","01/28/2020 19:10:41",1,"Support sending SIGABRT in Jasper grpc ""Resmoke sends SIGABRT to processes that are configured to archive in the event of a test failure in order to force the creation of a core dump. This doesn't currently seem to be [supported|https://github.com/mongodb/jasper/blob/76466aca6b613c14629889d49c53a5e41efd0655/jasper.proto#L133] for Jasper processes. ""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-7292","01/28/2020 20:54:09",2,"Under load notifications can take a long time to be processed ""We rate limit ourselves to 1000 notifications per notification run, which seems to be not enough. We should be cautious scaling these up though, since this is natural rate limiting of queries against the DB.""","",0,0,0,0,0,0,1,0,0,1,0,0,0,0,0
"EVG-8658","01/30/2020 14:52:57",1,"Retry 499 status codes in change detector ""Sometimes the load balancer for Kanopy returns 499 for timeouts. We should retry these requests since it is usually due to burst activity.""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-7304","01/30/2020 23:40:14",1,"File one BFG per Display Task Instead of Execution Task ""With the Server test suites moving to execution tasks for increased parallellism, the number of BFG tickets has grown accordingly. This is caused by a couple of factors.     First, widespread failures that affect multiple tests in a suite would create X number of BFGs instead of 1.    Second, consistently failing tests are not guaranteed to run in the same execution task, due to the way the knapsack packing algorithm relies on test history information. This prevents backtracking from working and could cause more BFGs to be created for the same failure on different execution tasks""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-9031","01/31/2020 18:55:46",1,"Remove group check from Okta ""It seems like any users who can log into Okta is an employee (which is all we care about), so we don't have to perform the group check that is done in LDAP¬† Therefore, we can remove (or make optional) much of the logic with checking the user's groups from userinfo and validating the access token.    ¬†    It seems like this is somewhat annoying to do because the ID token validation expects a nonce to be provided, but there is none for an ID token received from refreshing tokens. There is¬†[some ambiguity|https://github.com/IdentityServer/IdentityServer4/issues/2180] about what to do since the ID token doesn't have a nonce when we refresh tokens. [This thread|https://bitbucket.org/openid/connect/issues/1025/ambiguity-with-how-nonce-is-handled-on#comment-44979149] suggests that a refresh grant should not return a nonce, so the Okta library may simply be wrong.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-8619","01/31/2020 21:49:45",1,"Reconfigure change point detector retry policy to be lenient ""The change point detector currently retries requests 10 times with a maximum delay between requests of 5 seconds. This is not allowing signal processing service to recover in time when a 499 comes up.    As a DAG engineer,  I'd like to reconfigure the detector to retry 50 times, with a max delay of 5 minutes,  Such that,  the service has time to recover and respond during high load periods.    AC:  * change point detector reconfigured per above.""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-7309","01/31/2020 22:36:07",0,"Mutation to remove favorite project from user ""Given a project id, remove project from user's favorites""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7311","02/03/2020 14:13:49",1,"Only import required antd css ""Install¬†react-app-rewired customize-cra and babel-plugin-import for selective importing    [https://ant.design/docs/react/use-with-create-react-app#Advanced-Guides]""","",0,0,0,1,0,0,0,0,0,0,0,0,0,1,0
"EVG-7313","02/03/2020 16:00:22",2,"TaskTests query returns duplicate keys between paginated queries ""TaskTests query returns duplicate keys across two subsequent pages with the same sort category, direction, and limit¬†""","",0,0,1,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7314","02/03/2020 21:47:04",1,"Failure: test-model-grid on Ubuntu 16.04 (Docker) [Evergreen @ 924ea8ee] (TestFetchFailures) "" h2. [test-model-grid failed on Ubuntu 16.04 (Docker)|https://evergreen.mongodb.com/task/evergreen_ubuntu1604_docker_test_model_grid_924ea8ee4016255a2cdf7496ab5b8284f1fbb899_20_01_06_17_05_58/0] Host: [|https://evergreen.mongodb.com/host/container-34966100467904843] Project: [Evergreen|https://evergreen.mongodb.com/waterfall/evergreen] Commit: [diff|https://github.com/evergreen-ci/evergreen/commit/924ea8ee4016255a2cdf7496ab5b8284f1fbb899]: Revert """"Revert """"Revert """"Revert """"EVG-7119: fix toolchain issues (#2998)""""""""""""""""  This reverts commit 1bfa579f24aff033c49866945ec3f8e71e92f90d. | 06 Jan 20 17:05 UTC Evergreen Subscription: ; Evergreen Event:  *TestFetchFailures* - [Logs|https://evergreen.mongodb.com/test_log/5e138898850e611b0b739ca4] | [History|https://evergreen.mongodb.com/task_history/evergreen/evergreen_ubuntu1604_docker_test_model_grid_924ea8ee4016255a2cdf7496ab5b8284f1fbb899_20_01_06_17_05_58#TestFetchFailures=fail]  [Task Logs | https://evergreen.mongodb.com/task_log_raw/evergreen_ubuntu1604_docker_test_model_grid_924ea8ee4016255a2cdf7496ab5b8284f1fbb899_20_01_06_17_05_58/0?type=T ] ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-7316","02/05/2020 15:04:05",2,"Add UTC as a timezone ""Please add UTC as a timezone in the Evergreen UI so that my Evergreen UI and my logs from build slaves are in the same timezone.""","",0,1,0,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-8485","02/05/2020 21:30:15",2,"Daily update script is creating duplicate mappings instead of updating pre-existing mappings ""Currently, the cronjobs that run daily to update the selected-tests task mappings and test mappings have a bug. When the past day's evergreen versions or git commits, respectively, are analyzed, the newly created mappings are inserted into the db like so:¬†https://github.com/mongodb/selected-tests/blob/a8251a6ab0f880526d7ac27f545c389f3a87c964/src/selectedtests/task_mappings/update_task_mappings.py#L41. This causes an issue because, for source_files with pre-existing mappings, the mapping should be updated, not inserted.    The resulting duplicates are visible from running these queries:        User story:  As a MongoDB engineer, I should know that there will not be duplicate test mappings or task mappings in the selected-tests database, so that the data which I am using to run my selected tests patch builds is clean.    AC:  * No one source_file should have two entries in either the test_mappings or task_mappings collection  * Put unique index on source file field  * Clean database and rerun code once bug is fixed""","  db.test_mappings.aggregate({ $group: {_id: {source_file: '$source_file'}, count: {$sum: 1}}})  db.task_mappings.aggregate({ $group: {_id: {source_file: '$source_file'}, count: {$sum: 1}}})  ",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-7318","02/05/2020 23:33:05",2,"Figure out how to get Cypress to match on the body of a Post ""There are probably ways we can workaround this issue    [https://github.com/cypress-io/cypress/issues/3755]""","",0,0,0,1,0,0,0,0,0,0,0,0,0,1,0
"EVG-7320","02/06/2020 09:24:35",1,"Difficulties changing timezone ""I wanted to change timezone to """"Central European Time"""", but I couldn't due to false-negative form validation (error says """"Please fill out all required fields before submitting""""):     !timezone.png|thumbnail!     I turns out the fields requiring values are hidden and only visible if I toggle on and off the """"Opt In to New Patch Page"""" checkbox.     !required-fields.png|thumbnail!     It might be related that I previously toggled this checkbox on to see how the new patch page looked.""","",0,0,1,0,0,0,0,0,0,0,1,0,0,1,0
"EVG-7321","02/06/2020 13:51:06",2,"Running command 'archive.targz_extract' fails on the Node.js archive ""I am downloading Node.js in a specific version:    And I was trying to extract it using the ‚Äúarchive.targz_extract‚Äù command in evergreen:    But I get the following error:    The error seem to be thrown if an unexpected type of item is being extracted from the archive (see¬†[https://github.com/evergreen-ci/evergreen/blob/master/util/artifacts_tar.go#L209-L211]). Are the any (undocumented) limitations to the ‚Äúarchive.targz_extract‚Äù command?""","curl https://nodejs.org/dist/v10.19.0/node-v10.19.0-darwin-x64.tar.gz --output node.tgz  - command: archive.targz_extract    params:      path: """"node.tgz""""      destination: """"node""""[2020/02/06 13:11:05.375] Running command 'archive.targz_extract' in """"install node.js"""" (step 2.2 of 5)  [2020/02/06 13:11:06.196] Command failed: problem extracting '/data/mci/07462cdf3e08015e1aea828c8ca41aa5/node.tgz': error extracting /data/mci/07462cdf3e08015e1aea828c8ca41aa5/node: Unknown file type in archive.  [2020/02/06 13:11:06.196] Task completed - FAILURE.",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-9204","02/06/2020 16:26:34",2,"migrate cedar and barque to simple service users ""Ideally, we would use Okta service users for this. However, since Okta service accounts are not ready yet and LDAP is imminently going to lose support, we have to implement service users in the same way as is currently done for evergreen as a stopgap.    ¬†    Note: after the mgiration is complete, regular users who were relying on their LDAP credentials will no longer be able to auth and they'll have to ask us for service users.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-7323","02/06/2020 16:59:12",1,"Commit queue includes file summary in commit messages ""If a commit contains new or moved files the commit message includes a record of the added/moved files.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7327","02/07/2020 02:13:44",2,"Query to retrieve a single patch ""Given a patch id, get the patch metadata""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7328","02/07/2020 02:15:25",2,"Add version displayName to task query ""The breadcrumb on the task route needs to show the displayName of the patch it belongs to. Add the version's displayName to the task query so it can be passed to the TaskBreadcrumb component""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7329","02/07/2020 14:53:11",0,"Distro API routes should use multiple provider settings ""When creating/modifying distros.¬†    Should also check that the default instance type is valid for the region.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7331","02/07/2020 18:40:21",2,"Migrate usernames and deploy Okta to prod ""Once we turn on Okta, we have to migrate all the non-conformant LDAP names to their new Okta names.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-7332","02/07/2020 18:42:03",1,"Enable mac static host provisioning ""Should start on the distros with the smallest host pools to increase confidence.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-7333","02/07/2020 18:43:52",2,"Write docs for virtual workstations ""This goes in the employee wiki.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-7334","02/07/2020 18:46:25",2,"Clean up host provisioning ""For example, some of the logic done in the provisioning setup job should probably be cleaned up.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-7335","02/07/2020 21:25:55",0,"Make static host authorized keys path configurable ""Right now it's hard-coded as {{~/.ssh/authorized_keys2}}, but this can be changed.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-7336","02/07/2020 21:46:26",1,"Re-add vet shadow to linters ""It's currently disabled. The previous incarnation of it in gometalinter was enabled, but half-baked and barely worked.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-7337","02/08/2020 00:02:06",1,"Toggle from new UI to legacy UI ""* If I am on 'my-patches' route then clicking toggle should bring me to 'my patches' in legacy UI   * If I am on 'patch' route then clicking toggle should bring me to 'patch' in legacy UI   * If I am on 'task' route then clicking toggle should bring me to 'task' in legacy UI""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7338","02/08/2020 00:03:56",1,"Toggle from legacy UI to new UI ""PAGES UNSUPPORTED BY SPRUCE WILL NOT HAVE A LINK IN THE NAVBAR    Link in navbar that goes to corresponding Spruce page""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7339","02/08/2020 00:09:16",2,"Layout of the Task and Patch routes ""The patch and task routes have the same layout.¬†   # Header   # Left sider   # Content    Use antd layout""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7340","02/08/2020 00:10:39",2,"Catch-all route that shows 404 for unknown routes ""If I go to a route that does not exist then I should see a 404 page¬†""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7341","02/08/2020 00:15:00",2,"Toast feature to show errors ""When an occurs, such as an internal server error from trying to favorite a project, show a toast message for that error.    Use context to implement. Should be able to use it like:  ""","  try {    doSomethingAsync()  } catch(e) {    toast.error(e.message)  }",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7343","02/08/2020 01:24:16",0,"Patch header and metadata ""Use data from patch query to render the patch name in header and the metadata in left sider""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7344","02/08/2020 01:25:17",2,"Query for patch tasks ""given a patch id, get all tasks for that patch in the shape specific in UI for tasks table""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7345","02/08/2020 01:32:50",2,"Patch tasks table ""Use data from patch tasks query to render the tasks table.""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7346","02/08/2020 01:36:11",2,"Query for patch tasks sorted by name ""Accept a name parameter in query for name that is either ascending or descending.""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7347","02/08/2020 01:36:54",2,"Query for patch tasks sorted by status ""Accept param in query to sort by ascending or descending""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7348","02/08/2020 01:37:23",2,"Query for patch tasks sorted by variant ""Accept param in query to sort by variant asc or desc""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7351","02/08/2020 01:40:47",1,"Status of patch auto updates ""When the status of a patch updates, the UI should update to reflect it""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7353","02/08/2020 01:45:41",2,"Add modify version mutations to patch buttons ""Show buttons for schedule, unschedule, abort and restarting a patch. Disable buttons based on status.¬†""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7359","02/10/2020 13:39:01",2,"Upgrade to Cypress 4.0 ""Cypress is currently at 3.8.2 which has known issues running on Ubuntu 18.04. Upgrade Cypress to version 4.0 and then change the variant in Evergreen from Ubuntu 16.04 to 18.04. Cypress 4.0 fixes known bug in Ubuntu 1604.""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-9267","02/10/2020 14:18:01",2,"Use golangci-lint in all repos ""This is already being used in the main evergreen repo and in Jasper.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-7360","02/10/2020 15:05:30",0,"Preserve reprovisioning state until host is reprovisioned ""Right now, the host allocator will clear the  reprovisioning state without checking if the host already needs reprovisioning.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-8917","02/10/2020 16:43:23",1,"Fix windows file handling¬†in tests ""Test failure: https://evergreen.mongodb.com/task/jasper_windows_test_jasper_1475c6ddedb0af97b9a57b1bed704da25ac5f3cc_20_02_09_19_20_08""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-7362","02/10/2020 16:55:00",1,"Create alert for 30% of GitHub API limit ""We currently don't have good visibility into how much of our GitHub API limit we're using. As more projects enter Evergreen, we may get close to our limit and not realize it. We should make the log statement structured. (Currently it looks like """"message:¬†Github API response: 200 OK. Rate limit: 4412/5000"""".) And we should create an alert for if we get below some threshold (1500?). Once that happens, we should begin planning our approach.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7363","02/10/2020 16:55:47",1,"Full page loading screen ""Currently the full page loading screen is just the work """"LOADING..."""". We should get designs to show a loading spinner.""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-8640","02/10/2020 19:22:51",2,"Fix timeout handling in cedar change point detector ""Sometimes our service times out and returns a 499 status code. This appears to not make it through to cedar, and an [error is generated|https://github.com/evergreen-ci/cedar/blob/master/perf/change_point_detector.go#L136]. Probably the fix consists of configuring the client timeout properly.    As a DAG engineer,  I'd like to fix whatever is going wrong, such that, it works.    AC:  * Retrying timeouts properly""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-7365","02/11/2020 13:33:04",1,"Fix rsync test on Windows ""The rsync binary on Windows is the cygwin rsync binary, so it only accepts cygwin paths and not native Windows paths.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7366","02/11/2020 14:42:49",1,"Setting a host to unexpirable panics """"","  gimlet/middleware_grip.go:177  runtime/asm_amd64.s:523  runtime/panic.go:513  runtime/panic.go:82  runtime/signal_unix.go:390  service/spawn.go:318  service/ui.go:389  net/http/server.go:1964  negroni/negroni.go:46  negroni/negroni.go:29  negroni/negroni.go:38  negroni/negroni.go:38  service/middleware.go:260  gimlet/middleware_wrapper.go:16  negroni/negroni.go:38  negroni/negroni.go:38  service/middleware.go:136  gimlet/middleware_wrapper.go:16  negroni/negroni.go:38  negroni/negroni.go:86  mux/mux.go:212  negroni/negroni.go:46  negroni/negroni.go:29  negroni/negroni.go:38  negroni/negroni.go:38  negroni/static.go:34  negroni/negroni.go:38  negroni/negroni.go:38  negroni/static.go:34  negroni/negroni.go:38  negroni/negroni.go:38  gimlet/middleware_auth.go:37  negroni/negroni.go:38  negroni/negroni.go:38  gimlet/middleware_auth_user.go:209  negroni/negroni.go:38  negroni/negroni.go:38  gimlet/middleware_grip.go:192  negroni/negroni.go:38  negroni/negroni.go:86  net/http/server.go:2741  net/http/server.go:1847  runtime/asm_amd64.s:1333 ",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-7371","02/11/2020 18:59:11",1,"Commit Queue strips windows line endings from patches ""If a patch is submitted with a windows line ending the extra \r is removed from the patch by git mailsplit. This causes 1) patches to not apply, and 2) lines to be committed without windows line endings.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8782","02/11/2020 19:53:54",1,"Use new putunique API in cedar/amboy ""As a DAG,  I would like to use the new putunique API from amboy in cedar,  such that, we don't generate errors due to duplicate jobs being enqueued (these trigger alerts).    AC:  * Use new putunique API when enqueueing recalculate change points jobs.""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-7376","02/12/2020 11:16:20",2,"Enterprise module fails to compile - manifest lost? ""Consider following 3 builds:    Base commit, Jan 31: https://evergreen.mongodb.com/version/sys_perf_23603867ca8e968453683a9dc55c72a32e3cb0b5  Patch 1, Jan 31: https://evergreen.mongodb.com/version/5e3435cbe3c33137bd061b9c  Patch 2, Feb 10: https://evergreen.mongodb.com/version/5e416147e3c331076ef691b7    Manifest shows following revisions for enterprise module:  Base: 4ef3662babc  Patch 1: 4ef3662babc  Patch 2: af509c51bc2373    Consequently, Patch 2 fails to compile.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7377","02/12/2020 15:20:16",1,"Check if agent monitor is still alive before attempting deploy ""Most agent monitor deploys that occur during app server deploys are not actually necessary, especially during high times of churn (i.e. daily app server deploys). The job should no-op if the agent monitor is still running in Jasper, and assume the agent will come up and contact the app server if given enough time.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8615","02/12/2020 15:24:04",1,"Handle inconsistent timestamp format from the evergreen api ""The evergreen API returns different timestamp format for the """"create_time"""" field. It sometimes includes milliseconds and sometimes does not. Which means that we frequently fail to parse the timestamp because we are getting an expected format. We need to be able to detect when the format is different and handle it appropriately.    ----    As an evergreen api user  I want the api client to be able to handle different date formats  So that I can handle when evergreen returns different date formats.    ----    AC:  * The api client can handle when evergreen returns date format without milliseconds as well as when it returns them with milliseconds.""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-7378","02/12/2020 16:24:32",1,"Failure: coverage on Coverage [Evergreen @ 7ec94b3e] (TestGetRevisionsSinceWithPaging) ""h2. [coverage failed on Coverage|https://evergreen.mongodb.com/task/evergreen_coverage_coverage_7ec94b3eb3377a60aa93fffc9cf8feae8261670f_20_02_12_14_14_50/0]  Host: [ec2-34-207-144-162.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/i-0e949e59eb0cca13c]  Project: [Evergreen|https://evergreen.mongodb.com/waterfall/evergreen]  Commit: [diff|https://github.com/evergreen-ci/evergreen/commit/7ec94b3eb3377a60aa93fffc9cf8feae8261670f]: Increase time until unresponsive agent monitor attempts to deploy (#3149) | 12 Feb 20 14:14 UTC  Evergreen Subscription: ; Evergreen Event:   *TestGetRevisionsSinceWithPaging* - [Logs|https://evergreen.mongodb.com/test_log/5e440ac77742ae6aeb621482] | [History|https://evergreen.mongodb.com/task_history/evergreen/evergreen_coverage_coverage_7ec94b3eb3377a60aa93fffc9cf8feae8261670f_20_02_12_14_14_50#TestGetRevisionsSinceWithPaging=fail]    [Task Logs | https://evergreen.mongodb.com/task_log_raw/evergreen_coverage_coverage_7ec94b3eb3377a60aa93fffc9cf8feae8261670f_20_02_12_14_14_50/0?type=T ]  ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-7379","02/12/2020 16:39:37",2,"Failure: test-rest-client on Windows [Evergreen @ 7ec94b3e] (TestLogSenders) ""h2. [test-rest-client failed on Windows|https://evergreen.mongodb.com/task/evergreen_windows_test_rest_client_7ec94b3eb3377a60aa93fffc9cf8feae8261670f_20_02_12_14_14_50/0]  Host: [ec2-54-242-24-13.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/i-02e538b76ca87fa7b]  Project: [Evergreen|https://evergreen.mongodb.com/waterfall/evergreen]  Commit: [diff|https://github.com/evergreen-ci/evergreen/commit/7ec94b3eb3377a60aa93fffc9cf8feae8261670f]: Increase time until unresponsive agent monitor attempts to deploy (#3149) | 12 Feb 20 14:14 UTC  Evergreen Subscription: ; Evergreen Event:   *TestLogSenders* - [Logs|https://evergreen.mongodb.com/test_log/5e44093b306615219ac16c40] | [History|https://evergreen.mongodb.com/task_history/evergreen/evergreen_windows_test_rest_client_7ec94b3eb3377a60aa93fffc9cf8feae8261670f_20_02_12_14_14_50#TestLogSenders=fail]    [Task Logs | https://evergreen.mongodb.com/task_log_raw/evergreen_windows_test_rest_client_7ec94b3eb3377a60aa93fffc9cf8feae8261670f_20_02_12_14_14_50/0?type=T ]  ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-7380","02/12/2020 19:32:27",1,"Reusable typography components ""Each piece of text in the app should be able to be classified. For example, """"My Patches"""" on patches page, and display name on task page are both h1's. The task/test names in the table are the same. Instead of assigning font size to each typography element rendered, we should be able to render a typography element.¬†   # Classify each piece of typography   # Make reusable typography components based on those classifications""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7385","02/13/2020 15:26:08",1,"Add Validation to attach_artifact ""If a user attaches an artifact through the¬†attach_artifact command and supplies their own link to a file, as opposed to doing it through the s3_put command, they should not be able to set Visibility to """"signed"""".    The motivation:¬†  When a user attaches a file that way, it can be a link to GitHub, a wiki page, or any arbitrary link. Since it's not a url that we generated and uploaded to s3, we cannot sign it.¬†    Even if the link they are provided IS an s3 link, we still can't sign it, unless we expand the params to also take in the aws key and secret that they used to upload the file with. However, in that case, if that is the functionality that they are looking for, it would make more sense for them to upload it using the s3_put command than to hack attach_artifacts to behave like s3_put with visibility set to signed.¬†""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7387","02/13/2020 19:38:48",1,"Evergreen fetch for Windows spawn host uses incorrect path ""The working directory needs to be a native Windows path in order to open the file, but it's actually specified as a cygwin-style (i.e. Unix) directory path. This has not been a problem up until now because almost all files go into {{/data}}, which is fine because {{/data}} can be found at the root of the C drive as well.    ¬†    This only affects legacy SSH hosts.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7388","02/13/2020 21:42:38",0,"Query for task logs ""GQL Query for task logs in Task Page    ¬†""","",0,1,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7389","02/13/2020 21:45:11",2,"render task logs in task page¬† ""Render logs under the logs tab like so:""","",0,1,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7390","02/13/2020 21:48:03",2,"Files table in tasks page ""create a table with filter support !Screen Shot 2020-02-13 at 4.46.56 PM.png!""","",0,1,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7393","02/13/2020 22:22:00",2,"Task metadata panel ""render task metadata side panel. confirm the displayed in the screen shot is from a finalized design¬†""","",0,1,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-8944","02/14/2020 12:39:28",0,"Run ssh client with non-interactive flags ""Since the SSH client runs without user input, it has to disable pty allocation and logs.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-7396","02/14/2020 16:29:52",0,"Move local SSH key update job population ""It should go in `startSystemCronJobs`.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-7397","02/14/2020 21:34:06",1,"Version build errors are not exposed in API ""If I go to  https://evergreen.mongodb.com/version/mongoid_7.0.0_53e15f580edc4f281b826327ecbaff8e10d8c9a6 I see this error message:        This information appears to be written into the page html, as follows:        When I retrieve this version via the API, it has no error information:          Is there another place in API where this error information is exposed? If not can it be added to the API please?""","   1 error in configuration file  - 'mongoid-7.0.0' project's 'install dependencies' function contains no commands    <script type=""""text/javascript"""">    window.version = {""""Version"""":{""""id"""":""""mongoid_7.0.0_53e15f580edc4f281b826327ecbaff8e10d8c9a6"""",""""create_time"""":""""2020-02-14T19:34:54Z"""",""""start_time"""":""""0001-01-01T00:00:00Z"""",""""finish_time"""":""""0001-01-01T00:00:00Z"""",""""revision"""":""""53e15f580edc4f281b826327ecbaff8e10d8c9a6"""",""""author"""":""""Oleg Pudeyev"""",""""author_email"""":""""39304720+p-mongo@users.noreply.github.com"""",""""message"""":""""MONGOID-4833 omit testing on ruby-head for now (#4725)\n\nCo-authored-by: Oleg Pudeyev \u003cp@users.noreply.github.com\u003e"""",""""status"""":""""created"""",""""order"""":114,""""ignored"""":false,""""owner_name"""":""""mongodb"""",""""repo_name"""":""""mongoid"""",""""branch_name"""":""""7.0.0-stable"""",""""repo_kind"""":""""github"""",""""identifier"""":""""mongoid-7.0.0"""",""""remote_path"""":"""".evergreen/config.yml"""",""""requester"""":""""gitter_request"""",""""errors"""":[""""'mongoid-7.0.0' project's 'install dependencies' function contains no commands""""]},""""Builds"""":[],""""ActiveTasks"""":0,""""repo_owner"""":""""mongodb"""",""""repo_name"""":""""mongoid"""",""""time_taken"""":0,""""makespan"""":0};    window.canEdit =  false ;    window.plugins = {""""manifest"""":null}    window.jiraHost= """"jira.mongodb.org""""    window.hasBanner =  false     window.user =  null   </script>    (byebug) @version.info  {""""version_id""""=>""""mongoid_7.0.0_53e15f580edc4f281b826327ecbaff8e10d8c9a6"""", """"create_time""""=>""""2020-02-14T19:34:54Z"""", """"start_time""""=>nil, """"finish_time""""=>nil, """"revision""""=>""""53e15f580edc4f281b826327ecbaff8e10d8c9a6"""", """"order""""=>114, """"project""""=>""""mongoid-7.0.0"""", """"author""""=>""""Oleg Pudeyev"""", """"author_email""""=>""""39304720+p-mongo@users.noreply.github.com"""", """"message""""=>""""MONGOID-4833 omit testing on ruby-head for now (#4725)\n\nCo-authored-by: Oleg Pudeyev <p@users.noreply.github.com>"""", """"status""""=>""""created"""", """"repo""""=>""""mongoid"""", """"branch""""=>""""7.0.0-stable"""", """"build_variants_status""""=>nil, """"requester""""=>""""gitter_request""""}  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7400","02/18/2020 19:01:23",2,"Empty patches error in git.getproject ""The `git.getproject` command is trying to apply empty patches.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8361","02/19/2020 19:54:25",2,"Handle inconsistent timestamps and missing manifests in cronjobs/process_task_mapping_work_items.sh script ""I was running the¬†cronjobs/process_task_mapping_work_items.sh scripts today and noticed some new errors. Evergreen has changed their create_time format (addressed in¬†MAKE-1156) so we need to use a more updated version of evergreen.py. Additionally, create_time is now stored in a format that is UTC offset-aware. Finally, evergreen versions like [this one|[https://evergreen.mongodb.com/rest/v2/versions/mongodb_mongo_master_f31bc89f66632b2d521be2d076dc23f94ff663eb]] raise an [error when getting manifest|[https://evergreen.mongodb.com/plugin/manifest/get/mongodb-mongo-master/f31bc89f66632b2d521be2d076dc23f94ff663eb]], so we need to handle this exception better.    As a mongoDB engineer, I should be able to add my project to the selected-tests task mappings queue, and know that it will process 6 months of data without erroring, so that I have task mappings to work with.    AC:  * Running the following steps does not error:  ""","  curl -X POST """"http://localhost:8080/projects/mongodb-mongo-master/task-mappings"""" -H """"accept: application/json"""" -H """"Content-Type: application/json"""" -d """"{ \""""source_file_regex\"""": \""""^src/mongo\"""", \""""module\"""": \""""enterprise\"""", \""""module_source_file_regex\"""": \""""^src\"""", \""""build_variant_regex\"""": \""""^\!\""""}""""  ./cronjobs/process_task_mapping_work_items.sh  ",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-7408","02/19/2020 20:38:53",2,"Task is blocked on duplicate dependencies ""A task was created with a duplicated dependency. When the depended-on task failed the three copies of the dependency were all set unattainable in the depending task. When the depended-on task was restarted and passed only the first instance of the dependency was set unattainable false in the depending task, so it's still blocked and won't run.    Arguably the main issue is the duplicated dependency.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7412","02/20/2020 14:48:56",1,"Set retry limit on background reauthorization ""If it fails after some number of attempts, it should log the user out (i.e. clear the login cache).""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7413","02/20/2020 19:01:21",2,"Filter test table based on test name input and status dropdown ""taskTests query already supports these things, these are Spruce changes only.    should store these options as query params so we can link to the table state directly""","",0,1,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7415","02/20/2020 19:40:44",2,"GQL Query for patch code changes ""query for code changes by patch id¬†""","",0,1,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7422","02/21/2020 13:02:29",2,"Allow task group setup to be pulled from s3 ""Once the setup has run for one task group, it should be uploaded to s3 so other hosts can pull the setup without having to run through the entire setup.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7423","02/21/2020 13:05:18",2,"Add command to restore directory using pail ""Once the agent has uploaded the working directory to s3,¬† we should be able to retrieve it by its task/execution.""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7424","02/21/2020 13:10:01",2,"Upload task working directory to s3 ""The agent should use the command to save a directory using pail to upload the task's working directory.""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8988","02/21/2020 13:12:00",2,"Run test patches using barque ""This will iron out any bugs in the service in preparation for using it for releases.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-7426","02/21/2020 15:30:33",2,"Add icecream scheduler domain name to distro settings and add route to edit config file ""We have to do this so that icecream compile nodes can get a config with the correct domain name to connect to the load balancer.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-8720","02/21/2020 16:54:33",0,"Create manager that allows multiple auth methods ""We should be able to combine auth methods into a single user manager. Multiple auth only applies to getting users, not creating new users (to avoid possibly creating multiple users).""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-7428","02/21/2020 17:01:31",2,"Investigate slow task performance on macos with new provisioning ""Example task failure: https://evergreen.mongodb.com/task/mongo_c_driver_darwin_debug_compile_compression_zlib_0bcde05863e482aa08adf29a9a1b98fd533f8942_20_02_19_19_56_09""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-7429","02/21/2020 18:21:32",1,"Virtual workstations should be unexpirable by default ""If the user has unexpirable hosts remaining a virtual workstation should be set to unexpirable on creation.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-9254","02/21/2020 18:48:14",1,"Make launch daemons with user security session ""[This StackOverflow question|https://stackoverflow.com/questions/47582989/launchd-not-able-to-access-mac-os-keychains] (also [this one|https://stackoverflow.com/questions/6827874/missing-certificates-and-keys-in-the-keychain-while-using-jenkins-hudson-as-cont/9482707#9482707]) says that we need to use {{SessionCreate}} in order to have access to the user login keychain (i.e. {{~/Library/Keychains/login.keychain-db}}).""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-7432","02/21/2020 19:56:19",2,"Enable CORS on evg auth endpoints ""The auth endpoints are the only REST endpoints that Spruce talks to (aside from the gql endpoint). These endpoints will need to allow CORS from spruce.mongodb.com to work in staging and in production.¬†    When I first tried working on this, I ran into issues with auth not working as expected anymore. I was able to login and logout, however the user cookie was not being removed on logout. This caused tests to fail.""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-9239","02/24/2020 14:24:56",0,"Convert usernames when making requests against LDAP ""We have to truncate usernames to be firstname.lastname for compatibility with the existing evergreen users. As the inverse operation, we have to also reconvert them back to their actual usernames when making requests to LDAP Okta (so they're in firstname.lastname@email form).""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-7437","02/24/2020 14:39:09",2,"Add distro UI option to reprovision Jasper on all hosts on save ""Jasper is automatically restarted when all hosts need new credentials. However, there should be an option to mark all hosts in the distro as needing Jasper to be reprovisioned (e.g. for critical Jasper service updates). The Jasper restart job will have to get the latest curator binary for this. This restart should still have lower priority than the provisioning type conversion jobs.    Also, maybe it would be nice to have a restart button on the host page so we don't have to roll over the entire distro host fleet.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7438","02/24/2020 15:24:03",1,"Commit queue misses a nil patch ""If the commit queue tries to process a non-existent patch it will panic instead of dequeueing.    We should catch the [nil patch case|https://github.com/evergreen-ci/evergreen/blob/a636d364299d42dd6a710a4f4ece931ea04d50e8/units/commit_queue.go#L273] and probably {code:go}defer dequeue(){code}   too.""","defer dequeue()",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7439","02/24/2020 15:26:34",1,"Require rootdir for all Windows provisioning types ""Currently it's not required on legacy provisioned Windows hosts. However, it would greatly reduce the amount of complexity in specifying Windows if we used native paths to files more consistently instead of using Unix-style paths and paths relative to HOME in some (but not all) of the relevant places (excluding binaries, which must be invoked with Unix-style paths).""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7442","02/24/2020 20:27:06",2,"Attempt to give task directory write permissions before removing ""On static hosts, many task directories are not being cleaned up because files/directories in tasks directories are set to read-only permissions. This is bad, because it's currently filling up the disk space on the mac hosts. When the agent starts up, it tries to clean up the whole directory since it has {{--cleanup}}, which can spend a substantial amount of time doing wasteful work (for example, on the latest deploy, a macos-1012 host took more than 15 minutes before it started attempting because it had 32GB of uncleaned task directories that it tried removing). During startup, there is no heartbeat to the app server during this time to tell it that the agent is alive, so after a long period of no communication, the app server might try to deploy again on top of the agent, which is actually alive but stuck in cleanup mode.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7443","02/25/2020 16:41:25",0,"Ensure tasks cannot be put in multiple task queues ""Scheduled tasks should not be able to go into multiple task queues. Otherwise, the scheduler may over-allocate hosts (which it bases off of the primary task queue lengths).""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-9135","02/25/2020 16:57:09",2,"Create API user manager from basic user manager ""We need a user manager that can auth in service users to make API requests, but not log into the UI with them. The naive user manager almost does this, but not quite.    The source of truth for the special """"service"""" manager should be the pre-populated list of users from settings, not the database.¬† Right now, the naive manager takes some info from the list but also logs in users who exist in the users collection. Essentially, we should have the same manager but only with the ability to use the API (using the pre-populated api key from the settings).""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-7444","02/25/2020 17:04:04",0,"Fix errors on spawn host page ""There's a lot of errors saying {{$scope.curHostData}} is undefined.""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-7445","02/25/2020 18:38:48",2,"Update the visibility parameter on the wiki to include the signed option ""Update the wiki.¬†¬†    [https://github.com/evergreen-ci/evergreen/wiki/Project-Commands#s3-put¬†|https://github.com/evergreen-ci/evergreen/wiki/Project-Commands#s3-put]    ¬†    Change from:¬†    To:¬†    Since I would be making this change directly in the UI (as opposed to with a PR), please approve here. I'm therefore changing the status of this ticket to """"in code review"""", even though there is not code.    ¬†""","-  ``visibility``: one of """"private"""", which allows logged-in users to see the file; """"public"""" (the default), which allows anyone to see the file; or """"none"""", which hides the file from the UI for everybody.  visibility: one of """"private"""", which allows logged-in users to see the file; """"public"""" (the default), which allows anyone to see the file; """"none"""", which hides the file from the UI for everybody; or """"signed"""", which displays a pre signed url, allowing logged-in users to see the file (even if it's private on s3). Visibility: signed should not be combined with permissions: public-read or permissions: public-read-write"""".     ",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-9087","02/25/2020 19:07:47",0,"POST to login instead of GET ""Removing the GET route in cedar will be future work once clients have had sufficient time to update.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-9148","02/25/2020 19:09:17",0,"Remove GET route for login ""This should be done after clients have had time to update.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-9179","02/25/2020 22:52:14",1,"Run Jasper without resource throttling ""According to [this post|https://apple.stackexchange.com/questions/322557/why-is-an-application-running-so-slowly-when-started-with-launchctl], one possible source of slowness when Jasper processes are run is that they're being throttled as launch daemons is launchd thinks they're background processes. We should try running with {{ProcessType}} set to {{Interactive}} to see if performance improves.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-7451","02/26/2020 15:05:55",1,"Include log links for previous executions ""We got a BFG (https://jira.mongodb.org/browse/BFG-480805) for a failure of a task that has 4 executions. The BFG was specifically related to the 3rd execution. When we query the API to get the logs for that execution, they are all null (https://evergreen.mongodb.com/rest/v2/tasks/mongodb_mongo_master_enterprise_ubuntu1804_arm64_sharding_3_enterprise_ubuntu1804_arm64_f83f9dcc22156cdf3c3e16a040914806e2e17cf7_20_02_25_04_29_47?fetch_all_executions=1).    It looks like all previous executions have null for the log links. Would it be possible to include the log link in the API?""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7453","02/26/2020 15:44:04",2,"Render placeholder cell filter values when the cell is empty (and the filter uses a default value). ""When using the Perf Baron pages, some of the filter cells have defaults when they are empty (e.g.the create time defaults to 2 weeks ago).¬†¬†    When a value is defaulted we should set a placeholder so that it is obvious what filter is being used.    ¬†    ¬†""","",0,1,0,0,0,0,0,0,0,0,0,1,0,0,0
"EVG-8780","02/26/2020 18:26:21",1,"Add replicaCount, liveness and readiness Probes to selected-tests ""I realized recently we are missing some Kanopy configuration elements in the selected-tests service.    As a DAG engineer, I should specify replicaCount to be 2 (it is currently 1), so that the selected-tests service is available during deploys.  As a DAG engineer, I should also configure [liveness and readiness probes|https://github.com/10gen/kanopy-docs/blob/29771cc7a3c2cf35e6af2a99f67cab3c8c346ef3/docs/application_configuration.md#configure-k8s-liveness-and-readiness-probes] so that the scheduler is able to understand when new pods are ready to service requests, reducing downtime during deploys.    AC:  * replicaCount is set to 2 in prod.yml and staging.yml  * liveness and readiness probes are configured  ""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-7455","02/26/2020 18:33:53",0,"Prioritize commit queue patches over normal patches ""Commit queue patches are the most important to schedule quickly and shouldn't block behind ordinary user patch builds.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7458","02/26/2020 20:07:16",2,"Replace DescribeInstances with instance metadata ""We can save on DescribeInstances calls (and avoid API limits) by getting the data about the instance from [instance metadata|https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html] from within the agent and posting it back to Evergreen. This would also effectively remove the need for the setup host job to run for user data.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7462","02/26/2020 21:27:06",2,"Add priority to notifications ""We should add a priority field to notifications and sort on it when we pull the next batch of unprocessed notifications. This will help address commit queue notifications not being processed.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7464","02/27/2020 12:00:48",2,"Project Triggers are using the wrong commit ""When a build is triggered from a different project, the commit for the trigger is not used. Instead, an old commit, likely the one that's coupled to the latest commit of the repo for the current project is used. See [this link|https://evergreen.mongodb.com/version/sys_perf_3b279bd75f946b46ad62273a66c3e9d0d6826cc0_81c90ce411305bde898e0a69d2a6479d] and the attached screenshot for as an example.    I'm marking this ticket as P2 since it seems to affect the behavior of project triggers across the board. Feel free to reprioritize or ping me if this is a project-specific issue.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7465","02/27/2020 15:42:46",2,"Commit queue should refuse to enqueue an empty patch ""If a user tries to add an empty commit queue item to a queue (such as if they pause the item and then enqueue it later without adding any modules) they should get an error.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7467","02/27/2020 16:36:37",2,"Allow copy_redacted_variables to also copy all variables ""maybe turn it into copy_variables and have an option to """"include_redacted""""    the include redacted option will have the same limitation of needing to be admin of the projects etc.    we want to be able to copy all params from one project to another.  we take the following steps:  1. get both projects  2. delete variables that are only in the target project  3. call the update project with the json object that is source_project[""""variables""""][""""vars""""]  4. call the copy_redacted_variables api.    it would be nicer to just call  /project/source/copy_variables/target?copy_redacted=true    it would also be nice if in dry run mode it will return a json response that, if ran - would in theory do the copy  this way we can dry run - save the result JSON. go over it and see it does what we expect it to do, and then just run update_project with the json file we have.    (I realize that since redacted variables are involved, this is maybe not possible)""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7468","02/27/2020 16:57:14",1,"Add baseVersionId to Patch schema type ""There is a bug in the new ui on the patch field: the base commit link in the patch metadata card links to `evergreen.com/version/githash`. It should be¬†`evergreen.com/version/baseVersionId`    Change the resolved value of the base commit to be correct.    Get the correct base version id by doing `   baseVersion, err := model.VersionFindOne(model.VersionBaseVersionFromPatch(version.Identifier, version.Revision))`""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7473","02/27/2020 21:56:35",1,"Race condition setting commit queue to processing ""From this thread: [https://mongodb.slack.com/archives/C0V896UV8/p1582837378072500]    Probably multiple amboy jobs running is what's hitting this race, but we should check that processing is what we expect it to be before setting it and dequeueing/processing items.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7475","02/28/2020 16:16:52",1,"In regression by test trigger, fall back to task failure if all tests pass ""similar to if there are no tests""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7487","03/03/2020 17:53:55",1,"lobster UI should provide access to unmodified json ""There‚Äôs no way in the UI to get at the original lines emitted by a test. Need an escape hatch.    The raw button gives me the whole log as text with no html markup at all. I can‚Äôt see or select line numbers or search it. So essentially all lobster features are unavailable if I want to see the json lines as they were emitted by the unit test.""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-7488","03/03/2020 18:04:52",2,"Fix flaky auth cypress test ""the issue may be that the local evergreen server is not ready when the auth request is made.¬†    example test:¬†[https://dashboard.cypress.io/projects/m45k1x/runs/210/specs]""","",0,1,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7489","03/04/2020 14:24:37",2,"Patch tasks table: fetch new tasks when url params change ""* Fetch with the sortBy and sortDir specified in url   * page param is reset to 0 when sorting & filtering changes""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7490","03/04/2020 14:25:42",2,"Patch tasks table: fetch more tasks when scrolling table ""* When I scroll down the table, more tests are fetched   * If there are no more tests to fetch then the table stops fetching""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7491","03/04/2020 14:26:25",2,"Patch tasks table: loading & error states ""* ANTD skeleton is displayed when tasks are loading   * If there is an error then error message is shown""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-8479","03/04/2020 14:36:52",1,"setup_ssh_keys.sh shouldn't overwrite keyfiles ""When setup_ssh_keys.sh is run it writes the contents of GITHUB_PRIVATE_KEY and $GITHUB_PUBLIC_KEY to """"~/.ssh/id_rsa"""" and """"~/.ssh/id_rsa.pub"""".    If this script is run in a container then this is fine but if it is run locally, it could potentially cause a user to lose important key files.    The script should either use different file names (maybe ~/.ssh/selected-tests, ~/.ssh/selected-tests.pub) or it should not overrwrite existing files.  ""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-9303","03/04/2020 17:30:02",2,"Evergreen depends on all users to be returned as DBUsers ""We have to add database awareness to the basic user manager because the evergreen middleware won't allow gimlet to return any user except a DBUser. This can be a new wrapper manager with a caching layer that returns only the gimlet.Users that it receives when created.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-7493","03/04/2020 20:56:56",2,"Very slow aggregations on the testresults collection ""I noticed the read tickets available were about 20 tickets lower than writes. This appears to very slow aggregations on the testresults collection. A    lthough these are not a problem at the moment, if the number of these queries grow, they could potentially slow other queries in the system. We should find out the source of these queries and remove or improve them. I've attached a screenshot of an example query.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-7496","03/05/2020 16:15:03",2,"Fix build cache blocked update for display tasks  ""[b67f30|https://github.com/evergreen-ci/evergreen/commit/b67f3051319873c983583fed8e3b521884599748] updates blocked dependencies in the build cache. It doesn't take into account that execution tasks aren't part of the build log, and the update fails. MarkEnd returns [here|https://github.com/evergreen-ci/evergreen/blob/55a8bc51f4ceb678a7bf60d73197489529bc51d8/model/task_lifecycle.go#L440] and doesn't complete so the [build cache update for status|https://github.com/evergreen-ci/evergreen/blob/55a8bc51f4ceb678a7bf60d73197489529bc51d8/model/task_lifecycle.go#L451] doesn't run.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7500","03/05/2020 20:36:48",2,"PR commit-queue is setting author to ""evrg-bot-webhook"" ""The selected-tests project has been using commit-queue for a while, but yesterday the author for commits to master started showing up as """"evrg-bot-webhook"""": https://github.com/mongodb/selected-tests/commits/master.    The same thing is happening on https://github.com/10gen/build-baron-tools/commits/master.    Previously, commits to master made by the PR commit queue set the author of the commit to the author of the PR that was being merged. This made it easier for me to track when my PRs had been merged.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8514","03/06/2020 19:40:41",2,"Loggers seem to hang in tests ""Example: https://evergreen.mongodb.com/task/jasper_windows_test_jasper_patch_13f1b54d555f3b8a04fb9efe7671443fb827bec6_5e629dd47742ae721bc237ea_20_03_06_19_00_37/1""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-7511","03/06/2020 21:42:20",1,"Patch page: add commit queue position to metadata ""Query it in GET_PATCH¬†    Render it""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7512","03/06/2020 21:43:09",1,"Patch page: add ‚ÄúcommitQueuePosition‚Äù field to the patch schema type  ""How to get commit queue position:¬†[https://github.com/evergreen-ci/evergreen/pull/3453/files#diff-17e8f871e4f3e95fbfafe8e4ccecf48aL76]""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7513","03/06/2020 21:43:50",2,"Patch page: build variants card ""* Tasks for each build variant are displayed as cube   * TaskCube component   * Hovering task shows tooltip with task name   * Clicking task goes to task page""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7514","03/06/2020 21:46:11",2,"Patch page: gql query for patch build variants ""Add build variants field to Patch type    Build variant type:   * Variant name   * Tasks     * Status   * Name   * ID""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7516","03/06/2020 21:47:32",1,"Patch page: show task count ""On the /patch route, show the task count (image attached that corresponds to mockups)    Designs:¬†[https://mongodb.invisionapp.com/share/S7W848CN3GC#/screens/408295791]    A field on the Patch type exists called """"taskCount"""" - it represents the total number of tasks of a patch.    Add this field to the Patch query on the /patch route - this value represents the Y in """"X/Y tasks""""    The X in """"X/Y tasks"""" is determined by getting the length value of the tasks array returned from the patchTasks query""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7517","03/06/2020 21:49:24",1,"Patch page: ""search by variant name"" input field ""On change it updates the url using a debounce""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7518","03/06/2020 21:50:17",1,"Patch page: ""search by variant name"" fetch new tasks ""# When url search param changes, fetch new tasks based on search param value   # Cancel old requests that have not finished when a new one is made for search""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7519","03/06/2020 21:51:59",1,"Patch page: add variant param to gql resolver ""* Add variant param to patchTasks resolver   * In db function, apply match with variant param value""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7520","03/06/2020 21:54:03",1,"Patch page: ""search by task name"" input field ""On change it updates the url using a debounce""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7521","03/06/2020 21:54:39",1,"Patch page: ""search by task name"" fetch new tasks ""* When url search param changes, fetch new tasks based on search param value¬†   * Fetch tasks filtered by task input""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7522","03/06/2020 21:55:40",1,"Patch page: add taskName param to gql resolver ""In db function, apply match with variant param value""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7523","03/06/2020 21:57:02",1,"Patch page: filter by status - dropdown menu ""* *Dropdown checkbox menu with all statuses (1)*   * Clicking parent of nested statuses selects/unselects all status in that group   * Store static list of statuses on the client""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7524","03/06/2020 21:58:28",1,"Patch page: filter by status - clicking on status updates ""statuses"" url param ""When parent of status group is clicked, include all nested statuses in url params""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7525","03/06/2020 21:59:21",2,"Patch page: filter by status - fetch filtered tasks ""When """"statuses"""" url changes, fetch new tasks with new params from url""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7526","03/06/2020 22:00:08",0,"Patch page: filter by base status - dropdown menu ""* Clicking parent of nested statuses selects/unselects all status in that group   * Store static list of statuses on the client""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7527","03/06/2020 22:00:47",0,"Patch page: filter by base status - update ""baseStatus"" url param ""When parent of status group is clicked, include all nested statuses in url params""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7528","03/06/2020 22:01:30",2,"Patch page: filter by base status - fetch filtered tasks ""When url param changes, fetch new tasks with new params from url""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7529","03/06/2020 22:37:06",1,"Include cookie in cy.visit header ""Every call to cy.visit causes the auth/cookie to be cleared. Include a cookie in the request so that we do not have to login after every call to cy.visit.¬†""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7530","03/06/2020 22:53:37",2,"Task page: dependency resolver for GQL Task type ""task gql type should have a dependency array where each item has the tasks display name, build variant and if it must fail or must finish""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7531","03/06/2020 22:55:33",2,"Task page: spawnHostLink field in Task GQL type ""link to spawn host page, button lives in medadata card""","",0,1,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7532","03/06/2020 22:57:07",2,"Tasks page: Render action buttons in top right of page ""attach on click to mutations. set priority should accept an input.¬†""","",0,1,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7533","03/06/2020 23:02:18",1,"Task page: Refetch dependsOn field ""should refetch after a certain so the user is up to date without refreshing the page""","",0,1,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7537","03/09/2020 01:13:18",0,"TestsTable should be completely tested in Cypress ""TestsTable is partly tested in cypress and jest. We should rewrite the jest tests in cypress for consistency and also because cypress tests are much easier to understand when something breaks""","",0,1,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7541","03/09/2020 15:39:28",0,"Unattached volumes disappear ""If a volume is created with the [ec2Manager|https://github.com/evergreen-ci/evergreen/blob/c905b1bea0fddfeab8fa10ad0f40a8db8fdc349f/cloud/ec2.go#L1181] and not attached to a host it disappears from the AWS account but is still in Evergreen's db.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8945","03/09/2020 17:29:39",1,"Allow bypassing username/password login and set API keys directly ""In the migration from LDAP to Okta, there will no longer be service user support. Therefore, we have to use the users directly from the database without authenticating them against the Okta backend (so they auth into the API using an API key instead of a password to auth against LDAP).""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-7545","03/09/2020 18:20:48",1,"Place an Evergreen config file on virtual workstations ""Put the user's credentials in ~/.evergreen.yml on virtual workstation spawnhosts""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7546","03/09/2020 19:23:10",0,"My patches: render header ""Render the """"My Patches"""" header title""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7547","03/09/2020 19:25:11",1,"My patches: search input for patch name ""* Render it   * onChange, update ‚Äúname‚Äù url param   * When url ‚Äúname‚Äù param changes, fetch new patches""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7548","03/09/2020 19:25:32",1,"My patches: dropdown menu of statuses ""* Render it   * onChange, update ‚Äústatus‚Äù url param   * When url ‚Äústatus‚Äù param changes, fetch new patches""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7549","03/09/2020 19:26:09",2,"My patches: commit queue checkbox ""* Render it   * Checked by default       * onChange, update the url ‚ÄúcommitQueue‚Äù param   * When url ‚ÄúcommitQueue‚Äù param changes, fetch new patches""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7551","03/09/2020 19:28:11",2,"My patches: PatchCard component ""DOES NOT INCLUDE DROPDOWN (aka the menu elipsis with patch actions)   * Polls server for patch status and patch tasks   * Stop polling when component unmount   * Use useEffect to initialize polling and to unsubscribe     * Updates patch status and task statuses in real time""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7552","03/09/2020 19:28:44",2,"My patches: list of patch cards ""Renders a paginated list of PatchCard component""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7554","03/09/2020 19:32:45",2,"My patches: ""Reconfigure tasks/variants"" modal ""When¬†""""Reconfigure tasks/variants"""" is selected from PatchCard dropdown menu, show modal for reconfiguring patch. Designs coming""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7555","03/09/2020 19:38:00",2,"My patches: gql mutation to reconfigure patch ""One of the options from the dropdown menu of the PatchCard is to reconfigure patch. This means changing the variants and tasks that are ran fro the patch. The mutation should take an array of tasks and an array of variants and update the patch with those params. This mutation does not schedule the patch. It only updates the DB model.¬†""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7556","03/09/2020 21:52:48",1,"Task page: Display test counts for test table ""display failed test count in test table tab    display filteredTestCount/totalTestCount above table""","",0,1,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7557","03/09/2020 21:53:54",1,"Task page: Add count field from taskFiles query ""display the number of files on the files tab""","",0,1,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7558","03/10/2020 01:46:29",2,"Lobster's log substitution of large numbers can lose precision ""BSON has a NumberLong type, a 64-bit integer. The lobster log conversion presumably treats MongoDBs attribute map as JSON which likely parses all numbers into a floating point value. Large 64-bit numbers can then lose precision.""","",0,0,1,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7562","03/10/2020 22:05:36",0,"Add jiraLink field to TaskEventLogData gql type ""this is so we can link to the Jira issue in the event logs in spruce""","",0,1,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7565","03/11/2020 14:38:35",1,"Reduce logging in scheduler ""The scheduler produces a lot of noisy grip logs that make it difficult to find distro logs in Splunk. We should remove the ones that log frequently and don't produce a lot of useful output.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-8918","03/11/2020 18:49:13",0,"Sanity check for empty user ""There are many noisy logs for requests being made to evergreen through the user middleware that don't have a user in the headers. The header check in user middleware should check that both the API key and the name are set before trying to get it from the user manager.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-7569","03/11/2020 19:17:17",1,"Commit queue sends notifications to the wrong item ""Recently when an item in the queue finishes processing the queue sends a notification to the next item in the queue that hasn't even started processing yet and not for the item that finished processing.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8893","03/11/2020 19:19:50",0,"Check for potentially multiple cookies with the same name ""Staging and prod can be confused because it's not clear which cookie the browser will present first to the request. ""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-8651","03/11/2020 19:24:12",1,"Add get_version to Build ""As a DAG engineer,  I'd like to add get_version method to Build objects,  such that, I can get a build's version using evergreen.py.    AC:  * get_version added to Build class.""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8542","03/11/2020 20:31:10",2,"Allow aborting amboy jobs by prefix ""Currently you can abort jobs by id, or you can abort all jobs, but you can't abort only one kind of jobs. We should add this functionality, possibly by allowing aborting jobs by prefix.""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-7572","03/11/2020 22:04:05",2,"Logs url from API is wrong ""The Build Baron worker occasionally fails to download logs to search for failures. Looking into one of these failures, it seems like we are getting the wrong log URL from the API. It does seem to occur when there have been multiple executions of the task and we are looking at an execution that may not be the latest.    For example, [This task|https://evergreen.mongodb.com/rest/v2/tasks/mongodb_mongo_v4.4_enterprise_debian10_64_jstestfuzz_concurrent_replication_continuous_stepdown_flow_control_09_enterprise_debian10_64_340ddb282a92bb5e97d0c43b7d44c26ec7d8da0e_20_03_10_13_18_27?fetch_all_executions=1]. Looking at the first executions, all the logs seem to append an extra """"_0"""" to the task id in the URL, which makes the links invalid. The log to the system log is: https://evergreen.mongodb.com/task_log_raw/mongodb_mongo_v4.4_enterprise_debian10_64_jstestfuzz_concurrent_replication_continuous_stepdown_flow_control_09_enterprise_debian10_64_340ddb282a92bb5e97d0c43b7d44c26ec7d8da0e_20_03_10_13_18_27_0/0?type=S""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7577","03/12/2020 01:45:41",1,"Log event when host allocator changes static host status ""This is convenient for tracking events such as transitioning between running and quarantined/terminated.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8370","03/12/2020 13:53:37",2,"Double slashes and permanently moved errors  ""See [here|https://mongodb.splunkcloud.com/en-US/app/search/search?earliest=-4h%40m&latest=now&q=search%20index%3Dcedar%20auth&display.page.search.mode=smart&dispatch.sample_ratio=1&display.page.search.tab=events&display.general.type=events&display.visualizations.charting.chart=line&sid=1584021158.2338196] for more information. This may be due to redirects.""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-9125","03/12/2020 14:19:31",0,"Increase repobuilder timeout ""The new repobuilding service has to build more repos, so it will hit the 1 hour timeout and fail to sync with pail.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-8683","03/12/2020 14:45:31",2,"Update selected-tests to use poetry ""Update selected-tests to use poetry""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-7580","03/13/2020 15:29:22",1,"Add AWS credentials for S3 push to agent ""The agent needs the credentials to push task directories to S3. This should probably go in the environment for the agent setup.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-7581","03/13/2020 16:43:29",0,"Add newline for distro aliases listed in CLI ""It needs whitespace or the first alias is printed on the same line.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-7583","03/13/2020 18:37:12",2,"Lobster json pretty printing goes away with scroll ""Scroll around the one bookmark here with the json pretty printing on to understand: https://logkeeper.mongodb.org/lobster/build/56e19e8ab9e7042a85b559a81a5be69b/test/5e6ab05c9041301fc71f79bd#bookmarks=53211&l=1""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-7641","03/16/2020 02:26:41",2,"So many log lines of ""Attach test logs succeeded"" in Java tests ""It's coming from         For example, see https://evergreen.mongodb.com/task/mongo_java_driver_tests_zlib_compression__version~3.6_os~linux_topology~standalone_auth~noauth_ssl~nossl_compressor~zlib_jdk~jdk8_test_cedb69c82bd4bd321a2929b4110f574dee5a2881_20_03_13_16_01_44.    I think this is because in Java each Junit test generates its own file, and the command is logging every single one.    Anything we can do to dial down the verbosity of this logging?""","    """"upload test results"""":      - command: attach.xunit_results        params:          file: ./src/*/build/test-results/*/TEST-*.xml  ",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-7585","03/16/2020 16:47:58",1,"Do not show validation warnings for distro aliases ""If you run {{evergreen validate}} on a config containing a distro alias for distros/run_on, it will give warnings about a nonexistent distro even though the distro alias exists. It shouldn't give warnings for using a distro alias.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-7586","03/16/2020 17:52:31",1,"Download working directory from spawn from task  ""The linked tickets describe preserving and restoring the working directory from tasks. Another use case is restoring the directory to a spawn host in order to debug a failure.""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7588","03/16/2020 20:53:27",1,"Shut down agent before AWS shuts down spot instance ""Poll this endpoint on AWS hosts https://aws.amazon.com/blogs/aws/new-ec2-spot-instance-termination-notices/ and exit the agent if the endpoint returns that the host is going to be terminated. This should ensure that the agent does not report a failed or system failed status to the app server. Instead we will rely on the app server cleaning up this task to mark it system unresponsive.""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7589","03/16/2020 20:54:17",1,"Do not create tickets for system-unresponsive tasks ""System-unresponsive tasks do not require human investigation, so we should not create tickets for them. Only setup, system, and failed tasks should create tickets.""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7590","03/16/2020 20:57:08",0,"Noop new agent downloads from monitor if instance is going to shut down ""On an AWS host, if the instance is going to shut down, the monitor should not download a new agent. The agent has likely exited due to detecting that the instance is going to shut down. Instead of exiting the monitor, simply noop the download and setup, since having code that exits the monitor is potentially risky.""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7593","03/17/2020 13:31:42",1,"Handle distro aliases in host.create ""Currently there's no handling of distro aliases in the host.create command.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-7595","03/17/2020 17:35:14",1,"Decommission idle hosts of deleted distros ""The idle hosts query relies on finding distros that exist. However, for hosts whose distros have been deleted (e.g. for distro aliases), these hosts also have to be decommissioned.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7596","03/17/2020 19:25:14",2,"A display task was finished before it actually finished ""A display task had two execution tasks that timed out. We logged an event for the display task finishing before the second execution task timed out.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7597","03/17/2020 19:33:32",2,"Display task BFGs should link to failing execution tasks' logs ""Since [EVG-7304|https://jira.mongodb.org/browse/EVG-7304] a single BFG is created for all test failures in a display task.   We should change the task log links to point to execution tasks' logs since the display task has no logs.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7599","03/18/2020 14:37:49",0,"Handle distro aliases when checking distro permission scopes ""When distros are deleted, the distro IDs used to check permissions should go to their aliased distro instead of the deleted distro.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7600","03/18/2020 15:53:53",2,"Investigate finding distros by ID in all usages ""A bunch of calls to find distros by ID should probably support usage of aliases, but they have to be handled on a case-by-case basis.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-7601","03/18/2020 16:20:29",2,"Handle AZs that don't support the instance type in Fleet requests ""Some AZs don't support all instance types. If a distro's instance type isn't supported by an AZ we should exclude that AZ from Fleet requests (by way of its subnet ID) for instances of that distro, or at least catch the error and not retry.   One possibility is to get the list of supported instance types for an AZ [through the API|https://docs.aws.amazon.com/sdk-for-go/api/service/ec2/#EC2.DescribeInstanceTypeOfferings] (and probably cache it somewhere)""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7602","03/18/2020 18:09:46",1,"Intent host IDs sent to DescribeInstances API ""This is a problem, because it causes Evergreen to exceed its API limit, which prevents it performing other operations. Evergreen did this 5000 times in a 1-hour period https://mongodb.splunkcloud.com/en-US/app/search/search?q=search%20index%3Devergreen%20client%3D%22%5C*cloud.awsClientImpl%22%20message%3D%22AWS%20API%20call%22%20metadata.level%3D70%20%20api_name%3DDescribeInstances%20InvalidInstanceID.Malformed&earliest=1584547200&latest=1584550800&display.page.search.mode=verbose&dispatch.sample_ratio=1&sid=1584554969.4654267.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7603","03/18/2020 20:55:14",1,"Virtual workstation home volume device name isn't set ""When we attach a volume to the instance we should pass the distro's home volume device name to AWS.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7604","03/19/2020 00:54:55",2,"Patch page: schedule patch tasks mutation ""The schedule button on the patch page calls modify version to schedule all tasks    in legacy UI, clicking """"schedule all tasks"""" on patch page makes a PUT request to [/version/\{versionId}|https://evergreen.mongodb.com/version/5e727e7932f41772e1594452]¬†with a req payload of¬†  ""","  {active: true, abort: false, action: """"set_active""""}active:¬†trueabort:¬†falseaction:¬†""""set_active""""}  ",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7606","03/19/2020 14:34:09",2,"Spawn host display names ""Add a display name to spawn hosts that user's can change to something more memorable than instance ids.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7607","03/19/2020 14:47:41",2,"sys-perf benchmarks return ""could not find task on base commit"" ""sys-perf has started using generate.tasks, which appears to interact poorly with historical data. This link https://evergreen.mongodb.com/plugin/json/history/sys_perf_linux_standalone_validate_cmd_patch_aef7cbf49c396df95c02606a9e94d26c892e53ed_5e72767c1e2d17595813fb53_20_03_18_19_52_18/perf returned """"could not find task on base commit"""", presumably because the task didn't exist at all in the base commit. We should see if it's possible to have the logic to look back past base commits even if the task doesn't exist.""","",0,0,1,0,0,0,0,0,0,0,0,1,0,0,0
"EVG-7608","03/19/2020 16:06:55",1,"Loading skeleton for task page tabs ""add the loading skeleton for the task page tabs""","",0,0,1,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7609","03/19/2020 19:05:11",2,"Problems in performance graph displays ""Some graphs are showing artifacts and may be trying to connect the results from different thread levels.¬†""","",0,0,1,0,0,0,0,0,0,0,0,1,0,0,0
"EVG-9221","03/19/2020 19:06:35",2,"use go1.13 for cedar ""can we deploy from artifacts compiled by computers that aren't julian's laptop. please verify""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-7611","03/19/2020 20:24:43",0,"Task table shouldn't push default query params to URL ""currently the task table component pushes default query params to the URL if invalid query param values for the task table. The task table should not push default query params to the URL and infer the correct parameters internally""","",0,0,1,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7612","03/19/2020 21:19:11",0,"Omit Jasper splunk credentials for virtual workstations ""Virtual workstation hosts (and probably spawn hosts in general) shouldn't get these credentials.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-7614","03/19/2020 21:35:51",0,"Validate that user does not spawn a virtual workstation with task data ""Since virtual workstations are just slightly different spawn hosts and do not have a github key to clone repositories, it would be invalid to load task data. It is still possible to do this via the UI or just a straight rest request.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-7616","03/20/2020 13:40:12",0,"Add environment variable option to skip integration tests ""Almost 90% of the time I don't care about the integration tests and I don't want to populate the credentials, so I just want to skip them.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-7617","03/20/2020 14:50:12",1,"Make url query params between patch and task pages the same ""The query params used between patch and task page should be the same. the params passed to the queries should also be the same (where there is overlap).¬†    This specifically relates to the sortDir param, which has a value of¬†ASC || DESC on the patch page and 1 || -1 on the task page.¬†""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7620","03/20/2020 16:01:14",1,"App crashes when switching back and forth between tabs ""Attached are screenshots of the error on the patch and task pages. the task page is the screenshot with the 422 error.¬†""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-9065","03/20/2020 21:13:08",1,"cleanup paths for temporary directories ""currently we hardcode some stuff in data, but it should be app-level configurable""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-7622","03/20/2020 21:16:38",1,"cron buildvariant has not run ""I used cron syntax for a buildvariant to run OCSP tests. The tests are supposed to run every 14 days and the buildvariant first shows up in the waterfall on 2/28/2020 but all of the runs show that it is inactive. Is the syntax incorrect? {{evergreen validate}} does not report any errors.    Link to the section of the config file that defines this buildvariant:¬†[https://github.com/mongodb/mongo-go-driver/blob/master/.evergreen/config.yml#L1605]""","",0,0,0,0,0,1,0,0,0,1,0,0,0,0,0
"EVG-7624","03/21/2020 14:26:16",2,"Add regex patterns to project to determine what tasks should run ""Add to UI, as well as CLI. Should handle  variant regexes, task regexes, variant tags, and task tags.""","",1,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-7625","03/21/2020 14:26:41",2,"Add authorized github usernames to project ""Only these users will be able to create versions when they push git tags""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7626","03/21/2020 14:27:02",2,"Add git_tags_only tag to tasks in yaml ""Introduce a """"git_tags_only"""": true setting for tasks in the project yaml that should only run when a git tag is pushed (i.e. not in mainline or patch builds) and the commit author is part of the allowed github usernames""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7628","03/21/2020 14:27:34",1,"Document process ""Document how to set this up to simplify setup for users""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7629","03/23/2020 12:49:48",0,"Add Makespan field to GQL Schema ""Add Makespan field to GQL schema to show in the Task metadata panel""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7630","03/23/2020 13:18:27",1,"Alias static hosts with build/test suffix ""We have to migrate all the static hosts to use the large/small convention instead. The old host task queues should be cleared after the distro is aliased and deleted to avoid duplicate task notifications, since their queues tend to be very long.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-7631","03/23/2020 14:13:39",2,"Patch page: map patch task status & base status to corresponding badge color ""The status and base status columns in the patch tasks table should show badges that correspond to the status color    Will require putting new tasks in DB for patch that cover all available patch statuses    [https://mongodb.invisionapp.com/d/main/?redirHash=#/console/19479418/408295791/preview?scrollOffset=229]""","",1,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-7632","03/23/2020 14:31:09",1,"Git commit date can be later for modules than for the main repo ""The commit queue pushes module commits before the main repo so the module commit hashes recorded in the main commit's manifest will be accurate.  Despite this, sometimes the main repo commit's commit date precedes the modules' and the manifest gets the wrong commit.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7633","03/23/2020 14:49:40",1,"Task Page: Add file count to GQL schema ""this is necessary to show the number of files in the files tab.""","",0,0,1,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7634","03/23/2020 14:51:28",1,"Task Page: Add Test Count to GQL schema ""task type should return the failed test count to display in the tests tab    taskTests mutation should return total number of tests in task tests    taskTests mutation should return number of tests found from filters excluding page and limit    ¬†""","",0,0,1,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7635","03/23/2020 16:12:12",1,"Do not terminate user data hosts that pass provisioning cutoff if they are running a task ""Due to a job backup today, some hosts were stuck in starting but since they ran with user data, the agent managed to pick up tasks even though they were not marked as provisioning. We should let these hosts continue as long as they are running tasks.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-9181","03/23/2020 20:34:24",2,"split options for deleteOnSync ""add separate options for delete on sync pull-only/push-push (and make the current option just set the other two option, with validator logic to prevent ambiguous settings.)    ""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-7644","03/24/2020 18:46:43",0,"Allow status to be set on terminated static host and preserve quarantined status ""Static hosts are terminated if removed from  a static distro, but should be set to running if moved to a different distro.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7645","03/24/2020 19:44:31",2,"Report relevant errors to bugsnag ""report errors to bugsnag and new relic¬†    ¬†[https://docs.google.com/document/d/1G7Fyp6VwCIwfY2kwzEUKRnQuYD1yAV3wb5Tuv3GF_Xg/edit]   * this should be high alert to bugsnag:¬†[https://github.com/evergreen-ci/spruce/pull/106/files/9fcc28747dd1da382d4c499defe56c83d47eb1a1#diff-a7ecbc3c8ce6748c1957900fcbc52ae3R123]""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-8408","03/24/2020 21:19:46",1,"Poplar gRPC doesn't set timestamps ""Events added through poplar gRPC don't seem to have their timestamps reflected in the resultant ftdc files.     It looks like the [Export|https://github.com/evergreen-ci/poplar/blob/3ed14b6c043a6f2d434241a302690e904daa47ff/rpc/internal/collector.ext.go#L8] function doesn't pass the timestamp field on to the [Performance|https://github.com/mongodb/ftdc/blob/0659acdc6e9ea8863e0d9e888fb09da4287343d2/events/performance.go#L26] struct.""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-7647","03/25/2020 13:42:31",2,"Lobster UI lag when selecting options or highlighting log line ""The latest [version|https://github.com/evergreen-ci/lobster/commit/9968954d3568ff4899f0e807e6eb0a6054d5a5f3] of Lobster appears to have a noticeable lag between the time of executing an action like clicking an option button or highlighting a log line and the action having an effect. This [screencast|https://www.dropbox.com/s/w5hr9e41ckltfn9/lobster_ui_slow.mov?dl=0] tries to capture the effect. This happens on Chrome (80.0.3987.132) and Safari.""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-8955","03/25/2020 14:05:12",1,"Standardize cronjob names in selected tests ""As a DAG engineer,   I want all the selected tests cronjobs to have the same prefix,  So that I can easily detect them in the kanopy output.    ----    AC:  * all cronjobs in selected tests start with 'selected-tests'""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-7649","03/25/2020 14:51:04",1,"fix patch-route flakey test: Fetches sorted tasks when table sort headers are clicked  ""right now this test is muted""","",0,0,1,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-9202","03/25/2020 17:01:05",1,"Better REST logging ""Many of the admin commands have bad service side logging so it makes it hard to figure out issues when something goes wrong. We should have more robust logging in these cases.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-7651","03/25/2020 17:55:00",2,"Some json objects in lobster aren't expanded ""In https://logkeeper.mongodb.org/lobster/build/b0b5735508d54fe614397bd9d310f5be/test/5e7b8263f84ae831d1166f42#bookmarks=0%2C478%2C3498%2C21167%2C21405%2C21432%2C21442%2C21468%2C21469%2C21471%2C21472%2C21473%2C21474%2C21619%2C21707%2C21728%2C21828&f~=000~%2Fmongod&f~=100~config.shards&l=1, Line 3498 is not expanded when the """"pretty print"""" setting is enabled.""","",0,0,1,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7653","03/25/2020 18:39:40",0,"Incorrect trend graph representation in some cases ""Incorrect trend graph representation in some cases  [aggregation on Standalone Linux inMemory|https://evergreen.mongodb.com/task/performance_4.4_linux_wt_standalone_aggregation_02e12f2b4acfb8f1d401ed78a04fe4b6e23b9976_20_03_20_20_37_41##Aggregation.Group.TenGroupsWithSumJs]    When selected commit is on top of improvement then the graph is built incorrectly:   !Screen Shot 2020-03-25 at 11.31.36 AM.png|width=600!     When the selected commit set up on the any other point (other then ‚Äúfirst failing revision‚Äù point) then graphs look good:   !Screen Shot 2020-03-25 at 11.32.23 AM.png|width=600!   ""","",0,0,1,0,0,0,0,0,0,0,0,1,0,0,0
"EVG-7654","03/25/2020 18:45:24",2,"Remove binary representation of generate tasks ""We currently save both a binary version and a string version of generate tasks. We have been running with the string version for some time, so we're confident that it works. We should stop persisting the binary version.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-7656","03/26/2020 00:38:28",2,"enable extended amboy stats in evergreen ""there's a constant in the code to disable it, and the goal is to flip the query, but we just have to make sure that the operations aren't going to be too expensive (we've tried it in the past), but I think we've added indexes so it should be fine, but it's a bug that doesn't reproduce in staging""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-7657","03/26/2020 11:24:46",0,"Do not pass host's SSH options into SSH command runners ""Since the SSH options are already available without needing to pass them in, it doesn't make sense to pass a property of the host into a host method.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8426","03/27/2020 01:04:01",1,"ssh keys not being created in cronjobs ""The ssh keys for test selection workers are not getting created properly and causing the scripts to fail. It looks like this is due to attempting to pass an argument when we source the script to create the ssh keys, which doesn't work. See [here|https://github.com/mongodb/selected-tests/blob/fe60908fcd767d40b285dd854659ca9f7a16f2fb/cronjobs/update_task_mappings.sh#L5]""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-7662","03/27/2020 12:25:57",1,"Select first matching distro from spawn host page if distro is aliased ""If you try to spawn a host from the task page for a distro that has been deleted, just try to find the first matching distro which has an alias (or give some kind of error message saying no such distro exists).""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-7666","03/27/2020 14:37:10",1,"Do not call DescribeInstances twice to get volume total size ""When we call {{cacheHostData}}, we already have the instance info from {{DescribeInstances}}. However, calling {{getVolumeSize}} within that function makes another request to {{DescribeInstances}}, so we unnecessarily double the amount of {{DescribeInstance}} calls we need to make for caching. We do this every time we cache the host data (e.g. during the cloud host ready job).""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8424","03/27/2020 14:42:26",2,"Why does an ID of 0 lead to a monotonically-increasing value? ""Would be a question ticket, but it looks like that type doesn't exist for this project. Was just wondering what the reasoning is behind [this|https://github.com/mongodb/ftdc/blob/master/events/performance.go#L169] if-statement that leads to IDs monotonically increasing if they're at zero. It's preventing us from zero-indexing threads and I was curious what the rationale was / whether there are cases when we should just let it monotonically increase.""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-7668","03/27/2020 15:31:14",2,"Investigate Fleet error message ""When we tried starting an arm instance with Fleet we got an error message which indicates that instead of asking for an instance in us-east-1a we should ask for an instance in us-east-1b or us-east-1d. The request overrides (included in the log message) included all three, though us-east-1a was first. The default subnet for the distro (included in the launch template) could have been us-east-1a as well.    In general, investigate whether AWS is respecting all the overrides, or just picking the first.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-7670","03/27/2020 17:42:01",1,"Spawn host queries for host provisioning should check UserHost ""Some places check for UserHost, but other places check StartedBy, which is unreliable because it could include host.create hosts.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7671","03/27/2020 18:52:36",1,"Intent hosts for hosts started by tasks are removed after three minutes ""The query the host allocator uses to find stale host intents also includes stale intents for hosts started by tasks and removing those is the purview of [PopulateHostTerminationJobs|https://github.com/evergreen-ci/evergreen/blob/49d6d438cb3c5aed7f64f01deef2832aafd374c0/units/crons.go#L271] ""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7674","03/30/2020 03:55:59",1,"Allow -y argument to evergreen commit-queue with multiple commits ""With multiple commits on the current branch, run the following:    {{evergreen commit-queue merge -p mongodb-mongo-v4.4 -y}}    Expected: The commits are submitted to the merge queue.    Actual: Evergreen prompts me:    {{Commit queue patch has multiple commits. Continue? (y/n):}}    I think that """"-y"""" should override all yes/no prompts.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7679","03/30/2020 17:28:58",1,"Write docs for s3.push and s3.pull ""These new commands should be documented in the wiki. There should be lots of strong words about the potential exposure of secrets in the task directory.    Also document the {{variants}} field for commands, dependencies, and requirements.    Also document how to use the CLI options.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-7680","03/30/2020 18:03:50",2,"Add project-level configuration to enable s3 push/pull via project config and patching ""Since these commands can expose secrets stored in the agent's task directory and anyone in evergreen can run a patch whose task directory can be later pulled, project admins should opt into this feature.    Alternatively, there could be an option to allow s3.push and s3.pull but not allow {{evergreen fetch}} to download the task dump. This would keep the task directory within the agent's host.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-7681","03/30/2020 19:25:40",0,"Task groups not executing sequentially ""We're seeing build failures again where the """"stitch_support_run_tests"""" task starts executing before the """"stitch_support_install_tests"""" finishes. As a result the former task fails, because the test binary it wants to run isn't finished building and installing.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7682","03/30/2020 19:33:24",1,"Use order field instead of patchNumber from Task gql type & rm patchNumber field  ""FE: patch number should accessed from the order field on the Task type instead of patchNumber on the Task type.¬†    BE: Remove patchNumber from the Task type""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7684","03/30/2020 22:56:38",2,"Add UI option to pull data from this task sync from s3 into a spawn host ""If this task's working directory was synced with s3 (through a CLI request to do so), it should have a UI display to show the command to pull from the task sync directory. ""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7685","03/30/2020 23:08:55",1,"Fix Create Volume device name generating ""Caused the 3/30 outage""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7686","03/31/2020 14:36:01",2,"Performance Baron sorting by revision should sort chronologically ""As a Build Baron,   When I sort by revision,   The change point data should appear in chronological order.  ----  AC:   * the revision field is essentially random so sorting by revision whithin a page is meaningless and not helpful   * there is a one to one mapping from the revision to the order field. The revision sort should use the order field to allow sensible sorting, as the Order field is the monotonically increasing field that essentially represents the create time of the performance data.""","",0,1,0,0,0,0,0,0,0,0,0,1,0,0,0
"EVG-7687","03/31/2020 14:44:44",3,"Performance Baron number type filter should support abs ""As a Build Baron,   I should be able to filter by absolute value (e.g. '>= abs(0.05)'),   So that I can filter change points that would generally be viewed as noise.  ----  AC:   * In addition to the currently supported operators ('>','>=','<','<=' and '==') number field types should also support abs() to filter by absolute value.   * the default filter for the hazard field should be set to '>= abs(0.05)'""","",0,1,0,0,0,0,0,0,0,0,0,1,0,0,0
"EVG-7688","03/31/2020 15:54:38",2,"Limit GraphQL playground mutations to superusers ""Queries are already limited to authenticated users. The goal of this ticket is to limit mutations.""","",0,1,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7689","03/31/2020 16:17:39",1,"Ignore extra variables in project validation ""A lot of projects give this error:   {{WARNING: yaml: unmarshal errors: line 1: field variables not found in struct model.ParserProject}}  This is because many projects use variables.    There's also a project validation error message missing a value for the format string on [this line|https://github.com/evergreen-ci/evergreen/blob/f64dfedbd176edf4959711fe26b0bfe0a41ffe43/operations/validate.go#L98].""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7691","03/31/2020 17:47:43",0,"TreeSelect width should be dynamic / 100% of its parent ""I made a temporary fix so that TreeSelect accepts a width prop. However it causes the dropdown div to be less width than its parent.¬†""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7693","03/31/2020 22:44:18",1,"Don't use all caps for status badge labels ""They should be in title case like the rest of the labels""","",0,1,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7694","03/31/2020 23:24:22",2,"Change font and add plugins ""change font to consolas/inconsolata  plugins:   - JavaScript (for server tests) ([EsLint|https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint], [Babel|https://marketplace.visualstudio.com/items?itemName=mgmcdermott.vscode-language-babel], [Snippets|https://marketplace.visualstudio.com/items?itemName=xabikos.JavaScriptSnippets], [Booster|https://marketplace.visualstudio.com/items?itemName=sburg.vscode-javascript-booster])  - Golang (for us as well as enterprise tools) ([Go|https://marketplace.visualstudio.com/items?itemName=ms-vscode.Go])  - Snippet/Expansions ([vscode-snippet|https://marketplace.visualstudio.com/items?itemName=vscode-snippet.Snippet])  - Yaml ([YAML|https://marketplace.visualstudio.com/items?itemName=redhat.vscode-yaml])  - markdown/restructured text ([Markdown All in One|https://marketplace.visualstudio.com/items?itemName=yzhang.markdown-all-in-one])  - Bash/shell scripting ([Bash Debug|https://marketplace.visualstudio.com/items?itemName=rogalmic.bash-debug] and [Bash IDE|https://marketplace.visualstudio.com/items?itemName=mads-hartmann.bash-ide-vscode])  - The vim emulation mode ([VSCodeVim |https://marketplace.visualstudio.com/items?itemName=vscodevim.vim])  - Emacs emulation mode ([Emacs Friendly Keymap|https://marketplace.visualstudio.com/items?itemName=lfs.vscode-emacs-friendly])  - Some good themes ([Base 16 Themes|https://marketplace.visualstudio.com/items?itemName=AndrsDC.base16-themes])  - REST ([REST Client|https://marketplace.visualstudio.com/items?itemName=humao.rest-client])""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-8462","04/01/2020 15:08:46",0,"DispatchBy should query for tasks before current time ""If it's before the DispatchBy time, we can still dispatch the job. If it's past the DispatchBy time, we should not dispatch the job.""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8704","04/01/2020 16:23:17",2,"Add percent_change to change points ""As a DAG engineer,   I'd like cedar to calculate percent_change for change points being detected, such that, it can be used for filtering/sorting.    AC:   * percent_change is calculated and persisted during change point calculation jobs   * Migrate existing change points in cedar to have these""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8595","04/01/2020 16:27:07",2,"Add triage section to change points in cedar ""As a DAG engineer,  I'd like to add a triage section to change points being detected in cedar, such that, this triage section can be integrated with further triaging functionality.    AC:  * Triage section added and persisted in default untriaged status for all change points being created  * Add default to all old change points      See technical design of associated epic for format.""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-9016","04/01/2020 16:46:13",3,"Restrict calculation of change points to the portion of the time series after the latest triaged change point ""AS a DAG engineer,  I'd like to restrict the calculation of change points to the portion of the time series after the latest triaged change point, such that, we do not evict triaged change points and do not constantly recalculate change points over old performance results.    AC:  * change points only detected for the part of the performance result history that has not yet been triaged""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-8557","04/01/2020 16:51:15",2,"Add triage endpoint to cedar ""As a DAG engineer,  I'd like to add a triaging endpoint to cedar, such that, change points can be triaged.    AC:  * Triage endpoint added.    Please see technical design for exact API to implement.""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-9226","04/01/2020 16:59:24",2,"Scoped jobs should be resilient to server restarts ""Repobuilder jobs that are in progress get stuck in progress when the app server is restarted. If they are stuck in progress, the stuck job will block any future job with the same scope from running. They should probably restart if they're stuck in progress. This is likely due to some problematic interaction between scopes, the lock timeout, and job dispatching.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-8748","04/01/2020 17:06:43",3,"Add change point list grouped by version endpoint to cedar ""As a DAG engineer,  I'd like to add route to get change points grouped by version, such that, we can get a list of change points grouped by version for other components to use.    AC:  * paginated  * conforms to technical design API (page, page_size, total_pages -- do not worry about filtering and sorting for this ticket)""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8602","04/01/2020 17:09:34",3,"Add filtering by variant, task, test, version, measurement, thread_level to get change points by version API ""As a DAG engineer,  I'd like to be able to filter change points by variant, task, test, version, measurement, thread_level, such that, these lists can be filtered.    AC:  * these lists can be filtered using a regex for the above properties    Please see technical design for API to implement.""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8561","04/01/2020 17:15:23",2,"Add sorting for percent_change and calculated_on to cedar change points lists ""As a DAG engineer,   I'd like to be able to sort change points lists from cedar by percent_change, and calculated_on, such that, these lists can be sorted by these properties.    AC:   * Can sort on these properties""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-7699","04/01/2020 17:38:07",3,"Add change point grouped by version table to legacy UI ""As a DAG engineer,   I'd like to add a table component to display change points grouped by version to the legacy UI, and expose it as a page in evergreen, such that, people can see expanded metrics change points in evergreen.    AC:   * Table page available in evergreen   * version should be able to be expanded showing change points it contains   * Table should allow you to multiselect change points/versions   * Existing perf baron page has option to switch to expanded metric baron page   * This now page has option to switch to legacy perf baron page   * API providing data should be exposed as a service, not actuated directly by table component    Note: no filtering/sorting/actions for this ticket    Please consult design doc and legacy perf baron page for guidance.""","",1,0,0,0,0,0,0,0,0,0,0,1,0,0,0
"EVG-7700","04/01/2020 17:41:45",3,"Component for filtering by variant, task, test, version, measurement, thread_level when getting change point lists from legacy UI ""As a DAG engineer,  I'd like to have a component that allows user to specify filter for change points by variant, task, test, version, measurement, thread_level, such that, these lists can be filtered on the front end.    AC:  * Component should handle creating basic regexes  * Component should allow user to specify an exact regex, either directly, or using some kind of advanced mode  * -Component should provide a tooltip describing what it does somewhere, in case user is confused-  * Component should be integrated into change point table for each of the above properties  * Service updated to pass these arguments through to API calls appropriately  * measurement filter should default to the following three measurements: [‚Äú95th percentile latency‚Äù, ‚Äú50th percentile latency‚Äù, ‚Äúaverage read latency‚Äù]    Here is the [wireframe|https://docs.google.com/spreadsheets/d/1Dh-C2CB15lb7veXP1uoXZNh43MMvZuvx4hX-4mVilSY] for the UI.  Here is the [technical design|https://docs.google.com/document/d/1wKLZ-IWjA8-kWAO44tHotzuYei0y2rNX7OQjrKGEo34] for this project.  The specific route this component should be backed by is:  ""","  GET /perf/project/<project id>/change_points_by_version  ",1,0,0,0,0,0,0,0,0,0,0,1,0,0,0
"EVG-7701","04/01/2020 17:49:39",2,"Add sorting capability to component for filtering variant, task, test, version, measurement, thread_level ""As a DAG engineer,  I'd like to add the ability to specify a sort in the component that handles filtering for the above properties in the change point for expanded metrics list in spruce, such that, we can also sort on these properties.    AC:  * Can specify a sort order as well  * Service updated to pass sort through to API    Here is the [wireframe|https://docs.google.com/spreadsheets/d/1Dh-C2CB15lb7veXP1uoXZNh43MMvZuvx4hX-4mVilSY] for the UI.  Here is the [technical design|https://docs.google.com/document/d/1wKLZ-IWjA8-kWAO44tHotzuYei0y2rNX7OQjrKGEo34] for this project.  The specific route this component should be backed by is:      ""","  GET /perf/project/<project id>/change_points_by_version  ",1,0,0,0,0,0,0,0,0,0,0,1,0,0,0
"EVG-7702","04/01/2020 17:51:46",2,"Component for filtering by percent_change and calculated_on in the Expanded Metrics Perf Baron UI ""As a DAG engineer,  In the [Expanded Metrics Perf Baron UI|https://evergreen.mongodb.com/perf-bb/expanded-metrics-change-points], I'd like to have a component that allows user to specify filter for change points by percent_change, and calculated_on, such that, these lists can be filtered on the front end. Percent change and calculated on are floats and datetimes, respectively, and this component should allow users to specify windows for these filters per the [wireframe|https://docs.google.com/spreadsheets/d/1Dh-C2CB15lb7veXP1uoXZNh43MMvZuvx4hX-4mVilSY].    AC:  * Component should be integrated into change point table for each of the above properties  * Service updated to pass these arguments through to API calls appropriately    Note: [Technical Design|https://docs.google.com/document/d/1wKLZ-IWjA8-kWAO44tHotzuYei0y2rNX7OQjrKGEo34/edit#]""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7703","04/01/2020 17:55:04",3,"Add sorting capability to component for filtering percent_change, and calculated_on ""As a DAG engineer,  I'd like to add the ability to specify a sort in the component that handles filtering for the above properties in the change point for expanded metrics list in spruce, such that, we can also sort on these properties.    AC:  * Can specify a sort order as well  * Service updated to pass sort through to API    Here is the [wireframe|https://docs.google.com/spreadsheets/d/1Dh-C2CB15lb7veXP1uoXZNh43MMvZuvx4hX-4mVilSY] for the UI.  Here is the [technical design|https://docs.google.com/document/d/1wKLZ-IWjA8-kWAO44tHotzuYei0y2rNX7OQjrKGEo34] for this project.  The specific route this component should be backed by is:  ""","  GET /perf/project/<project id>/change_points_by_version?triage_status_regex=<regex>  ",1,0,0,0,0,0,0,0,0,0,0,1,0,0,0
"EVG-9112","04/01/2020 18:02:08",0,"Add option to verbose log the files being downloaded from pull ""This is mostly a UX benefit for users running the CLI pull command, which could take a long time depending on your network bandwidth. In lieu of having a progress bar, it would be nice to give an option to print what file is currently being downloaded from S3.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-7706","04/01/2020 18:35:56",2,"Add component for filtering expanded metrics change points by triage status ""As a DAG engineer,  I'd like to add a UI component for filtering expanded metrics change points based on triage status, such that, build barons can focus on untriaged change points.    AC:  * Add and integrate component allowing users to select triage status filter on expanded metrics triaging page  * Update service layer to pass through triage filter  * defaults to """"untriaged""""    Here is the [wireframe|https://docs.google.com/spreadsheets/d/1Dh-C2CB15lb7veXP1uoXZNh43MMvZuvx4hX-4mVilSY] for the UI.  Here is the [technical design|https://docs.google.com/document/d/1wKLZ-IWjA8-kWAO44tHotzuYei0y2rNX7OQjrKGEo34] for this project.  The specific route this component should be backed by is:      ""","  GET /perf/project/<project id>/change_points_by_version?triage_status_regex=<regex>  ",1,0,0,0,0,0,0,0,0,0,0,1,0,0,0
"EVG-7708","04/01/2020 22:14:18",2,"Allow users to specify region in s3 commands ""As we have more remote users, we should allow buckets outside of the """"us-east-1"""" region to be usable with our s3 commands. Doing this would require letting users specify the region of their bucket in the s3 command.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-7710","04/02/2020 14:42:45",1,"Panic in s3.get on windows ""    ""","  {""""message"""":""""hit panic; adding error"""",""""metadata"""":{""""level"""":90,""""time"""":""""0001-01-01T00:00:00Z""""},""""operation"""":""""problem running command 's3.get'"""",""""panic"""":""""runtime error: invalid memory address or nil pointer dereference"""",""""stack"""":[{""""function"""":""""github.com/evergreen-ci/evergreen/agent.(*Agent).runCommandSet.func2.1"""",""""file"""":""""/data/mci/8a4e334fe1089b7dbac8d2778c8083f8/gopath/src/github.com/evergreen-ci/evergreen/agent/command.go"""",""""line"""":115},{""""function"""":""""runtime.gopanic"""",""""file"""":""""/opt/golang/go1.13/src/runtime/panic.go"""",""""line"""":679},{""""function"""":""""runtime.panicmem"""",""""file"""":""""/opt/golang/go1.13/src/runtime/panic.go"""",""""line"""":199},{""""function"""":""""runtime.sigpanic"""",""""file"""":""""/opt/golang/go1.13/src/runtime/signal_windows.go"""",""""line"""":233},{""""function"""":""""github.com/evergreen-ci/evergreen/command.dirExists"""",""""file"""":""""/data/mci/8a4e334fe1089b7dbac8d2778c8083f8/gopath/src/github.com/evergreen-ci/evergreen/command/util.go"""",""""line"""":16},{""""function"""":""""github.com/evergreen-ci/evergreen/command.createEnclosingDirectoryIfNeeded"""",""""file"""":""""/data/mci/8a4e334fe1089b7dbac8d2778c8083f8/gopath/src/github.com/evergreen-ci/evergreen/command/util.go"""",""""line"""":26},{""""function"""":""""github.com/evergreen-ci/evergreen/command.(*s3get).Execute"""",""""file"""":""""/data/mci/8a4e334fe1089b7dbac8d2778c8083f8/gopath/src/github.com/evergreen-ci/evergreen/command/s3_get.go"""",""""line"""":155},{""""function"""":""""github.com/evergreen-ci/evergreen/agent.(*Agent).runCommandSet.func2"""",""""file"""":""""/data/mci/8a4e334fe1089b7dbac8d2778c8083f8/gopath/src/github.com/evergreen-ci/evergreen/agent/command.go"""",""""line"""":118},{""""function"""":""""runtime.goexit"""",""""file"""":""""/opt/golang/go1.13/src/runtime/asm_amd64.s"""",""""line"""":1357}]}  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7711","04/02/2020 14:43:06",1,"Occasional InvalidParameterValue errors from AWS API for AttachVolume ""Sometimes Evergreen gets back InvalidParameterValue back from the AWS API for an AttachVolume request https://mongodb.splunkcloud.com/en-US/app/search/search?q=search%20index%3Devergreen%20client%3D%22%5C*cloud.awsClientImpl%22%20message%3D%22AWS%20API%20call%22%20metadata.level%3D70%20%20api_name%3DAttachVolume&earliest=1585832400&latest=1585834200&display.page.search.mode=verbose&dispatch.sample_ratio=1&sid=1585834826.68129.    At a minimum, Evergreen should avoid doing retries in this case. Also, is there validation that Evergreen can perform to avoid making this call in the first place?""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7715","04/02/2020 17:30:04",1,"Show spawnhosts' display name on termination ""EVG-7606 added display names to spawnhosts. We should use it in more places on the spawnhost page. For example, the terminate host modal could use it instead of the instance id. ""","",0,1,0,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-7716","04/02/2020 18:12:19",1,"Spawn host user config file should be written as yaml instead of json ""This is mostly because a virtual workstation user (or any spawn host user, really) wouldn't be able to read the file. I think this would also cause some problems if the evergreen binary updates the file, which it assumes is yaml and not json.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-9196","04/02/2020 18:49:54",2,"Configure selected tests pytest to run all the correct tests and checks ""As a DAG engineer,   I should be able to run all the required pytests and checks in one command,   So that selected-test development is stream lined.  ----  AC:   We already support flake8 and isort   * configure pytest to allow it to run:   ** black   ** pydocstyle src   ** mypy src   * Update docs/Contributing.md to reflect the simplified command.   * we will not be fixing the errors in the test directory""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-8815","04/02/2020 18:52:22",8,"Allow processes to be created within containers ""We should be able to run processes in within docker containers. It should also manage shutting them down.    We should have a new docker manager to handle these processes.""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-7719","04/03/2020 15:20:24",2,"Ask for a different AZ when AWS gives an InsufficientInstanceCapacity error ""EVG-7698 stopped retries for an InsufficientInstanceCapacity error. We still can't get hosts of the distro until that AZ gets capacity and it will still eat into the API limit because the host allocator still needs the hosts.    As an alternative we could update the distro document cached in the host intent to use a different subnet/AZ on the next retry.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7722","04/03/2020 19:57:16",0,"Evergreen binary should be owned by distro user ""In user data, it might be curled by root and not the distro user so it can't be overwritten if the agent monitor needs to be redeployed.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-7724","04/06/2020 15:37:14",1,"Writing .evergreen.yml file in home directory requires root permissions ""There was a change to host provisioning that prevents non-userdata spawn hosts from provisioning due to attempting to write the home directory's .evergreen.yml instead of putting it in \{{cli_bin}}. This is likely because the buildhost configuration AMI writes this file as root.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7725","04/06/2020 15:50:59",2,"Add volume display names ""There should be a way to name and manage volumes so you know what you're attaching to a host.  Maybe another table in the UI?""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7730","04/06/2020 17:14:38",1,"IDE's shell doesn't source .bash_profile ""The integrated shell in vscode isn't a login shell so it doesn't source .bash_profile. One of the issues this causes is the evergreen binary isn't on the path.    We should start the shell as a login shell:  https://code.visualstudio.com/docs/editor/integrated-terminal#_shell-arguments""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7733","04/06/2020 18:31:09",2,"make mount point and directory configurable ""people should be able to configure where symlinks/userdata are setup""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-7734","04/06/2020 18:37:20",0,"workstations should be easy to configure and start ""there are a couple of operations that should be built into the workflow:     - if you start a workstation distro, then it should automatically have the """"workstation flag selected.""""   - if you do not have an unexpireable host configured, then you should automatically be enabled as an unexpireable host  - when the host has entered running state there should be a notification sent. ""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-7737","04/06/2020 20:58:35",2,"Task count number should reflect number of results for query ""the number on the right, aka the total, currently reflects total of all tasks for the patch. It should reflect total patches for the specific query.¬†""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7738","04/06/2020 22:30:19",1,"collect more metadata in volumes collection ""created, deleted, expired, in use/not""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-7748","04/07/2020 16:19:02",2,"Number of command calls should apply to pre/post blocks ""Some commands like host.create and generate.tasks limit the number of times you can call them. These limits currently only apply to tasks but not for pre/post, as well as task group setup/teardown/tasks (which should probably be checked separately from tasks). We should check the limits on those as well.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7749","04/07/2020 16:50:43",1,"Project validation should give warnings for dependencies refer to nonexistent buildvariants ""Commands and dependencies allow you to specify which build variants the task should run on or which dependency it is waiting for. There should be validation that such buildvariants actually exist and throw warnings if they don't.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7750","04/07/2020 18:39:36",2,"Remove requires field from project config ""The only project that used requires was the server and it's been removed at this point, so we should get rid of it since it's not a very useful feature.    ¬†    We should also remove from the wiki.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7751","04/07/2020 18:44:24",1,"Build variant and task names should not be allowed to have commas, or be called ""*"" or ""all"" ""We currently only ban bars (|) in the names of build variants and tasks. would be ambiguous in dependencies which use {{*}}, which means """"all tasks"""" or """"all build variants"""". We should also warn for commas or """"all"""" in tasks and build variants, because they would be ambiguous in the CLI invoked through a shell (because we allow users to specify comma-separated lists of tasks and build variants and """"all"""" is a magic keyword for running all variants or all tasks).""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7752","04/07/2020 18:50:53",1,"Task groups should not be allowed to be defined multiple times ""We have validation to ensure that the same name is not used for [build variants|https://github.com/evergreen-ci/evergreen/blob/df7927071e3cfd5381e076243d079037e3788437/validator/project_validator.go#L609-L616] or [tasks|https://github.com/evergreen-ci/evergreen/blob/df7927071e3cfd5381e076243d079037e3788437/validator/project_validator.go#L880-L897]. However, we don't do this same name uniqueness validation for task groups.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8521","04/07/2020 20:26:32",1,"retried exceptions should throw original exception ""When we retry endpoints, if we continue to get an exception, we should rethrow that exception instead of throwing a RetryException. The [tenacity docs|https://tenacity.readthedocs.io/en/latest/#error-handling] explain how to do this.""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-7758","04/09/2020 16:33:08",2,"CheckYamlStrict complains about patch_optional and status if used in dependency ""Example project config:        If I run {{evergreen validate}} on this config, it gives this warning during {{CheckYamlStrict}}:  WARNING: yaml: unmarshal errors:    line 24: field patch_optional not found in struct model.copyType    line 24: field status not found in struct model.copyType    It gives the same error if you specify {{depends_on}} in the task definition instead of the buildvariant task list. However, if you call {{LoadProjectInto}}, the actual {{model.Project}} result has {{PatchOptional}} and {{Status}} properly populated for that dependency.""","  tasks:    - name: taskA      commands:        - command: shell.exec          params:            script: |              echo hello    - name: taskB      commands:        - command: shell.exec          params:            script: |               echo goodbye      buildvariants:    - name: some_buildvariant      run_on:      - ubuntu1604-small      tasks:      - name: taskA      - name: taskB        depends_on:          - name: taskA            patch_optional: true            status: """"*""""  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7762","04/09/2020 18:44:49",1,"Ensure that tasks are not both patchable and patch_only ""Currently it's possible to specify a task is both patchable and patch_only for the same task (in essence, never run). We should give warnings to not allow this combination.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7765","04/09/2020 20:07:52",1,"Validate that func and command are mutually exclusive in a command list ""If you try to validate a command that has both {{command}} defined and {{func}} defined, it won't error but the agent will ignore the {{command}} defined in favor of {{func}}. We should add warnings to the validator that the two options are mutually exclusive for a single item in the commands list.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7769","04/10/2020 15:52:51",2,"Multiple events created for TASK_FINISHED event ""https://mongodb.splunkcloud.com/en-US/app/search/search?earliest=1585195200&latest=1585281600&q=search%20index%3Devergreen%20message%20%3D%20%22processing%20event%22%20event_type%20%3D%20TASK_FINISHED%20event_resource%20%3D%20mongodb_mongo_v4.4_enterprise_rhel_62_64_bit_inmem_display_parallel_38e017530f4a317c109524bde9bf1f1366896bc5_20_03_26_15_13_52&display.page.search.mode=smart&dispatch.sample_ratio=1&display.general.type=events&display.page.search.tab=events&sid=1586530279.467449    This led to duplicate tickets https://jira.mongodb.org/browse/BFG-575333 and https://jira.mongodb.org/browse/BFG-575334.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7772","04/10/2020 18:00:14",1,"Render errors on patch page ""Render full page error if problem loading patch.¬†    Render banner at top of page for all other errors    ¬†""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7773","04/10/2020 18:03:32",1,"Error, success, warning and info banner component and context ""Pages: patch, task    Components: patch tasks, patch changes, task logs, task tests, task files    To do: if there is an error, show error banner in place of component""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7774","04/10/2020 18:38:03",1,"If user specifies volume, should spawn host in that zone ""Otherwise it'll fail to attach the volume""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7776","04/10/2020 19:09:09",1,"PatchMetadata resolver on taskResolver throws error for base commit ""FindPatchById method only accepts mongo ObjectIds. This error will happen on all task base commits because the base commit is a version and versions do not have ObjectIds.¬†    Solution: use FindVersionById method in PatchMetadata resolver instead of¬†FindPatchById""","",0,0,1,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7777","04/10/2020 20:12:34",2,"Add drag-and-drop to project commands ""Splitting from EVG-7732 because it's more annoying to do than I anticipated. Commands should be rearrangeable because order matters, so adding a command is super annoying.    Tried¬†[https://material.angular.io/cdk/drag-drop/overview]¬†but there were bugs adding it.. Found¬†[https://www.npmjs.com/package/ng-drag-drop]¬†for a new attempt but use whatever!""","",0,1,0,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-8034","04/11/2020 00:39:33",1,"Host provisioning jobs with scopes cause job backups if unable to finish successfully ""I created a spawn host with a volume that doesn't exist in AWS since it was available in the spawn host UI (it's probably a bug to allow people to try attaching volumes that don't exist in AWS) and it got stuck in provisioning (couldn't finish the user data done job because {{attachVolume}} would always fail on the AWS call). This seems to have caused amboy to refuse to run other jobs in the queue.    Splunk errors: https://mongodb.splunkcloud.com/en-US/app/search/search?q=search%20index%3Devergreen%20i-0b3a0f488d280099a&display.page.search.mode=smart&dispatch.sample_ratio=1&earliest=1586550600&latest=1586561220&sid=1586561901.485818""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-9015","04/11/2020 00:50:52",1,"add logging on dispatch errors  ""add something here:     https://github.com/mongodb/amboy/blob/master/queue/driver_mongo.go#L791    possibly removing,     https://github.com/mongodb/amboy/blob/master/queue/driver_mongo.go#L525    and better annotate:  - https://github.com/mongodb/amboy/blob/master/queue/driver_mongo.go#L493  - https://github.com/mongodb/amboy/blob/master/queue/driver_mongo.go#L504  ""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-7784","04/11/2020 01:02:38",1,"Host should be decommissioned if volume does not exist in AWS ""This is to avoid the problem where the user data done job keeps retrying but can never succeed since there's no such volume in AWS. AWS will return """"InvalidVolume.NotFound"""" for this issue.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7785","04/12/2020 16:14:23",1,"add admin configuration for setting the priority option on amboy queue  ""UI/rest/etc.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-7787","04/13/2020 15:00:39",1,"Investigate volume not found in DescribeVolumes ""[https://mongodb.splunkcloud.com/en-US/app/search/search?earliest=-15m&latest=now&q=search%20index%3Devergreen%20InvalidVolume.NotFound%20NOT%20api_name%20%3D%20DescribeVolumes%20DescribeVolumes%20%7C%20stats%20count%20by%20host_id&display.page.search.mode=smart&dispatch.sample_ratio=1&display.page.search.tab=statistics&display.general.type=statistics&sid=1586784655.609498]""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8355","04/13/2020 16:20:21",2,"Signal processing algorithms deploy failing ""ex: https://evergreen.mongodb.com/version/signal_processing_algorithms_75312e873543f0f89aace75f43ded783395425c5    As a DAG engineer,  I'd like poetry deploy to succeed for mainline builds, such that, we don't see red in evergreen, and the binary wheels upload successfully.    AC:  * Deploy does not fail in mainline""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-7792","04/13/2020 19:32:49",1,"Delete distro teardown scripts ""Distro teardown scripts are no longer used by any projects. We should delete the code supporting distro teardown.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-7797","04/13/2020 22:13:50",1,"Stopping host should detect when instance is stopped without depending on timing ""[This piece of code|https://github.com/evergreen-ci/evergreen/blob/f8d313109ff81e1413df35455dad402a7aa674a2/cloud/ec2.go#L944-L975] attempts to stop the host but does not do so in an idempotent way. If the check for host status fails (which is not guaranteed to succeed since it depends on how long the host takes to shut down), the host will be stuck in the stopping state with no way to recover. We should check if the host is stopped every time this is called and not just blindly make an AWS call which may fail. We also should unset the stopping state and revert to the old state if it fails. This code should not rely on sleeping as a reliabl mechanism to try to give the host time to shut down. ""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7798","04/13/2020 22:27:20",0,"Check in .prettierrc ""check in prettierrc so our editors format spruce code the same way""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7800","04/14/2020 14:43:55",1,"Communicator should print the body text verbatim if it is not a gimlet.ErrorResponse ""Many of the communicator routes attempt to parse a {{gimlet.ErrorResponse}} if a REST request returns something other than 200 OK. However, it's not guaranteed that the app server will even return a body in that format, and in those cases, the {{Communicator}} oftentimes returns unhelpful messages about parsing errors from gimlet, most commonly {{""""invalid character 'x' looking for beginning of value""""}}). In that case, we should always fall back to returning the response body as the error text if a gimlet response can't be parsed.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-9211","04/14/2020 14:57:06",1,"Shrub should support task sync commands ""This should implement s3.push and s3.pull.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-7802","04/14/2020 14:59:36",1,"Expose commit date for a version in expanded metrics triage UI ""As a DAG engineer,  I'd like to know the date of a version's commit in the expanded metrics triaging UI, such that, the chronological sorting being done is obvious.    AC:  * version's commit date exposed""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7803","04/14/2020 15:14:34",2,"Add variant/task/test links to expanded metrics triaging ui ""As a DAG engineer,  I'd like there to be links for each change point entry on their variant/task/tests, such that, you can easily navigate to those pages without having to do URL surgery.    AC:  * for each change point, variant/task/test are linked (see legacy UI for example)""","",0,1,0,0,0,0,0,0,0,0,0,1,0,0,0
"EVG-7804","04/14/2020 15:36:30",0,"Remove unused catcher in MergeGeneratedProjects ""A catcher catches errors but doesn't do anything with them.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-8450","04/14/2020 18:13:39",1,"Shrub.py uses the wrong key for setting exec_timeout_secs ""Shrub.py allows you to [set exec_timeout|https://github.com/evergreen-ci/shrub.py/blob/05c234280f31bd5312b7d48e047ab339c7f34873/src/shrub/config.py#L159], but when it represents the value, it [stores it|https://github.com/evergreen-ci/shrub.py/blob/05c234280f31bd5312b7d48e047ab339c7f34873/src/shrub/config.py#L48] in the """"timeout"""" key which I understand to not have this meaning.""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-7805","04/14/2020 18:39:51",1,"Don't alert on starting spawn host ""Evergreen sends 2 alerts, one on starting a spawn host, and one on it successfully provisioning. A user doesn't care about the first alert, because there is nothing they can do yet. We should remove the first alert.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7809","04/14/2020 21:49:24",1,"Evaluate idle host termination for user data hosts stuck in provisioning that do not have work ""This host (i-0e069286dc0256011) got stuck in provisioning due to an app server restart when it was trying to requeue the job to retry provisioning. The idle host aggregation assumes that hosts are transiently in provisioning and will either fail to provision (decommissioned) or succeed (running). It doesn't handle a host which is permanently stuck in provisioning but has an agent running (because the LCT check will always filter out a host that's running an agent), so we should let user data hosts be considered for idle termination if the agent is running and not running tasks.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8383","04/14/2020 22:14:24",1,"Poplar runs out of memory when uploading large files ""In [this task|https://evergreen.mongodb.com/task/sys_perf_linux_standalone_insert_remove_patch_c4bca20e65afbb77834559247bdda8f541cda16b_5e93542f7742ae582b499d67_20_04_12_17_49_57##%257B%2522compare%2522%253A%255B%257B%2522hash%2522%253A%2522c4bca20e65afbb77834559247bdda8f541cda16b%2522%257D%255D%257D] we called {{poplar send}} with the results of a 12-hour run of InsertRemove and ended up running out of memory.""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-9151","04/15/2020 16:48:40",1,"set better batch size for amboy queries in mongodb ""it's currently 100, and when there are scopes this is probably wrong? maybe we should just let it be default? ""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-7810","04/15/2020 18:01:09",2,"Patch: Reconfigure patch UI ""Designs:¬†[https://mongodb.invisionapp.com/d/main#/console/19647524/411104420/preview]    UI for selecting build variants and tasks to configure a pach""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7811","04/15/2020 18:02:23",1,"Patch: Schedule patch UI ""Clicking on """"Schedule"""" button in the patch reconfigure page schedules the patch and redirects user to the patch page of the newly scheduled patch""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7812","04/15/2020 19:41:59",2,"Add description, author, enqueue time, and code changes to commit queue query ""Most can be found on the patch data structure, but the enqueue time is an additional field on the commit queue item that needs to be exposed""","",0,0,0,1,0,0,0,0,0,0,0,0,0,1,0
"EVG-7813","04/15/2020 19:52:22",2,"Run user data on restart for Windows without relying on handleUserData being reset ""We're currently relying on a script in buildhost-configuration to reset the user data flag indicating whether user data has run yet in order. However, the Windows instances will no long be resetting the user data to allow evergreen to run user data again. We should add the persist tag to the end of the script to ensure it runs when it reboots.    I think sommanye of the operations have not been built with the intent to be run multiple times (e.g. setup script logic, echoing to authorized keys for spawn hosts), so we should make sure that these operations are resilient to running multiple times.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-7814","04/15/2020 21:12:20",1,"Distro page gives error if you re-create a distro that previously existed ""If you delete a distro, then recreate a distro of the same name, there's a flash that says """"error adding distro"""", which seems to be caused by [these lines|https://github.com/evergreen-ci/evergreen/blob/4d8f4df42b6f60057737b9d3a8ccee3a56815d72/service/distros.go#L331-L339]    Logs: https://mongodb.splunkcloud.com/en-US/app/search/search?q=search%20index%3Devergreen-staging%20%22error%20adding%20distro%22&display.page.search.mode=smart&dispatch.sample_ratio=1&earliest=-15m&latest=now&sid=1586981483.723360""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7817","04/16/2020 14:09:27",2,"Handle task sync with specific status ""Right now, the task will sync if it's requested from the CLI regardless of whether it succeeded, failed, system-failed, or setup failed. We should add an option to specify under which conditions it should sync.  {{ShouldSync}} should probably be refactored as a struct of options for task sync for a patch.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7819","04/16/2020 14:43:53",2,"ensure restarted tasks unblock blocked dependencies  ""we have observed that some tasks become blocked by the dispatcher after their dependencies fail, and should become unblocked after one of their upstream dependencies become unblocked.     (and subject to the same, potentially eventual, reblocking if they're still unsatisfiable for other reasons (age, other blocked dependencies.)) ""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-7822","04/16/2020 16:59:50",2,"Correct percentage/ratio calculation in perf build baron view ""This value should be calculating the %change of the magnitude of the change, either a drop or an increase.    This [line|https://github.com/evergreen-ci/evergreen/blob/3fc333d4f9cda59c22bf156cb86efc10e0196d69/public/static/app/perf-bb/hazardLevelCell.js#L10] should just be    AC:   * Need to change the column heading to %change from hazard level   * Add a test¬†""","return 100 * ((a/b) - 1)  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8848","04/16/2020 17:09:45",1,"support transition to appropriate REST methods for authentication workflow ""Cedar historically supported GET http verbs for authentication workflows despite the fact that the data payload for these requests were in the body of the request. This error was corrected in MAKE-1173, and we inventoried all known clients, but have missed some externally maintained clients.     To resolve, we should (quckly) add back support for GET verbs (in addition to current support for POST)  in these cases, and then when the old clients have been fixed and sufficently back ported we can remove them. I would prefer to leave this ticket open to track removing support for GET in a few days/weeks ""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-7911","04/16/2020 19:32:46",2,"can't spawn a rhel70-cloud from failing task ""https://evergreen.mongodb.com/task/mms_code_health_COMPILE_BAZEL_patch_bcac666f557161e095706b0ff113d2c28df4ee41_5e989c493627e01ffa20566f_20_04_16_17_56_27""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-7827","04/17/2020 16:09:23",0,"virtual workstation setup commands should be scoped to the distro's home volume ""also prefix, when possible (maybe optionally), by the project directory.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-7828","04/17/2020 18:29:24",2,"Let user specify max timeout on task sync from CLI ""If requested from the CLI, task sync is given an hour to finish. If the one hour timeout isn't generous enough, they can set it higher.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7829","04/17/2020 19:21:46",2,"Allow distro user data to specify type of user data ""If none is specified, it won't do anything. However, if you specify the user data type, it can do checks on whether or not the correct tags and directives are included.    This is mostly to solve an incompatibility between host.create (which requires that we _not_ provision the host with user data) and the distro user data (which has to be merged with the type of the existing user data, but can't do so if there is none).""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-7831","04/17/2020 19:49:53",1,"Virtual workstation never expire checkbox is between volume settings ""Maybe it could go under the volume size?""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7832","04/17/2020 21:07:48",2,"Virtual workstations are killed shortly after provisioning ""[This commit|https://github.com/evergreen-ci/evergreen/commit/5da06af4cd6f1ea0483968fd08878ff7e4531c11] puts a host termination job on the queue when provisioning fails.   When copies of the job run concurrently the first job to successfully mount the volume will succeed and mark the host as running, but later jobs will try to mount an already mounted volume and fail (because the script isn't idempotent). The later job puts a job on the queue to terminate the host and it's killed a few minutes after it's been marked as running.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7835","04/17/2020 23:37:25",2,"app shouldn't fail to start if an api_only user is misconfigured. ""alert, and just don't allow that user to log in, but oof failure to start for bad data is heart wrenching.¬†""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-8645","04/19/2020 19:10:06",2,"improve debugability of chains of Command executions ""when you get an error and the command has many subcommands it's difficult to know what ran""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8550","04/19/2020 19:12:43",2,"add conditional ""When"" methods for adding arguments to reduce complexity of calling code ""a la LogWhen in grip, all of the methods that add commands should have conditional options""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8524","04/20/2020 14:49:01",1,"add logging if Next takes longer than a second ""number of jobs considered, time, job type dispatched.""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-7836","04/20/2020 15:10:34",1,"Proof of concept: legacy/new UI toggle ""Write proof of concept for toggling between new UI and legacy UI    Go into codebase and assert that proposed design for toggle will work""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7837","04/20/2020 15:10:54",1,"Proof of concept: New Relic analytics ""Write proof of concept for how analytics will be utilized    What questions are we trying to answer through analytics?    How will analytics be implemented in the app?¬†""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7838","04/20/2020 15:15:43",1,"Patch tasks table should have initial sort value ""Problem: clicking patch tasks table sorter does nothing on the first click because table sorter changes from default to ASC. This is a jarring experience because nothing occurs as result of user action.¬†    Solution: task tests table has an initial state for sorters. Implement same initial state logic for patch tasks table as seen in task test table.¬†""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7839","04/20/2020 15:16:43",0,"Remove project dropdown from navbar ""Project dropdown is used for waterfall page. Until waterfall page exists, remove dropdown from navbar""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7840","04/20/2020 15:17:13",1,"Show Evergreen icon and logo in navbar ""Clicking on logo or icon goes to 'my patches' page""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7842","04/20/2020 15:17:39",1,"Favicon ""app should have favicon that matches evergreen logo""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7843","04/20/2020 15:24:57",2,"""Cannot redefine tasks"" error in generate.tasks ""https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_rhel_62_64_bit_sharding_ese_gcm_gen_patch_a94df7c8c6f36e67086406b5778368f97dc1bd7f_5e9da7109ccd4e313742fcb6_20_04_20_13_44_02/0##%257B%2522compare%2522%253A%255B%257B%2522hash%2522%253A%2522a94df7c8c6f36e67086406b5778368f97dc1bd7f%2522%257D%255D%257D""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7844","04/20/2020 15:39:13",1,"Proof of concept: release strategy ""When will new UI be released?    How will new UI be released?¬†    To whom?    What comes after that    What needs to be updated for the release to be possible?    Who needs to know about the release?    How will the release be communicated?    Who will do the communicating for the release of the new ui?    Map out the entire flow, from beginning to end, of the features included in the release.¬†""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7848","04/20/2020 17:07:47",2,"User data does not appear to run on ubuntu arm64 hosts anymore ""Recently (i.e. within the past week or two), user data has stopped running on ubuntu 1604/1804 arm64 hosts. I had to switch these hosts to use new SSH provisioning for now, but we should figure out why the user data scripts aren't running anymore. They used to be able to provision with user data.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7851","04/20/2020 17:35:41",2,"Nav: dropdown ""dropdown showing all links for user - link to legacy ui for all links unsupported in new ui (which for first release will be all of them)    ¬†""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7853","04/20/2020 17:47:30",2,"Tables: statuses should autoupdate ""statuses in these tables should autoupdate""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7855","04/20/2020 18:27:26",2,"Add validation to generate tasks that variants must have a display name ""The approach that suggests itself to me is that the project validator should validate that variants have a display name, since generate.tasks calls the validator. We should make sure that this doesn't break any existing projects.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8900","04/20/2020 23:34:34",2,"Return iterator when downloading test results ""This way if there are thousands of results, we are not loading them all into memory""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-7859","04/21/2020 14:41:12",1,"Add ""First Task Failure"" notification to PR patch runs ""I noticed the addition of """"First Task Failure"""" notifications on the evergreen user settings. This would be great if the functionality can be added to add to PR runs also    This would be very useful for some of us ‚Äì the complete PR suite for mms can take about 2 hours, and the first failure may happen in 10 minutes. This would easily allow us to get early notice if a PR has caused any failures without having to keep checking on the PR page.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7861","04/21/2020 15:27:41",2,"Request context canceling for logs ""With really long buildlogger logs, the request context cancels before the logs can fully load. We should fix this.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7865","04/21/2020 22:05:35",1,"The EVG cli is complaining about invalid fields (status) ""h3. Repro    1. Run the following commands:      h3. Context    It looks like the status field should exist:    https://github.com/evergreen-ci/evergreen/blob/e41b1bdef0f6b0ca8140abe0885528a0333764c3/rest/model/task.go#L39    (it also appear in the EVG wiki)    and in this test  https://github.com/evergreen-ci/evergreen/blob/e7afea271efe1673e5f6f16fa83f38cbd436f526/model/project_parser_test.go#L55  ""","  git clone https://github.com/10gen/mms    cd mms    # Reproducible at this SHA, using the current evg cli (2020-04-15)  git checkout c27242a8800c7a560576d4b43e616480cdcb9496    #Delete this line https://github.com/10gen/mms/blob/d41fcb4fac5534d2b0146d7bbc91586432a41033/.evergreen.yml#L272    # Validate  evergreen validate ../.evergreen.yml    WARNING: yaml: unmarshal errors:    line 2866: field status not found in struct model.copyType    ...  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7871","04/22/2020 19:10:52",2,"Reconfigure Page: Used mixed state checkbox for select all and deselect all  ""select all and deselect all is currently controlled by a button. it should be a mixed state checkbox""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7874","04/22/2020 22:39:10",2,"filter/report recent task statuses by agentVersion ""version and revision. ""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7879","04/23/2020 22:04:04",2,"Prevent the removal of a home volume ""If a user removes their home volume the system won't boot (because the device is written into the /etc/fstab file)""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8814","04/23/2020 22:38:41",8,"Implement jasper job dependency manager ""This is to handle dependencies in jasper build.""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8582","04/23/2020 23:03:52",1,"Allow evergreen logging backends to be configured for commands from build file ""Evergreen offers different logging back-ends. We should expose this in the build system config files so people can configure evergreen logging as necessary.""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-7880","04/24/2020 14:48:23",1,"Cypress: cy.login fails when tests rerun in dev mode ""the cypress test runner reruns tests in the test browser and preserves cookies when code changes are made during local development. Rerunning tests that use cy.login fail because the command is unable to find credential inputs since the logged in user is redirected away from the login screen.    cy.login should be modified so it doesn't search for inputs if the relevant cookies exist""","",0,0,1,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7882","04/24/2020 15:56:13",1,"Set the commit when switching branches through API ""When using the API to switch branches, the commit should be set as well so the build can run successfully.    context:  https://mongodb.slack.com/archives/C0V896UV8/p1587738944466200""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7883","04/24/2020 15:59:29",2,"Many repetitions of post-task logs ""In [this|https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_rhel_62_64_bit_unittests_14a5bcab6ee67dad278c02d74fea2bf4df149aa2_20_04_08_23_24_39] task's logs there is a very large section that is repeated over and over with the same messages and same timestamps (for most of the log's page), including the line {{Finished running post-task commands}}.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7884","04/24/2020 16:38:16",0,"Pull from task sync to spawn host seems to miss files ""When requested, {{evergreen pull}} runs on the spawn host, but seemingly misses several files because the process exits with code 1.    Jasper process info from a failed pull attempt:  {              """"id"""": """"ffd19d7c-68df-4cb0-b87b-a1bf8c4bf272"""",              """"host"""": """""""",              """"pid"""": 671,              """"exit_code"""": 1,              """"is_running"""": false,              """"successful"""": false,              """"complete"""": true,              """"timeout"""": false,              """"options"""": {                  """"args"""": [                      """"/bin/bash"""",                      """"-l"""",                      """"-c"""",                      """"/root/evergreen -c /root/.evergreen.yml pull --task mci_lint_lint_model_patch_783fc9cfbe5d65fdd7c8c61827e0a8cd65fa4b44_5ea2eb1397b1d369722e887e_20_04_24_13_35_40 --dir /data/mci""""                  ],                  """"env"""": {                      """"JASPER_ID"""": """"ffd19d7c-68df-4cb0-b87b-a1bf8c4bf272"""",                      """"JASPER_MANAGER"""": """"24c0a80c-eb17-495e-95a4-545c5ef7d2d6""""                  },                  """"synchronized"""": false,                  """"implementation"""": """""""",                  """"working_directory"""": """"/"""",                  """"output"""": {                      """"suppress_output"""": false,                      """"suppress_error"""": false,                      """"redirect_output_to_error"""": false,                      """"redirect_error_to_output"""": false                  },                  """"stdin_bytes"""": null              },              """"start_at"""": """"0001-01-01T00:00:00Z"""",              """"end_at"""": """"0001-01-01T00:00:00Z""""          },""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8501","04/24/2020 16:42:12",1,"Set StartAt and EndAt for RPC ProcessInfo and do not panic RPC conversion methods ""These fields were defined for local ProcessInfo but are never set in the protobuf.    We also should not panic during conversions, which I've just noticed in jasper.ext.go, because panics will cause the RPC service to return no error and no response (which is not helpful) when it abruptly shuts down. Instead, it should return some error during the RPC-Jasper model conversion. Relying on these methods on the client side will also cause panics.""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8449","04/24/2020 16:47:06",1,"Get change points by version is failing/bugged ""Can't get a list of change points grouped by version from the cedar api.    As a DAG engineer,  I'd like to be able to get a list of change points grouped by version for any project, such that, I can do things with these lists.    AC:  * this route works for page 0  *  page_size can't be 0  * page_size is handled properly""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-7887","04/24/2020 18:07:52",2,"Log AWS retries due to request limits at lower log level ""Since retries due to request limits are an expected condition, we should not log these at error level.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7895","04/27/2020 13:42:47",0,"Pull should error if no matching task directory is found in s3 ""Right now, it'll just no-op and pull nothing. However, it should be an error to pull if the task sync contains nothing in it.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-7896","04/27/2020 15:35:17",8,"Adjust patchTasks, userPatches and taskTests pagination to account for recently created/deleted documents ""Paginated infinite scrolling tables powered by the patchTasks, userPatches or taskTests queries can show duplicate rows if patches, tasks or tests are added or deleted from the db while scrolling. A reason for this is because we currently count the number of documents to skip in our paginated db query based on how many rows we are showing in the UI""","",0,1,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7897","04/27/2020 16:56:07",1,"remove ssh_timeout_secs from evergreen.Settings.HostInit ""it's unused. ""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7899","04/28/2020 03:18:15",2,"Disable color shading in Perf Discovery ""When selecting expanded metrics in perf discovery the ratio column is still colored based on the assumption that higher is better. Numbers greater than 100 are green, and those below are red. For the latency values reported by expanded metrics, this is not correct. This ticket is to disable the coloring until such time that  EVG-7697 is completed.     Acceptance Criteria:  - No more colors in perf discovery for any metrics.  ""","",0,1,0,0,0,0,0,0,0,0,0,1,0,0,0
"EVG-7904","04/28/2020 15:27:07",0,"Write better doc comments explaining meaning of host timing constants ""There are several time constants used in host management that have subtle differences (e.g. {{provisioningCutoff}} vs {{MaxLCT}} vs {{MaxUncommunicativeInterval}}). It would be nice to explain what they are in a doc comment so people know what the exact semantics are and don't accidentally misuse them.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-7907","04/28/2020 18:15:28",1,"My Patches: Return total patches from userPatches query ""return the total number of patches without factoring in Page & Limit from the userPatches query""","",0,1,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7972","04/28/2020 18:19:25",1,"Spawnable selenium server image ""Create an Evergreen container distro that has this as its image¬†[https://hub.docker.com/layers/selenium/standalone-chrome/4.0.0-alpha-5-20200409/images/sha256-8e6222259f4098dfc9440b0d57b04088c3ea750eb6628b973fac17a646ea11f0?context=explore.|https://hub.docker.com/layers/selenium/standalone-chrome/4.0.0-alpha-5-20200409/images/sha256-8e6222259f4098dfc9440b0d57b04088c3ea750eb6628b973fac17a646ea11f0?context=explore]""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-9110","04/29/2020 16:18:19",2,"Jasper remote tests should test REST client and scripting/logging should actually be implemented ""The REST interface was never added to the remote manager tests for some reason. I tried to add the REST client to the remote tests but it fails most of the scripting and logging tests, which were untested and don't work according to the test cases.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-7913","04/29/2020 18:00:53",2,"Mark tasks as failed if the build fails during ""go test"" ""When running {{go test}}, the build can fail. The Evergreen parser for {{go test}} output doesn't currently handle this, so none of the tests will be run and the task will succeed, even though it has technically failed.    Example task:¬†[https://evergreen.mongodb.com/task/mongo_go_driver_tests_42_plus_zlib_zstd_support__version~latest_os_ssl_32~ubuntu1604_64_go_1_12_test_replicaset_auth_ssl_patch_a484eb6d9594fce7c5d6a15960a15cd04c03f986_5ea9aad10ae6062860bc3011_20_04_29_16_26_58##%257B%2522compare%2522%253A%255B%257B%2522hash%2522%253A%2522a484eb6d9594fce7c5d6a15960a15cd04c03f986%2522%257D%255D%257D]    Relevant log line:¬†[https://evergreen.mongodb.com/test_log/5ea9ad080305b924ba8232f5#L8676]""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7914","04/30/2020 03:05:09",2,"add flag to host or distro document to identify cluster members ""Evergreen has some distros which maintain hosts that don't run tasks and aren't container parents (the compile cluster for the workstations), but there is nothing in the data model that would track this, and allow us to report on it appropriately.    The host idle data report should also reflect this ""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8652","04/30/2020 16:45:10",2,"Upgrade cedar's test environment to mdb 4.2 ""As a DAG engineer,    I'd like to use MDB 4.2 in cedar's tests, such that, we can leverage the features of 4.2, and such that the test environment matches the production environment.    AC:  * move from 4.0->4.2 in cedar's tests""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-7918","04/30/2020 16:45:29",2,"Blacklist the commit queue's merge task when a task fails ""If an item is manually removed by a user we [blacklist the merge task|https://github.com/evergreen-ci/evergreen/blob/d79e6eb3d7e3e1565efbc5d9188ca4dad3e7a836/model/commitqueue/commit_queue.go#L257] so the item won't be merged if one of the tasks is restarted.  We should also do this when we [abort the version for a failing task|https://github.com/evergreen-ci/evergreen/blob/d79e6eb3d7e3e1565efbc5d9188ca4dad3e7a836/model/task_lifecycle.go#L561].""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8403","04/30/2020 19:01:28",2,"Fix redirects in cedar ""I POST to cedar.mongodb.com/rest/v1/admin/perf/change_points and get redirected to GET cedar.mongodb.com/rest/v1/admin/perf/change_points.    This seems to happen for other routes as well.    I'm guessing the issue is auth? If so, unauthenticated requests should get a 401, not a 301 to a GET route that doesn't exist.""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8980","04/30/2020 19:03:57",2,"Benchmark existing pail implementations ""This would be useful to determine what workloads the current implementations are best at handling. Most interesting would be the performance of uploading a large number of small files or a small number of large files. This has implications for how performant task sync is at uploading/downloading entire directories.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-7921","04/30/2020 20:21:20",1,"Stop looping on unprocessed notifications ""[This commit|https://github.com/evergreen-ci/evergreen/commit/0290a7087d74047154ac8abbef6201f5de27e07d] tries to dispatch notifications that were dropped by their event-send job (if the job's context is cancelled, for instance).  However, there's a collision in the job ids and the new job isn't inserted.    The event-send job's id should include a timestamp.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7926","04/30/2020 23:00:40",2,"add more logging when we terminate a provision failure host ""we seem to only have logging when setup scripts run, and it's possible that these kinds of events are centrally logged in a meaningful way.""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8694","05/01/2020 03:28:47",2,"put integration tests behind flag to help major  ""put things that depend on external services like aws behind a flag to improve local development experience, so that you don't need credentials to run tests.    open question: should we also have a flag to exclude tests that depend on a running mongodb instance or is that a reasonable assumption?""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-7930","05/01/2020 14:52:28",1,"GetInstanceStatus spins if the host ID is no longer in AWS ""GetInstanceStatus should return terminated if it receives InvalidInstanceID.NotFound. If enough time has passed that the host is no longer in AWS, this means that the host has in fact been terminated, but currently GetInstanceStatus retries on this error.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7934","05/01/2020 18:02:17",2,"spread historic repotracker build better ""- reduce frequency of catchup jobs more.   - activation should be less of a spike. and could happen in fewer jobs as they're pretty quick. ""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8442","05/01/2020 19:17:49",2,"Refactor expanded metrics front+back end not to rely on thread levels directly ""As a DAG engineer,  I'd like thread levels not to be a first class citizen in terms of the data models we use, such that, cedar doesn't need to worry about arguments to test runners individually.    AC:  * filtering by thread level is done in a way such that the API does not explicitly know about thread levels, but instead applies filters for arguments (e.g. arg_filters = {thread_levels: [1,2,3]} rather than thread_levels = [1,2,3])  * CPs returned on the version_with_change_points route have arguments on them, rather than thread levels  * The us takes thread levels from the arguments on a cp, rather than directly from a cp""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-7938","05/01/2020 22:35:07",1,"When spawning a host from a task, the host spawn dialogue reappears ""If you spawn a host from the """"Spawn..."""" link on a task page, after clicking Spawn from the modal, the host is spawned and then the modal reappears. I don't see how, but I suspect it was introduced by https://github.com/evergreen-ci/evergreen/commit/3b681729e27b6b09320ed1158f6c3eb39d75bf6d, since that's the only recent change I see that would affect this page.""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-8781","05/03/2020 16:41:10",1,"add more dispatching statics to job complete notes  ""- job dispatch time (time.Started-time.Created)  - total job pending time (time.Finsihed-time.Created)""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8868","05/04/2020 14:56:49",2,"Create Jasper build CLI that can generate evergreen configs from golang build files ""Mostly, this should just be feeding a yaml config file into the golang evergreen config generator. For now, this should just be a convenience to test the generator quickly.    ¬†    We should also create an explicit Jasper binary in {{cmd}}.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-7945","05/04/2020 16:20:27",2,"Error reporting proof of concept ""figure out which errors should be reported to bugsnag and their severity level""","",0,1,0,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-7946","05/04/2020 16:36:54",2,"Mount volumes by UUID ""Currently volumes are mounted by device name, which is subject to change (e.g if a user changes the instance type). Because this is written into the instance's /etc/fstab file changes to the device name prevent the instance from booting.  Instead, the /etc/fstab should reference the volume's UUID.    https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-using-volumes.html#ebs-mount-after-reboot""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7948","05/04/2020 21:45:22",1,"Volume expiration query inefficient ""The query to find volumes that have expired does a lookup on an unindexed foreign field (volumes.volume_id)""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7950","05/04/2020 22:08:16",2,"tests and tasks tables should be paginated instead of infinite scroll ""also allow users to enter their own page size""","",0,1,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-9270","05/05/2020 16:46:27",0,"Server should be closed as soon as the context cancels ""Currently, it only checks for a done context before each connection accept so it can wait forever on accepting connections without cleaning up. We should have a thread that closes the server as soon as the context is done to clean up resources.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-7954","05/05/2020 17:45:09",1,"Fix commit queue button sizing ""!https://files.slack.com/files-pri/T024FNNHU-F012WBPQ8BY/screen_shot_2020-05-05_at_12.40.41_pm.png!    On a 1200 px width screen""","",0,1,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7955","05/05/2020 18:46:32",2,"lobster hides 'truncated' fields on log lines ""When a server log line is too long, Structured Logging will truncate the line by omitting any fields past the line limit, and instead adds two new fields at the root level of the JSON, """"truncated"""" and """"size"""".  Lobster is hiding these fields, which makes it hard to tell what lines are actually truncated when viewing a log.      Here is an example, search for """"T00:19:23.903"""" to compare the raw log output versus the HTML Lobster output:  https://logkeeper.mongodb.org/build/bb9f3c027d7e502fb455308955e19b5a/test/5eaf5f88c2ab684da28bda30?raw=1  https://logkeeper.mongodb.org/lobster/build/bb9f3c027d7e502fb455308955e19b5a/test/5eaf5f88c2ab684da28bda30#bookmarks=0%2C29904&l=1""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7957","05/05/2020 20:53:51",1,"My Patches: prevent pagination component Next button from moving   ""the next button moves from right to left when paginating over many pages.¬†""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-7960","05/06/2020 16:16:14",2,"Batch Fleet Requests ""The CreateFleet request takes a slice of LaunchTemplateConfigs. We should investigate if this allows us to batch CreateFleet requests.  Uploading the launch templates (CreateLaunchTemplate) will probably still need to be individual.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7964","05/06/2020 20:00:49",1,"Volumes UI doesn't refresh when a host gets a volume in the background ""When a new volume is added as a virtual workstation's home volume, the new volume which is linked from the host isn't present on the volumes page until the page is reloaded.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7969","05/07/2020 13:48:40",1,"subprocess.scripting needs to support running tests in the harness ""This is so that we can generate projects that use evergreen configurations from scripting generators.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-7974","05/07/2020 22:30:50",2,"Allow task selection of multiple build variants at once in new UI ""I am not currently able to hold shift to select multiple build variants so I can hit """"select all"""" and select all tasks amongst those build variants. Will this functionality, or something equivalent, be available?    Update: this ticket added functionality to select multiple build variants with Ctrl+Click (Command+Click on mac). EVG-8176 tracks the support for Shift+Click.""","",0,1,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7975","05/07/2020 22:34:47",1,"Build variants and tasks can be selected while in ""Changes"" tab for patch configuration ""I am able to click on the different variants in the ‚ÄúSelect Build Variants and Tasks‚Äù pane while in the Changes tab during patch configuration. Since the changes stay the same regardless of which build variant/task is selected, selecting a different build variant/task does not have an effect.""","",0,1,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-7977","05/07/2020 23:27:35",2,"create Query for aws regions for user profile in spruce ""[https://github.com/evergreen-ci/evergreen/blob/master/service/user.go#L200]    https://github.com/evergreen-ci/spruce/pull/162#discussion_r421199391""","",1,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-8037","05/08/2020 16:00:11",3,"Virtual workstation home directories should be on the correct volume ""Virtual workstations currently have the users home directory at /home/ubuntu, but this is the small local volume. We want users to actually use the large volume.    We should arrange things so that /home is mounted on the large volume, not the small one.    Otherwise, it is too easy for tools that expect to write to things under $HOME to do the wrong thing. It is also unexpected for users that their $HOME directory is the wrong place to do work.  ""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-9228","05/08/2020 17:02:03",2,"Packages in server requirements should work with python 3.6 ""The server build system sets a python minimum of python 3.6, not python 3.7. However, shrub requires 3.7. This creates an unpleasant situation on Ubuntu 18.04 (which is the image type used for virtual workstations), where the system python3 is not acceptable for installing the `dev-requirements`. You can work around by using the toolchain python, which is py37, but this isn't great. We should ensure that our tools work on the most commonly deployed Ubuntu LTS without needing the mongodbtoolchain.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-7983","05/09/2020 01:58:11",2,"Host spawned from task missing artifacts ""When I spawn a host from this task, I don't seem to get any artefacts pre-loaded onto it: https://evergreen.mongodb.com/task/mongodb_mongo_v4.4_enterprise_debian10_64_logical_session_cache_replication_1sec_refresh_jscore_passthrough_3_enterprise_debian10_64_bbdf0a11d1c61be0760a829e82799129beac7be0_20_05_08_09_20_41/0    ""","  admin@ip-10-122-1-238:/data$ ls  tmp  admin@ip-10-122-1-238:/data$  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-9070","05/11/2020 18:22:39",1,"Deduplicate identical options for golang ""Since people can specify options as the package or variant level, we have to be able to overwrite existing options while preserving unspecified ones when merging variant options into package options.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-9120","05/11/2020 18:31:31",2,"Allow tags to be applied to all packages by default and explicitly exclude packages ""All tags have to be explicitly listed for now, which requires defining the package path and the tag associated with it. We should also support tagging all packages with some set of global tags, then explicitly excluding particular packages from default tags.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-8203","05/11/2020 20:44:17",1,"Move all projects to git hooks ""Some projects use the legacy repotracker. This means that commits show up much more slowly, and it prevents using more modern features. If it's possible to move all projects to git hooks, we should also open a ticket to remove the option to configure a project as repotracker-only entirely.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7985","05/11/2020 21:03:29",1,"Users with volume size >= their limit can't spawn any hosts ""If a user has volumes with a total size greater than the limit (currently 700GiB) they can't spawn hosts.  The input [here|https://github.com/evergreen-ci/evergreen/blob/2127156a54b791ecd14e4a4d53101c7661294299/public/static/partials/user_host_options.html#L115] sets a minimum of 1. Because the input is disabled when the user doesn't have any remaining volume capacity the value is [stuck at 0|https://github.com/evergreen-ci/evergreen/blob/2127156a54b791ecd14e4a4d53101c7661294299/public/static/js/spawned_hosts.js#L702] and the form is invalid.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7988","05/11/2020 23:22:53",2,"Add helpful error message if evergreen commit queue merge fails due to GitHub branch protection ""From Slack: I¬†enabled it and ran¬†{{evergreen merge}}¬†, but the commit queue merge test went faster than a different github PR check, so when evergreen attempted to merge it failed since not all required checks had completed. or at least this is what I assume happened. in github I only saw the message¬†{{""""merge failed: """"}}    ¬†""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-7993","05/12/2020 19:44:44",2,"Unscheduling tasks/builds/versions in the commit queue doesn't remove the item for GitHub queues ""If a user aborts or unschedules a commit queue task we [remove the item from the queue|https://github.com/evergreen-ci/evergreen/blob/8b70262c283f271045c4d13f81ed98b0fa8e9680/service/task.go#L738]. We do the same [for builds|https://github.com/evergreen-ci/evergreen/blob/8b70262c283f271045c4d13f81ed98b0fa8e9680/service/build.go#L221] and [versions|https://github.com/evergreen-ci/evergreen/blob/8b70262c283f271045c4d13f81ed98b0fa8e9680/graphql/util.go#L434]    The item identifier passed in is the version id, so it doesn't work for GitHub queues.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8636","05/13/2020 16:05:22",2,"periodically log statistics during event collection ""provide an implementation of the collector interface https://github.com/evergreen-ci/poplar/blob/master/vendor/github.com/mongodb/ftdc/events/collector.go#L20 so that they log aggregate stats (using grip) periodically, probably like """"running average of throughput and latency, and maybe some other elements that are in the events structure.)     Considerations:  - logging might impact the throughput of the event collector, which means we probably need to make it a wrapper to a collector. (This would probably be simplified by adding a Count() method to the Collector interface)   - users may want to opt-in to this kind of reporting, which would require changes to the poplar registry and its interfaces.  - for many tests, there are multiple collectors running in parallel, which means the logging messages produced should probably have an ID of some sort, again this might require adding a Name() method to the Collector interface, and providing a way for the to propagate through the interfaces.     I suspect for clarity and stability, we will want to implement message.Composer (from grip) with a type that produces a well-formed message and optional . message.Fields may not have an easy to scan format. ""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8001","05/13/2020 16:56:16",2,"Evergreen's _archive.targz_pack_ command does not pick up all the files ""I am investigating a test failure: https://evergreen.mongodb.com/task/mms_e2e_opsman_os_sanity_E2E_OpsManager_SanityTests_RemoteAutomation_SUSE15_860d517f3684edeb52e65c76f75cc55d4e5c43f3_20_05_13_11_51_44    Our EVG config looks like this (mms/master):      - command: archive.targz_pack        params:          target: """"logs.tgz""""          source_dir: """"mms""""          include:            - ...            - """"server/build/agents/logs/**""""    The generated logs.tgz file (on the task linked above) contains the following data:      However, if you search all the Download logs, you will find this line:      [junit] 2020-05-13T12:38:01.125+0000 [main] [com.xgen.svc.cukes.helpers.LocalAgentManagerFiles.INFO] [LocalAgentManagerFiles.java:47] - Renaming logsDir from server/build/agents/logs/42-Install-automation-and-backup to server/build/agents/logs/42-FAILED-Install-automation-and-backup    *42-FAILED-Install-automation-and-backup is missing from the tgz*    If you look at that tasks's history and download other logs.tgz files, you will find all kinds of inconsistencies (e.g. the previous one has two failed tests, but doesn't have a `server/build/agents/`directory.    *This is seriously impacting our ability to debug why our test targets are failing!*    Can you please look at this bug, with priority?    Thanks,  Mihai""","  ‚ùØ ll build/agents/logs  total 0  drwxr-xr-x@ 4 mihaibojin  staff  128 May 13 16:42 41-PASSED-Install-automation-and-backup  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8685","05/13/2020 18:42:42",2,"simplify amboy marshaling flow ""use the thing julian and I have been working on for dependency injection in jasper""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8003","05/13/2020 22:51:24",2,"Add check box to variant select in patch restart modal ""!image-2020-05-13-17-51-00-199.png!""","",0,0,0,1,0,0,0,0,0,0,0,0,0,1,0
"EVG-8004","05/13/2020 23:11:01",1,"Use archive bucket in task sync ""This is to attempt to fix performance issues in task sync possibly due to uploading a large number of files.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-8009","05/14/2020 18:15:37",1,"Use separate data set in evergreen for e2e tests and for developing locally ""Our e2e tests will make assertions based on a predefined set of data. Two separate data sets allows us to freely edit data for local development without worrying about breaking the e2e tests.¬†""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-8010","05/14/2020 19:35:38",1,"Virtual-workstations are terminated shortly after provisioning completes ""Multiple user-data-done jobs running at the same time will sometimes cause the second job to terminate the host.     When the job returns an error we [terminate the host|https://github.com/evergreen-ci/evergreen/blob/a2a5bb96591e9b2eecb09edb314fdf99abc53932/units/provisioning_user_data_done.go#L117]. attachVolume is mostly idempotent so a second job should just mount the volume a second time without erroring. Asking AWS to mount an already mounted volume is an exception because AWS will return an error if the volume is already mounted. We try to [continue on error for this case|https://github.com/evergreen-ci/evergreen/blob/a2a5bb96591e9b2eecb09edb314fdf99abc53932/units/provisioning_setup_host.go#L774], but it seems AWS sometimes returns a different error string: """"VolumeInUse"""".    Previously we addressed this problem with scopes and now that scopes are fixed that may be a viable solution.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8011","05/14/2020 20:12:24",1,"Host start/stop/terminate buttons are misaligned ""it seems hiding uptime causes the buttons to move up a column.  Why is uptime hidden, though? They're both running. (I just stopped/started the second one)""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-8012","05/14/2020 20:15:52",1,"Update Host button adds an error flash if unexpirable hosts are at the limit ""I have two unexpirable hosts. The form isn't dirty, but the Update Hosts button is enabled. Clicking it displays an error flash that I can't have more than two unexpirable hosts.  If I actually make a change I still get the error, but the change is made.""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-8013","05/14/2020 20:19:50",1,"Volume create buttons are on the left of the modal ""Maybe they need to be float:right?  Also, should the label be """"Create""""?""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-8790","05/15/2020 14:59:24",3,"Make signal processing jobs in cedar report time series to Performance Analysis and Triage Service and remove all other tooling ""As a DAG engineer,  I'd like to remove the signal processing stuff being done in cedar, and simply have it's [recalculate change points job|https://github.com/evergreen-ci/cedar/blob/master/units/recalculate_change_points.go#L69] migrated to only reporting time series updates to the Performance Analysis and Triage Service.    The API for the reporting is as follows:      The aggregation for getting this data [already exists|https://github.com/evergreen-ci/cedar/blob/master/units/recalculate_change_points.go#L89].    AC:  * Cedar reports time series updates to performance analysis and triage service using the existing triggers for aforementioned job  * All other signal processing tooling/schema removed  * Remove change points from cedar's database    Notes:  * [Technical Design|https://docs.google.com/document/d/1wKLZ-IWjA8-kWAO44tHotzuYei0y2rNX7OQjrKGEo34]  * [Design Modification|https://docs.google.com/document/d/1jLcNDgYPSJte11kfFnidWpFXfWUPnjy-zdq63UeWOQM]""","  POST $baseUrl/time_series/update  {   """"project"""" : """"sys-perf"""",   """"version"""" : """"sys_perf_fb91e1d6e719de42905d63d26f065a4ac835be1e"""",   """"variant"""" : """"linux-3-node-replSet"""",   """"task"""" : """"parallel_insert_replica"""",   """"test"""" : """"ParallelInsert-1024-Insert_WMajority_JFalse"""",          """"measurement"""" : """"Latency99thPercentile"""",          """"args"""" : [{                """"name"""": """"thread_level"""",                """"value"""": 16          }],   """"data"""": [    {     cedar_perf_result_id: ObjectId(""""5eb31601bf3966ed0de32e04""""),     order: 12311,                        value: 100    },                ...  ]  }  ",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8378","05/15/2020 18:48:11",0,"Large writer closer should flush after it has reached the threshold size ""In [these line in the largeWriterCloser|https://github.com/evergreen-ci/pail/blob/a03af0d0a6184f872ec5ddd73631cb00f0ec3675/s3_bucket.go#L468-L474], we flush before we've reached {{maxSize}}. However, since this is the backing writer implementation of the multipart uploader, it should flush¬†_after_ it has reached 5MB or else AWS will reject the multipart upload with the error {{EntityTooSmall: Your proposed upload is smaller than the minimum allowed size}}. We should change the semantics of the size threshold to mean {{minSize}} for uploading, rather than {{maxSize}} before we flush.""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8027","05/18/2020 17:12:39",1,"mountLinuxVolume: umount command doesn't specify the absolute path to the device ""The device name no longer includes the absolute path.  Fix the umount command to prepend the path (/dev/)""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8031","05/18/2020 21:00:30",1,"evergreen validate should error more helpfully ""Occasionally users have evergreen validate warnings from unmarshal strict that just look like """"error unmarshalling into temp structure."""" Would be nice if we could give them more context.    [https://mongodb.slack.com/archives/C0V896UV8/p1589831494350700]    ¬†""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-8035","05/19/2020 16:03:05",1,"Enable Git Tag Version Creation Checkbox on Project Page ""Similar to Enable Pull Request Testing, would be nice to have this as a checkbox so if someone is having an issue they can uncheck this rather than unpopulate related fields.""","",0,1,0,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-8039","05/20/2020 02:01:59",1,"New provider settings don't log to the event log ""In https://evergreen.mongodb.com/event_log/distro/rhel76-docker, the AMI history does not show past April 6""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8041","05/20/2020 14:41:52",1,"Volume expiration warnings should link to the volume ""The link I got just took me to the spawn host page.    It could link to the volume by setting the resource type and volume id parameters in the URL""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8043","05/20/2020 19:09:39",2,"Failed: coverage on Coverage [Evergreen @ 2c4eeec3]  ""h2. [coverage failed on Coverage|https://evergreen.mongodb.com/task/evergreen_coverage_coverage_2c4eeec32698f70c87c4153f52a528ef58a4f1a5_20_05_20_14_24_51/0]  Host: [ec2-52-86-97-72.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/i-06d9b27132960dd1f]  Project: [Evergreen|https://evergreen.mongodb.com/waterfall/evergreen]  Commit: [diff|https://github.com/evergreen-ci/evergreen/commit/2c4eeec32698f70c87c4153f52a528ef58a4f1a5]: EVG-7990 add git tag requester (#3602) | 20 May 20 14:24 UTC  Evergreen Subscription: ; Evergreen Event:     [Task Logs | https://evergreen.mongodb.com/task_log_raw/evergreen_coverage_coverage_2c4eeec32698f70c87c4153f52a528ef58a4f1a5_20_05_20_14_24_51/0?type=T]  ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-8044","05/20/2020 19:40:47",1,"Unexpirable hosts remaining message is confusing if it's broken over two lines """"""1   unexpirable host remaining""""    it's not clear the 1 is part of a message that got wrapped. Maybe we should set     {code:css}  white-space: nowrap;  {code}    [here|https://github.com/evergreen-ci/evergreen/blob/2c4eeec32698f70c87c4153f52a528ef58a4f1a5/public/static/partials/user_host_details.html#L99] and [here|https://github.com/evergreen-ci/evergreen/blob/2c4eeec32698f70c87c4153f52a528ef58a4f1a5/public/static/partials/user_volume_details.html#L43]""","  white-space: nowrap;  ",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8045","05/20/2020 21:03:06",1,"Mounted volumes shouldn't display an expiration time ""... since they won't expire.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8529","05/21/2020 15:30:28",1,"Dist target should compile for Linux for deployment ""When you use {{make dist}}, it compiles but compiles the barque binary also based on your local GOOS (which is probably {{darwin}} for everyone except Sam). However, the barque binary in the {{dist.tar.gz}} needs to be built for Linux, so we have to run {{make build/make-tarball}}, followed by {{GOOS=linux make dist}} or else the binary will be built for macos.    Also verify that custom local builds are deployable because it seems like the two most recent deploys for Amboy revendors did not actually restart the barque app server with the custom build (although they changed the {{/srv/barque/current}} symlink).""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8810","05/21/2020 16:49:11",1,"mciuploads/barque permissions issue ""https://slack-redir.net/link?url=https%3A%2F%2Fevergreen.mongodb.com%2Ftask%2Fbarque_ubuntu1604_dist_a7a85c58ecc01ff206816d3088acf74597348b67_20_05_21_15_44_13%2F0    looks like we should be able to upload, but maybe our key doens't have access""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-9138","05/21/2020 19:14:47",0,"Move BuildFileList into utility ""This is so Jasper can reuse the function (will require libraries using utility to vendor {{github.com/sabhiram/go-git-ignore}}).""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-9235","05/21/2020 19:16:00",0,"Add yaml.UnmarshalStrict variant for utility operations ""The utility package provides convenience functions wrapping the regular {{yaml.Unmarshal}}, but we should also provide strict variants for stricter YAML parsing.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-8052","05/21/2020 19:37:22",1,"Update Subscription Modal based on designs ""Update the Subscription modal based on designs from product designers""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-8053","05/21/2020 20:51:09",1,"Aborted by task name is too long ""When a task is aborted on account of another task (for the commit queue) the task page includes a link to the task that really failed. The link text is the task ID which is unsightly and confusing. It should probably be """"_build display name_:_task display name_"""" or something.    Example:¬†[https://evergreen.mongodb.com/task/mongodb_mongo_v4.2_enterprise_rhel_62_64_bit_compile_patch_8dafa4060855b0568dbd3e103984d29cb2937628_5ec6d01c3627e07ed8130f62_20_05_21_19_02_01|https://evergreen.mongodb.com/task/mongodb_mongo_v4.2_enterprise_rhel_62_64_bit_compile_patch_8dafa4060855b0568dbd3e103984d29cb2937628_5ec6d01c3627e07ed8130f62_20_05_21_19_02_01##%257B%2522compare%2522%253A%255B%257B%2522hash%2522%253A%25228dafa4060855b0568dbd3e103984d29cb2937628%2522%257D%255D%257D]""","",0,1,0,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-8690","05/22/2020 16:12:49",2,"jasper benchmarks fail to compile after logging configuration change """"","  benchmarks/harness.go:89:51: undefined: options.Logger  benchmarks/harness.go:91:26: undefined: options.Logger  benchmarks/harness.go:96:14: undefined: options.LogType  benchmarks/harness.go:97:16: undefined: options.Log  benchmarks/harness.go:98:34: undefined: options.Logger  benchmarks/harness.go:102:4: r.Begin undefined (type poplar.Recorder has no field or method Begin)  benchmarks/harness.go:107:4: r.IncOps undefined (type poplar.Recorder has no field or method IncOps)  benchmarks/harness.go:108:40: opts.Output.Loggers[0].Configure undefined (type *options.LoggerConfig has no field or method Configure)  benchmarks/harness.go:114:4: r.End undefined (type poplar.Recorder has no field or method End)  benchmarks/harness.go:122:15: undefined: options.LogType  benchmarks/harness.go:122:15: too many errors  ",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8056","05/26/2020 13:49:34",2,"Unable to run a local shell script in subprocess.exec on windows ""I‚Äôm trying to run a subprocess.exec in a windows host where the binary option is a local shell script but I‚Äôm getting an error    Sample evg function  {code:yaml}command: subprocess.exec  type: test  params:    add_to_path:      - ${go_bin}      - """"/cygdrive/c/Program Files/go-msi""""      - """"/cygdrive/c/wixtools/bin""""    working_dir: src/github.com/mongodb/mongocli    env:      WORKDIR: ${workdir}      CGO_ENABLED: """"0""""      <<: *go_options    binary: build/package/generate-msi.sh  {code}  Task [here|https://evergreen.mongodb.com/build/mongocli_master_go_msi_snapshot_patch_4ed3c5b8e6ae45d996c033d688526965c0d3e7b8_5ecbde33d1fe0766215764e7_20_05_25_15_03_23]   Logs [here|https://evergreen.mongodb.com/task_log_raw/mongocli_master_go_msi_snapshot_package_msi_patch_4ed3c5b8e6ae45d996c033d688526965c0d3e7b8_5ecbde33d1fe0766215764e7_20_05_25_15_03_23/0?type=T#L37]    Is this possible for windows hosts? running shell scripts as a subprocess.exec ? I‚Äôm trying to move a lot of my shell.exec to be subprocess.exec this way but hitting this error with a windows host""","%1 is not a valid Win32 application  command: subprocess.exec  type: test  params:    add_to_path:      - ${go_bin}      - """"/cygdrive/c/Program Files/go-msi""""      - """"/cygdrive/c/wixtools/bin""""    working_dir: src/github.com/mongodb/mongocli    env:      WORKDIR: ${workdir}      CGO_ENABLED: """"0""""      <<: *go_options    binary: build/package/generate-msi.sh  ",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8067","05/26/2020 19:49:48",2,"Track duration of time between patch build creation and patch build scheduling ""I am interested to track a metric that gives a sense of how long it takes a user to configure a patch build, whether via the evergreen UI or relying exclusively on the CLI. This metric, along with data on how many users are using the UI, and whether users are running builds with all required tasks of all required builds vs. builds with some curated selection of tasks, would be interesting to look at to gauge usability of the patch build configuration process.    I believe we already can get a sense of how many users are using the UI to configure patch builds by looking at the POST requests to the patch build configuration page.    As a follow-up question related to this feature request, are we currently tracking any information on the composition of tasks being selected for patch builds?""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-8068","05/26/2020 20:48:51",2,"Child task of display task has ETA based on whole display task's makespan instead of the previous execution of the child task ""When viewing the child task of a display task, such as [this one|https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_rhel_62_64_bit_multiversion_sharding_jscore_multiversion_passthrough_gen_patch_c480627eae1b5d09f8eea247b396b45b89a5c275_5ecd672a306615532c0d3e5b_20_05_26_19_00_10/1##%257B%2522compare%2522%253A%255B%257B%2522hash%2522%253A%2522c480627eae1b5d09f8eea247b396b45b89a5c275%2522%257D%255D%257D], I expect the ETA to be¬† 2-3 minutes based on execution 0. Instead when it's running, the ETA is 16 minutes long, as demonstrated by the attached screenshot.    My guess is that child task is using the parent display task's previous makespan (which was 17 minutes) to make this estimation. (Parent of the above linked task¬†[is here)|https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_rhel_62_64_bit_multiversion_display_sharding_jscore_multiversion_passthrough_patch_c480627eae1b5d09f8eea247b396b45b89a5c275_5ecd672a306615532c0d3e5b_20_05_26_19_00_10##%257B%2522compare%2522%253A%255B%257B%2522hash%2522%253A%2522c480627eae1b5d09f8eea247b396b45b89a5c275%2522%257D%255D%257D]""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8071","05/26/2020 22:14:14",1,"The CLI's host create command's key parameter is unclear ""The key help string says """"name or value of an public key to use"""" but it really means the name of a key in the user's user document.    The error message for a non-existent key is also not helpful: """"key does not start with ssh-rsa or ssh-dss"""". We should say the key doesn't exist.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-9210","05/26/2020 22:32:16",2,"New repobuilder jobs should clear .olddata from previous runs ""When the app server restarts in the middle of a repobuilder job, it will leave behind the {{.olddata}} directory if it was running {{createrepo}} when it restarted. This will cause future {{createrepo}} commands in later repobuilder jobs to fail since the old data directory still exists. We should remove it before we run {{createrepo}} (this should be fine to do since the jobs are protected by scopes on the distro and have to run serially on each distro).    Logs: https://mongodb.splunkcloud.com/en-US/app/search/search?q=search%20index%3Dbarque%20build-repo.distro.rpm.repo.c0860eb1-cce1-4207-8f47-50c786814d87&display.page.search.mode=verbose&dispatch.sample_ratio=1&earliest=1590513780&latest=1590528225&sid=1590528302.2773197""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-8075","05/27/2020 15:47:14",2,"Create Query to fetch correct download links for download card ""[https://github.com/evergreen-ci/evergreen/blob/master/environment.go#L736]""","",0,0,0,1,0,0,0,0,0,0,0,0,0,1,0
"EVG-8076","05/27/2020 16:02:41",2,"Create Query to query for correct version of evergreen cli  ""https://github.com/evergreen-ci/spruce/pull/179#discussion_r430726473""","",0,0,0,1,0,0,0,0,0,0,0,0,0,1,0
"EVG-8358","05/27/2020 21:06:47",0,"subprocess.exec is missing json tags ""It won't serialize properly if the JSON tags aren't included because it will use the field name starting with an uppercase as the key.""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-9291","05/28/2020 16:04:27",1,"Allow number of tasks for task group to be configurable ""Although the lower limit is 4, we should let people set it to a different value than that if they want.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-8082","05/28/2020 18:39:49",2,"Slack Patch Notification reports failed task has started ""I received a notification (Subscription: 5ec56ff961837d675d29296e; Event: 5ecff63f7742ae725a5508e2) for¬†[this|https://evergreen.mongodb.com/task/jstestfuzz_self_tests_query_agg_fuzzers_v4.4_aggregation_multiversion_fuzzer_inMem_patch_a8b108b061d064bbeebd5bdb7d81ced4d77e1d19_5ecff45a1e2d17733479353c_20_05_28_17_26_51/0]¬†task, see attached screenshot.   It failed, the line to the left is red (as it should be in failed scenarios) but the status has been reported as started. Also, this is a PR notification, so I'm not sure why I'm getting a notification for this task, which I never subscribed to, instead of the patch as a whole.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8846","05/28/2020 21:33:45",2,"Reorganize build files ""While the multi-file support is correct and usable, it's probably not the ideal file organization structure. It would be nice to figure out a file organization that somehow nicely handles evergreen-specific configuration (e.g. loggers and task groups) and generator-specific configuration (e.g. Golang's {{RootPackage}} doesn't have a good location, nor do the environment variables) without creating a proliferation of lots of small single-purpose files.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-8111","05/29/2020 14:25:25",2,"Not authing against corp secure properly when using performance analysis and triage service ""It appears that the performance analysis and triage service in production is sometimes unavailable. Reproduce by following this [link|https://evergreen.mongodb.com/perf-bb/expanded-metrics-change-points/sys-perf]. Be sure to clear cookies [here|https://signal-processing-service.server-tig.prod.corp.mongodb.com/docs] first.    As a DAG engineer,  I'd like this to work, and redirect users to authenticate through corpsecure when it doesn't, such that, we have the necessary auth cookies to make these requests.    AC:  * Evergreen auths against corpsecure as needed""","",0,1,0,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-8083","05/29/2020 18:09:39",2,"Setup Failure: test-cloud on Ubuntu 16.04 [Evergreen @ 51e5e1e8]  "" h2. [test-cloud failed on Ubuntu 16.04|https://evergreen.mongodb.com/task/evergreen_ubuntu1604_test_cloud_51e5e1e8c347d72879f859868b5d549469ecd6ab_20_05_29_14_35_25/0] Host: [ec2-3-91-191-170.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/i-09bcb395f9d9879be] Project: [Evergreen|https://evergreen.mongodb.com/waterfall/evergreen] Commit: [diff|https://github.com/evergreen-ci/evergreen/commit/51e5e1e8c347d72879f859868b5d549469ecd6ab]: Revert """"Revert """"Revert """"Revert """"MAKE-1152: Use MaxInt32 instead of MaxInt64 (#3621)""""""""""""""""  This reverts commit 0c48a16288bb3eeb9cbd80af9c8a5869f9a57d22. | 29 May 20 14:35 UTC Evergreen Subscription: ; Evergreen Event:   [Task Logs | https://evergreen.mongodb.com/task_log_raw/evergreen_ubuntu1604_test_cloud_51e5e1e8c347d72879f859868b5d549469ecd6ab_20_05_29_14_35_25/0?type=T] ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-8084","05/29/2020 19:00:54",0,"Host should decommission once max provision attempts is exceeded ""There's an off by one error where, because we increment the provision count at the end of the job, the condition {{shouldRetryProvisioning()}} will never return false, so the host will not decommission immediately when it runs out of attempts (it'll be caught by the 25 minute timeout, but it would be better for it to fail fast).""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8985","05/29/2020 21:02:06",8,"Implement jasper build ""The build system should be able to run targets and should be integrated with the amboy job queues/dependency manager to handle parallel target creation/re-building.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-8343","05/29/2020 21:03:59",1,"Update signal processing algorithms readme (poetry) ""As a DAG engineer,  I'd like to update the signal processing algirithm's readme to reflect the move to pytest,  such that, developers know how to develop the library.""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8087","05/31/2020 04:09:15",1,"Raise limit on hosts.create ""For provider: docker it seems like it could be much higher.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-9163","06/01/2020 16:06:09",2,"Scoped jobs that are undispatchable should have scopes removed or be deleted ""It seems like barque still has problems with re-dispatching old jobs with scopes that exceed the lock timeout. One possible reason is that jobs with a {{DispatchBy}} requirement may not be able to run if too long has passed, so they will be stuck unable to dispatch and also will not clear their scopes. For jobs that have scopes and are stuck in progress but can't be re-dispatched due to {{DispatchBy}}, we should just unset their scopes and mark them complete.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-8983","06/01/2020 16:45:58",0,"Move file checksum logic to utility ""This is mostly so that jasper can re-use it for an experimental dependency cache implementation.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-8096","06/01/2020 19:07:59",2,"Task spawn host button misses artifacts ""When I try to spawn a host for my BF that had a crash on https://evergreen.mongodb.com/task/mongodb_mongo_v4.4_enterprise_rhel_62_64_bit_large_txns_format_concurrency_sharded_with_stepdowns_202f27642004fc8a87efa543940825b4f5c8d866_20_05_27_15_56_43/0, I don't get the core dumps downloaded and have to download them myself.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8421","06/01/2020 19:18:51",1,"Benchmarks do not compile with change to loggers ""{{go build ./benchmarks}} fails because the loggers were refactored.    ¬†    We should also add it to the lint packages so it can be sanity check that it actually works in the future.""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8099","06/01/2020 19:51:11",2,"Improve event log for deleted commit queue item ""When a commit queue item is deleted and the merge is prevented, it may not be immediately clear to the user or to others why the merge task is blacklisted (see [example|https://evergreen.mongodb.com/task/mongodb_mongo_v4.2_commit_queue_merge_merge_patch_patch_495ea4a50219e08ac7a4e1bcd58dc4935f5f0173_5ed53e152fbabe33b5eb87e6_20_06_01_17_43_05#/log/EV#comparehashes=495ea4a50219e08ac7a4e1bcd58dc4935f5f0173&threads=maxonly]). We should add a new type of log that says something like """"Patch deleted by <user>"""" before logging that mci has changed the task priority.    [https://github.com/evergreen-ci/evergreen/blob/1f42d4e8c3ec4e8b9f1104668ccf41d8040b7f0e/model/commitqueue/commit_queue.go#L271]""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8100","06/01/2020 21:43:57",2,"Can't spawn host after creating a 700GB Volume ""Once I have a workstation with a 700GB volume, the spawn button is greyed out regardless of which distro I try to spin up""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8102","06/02/2020 02:32:55",0,"Fix unit tests ""Because tychoish :(¬†""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8103","06/02/2020 14:08:13",2,"Spawning containers from tasks shouldn't use existing parent hosts ""The parents will have the same security group as the one running the task, and hosts within this same security group cannot communicate with each other""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8105","06/02/2020 14:52:04",1,"Patch & Task page: set max width on display name part of tables ""when display names are one word and long, there is not enough space to view the other columns""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-8106","06/02/2020 14:56:57",1,"GraphQL error: internal system error on logs page ""For https://spruce.mongodb.com/task/evergreen_lint_generate_lint_patch_f6ffa2cce21a18c650c8e61dfca474a1f87845a5_5eb2d84c5623433079333f22_20_05_06_15_31_26/logs.    Looking at the legacy UI, this task has no logs, so I think this is just a case where the message should say """"No logs found"""" or something similar instead of the error message.""","",0,0,1,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-8107","06/02/2020 14:59:20",2,"Patches that will not run are marked running on patches page in Spruce ""This patch is marked as running on my my patches page https://spruce.mongodb.com/patch/5eb2d84c5623433079333f22/tasks.""","",0,0,1,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-8108","06/02/2020 14:59:51",2,"host.create container logs not working ""I wrote a command that tries to tail the logs but they're always empty""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8109","06/02/2020 15:01:01",2,"Malformed link to jira ticket for revert commits on waterfall page ""{color:#1d1c1d}On waterfall page for project {color}{color:#1d1c1d}evergreen is generating wrong URLs for revert commits. In particular is including a double apices¬†{color}{{""""}}{color:#1d1c1d}¬†and colon in the jira [link|https://jira.mongodb.org/browse/%22SERVER-50251:], like the following:   !Screen Shot 2020-08-24 at 1.06.36 PM.png|width=30%! ""","",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0
"EVG-8112","06/02/2020 17:50:11",1,"Task action items in dropdown menu are unresponsive to clicks ""Task page, task actions dropdown menu, clicking on the dropdown items does nothing.¬†    Update: the dropdown items do work, but they are not being properly displayed when they are disabled. They are disabled but do not appear disabled; therefore confusing the user by making them think the button is broken.¬†""","",0,0,1,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-8113","06/02/2020 18:02:49",1,"Project setup script doesn't run correctly ""1) The working directory is set to a directory that doesn't exist.  2) The same command runs multiple times.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8833","06/02/2020 19:31:22",2,"Support test results parsing from generators ""The Make-based generator has to have a means to report results from tests (e.g. {{gotest.parse_files}}). The golang generator will also need to support a means to report test results in such a way that we don't need an intermediate file containing the results, but this can occur within subprocess.scripting once test results are moved to cedar.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-9178","06/02/2020 20:26:24",1,"Add documentation to exported fields in cedar ""Some of the structs and public fields in Cedar don't have documentation associated with them. It should be added in the places it is needed for the things that the DAG team owns -¬†Performance Analysis Service, time series data, time series update job, etc    ¬†    AC:   * Public fields in DAG related areas in Cedar are documented""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-8119","06/02/2020 21:18:16",1,"refactor and Remove XHR dependency for commit_queue tests ""We use a pollyfill with in our cypress tests to listen to our graphql requests. This breaks apollos ability to make event driven callbacks like `onError` and causes functionality to break within cypress but not on a normal browser. This ticket covers removing all `waitForGQL` dependencies with in the commit_queue tests""","",0,0,0,1,0,0,0,0,0,0,0,0,0,1,0
"EVG-8133","06/02/2020 21:56:52",1,"""Unable to find task"" when clicking on burn_in task ""Clicking the task shown in the screen shot¬†for this [patch build|https://spruce.mongodb.com/patch/5ea9c9fc7742ae2842c23bb3/tasks] leads to the graphql error in the screen shot. Here is the [offending task|https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_rhel_62_64_bit_burn_in:replica_sets_jscore_passthrough_1_enterprise_rhel_62_64_bit_patch_4fa07f1c28e20f902d55dcc2f2c07a8135ad31f4_5ea9c9fc7742ae2842c23bb3_20_04_29_18_40_22/0##comparehashes=4fa07f1c28e20f902d55dcc2f2c07a8135ad31f4&threads=all] in the legacy UI.""","",0,0,1,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-8134","06/02/2020 22:47:16",2,"Expose --add-host for Docker containers created with host.create ""It would be useful to be able to say something like this:    {code:yaml}  - command: shell.exec    params:      script: |        echo """"task_host_server_ip: $(ip addr show ...)"""" > task_host_expansions.yml # or the external IP from the instance metadata service  - command: expansions.update    params:      file: task_host_expansions.yml  - command: host.create    params:      provider: docker      image: selenium/standalone-chrome      publish_ports: true      add_hosts:        task_host: """"${task_host_server_ip}""""  {code}    Then within the container, the browser could be directed to visit http://task_host:9080.    Reference: https://docs.docker.com/engine/reference/run/#managing-etchosts""","  - command: shell.exec    params:      script: |        echo """"task_host_server_ip: $(ip addr show ...)"""" > task_host_expansions.yml # or the external IP from the instance metadata service  - command: expansions.update    params:      file: task_host_expansions.yml  - command: host.create    params:      provider: docker      image: selenium/standalone-chrome      publish_ports: true      add_hosts:        task_host: """"${task_host_server_ip}""""  ",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8135","06/03/2020 14:20:34",1,"my patches: fix build status icon link ""currently uses the wrong id""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-8136","06/03/2020 15:13:20",2,"Add count of how long task has been running / ETA ""Currently there's a count up of how long the task has been running, and and count down for ETA. This is prominently featured in the old UI and would be missed in the new UI. Also on tasks that haven't started yet we show the estimated time to start and the estimated duration.    !image-2020-06-03-07-13-11-390.png!""","",0,1,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-8138","06/03/2020 15:16:25",1,"Event logs aren't handling quotes correctly ""[https://spruce.mongodb.com/task/evergreen_ubuntu1604_dist_patch_40de312f8fb0855a0d4fcaf1647b36fc6173768b_5ed6d4df850e612690f882f0_20_06_02_22_38_41/logs?logtype=event]""","",0,0,1,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-8140","06/03/2020 15:26:51",2,"Distinguish between Undispatched and Blocked tasks in Spruce ""This task shows undispatched, but it is blocked on other tasks succeeding which have failed so the status should say blocked.    [https://spruce.mongodb.com/task/evergreen_lint_lint_trigger_patch_1f42d4e8c3ec4e8b9f1104668ccf41d8040b7f0e_5ed671e1d6d80a60ea7b2677_20_06_02_15_36_32/logs]""","",0,0,1,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-8142","06/03/2020 15:33:19",2,"Task durations seem wrong ""The point of showing the duration on the current task page is to show the length of time that the current task takes, not the overall time of the commit. In [Spruce|https://spruce.mongodb.com/task/evergreen_lint_lint_rest_route_patch_1f42d4e8c3ec4e8b9f1104668ccf41d8040b7f0e_5ed671e1d6d80a60ea7b2677_20_06_02_15_36_32/logs] this task duration is 13 hours, and the base commit duration is 7 hours. But [in Evergreen |https://evergreen.mongodb.com/task/evergreen_lint_lint_rest_route_patch_1f42d4e8c3ec4e8b9f1104668ccf41d8040b7f0e_5ed671e1d6d80a60ea7b2677_20_06_02_15_36_32]the task duration is 47 seconds, with 27 seconds on the base commit, which is much more relevant to the current task.  ""","",0,0,1,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-8143","06/03/2020 15:33:42",2,"Patch shows failed, but no tasks are failed ""https://spruce.mongodb.com/patch/5ed7b0670ae606496cf87284/tasks?variant=ubuntu1604    Note that this appeared to be the case before test-cloud ran. The icon for the build variant on the my patches page was correct (that the variant was in progress) but the patch badge said failed.""","",0,0,1,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-8144","06/03/2020 15:35:06",2,"Is anything actually ever in Running status? ""Tasks that are running appear to be Started. I don't know if anything is ever in Running. Is that status redundant?""","",0,0,1,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-8145","06/03/2020 15:37:20",1,"Time taken missing, though makespan is present ""https://spruce.mongodb.com/patch/5ed7b0670ae606496cf87284/tasks?variant=ubuntu1604""","",0,0,1,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-8146","06/03/2020 15:40:42",1,"Variant should use display name, not id ""For example, https://spruce.mongodb.com/patch/5ed7b0670ae606496cf87284/tasks?page=0 should have """"Ubuntu 16.04"""", not """"ubuntu1604"""" in both the table and the build variants pane. That should also be the case for the tooltips on the my patches page.""","",0,0,1,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-8151","06/03/2020 18:53:20",2,"subprocess.scripting should parse go test results ""We should not have to execute a separate {{gotest.parse_files}} command when it could be done directly from the output of subprocess.scripting. This is just an intermediate solution until we move test results to cedar.""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8547","06/03/2020 22:55:31",0,"gotest.parse commands need to specify files ""We can't specify the files to parse for golang tests currently.""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8157","06/04/2020 14:21:44",1,"Two Linux 64 bits show up on the download card ""!image-2020-06-04-09-20-57-145.png!    One of the them is the legacy version we shouldn't show that""","",0,0,0,1,0,0,0,0,0,0,0,0,0,1,0
"EVG-8360","06/04/2020 16:48:50",0,"Return correct gotest command name based on legacy or non-legacy ""It returns the wrong command name if you use {{gotest.parse_files}} instead of {{gotest.parse_json}}""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-9282","06/04/2020 17:18:57",1,"Experiment with removing grep for go test  ""I feel like extra grepping for pass/fail in the output log is unnecessary if you just check the return code of {{go test}}.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-9005","06/04/2020 17:41:02",1,"Curling golangci-lint should retry ""Sometimes the host fails to resolve {{raw.githubusercontent.com}}.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-8159","06/04/2020 17:54:24",1,"gotest.parse_json should be able to match file glob patterns ""File path matching behavior should be the same as {{gotest.parse_files}} basically.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-8507","06/04/2020 18:57:36",1,"Fix test-remote on race-detector ""The test only fails on race detector so it could be something to do with the test execution being slower due to race detection enabled.  Logs: https://evergreen.mongodb.com/task/jasper_race_detector_test_remote_edc31da19da5dea040847c2c83e034fb2a357cd7_20_06_02_14_25_50""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8163","06/05/2020 13:59:36",2,"Patch base task statuses filters do not always work ""On the patch details page, filtering by base status returns unexpected results. Sometimes, the statuses displayed in the filter dropdown do not align with the statuses displayed in the base status column. Additionally, filtering by 'success' or another status returns no tasks when it should return some or all of them.¬†    Example patch:¬†[https://spruce.mongodb.com/version/5ecff20932f4173f1fdc1666/tasks?limit=100&page=0]""","",0,0,1,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-8164","06/05/2020 14:24:21",2,"Why did git.get_project block the mongodb-mongo-master commit queue for 35 minutes? ""This morning I created a {{commit-queue merge}} ([here|https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_rhel_62_64_bit_lint_fuzzer_sanity_patch_patch_5c6e1e540a9b5b0e0c87fa3522b9e668e2357a8c_5eda3142d6d80a270f66d4cf_20_06_05_11_50_01##comparehashes=5c6e1e540a9b5b0e0c87fa3522b9e668e2357a8c&threads=maxonly]) which locked up for 35 minutes. (compared to the [expected 2 minutes|https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_rhel_62_64_bit_lint_fuzzer_sanity_patch_patch_7074dee1fbf6763c0d463c377c2e47d8ef2c4f6f_5eda44a72a60ed0ac4af4b34_20_06_05_13_12_08##comparehashes=7074dee1fbf6763c0d463c377c2e47d8ef2c4f6f&threads=maxonly]¬†for this task) There is no output from {{git.get_project}}. I suspect this would've blocked the commit queue until it timed out.    Can you look into whether this was an Evergreen, VPC/networking issue, Github or other issue?    Furthermore, what can be done to prevent this in the future? Should we set timeouts for the commit queue tasks in the server yaml. Does the git command support a timeout for the initial round trip connection (which I'm assuming is what failed here)? Basically, I could've tanked the whole queue for however long the timeout is, and that would've been pretty bad for others.""","",0,0,0,0,0,1,0,0,0,1,0,0,0,0,0
"EVG-8166","06/05/2020 14:57:30",0,"Remove condition to stop polling build variants when all tasks have finished ""this condition prevents polling when we actually should be""","",0,0,1,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-8167","06/05/2020 15:17:42",2,"Allow passing arbitrary additional parameters to host rsync command ""So that people can do things like pass a .gitignore to apply the rules for file exclusion via {{--filter}} or do whatever they want if they already know how to use rsync.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8170","06/05/2020 17:15:36",0,"Remove notify me button on patch page ""temporarily remove notify me button on patch page until the modal is developed""","",0,0,0,1,0,0,0,0,0,0,0,0,0,1,0
"EVG-8171","06/05/2020 17:33:35",1,"Base commit link on patch details page should go to base commit in legacy ui ""Currently it just goes to the version page""","",0,0,1,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-9058","06/05/2020 18:52:33",1,"Export scripting harness type strings ""The only way to know the valid harness type strings is to hard-code strings.    This should also be fixed in {{subprocess.scripting}}.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-8177","06/05/2020 19:38:51",1,"Navigating to certain Spruce pages brings users to the bottom of the screen ""This happens with the patch [configure|https://spruce.mongodb.com/patch/5eda79550ae6061360113a0f/configure/tasks] page:   !patch configure page loads starting at the bottom by default.png|thumbnail!    as well as the patch details page, when accessed via the breadcrumb. E.g., clicking on {{aggregation_auth}} from [this patch|https://spruce.mongodb.com/version/5ea9c9fc7742ae2842c23bb3/tasks] and then clicking """"Patch 940"""":   !brought to the bottom of the page on page load.png|thumbnail!     It would be great if these pages went to the top of the page by default.""","",0,0,1,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-8178","06/05/2020 19:41:40",1,"Navigating to ""RAW"" link in patch configuration does not open new window and clears task selections  ""When I am in the patch configuration window and I view the RAW link for the changes in the patch, my task selection is cleared, since the RAW link does not open the page in a new tab.   !clicking on raw logs loses my selected tasks.png|thumbnail!   I would expect the RAW link to open the page in a new tab, as is what happens in the HTML page.""","",0,0,1,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-8182","06/05/2020 21:00:33",2,"Don't Log IDE panics ""[reverse_proxy|https://github.com/golang/go/blob/cc8838d645b2b7026c1f3aaceb011775c5ca3a08/src/net/http/httputil/reverseproxy.go#L299] sometimes panics if there's an error while streaming the response back to the client (https://github.com/golang/go/issues/23643).  Our [middleware|https://github.com/evergreen-ci/gimlet/blob/185166ff85e8801545747fa65a14486e0fe4680b/middleware_grip.go#L166] recovers the panic and logs to slack. Because the panic isn't actionable we need to log at a lower level.    One design is to recover the panic in the route so it doesn't make it all the way back up to the recovery logger.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8183","06/05/2020 21:22:51",2,"Give MANA an API to cleanup unexpirable hosts/volumes in off-boarding ""Expose an API for MANA to call in their off-boarding process that removes the user's unexpirable hosts and volumes""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8977","06/05/2020 23:09:05",2,"Allow environment variables to be specified at package and variant levels for golang generator ""For example, we may want to use a different GOROOT for some variants.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-8188","06/06/2020 04:17:02",2,"""T-shaped"" patch builds should deduplicate tasks and select tasks on all relevant build variants ""It looks like there are multiple checkboxes for the same task and while both become checked when one is clicked, the task count for only one of the build variants is updated (depending on which checkbox is clicked). Note that I didn't attempt to schedule this patch build to see if the task would actually run on all the build variants or not.    Suppose the user takes the following actions on the configure patch build page:   # Selects the build variant BV1.   # Checks the checkbox for the task T1.   # Selects the build variant BV2 which also supports running task T1.    The expected state of the checkbox for the task T1 is for it be¬†[partially selected|https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox#Indeterminate_state_checkboxes]. Clicking the checkbox while it is in an indeterminate state deselects it.""","",0,0,0,1,0,0,0,0,0,0,0,0,0,1,0
"EVG-8189","06/06/2020 04:17:20",2,"""T-shaped"" patch builds should support shift+click ""EVG-7974 added support for cmd+click. shift+click is additionally supported by the existing patch configuration page to select a range of contiguous build variants.""","",0,0,0,1,0,0,0,0,0,0,0,0,0,1,0
"EVG-8190","06/06/2020 04:18:01",2,"""T-shaped"" patch builds should mark checkboxes as partially selected (indeterminate) ""Suppose the user takes the following actions on the configure patch build page:    # Selects the build variant BV1.  # Checks the checkbox for the task T1.  # Selects the build variant BV2 which also supports running task T1.    The expected state of the checkbox for the task T1 is for it be [partially selected|https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox#Indeterminate_state_checkboxes]. Clicking the checkbox while it is in an indeterminate state deselects it.""","",0,0,0,1,0,0,0,0,0,0,0,0,0,1,0
"EVG-8930","06/08/2020 13:40:49",2,"BuildFileList should support file exclusion ""We have a pattern of building file lists within a directory if they match a series of include/exclude patterns. We should be able to generalize {{BuildFileList}} so that it can support file inclusion/exclusion rules within a directory (or maybe without specifying a directory).""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-8960","06/08/2020 13:44:31",2,"Golang package discovery should be able to find source files ""Currently, it will only discover directories containing test files. For one example use case, a user who wants to lint might want a package to be auto-defined if it contains go source files, even if it does not contain any test files. This should be a configurable setting (by default, off).""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-8192","06/08/2020 14:09:46",0,"Variables should be optional in strict project yaml validation ""People seem to conventionally use it for defining extra yaml stuff like anchors, but it's not required as part of the project config.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-9003","06/08/2020 15:14:20",0,"Call git.get_project in setup group ""git.get_project should be done at the beginning of each task group when the host is setting it up but doesn't need to be done for every single task.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-9201","06/08/2020 15:15:13",0,"Allow users to specify variables section ""This is so that people can define things like anchors.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-8197","06/08/2020 15:34:40",2,"GDB improvements ""Add ~/.gdbinit to   * source ~/mongo/.gdbinit and ~/mongo-v44/.gdbinit when invoked from those directories  * set these settings:  **       Add /opt/mongodbtoolchain/gdb/bin to PATH""","  add-auto-load-safe-path /     set pagination off  set print object on  set scheduler-locking on     #set print static-members off  #set print elements 0  ",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8198","06/08/2020 15:39:48",2,"Documentation Improvements ""bq. Could be good to have a warning against using ninja for compiledb because I tried that out of habit but it actually doesn‚Äôt work right if you built ninja with icecream support      bq. I‚Äôd appreciate some public documentation on icecream scheduling in the cloud. It‚Äôs disconcerting to have it silently populated in /etc/icecc/icecc.conf from the variant image      bq. Highlight how Evergreen IDE doesn‚Äôt require being on VPN. Go one step further and also suggest using the integrated terminal in VS Code to do server builds, patch builds, commit queue, etc. without being on the VPN.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8200","06/08/2020 17:27:24",1,"No patches listed on spruce patches page ""The following page: https://spruce.mongodb.com/user/mark.benvenuto/patches, displays no patches for me. I expect it would display some patches.    !image-2020-06-08-12-26-01-860.png|thumbnail!     Browser: Version 81.0.4044.138 (Official Build) (64-bit)  OS: macOS 10.14.6    ""","",0,0,1,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-8204","06/08/2020 19:40:39",1,"Make virtual workstation setup include code review tool posting to JIRA ""The alias virtual workstations provide for uploading code reviews is cr='~/kernel-tools/codereview/upload.py --check-clang-format --check-eslint'. Our server onboarding instructions include the --jira_user option, so that running the code review tool posts to JIRA. This also requires setting up Jira OAuth credentials. It would be helpful to include this in either the workstation configuration or in the wiki.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8206","06/08/2020 20:54:53",2,"Be more careful about retrying on github 404s ""If a user adds a module that with a typo in the GitHub, Evergreen will exhaust its GitHub API limit retrying. https://evergreen.mongodb.com/version/5ede8b903e8e865991924ea7""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-8209","06/09/2020 16:36:40",2,"explain problem building container image errors ""Understand the root cause of """"problem building container image"""" errors""","",0,0,0,0,0,1,0,0,0,1,0,0,0,0,0
"EVG-8211","06/09/2020 19:45:59",2,"Write Design Document for Parameterized Builds ""Scope:¬†[https://docs.google.com/document/d/1GuZOGa07dMhC1KS8TQeF3oad0Tg5Xp1XleodrcdB2nM/edit#]""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-8214","06/10/2020 15:40:47",1,"evergreen local user settings is wrong ""Currently the user settings say:       However this doesn't work unless it's """"http://localhost"""" so this should be fixed.""","  api_server_host: """"localhost:9090/api""""   ui_server_host: """"localhost:9090""""",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-8216","06/10/2020 17:17:28",1,"Add one repo/branch restraint to git tags ""PR testing and commit queues seem restricted to one repo/branch. Git tag triggered versions should likely also be restricted.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-9326","06/10/2020 18:52:02",2,"Implement by TaskID route ""Implement REST route for fetching test results by task id and execution.""","",0,0,0,0,0,0,0,0,1,0,0,0,1,0,0
"EVG-9327","06/10/2020 18:53:00",2,"Implement by TestName route ""Implement REST route to fetch test results by task id, execution, and test name.""","",0,0,0,0,0,0,0,0,1,0,0,0,1,0,0
"EVG-9316","06/10/2020 19:34:02",1,"Define data model for stats collection ""We need to define the structure of the payloads we are going to write to s3 and that the agent will send over gRPC, as was done [here|https://github.com/evergreen-ci/cedar/blob/master/model/test_results.go#L325-L338].""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-8218","06/10/2020 19:43:52",2,"Spruce deploy script should block if local master is not latest ""the script should be modified to prevent pushing to production if the local master branch is not the most recent""","",0,1,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-8223","06/10/2020 20:41:10",0,"Implement disk usage stats collector ""This should be a replacement for {{df -h}} in the system logs currently.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-8224","06/10/2020 20:47:07",2,"Unhandled error is thrown when spruce disconnects from evergreen app server ""spruce should handle this error so the app doesn't crash, maybe indicate to the user that they have lost connectivity¬†""","",0,0,1,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-8226","06/10/2020 22:12:46",1,"Swap order of base and patch status columns ""Should reflect the legacy ui""","",0,1,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-8230","06/11/2020 15:22:46",2,"Users who haven't signed into the UI recently get 401 errors for the CLI ""I assumed that background reauth would have handled this, so I opened this as a bug.""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8236","06/11/2020 18:14:31",2,"'My patches' breadcrumb on another user's patch leads to my own patches ""I pasted the version ID of another user's evergreen patch into a Spruce version URL: https://spruce.mongodb.com/version/5ee2434732f417796e65772f/tasks    Navigating to 'My Patches' from this other user's patch leads me to my own patches, instead of the user's patches. When I try to hit 'back' to get back to the user's patch link, I remain on my own 'My Patches' page.""","",0,0,1,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-8238","06/11/2020 19:35:43",1,"Patch build notification email links to legacy UI patch instead of Spruce UI ""Example:    Hi,    Your Evergreen patch in 'mongodb-mongo-master' [5ee254c37742ae4114585d57|https://evergreen.mongodb.com/version/5ee254c37742ae4114585d57] has failed.    test patch""","",0,0,1,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-8239","06/11/2020 20:00:31",1,"Link to legacy top nav pages in Spruce UI ""In order to allow folks to maintain their navigation patterns to pages not supported in Spruce, we should allow the Spruce top nav to link to the legacy pages:   !Screen Shot 2020-06-11 at 2.57.31 PM.png|thumbnail! ""","",0,0,0,1,0,0,0,0,0,0,0,0,0,1,0
"EVG-8242","06/11/2020 22:43:41",2,"Task logs not being rendered properly ""Specially formatted task logs dont have appropriate styling associated with them    [https://spruce.mongodb.com/task/spruce_ubuntu1604_e2e_test_patch_ac763049d8990383f90704ded0aa7c1de30cb6a5_5ee2a096a4cf477cceaa2f69_20_06_11_21_22_31/logs?logtype=task]    ¬†    [https://evergreen.mongodb.com/task_log_raw/spruce_ubuntu1604_e2e_test_patch_ac763049d8990383f90704ded0aa7c1de30cb6a5_5ee2a096a4cf477cceaa2f69_20_06_11_21_22_31/0?type=T]    !https://files.slack.com/files-pri/T024FNNHU-F015N84P51P/image.png!    !https://files.slack.com/files-pri/T024FNNHU-F0159RC0S59/image.png!""","",0,0,1,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-8250","06/15/2020 11:15:30",2,"Unkown directive client bugsnag error ""Bugsnag is throwing¬† graphql validation errors when using the @client directive in graphql queries. Either replace the usage of this field or handle this error.    *[https://app.bugsnag.com/mongodb/evergreen/errors/5ede8fc73dc90800185da435?filters[event.since][0]=30d&filters[error.status][0]=open&pivot_tab=event]*""","",0,0,1,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-8252","06/15/2020 13:57:51",1,"Database error retrieving DistroQueueInfo for distro id 'suse15-zseries-large': document not found ""I see these errors in Splunk. This is likely a side effect of the work to remove queue distros when scheduling is disabled.""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-8253","06/15/2020 14:22:17",1,"Version start time should not get updated with every task ""https://github.com/evergreen-ci/evergreen/blob/bd4afd4af6d8ea1e5b3bf7abfc8955170969db1d/service/api_task.go#L53 will eventually call into a function that updates the version start time regardless of if it's already started""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8255","06/15/2020 15:20:20",2,"Login cache should be cleared as part of mana offboarding ""MANA is expected to call `DELETE /users/{user_id}/permissions` in order to clear the user's permissions, but it would be good to also clear their login cache so that the background reauthentication job does not needlessly try to reauth people who should already be offboarded. We should either add add another route and have MANA make a request to it, or just add it to the existing delete permissions route.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-8259","06/15/2020 16:20:55",0,"Jasper restart should be allowed even if host is in running state ""Some of the mac hosts were restarted but the agent was stuck so they never got put in the 'provisioning' state. Usually, we want them to be in the provisioning state rather than running state because it guarantees that the agent monitor has shut down. However, [this check for the agent monitor|https://github.com/evergreen-ci/evergreen/blob/bd4afd4af6d8ea1e5b3bf7abfc8955170969db1d/units/provisioning_jasper_restart.go#L139-L149] should be sufficient to prevent jasper restarts until the agent monitor is down. Therefore, it should be fine to allow hosts to be in the running state when jasper needs to be restarted.    Logs: https://mongodb.splunkcloud.com/en-US/app/search/search?q=search%20index%3Devergreen%20macos-1014-57.macstadium.build.10gen.cc%20NOT%20external-state-check%20NOT%20%2Fhost%2Fmacos-1014-57.macstadium.build.10gen.cc&display.page.search.mode=verbose&dispatch.sample_ratio=1&earliest=1591887600&latest=1591920000&sid=1592233844.3764706""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8260","06/15/2020 16:48:08",1,"display spruce git commit hash in production html ""this will help us keep track of what is deployed to production""","",0,1,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-8261","06/15/2020 17:54:04",2,"Store page size in local storage and use as default in Spruce ""use the latest page size used (e.g., 20 [entries per page|https://spruce.mongodb.com/version/5efa5aac2fbabe4f8783c596/tasks?limit=20&page=0], 100 [entries per page|https://spruce.mongodb.com/version/5efa5aac2fbabe4f8783c596/tasks?limit=100&page=0], etc.) as the default value when limit query variable does not exist in url    ¬†""","",0,1,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-8270","06/15/2020 22:44:22",1,"adjust welcome modal styles ""add space between description and carousel navigation dots and center the modal""","",0,1,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-8282","06/16/2020 18:46:05",2,"Display tasks have duplicate dependencies ""EVG-6917 was supposed to make display tasks not have duplicate dependencies, but they still appear to.  e.g. https://evergreen.mongodb.com/task/mongodb_mongo_v4.4_enterprise_rhel_62_64_bit_display_rollback_fuzzer_unclean_shutdowns_patch_40add1dc44736475ea3aa598f9878e990b2ad974_5ee890a21e2d17016ea3405d_20_06_16_09_29_04""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-8284","06/16/2020 19:49:18",1,"Remove multiple AWS key/secrets from admin settings ""Turns out this is unnecessary, all regions will use the same key/secret pair.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-8293","06/17/2020 04:05:44",2,"Improve display of long variant/test names in Spruce ""see https://spruce.mongodb.com/version/5ee93748562343577c5e7870/tasks?limit=100&page=0 and https://spruce.mongodb.com/task/mongo_java_driver_tests_jdk_secure__version~latest_os~linux_topology~sharded_cluster_auth~auth_ssl~ssl_jdk~jdk11_test_69ef5be50c8ac47a989dcf92f230c837f4454df3_20_06_15_16_44_05/tests?page=0&testname=ServerDiscovery""","",0,0,1,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-8299","06/17/2020 16:18:44",2,"CLI command to ssh to an instance ""Wrap ssh to look up the current DNS name of the instance so a user can always use to same command""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8300","06/17/2020 17:05:41",2,"generate.task timing out ""It seems like there have been a lot of 'generate.tasks' calls that are timing out at 2 hours. They feels like a really long time for 'generate.tasks' to run. It might be worth investigating if something is wrong.""","",0,0,0,0,0,0,1,0,0,1,0,0,0,0,0
"EVG-8310","06/18/2020 14:25:50",2,"Makespan is skewed for patches that have had tasks restarted ""I re-ran one of the tasks in one of my [patches|https://spruce.mongodb.com/version/5ee254c37742ae4114585d57/tasks] a few days after initially submitting it. The Makespan includes the multiple days worth of time between the initial patch start time, and the finish time of the second execution of the tasks:   !Screen Shot 2020-06-18 at 9.18.50 AM.png|width=30%!  This behavior is consistent with that of the [legacy UI|https://evergreen.mongodb.com/version/5ee254c37742ae4114585d57].  I would expect that the idle time during which no tasks are running would not be included in the makespan. It would be helpful to consider how to account for this idle time when displaying Makespan / time taken.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-8318","06/18/2020 20:13:46",1,"Link generated tasks to its generator ""There is not currently a way in the UI to map a generated task to its generator. We should expose this in both the legacy and new UIs, since EVG-8191 has a dependency on this ticket.""","",0,1,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-8320","06/18/2020 20:50:57",2,"Evergreen task ran twice on the same machine (under the same task execution) ""h6. Task logs        https://evergreen.mongodb.com/task_log_raw/mongodb_mongo_v4.4_enterprise_rhel_62_64_bit_sharding_auth_audit_13_enterprise_rhel_62_64_bit_d36d5430d7aefc844a2020064703df4fff7d6dcd_20_06_04_12_54_42/0?type=T#L871    h6. Agent logs        https://evergreen.mongodb.com/task_log_raw/mongodb_mongo_v4.4_enterprise_rhel_62_64_bit_sharding_auth_audit_13_enterprise_rhel_62_64_bit_d36d5430d7aefc844a2020064703df4fff7d6dcd_20_06_04_12_54_42/0?type=E#L1172  ""","  [2020/06/04 14:37:47.739] Starting task mongodb_mongo_v4.4_enterprise_rhel_62_64_bit_sharding_auth_audit_13_enterprise_rhel_62_64_bit_d36d5430d7aefc844a2020064703df4fff7d6dcd_20_06_04_12_54_42, execution 0.  ...  [2020/06/04 15:43:33.183] Starting task mongodb_mongo_v4.4_enterprise_rhel_62_64_bit_sharding_auth_audit_13_enterprise_rhel_62_64_bit_d36d5430d7aefc844a2020064703df4fff7d6dcd_20_06_04_12_54_42, execution 0.    [2020/06/04 14:37:47.739] Making new folder for task execution: /data/mci/18a4d6b3d9435b2342c2680aeb8644b4  [2020/06/04 14:37:47.768] Reporting task started.  [2020/06/04 14:37:47.869] cleaning up processes for task: mongodb_mongo_v4.4_enterprise_rhel_62_64_bit_sharding_auth_audit_13_enterprise_rhel_62_64_bit_d36d5430d7aefc844a2020064703df4fff7d6dcd_20_06_04_12_54_42  ...  [2020/06/04 15:43:33.183] Making new folder for task execution: /data/mci/89747a5447c929f4943629c1d05667ea  [2020/06/04 15:43:33.184] Reporting task started.  [2020/06/04 15:43:33.326] cleaning up processes for task: mongodb_mongo_v4.4_enterprise_rhel_62_64_bit_sharding_auth_audit_13_enterprise_rhel_62_64_bit_d36d5430d7aefc844a2020064703df4fff7d6dcd_20_06_04_12_54_42  ",0,0,0,0,0,0,1,0,0,1,0,0,0,0,0
"EVG-8322","06/22/2020 15:09:14",1,"user/patches & user/:id path redirect should replace browser history instead of push ""this is to avoid polluting browser history""","",0,1,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-8323","06/22/2020 15:19:37",2,"remove scroll and show all items at once from changes and files tables ""this makes sense since the build variant side panel is not scrollable and is as long as it needs to be""","",0,1,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-8325","06/22/2020 15:32:49",2,"Failures: test-rest-model on Race Detector [Evergreen @ 769da5ca] (TestCodegen, basic, scalars, thirdparty, TestCreateConversionMethodsError) "" h2. [test-rest-model failed on Race Detector|https://evergreen.mongodb.com/task/evergreen_race_detector_test_rest_model_769da5ca31dd3ee3d26720269ecb4d2ceab0808e_20_06_18_20_45_59/0] Host: [ec2-54-226-139-238.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/i-02ca1699534bb8bf4] Project: [Evergreen|https://evergreen.mongodb.com/waterfall/evergreen] Commit: [diff|https://github.com/evergreen-ci/evergreen/commit/769da5ca31dd3ee3d26720269ecb4d2ceab0808e]: MAKE-1363: retry curling golangci-lint (#3709) | 18 Jun 20 20:45 UTC Evergreen Subscription: ; Evergreen Event:  *TestCodegen* - [Logs|https://evergreen.mongodb.com/test_log/5eebd888a4cf47327ca2e9ed] | [History|https://evergreen.mongodb.com/task_history/evergreen/evergreen_race_detector_test_rest_model_769da5ca31dd3ee3d26720269ecb4d2ceab0808e_20_06_18_20_45_59#TestCodegen=fail] *basic* - [Logs|https://evergreen.mongodb.com/test_log/5eebd888a4cf47327ca2e9ed] | [History|https://evergreen.mongodb.com/task_history/evergreen/evergreen_race_detector_test_rest_model_769da5ca31dd3ee3d26720269ecb4d2ceab0808e_20_06_18_20_45_59#basic=fail] *scalars* - [Logs|https://evergreen.mongodb.com/test_log/5eebd888a4cf47327ca2e9ed] | [History|https://evergreen.mongodb.com/task_history/evergreen/evergreen_race_detector_test_rest_model_769da5ca31dd3ee3d26720269ecb4d2ceab0808e_20_06_18_20_45_59#scalars=fail] *thirdparty* - [Logs|https://evergreen.mongodb.com/test_log/5eebd888a4cf47327ca2e9ed] | [History|https://evergreen.mongodb.com/task_history/evergreen/evergreen_race_detector_test_rest_model_769da5ca31dd3ee3d26720269ecb4d2ceab0808e_20_06_18_20_45_59#thirdparty=fail] *TestCreateConversionMethodsError* - [Logs|https://evergreen.mongodb.com/test_log/5eebd888a4cf47327ca2e9ed] | [History|https://evergreen.mongodb.com/task_history/evergreen/evergreen_race_detector_test_rest_model_769da5ca31dd3ee3d26720269ecb4d2ceab0808e_20_06_18_20_45_59#TestCreateConversionMethodsError=fail]  [Task Logs | https://evergreen.mongodb.com/task_log_raw/evergreen_race_detector_test_rest_model_769da5ca31dd3ee3d26720269ecb4d2ceab0808e_20_06_18_20_45_59/0?type=T] ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-9689","06/22/2020 18:16:19",2,"Remove timeline and summary pages ""Research has found that there are no users of the timeline and summary pages. We should remove them.""","",0,1,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-9690","06/22/2020 20:31:59",1,"Auto-populate working directory if not specified in subprocess.scripting ""If the working directory is not specified for subprocess.scripting, the code most likely will not work. However, most of the time, it seems like using the agent's working directory should be sufficient as an auto-populated field. This will help the jasper generator not need to depend on the host's working directory (which enables local jasper build generation to be passed directly with a patch).""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-9700","06/23/2020 17:58:48",2,"Add more robust buildlogger testing for resmoke ""These tests include:   * End-to-end test with curator binary.   * Test to retrieve grouped logs with disjoint times.   * Test to retrieve grouped logs with overlapping tags.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-9701","06/23/2020 18:15:53",1,"Passing a config file that doesn't exist should alert the user  ""If someone tries to pass a config file that doesn't exits, (evergreen -c ~/.non_existent_file.yml) the error they get is """"can't get project ref: Unexpected reply from server (404 Not Found): no project found named <project name>""""¬†  It should instead display a more helpful error like¬† ‚Äúhey that configuration file doesn‚Äôt exist‚Äù""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-9703","06/23/2020 20:04:55",2,"Commit queue not working for sandbox in staging ""For whatever reason, the commit queue for yb_mci in staging seems to not be working (I'm not sure if it's the commit queue for all of staging or for this project in either environment or what).¬†    For example:¬†[this version|https://evergreen-staging.corp.mongodb.com/version/5ef23ae597b1d31c63ef1665] has no merge task associated with it.    Having looked in the DB, the parser project associated with the version _does_ have the merge task and variant, but the tasks/builds don't exist.    This project in staging is important for our own development of the commit queue so we should resolve this.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-9706","06/24/2020 01:30:47",2,"""Out of Memory Kill detected"" message on task page is incomplete for some OOM failures ""(/) """"Out of Memory Kill detected (PIDs: 2762)"""" - https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_ubuntu_task_executor_pool_size_1604_64_bit_concurrency_sharded_replication_57faf552c3acb1dbfacff0020003cbcd3bd36d17_20_06_17_01_34_24/0#/log/S        (x) """"Out of Memory Kill detected (PIDs: )"""" - https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_rhel_62_64_bit_inmem_causally_consistent_read_concern_snapshot_passthrough_0_enterprise_rhel_62_64_bit_inmem_2cc507c7c4199aeddd698a277a346b2acfa1c224_20_06_22_01_14_04/0#/log/S        Both of these failures occurred after the changes from [af7fb3b|https://github.com/mongodb/mongo/commit/af7fb3b79ce6ad97b8288c5e7cd64c405375e79b] as part of SERVER-48455.""","  [2020/06/17 04:27:33.073] OOM (Out of memory) killed processes detected  [2020/06/17 04:27:33.073] [Wed Jun 17 04:05:50 2020] evergreen invoked oom-killer: gfp_mask=0x24201ca, order=0, oom_score_adj=0  [2020/06/17 04:27:33.073] [Wed Jun 17 04:05:50 2020] Out of memory: Kill process 2762 (mongod) score 163 or sacrifice child  [2020/06/17 04:27:33.073] [Wed Jun 17 04:05:50 2020] Killed process 2762 (mongod) total-vm:3492232kB, anon-rss:1247060kB, file-rss:0kB    [2020/06/22 11:01:26.752] OOM (Out of memory) killed processes detected  [2020/06/22 11:01:26.752] js invoked oom-killer: gfp_mask=0x280da, order=0, oom_adj=0, oom_score_adj=0  [2020/06/22 11:01:26.752] Out of memory: Kill process 9784 (mongod) score 121 or sacrifice child  [2020/06/22 11:01:26.752] Killed process 9784, UID 0, (mongod) total-vm:3098244kB, anon-rss:1157280kB, file-rss:32kB  [2020/06/22 11:01:26.752] ReplCoo.Network invoked oom-killer: gfp_mask=0x201da, order=0, oom_adj=0, oom_score_adj=0  [2020/06/22 11:01:26.752] Out of memory: Kill process 9823 (FlowCon.fresher) score 121 or sacrifice child  [2020/06/22 11:01:26.752] Killed process 9823, UID 0, (FlowCon.fresher) total-vm:3098244kB, anon-rss:1157280kB, file-rss:36kB  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-9707","06/24/2020 14:47:15",1,"evergreen YAML should not write AWS credentials to home directory ""It should follow what pail does and export environment variables instead (and remove {{~/.aws}} since we can't guarantee that other projects will clean up after themselves).""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-9708","06/24/2020 14:56:44",1,"Failures: test-operations on Windows [Evergreen @ c2718716] (TestHostRsync, ExistingLocalFileMirrorsRemoteFile, NoChangesInDryRunWithPull, RemoteDirectoryHasLocalSubdirectoryWithoutTrailingSlash +9 more) "" h2. [test-operations failed on Windows|https://evergreen.mongodb.com/task/evergreen_windows_test_operations_c2718716d542f59601fc6b5e86cb4b8fcda0b3f1_20_06_23_21_29_24/0] Host: [ec2-18-207-164-212.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/i-0779e1b12bb66e623] Project: [Evergreen|https://evergreen.mongodb.com/waterfall/evergreen] Commit: [diff|https://github.com/evergreen-ci/evergreen/commit/c2718716d542f59601fc6b5e86cb4b8fcda0b3f1]: EVG-8204 increment version string | 23 Jun 20 21:29 UTC Evergreen Subscription: ; Evergreen Event:  *TestHostRsync* - [Logs|https://evergreen.mongodb.com/test_log/5ef283540305b93e1b26de4b] | [History|https://evergreen.mongodb.com/task_history/evergreen/evergreen_windows_test_operations_c2718716d542f59601fc6b5e86cb4b8fcda0b3f1_20_06_23_21_29_24#TestHostRsync=fail] *ExistingLocalFileMirrorsRemoteFile* - [Logs|https://evergreen.mongodb.com/test_log/5ef283540305b93e1b26de4b] | [History|https://evergreen.mongodb.com/task_history/evergreen/evergreen_windows_test_operations_c2718716d542f59601fc6b5e86cb4b8fcda0b3f1_20_06_23_21_29_24#ExistingLocalFileMirrorsRemoteFile=fail] *NoChangesInDryRunWithPull* - [Logs|https://evergreen.mongodb.com/test_log/5ef283540305b93e1b26de4b] | [History|https://evergreen.mongodb.com/task_history/evergreen/evergreen_windows_test_operations_c2718716d542f59601fc6b5e86cb4b8fcda0b3f1_20_06_23_21_29_24#NoChangesInDryRunWithPull=fail] *RemoteDirectoryHasLocalSubdirectoryWithoutTrailingSlash* - [Logs|https://evergreen.mongodb.com/test_log/5ef283540305b93e1b26de4b] | [History|https://evergreen.mongodb.com/task_history/evergreen/evergreen_windows_test_operations_c2718716d542f59601fc6b5e86cb4b8fcda0b3f1_20_06_23_21_29_24#RemoteDirectoryHasLocalSubdirectoryWithoutTrailingSlash=fail] *RemoteDirectoryMirrorsLocalDirectoryWithoutDeletions* - [Logs|https://evergreen.mongodb.com/test_log/5ef283540305b93e1b26de4b] | [History|https://evergreen.mongodb.com/task_history/evergreen/evergreen_windows_test_operations_c2718716d542f59601fc6b5e86cb4b8fcda0b3f1_20_06_23_21_29_24#RemoteDirectoryMirrorsLocalDirectoryWithoutDeletions=fail] *LocalDirectoryMirrorsRemoteDirectoryWithoutDeletions* - [Logs|https://evergreen.mongodb.com/test_log/5ef283540305b93e1b26de4b] | [History|https://evergreen.mongodb.com/task_history/evergreen/evergreen_windows_test_operations_c2718716d542f59601fc6b5e86cb4b8fcda0b3f1_20_06_23_21_29_24#LocalDirectoryMirrorsRemoteDirectoryWithoutDeletions=fail] *RemoteFileCreatedIfNonexistent* - [Logs|https://evergreen.mongodb.com/test_log/5ef283540305b93e1b26de4b] | [History|https://evergreen.mongodb.com/task_history/evergreen/evergreen_windows_test_operations_c2718716d542f59601fc6b5e86cb4b8fcda0b3f1_20_06_23_21_29_24#RemoteFileCreatedIfNonexistent=fail] *ExistingRemoteFileMirrorsLocalFile* - [Logs|https://evergreen.mongodb.com/test_log/5ef283540305b93e1b26de4b] | [History|https://evergreen.mongodb.com/task_history/evergreen/evergreen_windows_test_operations_c2718716d542f59601fc6b5e86cb4b8fcda0b3f1_20_06_23_21_29_24#ExistingRemoteFileMirrorsLocalFile=fail] *NoChangesInDryRun* - [Logs|https://evergreen.mongodb.com/test_log/5ef283540305b93e1b26de4b] | [History|https://evergreen.mongodb.com/task_history/evergreen/evergreen_windows_test_operations_c2718716d542f59601fc6b5e86cb4b8fcda0b3f1_20_06_23_21_29_24#NoChangesInDryRun=fail] *LocalDirectoryMirrorsRemoteDirectoryExactly* - [Logs|https://evergreen.mongodb.com/test_log/5ef283540305b93e1b26de4b] | [History|https://evergreen.mongodb.com/task_history/evergreen/evergreen_windows_test_operations_c2718716d542f59601fc6b5e86cb4b8fcda0b3f1_20_06_23_21_29_24#LocalDirectoryMirrorsRemoteDirectoryExactly=fail] *LocalDirectoryHasRemoteSubdirectoryWithoutTrailingSlash* - [Logs|https://evergreen.mongodb.com/test_log/5ef283540305b93e1b26de4b] | [History|https://evergreen.mongodb.com/task_history/evergreen/evergreen_windows_test_operations_c2718716d542f59601fc6b5e86cb4b8fcda0b3f1_20_06_23_21_29_24#LocalDirectoryHasRemoteSubdirectoryWithoutTrailingSlash=fail] *LocalFileCreatedIfNonexistent* - [Logs|https://evergreen.mongodb.com/test_log/5ef283540305b93e1b26de4b] | [History|https://evergreen.mongodb.com/task_history/evergreen/evergreen_windows_test_operations_c2718716d542f59601fc6b5e86cb4b8fcda0b3f1_20_06_23_21_29_24#LocalFileCreatedIfNonexistent=fail] *RemoteDirectoryMirrorsLocalDirectoryExactly* - [Logs|https://evergreen.mongodb.com/test_log/5ef283540305b93e1b26de4b] | [History|https://evergreen.mongodb.com/task_history/evergreen/evergreen_windows_test_operations_c2718716d542f59601fc6b5e86cb4b8fcda0b3f1_20_06_23_21_29_24#RemoteDirectoryMirrorsLocalDirectoryExactly=fail]  [Task Logs | https://evergreen.mongodb.com/task_log_raw/evergreen_windows_test_operations_c2718716d542f59601fc6b5e86cb4b8fcda0b3f1_20_06_23_21_29_24/0?type=T] ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-9709","06/24/2020 17:10:52",0,"Fix compilation of benchmarks ""Cedar's benchmarks don't compile because the timber client's function signature changed.""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-12386","06/25/2020 03:55:25",2,"Add region credentials to distros in staging ""Add support for the following regions in all ( ?)¬†spawnable distros in staging, and also verify that the instance type is available.   * ap-southeast-2   * Europe (Ireland): eu-west-1   * California: us-west-1    ¬†¬†""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-12387","06/25/2020 16:16:17",1,"Add golint for jasper ""Jasper tends to be well-documented and it would be good to ensure future devs continue keeping the documentation in a good state.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-12388","06/25/2020 16:49:57",1,"Do not set subprocess.scripting working directory in meta-build ""Since it should be set by default to the task's working directory.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-12389","06/25/2020 17:39:26",2,"Configure host events ""Set up AWS to send webhooks for these [events|https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/EventTypes.html#spot-instance-event-types]:  * Spot Instance Interruption and/or termination  * instance running    # Create a SNS topic and add a https subscription to send webhooks to evergreen (separate topics/subscriptions for prod/staging?)  # Configure a CloudWatch/EventBridge rule to publish to the topic""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-12390","06/25/2020 17:46:10",2,"Add REST route to handle AWS webhooks ""Probably one route will suffice""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-12391","06/25/2020 17:47:49",2,"Terminate Spot Instances that are about to terminate ""For the spot instance termination event we should terminate the host instead of waiting for AWS to kill it (they aren't running tasks anymore anyway).""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-12392","06/25/2020 17:48:50",2,"Mark terminated instances as terminated in the DB ""If AWS tells us a host has terminated we should mark it in the db if we haven't already.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-12393","06/25/2020 17:51:40",2,"Transition running hosts to running ""When we find out a userdata host is running we should skip the provisioning state (and the setupHostJob) and just go straight to running. We'll need to relocate OnUp and setDNSName, maybe to cloud-host-ready.  This will allow us to remove the logic in next_task that lets provisioning hosts run tasks. Also, we could remove the user-data-done job since the agent won't be asking for tasks until userdata has finished running. ""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-12396","06/25/2020 21:45:37",2,"Open Page in the New UI displays on pages that are not yet supported ""Presently, clicking this link on a [legacy UI commit page|https://evergreen.mongodb.com/version/mongodb_mongo_master_47dcbeba765b04a829be9c27289e152e24e1a855] results in a GraphQL error. Clicking it on the [task details page|https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_rhel_62_64_bit_dynamic_required_lint_eslint_47dcbeba765b04a829be9c27289e152e24e1a855_20_06_25_20_10_38] shows a page in the new UI, as if it were a patch, but then clicking on the Patch breadcrumb leads to the same GraphQL error.    Removing the Open Page in the New UI link on the commit details/task details pages would avoid potential confusion about which pages ought to be supported.    It might also be worthwhile to consider displaying a more specific error message in Spruce when a user tries to navigate to a page that isn't yet supported.""","",0,0,1,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-12399","06/26/2020 17:33:23",1,"Failures: test-rest-model on Ubuntu 16.04 [Evergreen @ 18ab08f5] (TestCodegen, aliases, basic, object_embedded, object_simple, scalars, thirdparty) "" h2. [test-rest-model failed on Ubuntu 16.04|https://evergreen.mongodb.com/task/evergreen_ubuntu1604_test_rest_model_18ab08f5613814fd6d8dc97de4c47c6db7d08f11_20_06_25_19_46_47/0] Host: [ec2-54-91-138-40.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/i-08c55209d62321a1b] Project: [Evergreen|https://evergreen.mongodb.com/waterfall/evergreen] Commit: [diff|https://github.com/evergreen-ci/evergreen/commit/18ab08f5613814fd6d8dc97de4c47c6db7d08f11]: EVG-8169 allow aliasing fields (#3717) | 25 Jun 20 19:46 UTC Evergreen Subscription: ; Evergreen Event:  *TestCodegen* - [Logs|https://evergreen.mongodb.com/test_log/5ef4ffe5a4cf4714d36fb8c2] | [History|https://evergreen.mongodb.com/task_history/evergreen/evergreen_ubuntu1604_test_rest_model_18ab08f5613814fd6d8dc97de4c47c6db7d08f11_20_06_25_19_46_47#TestCodegen=fail] *aliases* - [Logs|https://evergreen.mongodb.com/test_log/5ef4ffe5a4cf4714d36fb8c2] | [History|https://evergreen.mongodb.com/task_history/evergreen/evergreen_ubuntu1604_test_rest_model_18ab08f5613814fd6d8dc97de4c47c6db7d08f11_20_06_25_19_46_47#aliases=fail] *basic* - [Logs|https://evergreen.mongodb.com/test_log/5ef4ffe5a4cf4714d36fb8c2] | [History|https://evergreen.mongodb.com/task_history/evergreen/evergreen_ubuntu1604_test_rest_model_18ab08f5613814fd6d8dc97de4c47c6db7d08f11_20_06_25_19_46_47#basic=fail] *object_embedded* - [Logs|https://evergreen.mongodb.com/test_log/5ef4ffe5a4cf4714d36fb8c2] | [History|https://evergreen.mongodb.com/task_history/evergreen/evergreen_ubuntu1604_test_rest_model_18ab08f5613814fd6d8dc97de4c47c6db7d08f11_20_06_25_19_46_47#object_embedded=fail] *object_simple* - [Logs|https://evergreen.mongodb.com/test_log/5ef4ffe5a4cf4714d36fb8c2] | [History|https://evergreen.mongodb.com/task_history/evergreen/evergreen_ubuntu1604_test_rest_model_18ab08f5613814fd6d8dc97de4c47c6db7d08f11_20_06_25_19_46_47#object_simple=fail] *scalars* - [Logs|https://evergreen.mongodb.com/test_log/5ef4ffe5a4cf4714d36fb8c2] | [History|https://evergreen.mongodb.com/task_history/evergreen/evergreen_ubuntu1604_test_rest_model_18ab08f5613814fd6d8dc97de4c47c6db7d08f11_20_06_25_19_46_47#scalars=fail] *thirdparty* - [Logs|https://evergreen.mongodb.com/test_log/5ef4ffe5a4cf4714d36fb8c2] | [History|https://evergreen.mongodb.com/task_history/evergreen/evergreen_ubuntu1604_test_rest_model_18ab08f5613814fd6d8dc97de4c47c6db7d08f11_20_06_25_19_46_47#thirdparty=fail]  [Task Logs | https://evergreen.mongodb.com/task_log_raw/evergreen_ubuntu1604_test_rest_model_18ab08f5613814fd6d8dc97de4c47c6db7d08f11_20_06_25_19_46_47/0?type=T] ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-12400","06/26/2020 18:33:28",2,"No error is displayed when modifying a host that is terminated ""When using the CLI to extend the expiration time of a host using evergreen host modify --host <hostID> --extend 5 with an id of a host that is terminated, the CLI returns¬†   """"Successfully queued changes to spawn host with ID 'hostID'.""""""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-12404","06/29/2020 17:58:36",1,"Hosts that fail to convert provisioning type should be set to running ""OSX hosts failed to convert to new provisioning due to a permission denied (presumably because the sudo permissions to allow new provisioning were only applied to macos-1012 and macos-1014, but not osx-1010). However, if you switch back to legacy provisioning, the host is not set to running automatically.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-12412","06/29/2020 21:03:02",2,"ansi_to_html library sometimes errors when viewing logs  ""the error happens when viewing these pages    [https://spruce.mongodb.com/task/sqlproxy_full_matrix__os_full_matrix~osx_mongodb_version~latest_mongodb_topology~standalone_module_tests_patch_129f80fcf3b75ecb4f8f24ecbb1ba2b5d7dc1a3e_5efa177e3e8e86592c495ab0_20_06_29_16_32_00/logs]    [|https://spruce.mongodb.com/task/buildhost_configuration_ubi7_build_container_patch_3899b4ba54eb93ecd70b2963ae6c380b83ee4f41_5f05fc4c1e2d17015edcdc21_20_07_08_17_03_08/logs]    ¬†    [https://app.bugsnag.com/mongodb/evergreen/errors/5efa1a85442e1f001893f433?filters[event.since][0]=30d&filters[error.status][0]=new]""","",0,1,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-12413","06/29/2020 22:13:31",1,"Shrub should support yaml output ""Shrub currently outputs a JSON Evergreen configuration file. While this is fine for things like the agent which just parses it, it's not a very human-readable format. Since we will eventually support local task generation for patches, it would be nice if it had an option to output YAML instead of JSON.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-12414","06/29/2020 22:16:17",2,"Move Jasper metabuild to Evergreen ""The metabuild tool should belong in evergreen since it's an Evergreen-focused feature. It would be good to keep features related to evergreen configuration within Evergreen rather than put it in a repository (which could someday integrate with it, but currently doesn't and likely won't in the near or medium term).""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-12418","06/30/2020 15:25:05",2,"Versions with blocked tasks aren't marked as complete ""We're supposed to mark a version as complete when all its remaining tasks are blocked, but this isn't happening.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-12419","06/30/2020 15:52:23",1,"Fix leaking resources for TestLogMergeIterator ""Seems like there is a leaked resource in the TestLogMergeIterator test, the tmp dir cannot be removed at the end of the test.    It only fails on Windows.¬†""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-12422","06/30/2020 17:15:49",2,"Error restarting failed tasks in patch build with ""duplicate key error"" ""In [this patch|https://spruce.mongodb.com/version/5efa3c6ec9ec4470c51e2319/tasks], if I """"Restart"""" all tasks that failed with """"System Failure"""", I can reliably get the following error:  ""","Error while restarting patch: 'GraphQL error: error restarting patch: failed to archive task: task.Archive() failed: multiple write errors: [{write errors: [{E11000 duplicate key error collection: mci.old_tasks index: _id_ dup key: { : """"mongodb_mongo_master_enterprise_rhel_62_64_bit_dynamic_required_initial_sync_fuzzer_1_enterprise_rhel_62_64_bit_dynamic_required_patch_847e085c0fb7621..."""" }}]}, {<nil>}]'  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-12427","06/30/2020 20:40:38",2,"LogIterator implementations do not close readers ""The LogIterators call {{(pail.Bucket).Get()}} but do not have a way to close the returned manually {{io.ReadCloser}} (e.g. after the¬†{{LogIterator}} is done). This is causing the Windows tests to fail with device/resource busy when trying to clean up the local pail bucket (TestMergeLogIterator).    One possible solution would be to provide a {{Close}} method in the {{LogIterator}} interface.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-12432","07/01/2020 15:27:45",1,"Create protobuf for system metrics service ""This ticket requires you to create the protocol buffer (gRPC) for the system metrics collection service. There are some examples you can look at including [buildlogger|[https://github.com/evergreen-ci/cedar/blob/master/buildlogger.proto]] and [perf|[https://github.com/evergreen-ci/cedar/blob/master/perf.proto]].    Think about what users would want to send and how that fits with the functions you have written in the model package.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-12440","07/01/2020 19:37:10",1,"Implement AppendArtifact on the system metrics model ""This should upload a new artifact to the bucket specified in the SystemMetricsArtifactInfo struct and append the key to the slice of keys.""","",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-12442","07/01/2020 21:17:15",1,"Cedar CLI client commands are not usable ""It requires a host/port from the parent CLI context, which does not have those flags defined. It should just get the flags from the CLI context at the client level.    It also requests from the wrong (because it needs to be prefixed with {{/rest/v1}}.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-12452","07/07/2020 14:26:16",0,"Add short flags for revendor command ""Mostly so that I can type less.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-12453","07/07/2020 15:48:59",2,"Create API to test a project alias ""It can mostly be a wrapper around https://github.com/evergreen-ci/evergreen/blob/c19b96fbffa64becbfabc7e1bbe13e0425b9475a/model/project.go#L1282""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-12539","07/08/2020 12:38:39",1,"Create new evergreen project for Spark connector ""Hi,    Could I get another new evergreen project for the Spark Connector?    A copy of https://evergreen.mongodb.com/waterfall/mongo-spark-2.3.x would be great, just need it to point to the: 2.4.x branch.    Many thanks,    Ross""","",0,0,0,1,0,0,0,0,0,0,0,0,0,0,1
"EVG-12464","07/08/2020 14:16:31",2,"UI should handle when patch has no base commit  ""This will happen rarely, for example in a new project that has no commits yet""","",0,0,1,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-12467","07/08/2020 19:24:58",2,"CLI should support SendMessages ""This is so the CLI maintains parity with the other remote interfaces and so the the CLI over SSH client can call {{SendMessages}}.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-12470","07/09/2020 08:37:06",1,"Enable BB plugin for ""wiredtiger-mongo-v4.4"" Evergreen project ""Please help to enable BB plugin for the [wiredtiger-mongo-v4.4|https://evergreen.mongodb.com/waterfall/wiredtiger-mongo-v4.4] project.   The plugin had been enabled for the other 2 wiredtiger projects previously if that helps.   Cheers.""","",0,1,0,0,0,0,0,0,0,0,0,0,0,0,1
"EVG-12471","07/09/2020 12:44:55",2,"Add authentication support to evergreen project subscription POST configuration ""As part of the PM-1800 / BF Matching for Patch Builds, DAG would like the build baron server to receive patch failure notifications.    Since this project is implemented as a kanopy service, it is behind [corp secure|https://wiki.corp.mongodb.com/display/SEC/CorpSecure+2.0].     We will be requesting a long lived JWT to grant access to our kanopy service but evergreen will need to support JWT (as a secure field) in order to post to the /patch_build/add_instance endpoint.    A JWT can be used either as a [cookie or an authorization header|https://jira.mongodb.org/browse/DAG-274?focusedCommentId=3276831&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-3276831].""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-12477","07/09/2020 18:05:40",1,"Shrub should omitempty optional fields ""This will cut down on the verbosity of the generated configs.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-12478","07/09/2020 18:10:50",2,"Versions triggered from git tags shouldn't be set inactive ""These should always be scheduled.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-12487","07/10/2020 16:26:08",1,"e2e tests: fix task_actions spec ""these tests flake:    Clicking on Restart and then Schedule should produce an error banner    There should be 2 banners visible from the previous actions    ¬†""","",0,0,1,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-12497","07/10/2020 19:44:39",1,"Create new evergreen project for mongo-java-driver-4.1 ""Please create new Evergreen project:    Name: mongo-java-driver-4.1  Display Name: Java Driver (4.1)  Branch Name: 4.1.x    Otherwise, it should be a clone of mongo-java-driver-4.0, with all the same project properties, etc.    Please also create the necessary S3 buckets to allow uploads of build artifacts    ""","",0,0,0,1,0,0,0,0,0,0,0,0,0,0,1
"EVG-12498","07/10/2020 19:50:40",1,"Create mongo-go-driver-v1.4 Evergreen project ""Please create a new Evergreen project:    Name: mongo-go-driver-v1.4   Display Name: Mongo Go Driver (release/1.4)   Branch Name: release/1.4    Otherwise, it should be a clone of mongo-go-driver, with all the same project properties, etc.    Please also create the necessary S3 buckets to allow uploads of build artifacts""","",0,0,0,1,0,0,0,0,0,0,0,0,0,0,1
"EVG-12491","07/11/2020 23:35:56",1,"Tasks failed to restart ""See https://mongodb.slack.com/archives/G979SL0HM/p1594502408091800 for discussion. A system-failed task failed to restart. Reverting task group reset logic commits fixed it.    Tasks that failed to restart before the revert:  * https://evergreen.mongodb.com/task/mongo_release_rhel80_compile_2dae2754daded5fb71a93d19223613850826f75e_20_07_10_19_05_28  * https://evergreen.mongodb.com/task/mongo_release_amazon2_compile_2dae2754daded5fb71a93d19223613850826f75e_20_07_10_19_05_28    Commits I reverted:  * 1c22aa164c4c608a26103d969b4ccc51253595f8  * 20482f76c62c0971e55051de639ce32c48608573    I reverted the first because just reverting the second got me into some pretty unpleasant merge conflicts.""","",0,0,0,0,0,0,0,1,0,1,0,0,0,0,0
"EVG-12493","07/13/2020 15:33:57",2,"Remove dependence on working directory for clone ""The working directory flag for Make-based projects should be removed from the CLI. Users should be able to specify the working directory to clone to, but it should just default to the task's working directory (i.e. {{${workdir}}}).    For golang-based projects, the working directory should be configurable just like the Make one, but it should default to {{${GOPATH}/src/<project_path>}} if none is specified.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-12495","07/13/2020 16:17:47",2,"GQL query for Host  ""create a Host gql type that has all of the host metadata shown on these pages    then create a host query to fetch a host by it's id    only include recentEvents in this structure if it's not meant to be paginated  [https://mongodb.invisionapp.com/d/main/#/console/19647524/424885179/comments]  [https://mongodb.invisionapp.com/d/main/#/console/19647524/424885176/comments]    ¬†    ¬†    ¬†""","",0,0,1,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-12496","07/13/2020 16:20:11",2,"GQL query for myHosts ""myHosts gql query should return a list of hosts that will support this page.¬†    since a user can only have 6 hosts, it's unlikely we will need to paginate this query    [https://mongodb.invisionapp.com/d/main/#/console/19647524/424885179/comments]""","",0,0,1,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-12502","07/13/2020 17:40:04",1,"Allow user to specify generated config output format in CLI ""Since shrub now supports JSON and YAML, we should generate configs for either one (the YAML one would be better for human readability while the JSON one would be suitable for {{generate.tasks}}).""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-12503","07/13/2020 19:19:35",2,"Task checkboxes remain unselected after clicking ""On some variants, the task check boxes appear to be unselected even after clicking individually or clicking """"Select all tasks in this variant"""".    This was the patch build: https://spruce.mongodb.com/patch/5f0ca3d7306615237fb06b7b/configure/tasks    I observed this on the """"OCSP tests"""" variant.    Reproduced in Google Chrome 83.0.4103.116.    Screenshot attached.""","",0,0,1,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-12513","07/14/2020 15:30:12",2,"Host Metadata Card Component  ""Render the metadata card component: query the data and display it.¬†    !image-2020-07-14-10-43-52-718.png!""","",0,0,0,1,0,0,0,0,0,0,0,0,0,1,0
"EVG-12514","07/14/2020 15:39:15",2,"Create Route  ""Create the /host/<hostid> route¬†""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-12515","07/14/2020 15:39:54",2,"Create page layout  ""Create the /host/<hostid> page layout¬†""","",0,0,0,1,0,0,0,0,0,0,0,0,0,1,0
"EVG-12517","07/14/2020 15:43:16",2,"Display title and status  ""Display the title and status for the /host/<hostId> page¬†    !image-2020-07-14-10-43-04-831.png!""","",0,0,0,1,0,0,0,0,0,0,0,0,0,1,0
"EVG-12523","07/14/2020 16:08:50",2,"Restart Jasper button ""Button that launches modal and can be used on /hosts and /host pages""","",0,0,0,1,0,0,0,0,0,0,0,0,0,1,0
"EVG-12524","07/14/2020 16:09:53",2,"Selecting multiple hosts on hosts page: mixed state checkbox ""Mixed state checkbox in column header""","",0,0,0,1,0,0,0,0,0,0,0,0,0,1,0
"EVG-12527","07/14/2020 16:11:54",2,"Reusable table filters ""Clicking `reset` removes query param from url""","",0,1,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-12528","07/14/2020 16:12:16",2,"Filtering hosts: dropdowns UI `search/filter` button ""Clicking `search/filter` adds query param to url""","",0,0,0,1,0,0,0,0,0,0,0,0,0,1,0
"EVG-12529","07/14/2020 16:12:38",2,"Filtering hosts: fetch filtered hosts ""Listen to changes in url params and query hosts with params as filters""","",0,1,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-12530","07/14/2020 16:13:08",2,"Hosts page pagination ""* Get next page of results   * Update ‚Äòpage‚Äô url param & re-fetch       * Choose number of hosts per page   * Update `limit` url param & re-fetch""","",0,1,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-12533","07/14/2020 19:15:57",1,"host configure commands appear to hang ""printing to stdout stops after the first command""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-12535","07/15/2020 15:14:25",2,"Set read concern majority ""We set write concern majority. We should also set read concern majority to avoid reading data that can be rolled back.    Note that the environment variable that sets write concern is in 10gen/kernel-tools. We should use a similar model for setting read concern: Support setting arbitrary read concerns in the app, with a default, and pass read concern majority in the env.""","",0,1,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-12537","07/15/2020 18:45:36",1,"Disable oom tracker in containers ""On linux, the container won't have access to the host's dmesg buffer and trying to run it will return """"dmesg: read kernel buffer failed: Operation not permitted""""    https://stackoverflow.com/questions/41171349/why-is-a-shell-within-a-docker-container-showing-dmesg-content-from-the-host""","",0,0,1,0,0,0,0,0,0,1,0,0,1,0,0
"EVG-12538","07/15/2020 19:22:56",1,"Have timber buildlogger client take username and apikey ""This will replace the current way of asking for the certificate files.""","",0,1,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-12540","07/15/2020 20:07:24",2,"Allow FTDC to collect JSON in memory ""FTDC currently supports collecting JSON and writing the FTDC chunk to a file. However, it may be useful to keep it in memory.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-12544","07/15/2020 23:05:46",2,"OOM Tracker misses pids ""There are times when the OOM tracker misses pids that were OOM killed  [One example|https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_rhel_62_64_bit_majority_read_concern_off_replica_sets_large_txns_format_2_enterprise_rhel_62_64_bit_majority_read_concern_off_74ab0cdac56e1cc62fc96d3ca3be3ddfa54f2bcb_20_07_11_23_55_48#/log/S] where we found 12173 but missed 16811 (which is included in the system log)  [Another example|https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_rhel_62_64_bit_majority_read_concern_off_replica_sets_large_txns_format_2_enterprise_rhel_62_64_bit_majority_read_concern_off_74ab0cdac56e1cc62fc96d3ca3be3ddfa54f2bcb_20_07_11_23_55_48#/log/S], and [another|https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_rhel_62_64_bit_dynamic_required_gle_auth_patch_188c858a12705164b7ae5f1ad418821bedd94bb4_5f0caad39ccd4e2f8b9748c4_20_07_13_18_41_44#/log/S#comparehashes=188c858a12705164b7ae5f1ad418821bedd94bb4&threads=maxonly]""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-12545","07/15/2020 23:06:47",2,"Display task with an OOM kill? ""The [task|https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_rhel_62_64_bit_majority_read_concern_off_display_replica_sets_large_txns_format_patch_c957403d177c8b83c3d3693b29d7af73f34ffdfc_5f0c24f0e3c3311dad2f5e25_20_07_13_09_10_09#/log/S#comparehashes=c957403d177c8b83c3d3693b29d7af73f34ffdfc&threads=maxonly] in question""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-12546","07/15/2020 23:34:58",2,"Detected OOM Kill when there was none in the system logs ""This [task|https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_rhel_62_64_bit_dynamic_required_sharding_ese_gcm_37_enterprise_rhel_62_64_bit_dynamic_required_patch_188c858a12705164b7ae5f1ad418821bedd94bb4_5f0caad39ccd4e2f8b9748c4_20_07_13_18_41_44#/log/S#comparehashes=188c858a12705164b7ae5f1ad418821bedd94bb4&threads=maxonly] detected an OOM kill with no PIDs.    The system logs don't mention an OOM Kill""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-12548","07/16/2020 16:16:59",1,"Remove restriction of hosts greater than half the number of task group tasks ""There is a restriction on task groups that the max number of hosts must not be more than half the number of tasks. I believe this was meant to enforce that people use task groups to serialize tasks. However, this doesn't really make sense. Users might want the task group behavior of preserving the directory but also be fine with parallelism.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-12554","07/16/2020 21:47:35",2,"Task has nonexistent dependency ""https://evergreen.mongodb.com/task/mongo_python_driver_Coverage_Report_coverage_report_patch_5d92b2f5523876653018a4427962ef8ee8f7e6ff_5f0638a6d1fe074eae3090f0_20_07_08_21_20_39    It has a very long list of dependencies that are not specified in the yml. Also it mysteriously got scheduled a week after the patch was submitted""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-12555","07/17/2020 13:30:04",1,"Increase timeout for Task S3 downloads to 30 minutes ""In order to support slower network speeds on static hosts (Z,PPC), we want to increase the timeout on downloading artifacts from S3. From manual tests, 30 minutes seems to be a safe threshold.     Example: https://evergreen.mongodb.com/task/mongodb_mongo_v4.4_enterprise_rhel_81_ppc64le_failpoints_31b08e7d7e095132b7db3e8f4a4271478cf353ab_20_07_16_02_59_08    ""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-12558","07/17/2020 14:58:55",2,"Prefrences page: GQL Mutation to update a public key ""Prefrences page: GQL Mutation to update a public key""","",0,0,0,1,0,0,0,0,0,0,0,0,0,1,0
"EVG-12557","07/17/2020 14:58:55",2,"Preferences page: myPublicKeys query ""create a query to request the authenticated users public keys.¬†""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-12556","07/17/2020 14:58:55",2,"Prefrences page: GQL Mutation to create a public key for the authenticated user ""Prefrences page: GQL Mutation to create a public key for the authenticated user""","",0,0,0,1,0,0,0,0,0,0,0,0,0,1,0
"EVG-12562","07/17/2020 14:58:56",2,"Prefrences page: Create the ""+ Add new key"" button on Manage Public Keys page ""Prefrences page: Create the """"+ Add new key"""" button on Manage Public Keys page as well as the component (needs design) to submit a new key. Hook up the component submit button to the createPublicKey mutation.""","",0,0,0,1,0,0,0,0,0,0,0,0,0,1,0
"EVG-12561","07/17/2020 14:58:56",2,"Prefrences page: GQL Mutation to delete a public key for the authenticated user ""Prefrences page: GQL Mutation to delete a public key for the authenticated user""","",0,0,0,1,0,0,0,0,0,0,0,0,0,1,0
"EVG-12560","07/17/2020 14:58:56",2,"Prefrences page: Render Key Name and Action buttons in the Manage Public Keys page ""Prefrences page: Render Key Name and Action buttons in the Manage Public Keys page. Hook up trash can button to the delete public key mutation.""","",0,0,0,1,0,0,0,0,0,0,0,0,0,1,0
"EVG-12559","07/17/2020 14:58:56",1,"Prefrences page: Add Manage Public Keys tab in the Preferences page and a placeholder page ""Prefrences page: Add Manage Public Keys tab in the Preferences page and a placeholder page""","",0,0,0,1,0,0,0,0,0,0,0,0,0,1,0
"EVG-12564","07/17/2020 14:58:57",2,"Prefrences page: Hook up the pencil action button in the Public Keys table ""Prefrences page: Hook up the pencil action button in the Public Keys table to edit the public key. Clicking on the key should open a component to edit the key (needs design)""","",0,0,0,1,0,0,0,0,0,0,0,0,0,1,0
"EVG-12563","07/17/2020 14:58:57",1,"Spawn host page: Page title + badges ""Spawn host page: Page title + badges""","",0,0,0,1,0,0,0,0,0,0,0,0,0,1,0
"EVG-12568","07/17/2020 14:58:58",2,"Spawn host page: GQL mutation to start a paused host ""Spawn host page: GQL mutation to start a paused host""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-12567","07/17/2020 14:58:58",2,"Spawn host page: GQL mutatation to delete host ""Spawn host page: GQL mutatation to delete host""","",0,0,0,1,0,0,0,0,0,0,0,0,0,1,0
"EVG-12566","07/17/2020 14:58:58",2,"Spawn Host page: GQL mutation to pause/restart host ""Spawn Host page: GQL mutation to pause/restart host""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-12570","07/17/2020 14:58:59",2,"Spawn host page: Create GQL mutation to spawn a host ""Spawn host page: Create GQL mutation to spawn a host""","",0,0,0,1,0,0,0,0,0,0,0,0,0,1,0
"EVG-12569","07/17/2020 14:58:59",8,"Spawn host page: Create spawn host modal and hook up to spawn host button ""Spawn host page: Create spawn host modal and hook up to spawnHost mutation and spawn host button""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-12573","07/17/2020 14:59:00",2,"Spawn host page: GQL query to get spawnableDistros ""Spawn host page: GQL query to get spawnableDistros""","",0,0,0,1,0,0,0,0,0,0,0,0,0,1,0
"EVG-12572","07/17/2020 14:59:00",2,"Spawn host page: GQL mutation to edit a spawned host ""Spawn host page: GQL mutation to edit a spawned host""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-12576","07/17/2020 14:59:01",2,"Spawn host page: Render table rows  ""Spawn host page: Render table rows¬†""","",0,0,0,1,0,0,0,0,0,0,0,0,0,1,0
"EVG-12575","07/17/2020 14:59:01",2,"Spawn host page: Create table dropdown card. Populate with data from host query. ""Spawn host page: Create table dropdown card. Populate with data from host query.""","",0,0,0,1,0,0,0,0,0,0,0,0,0,1,0
"EVG-12574","07/17/2020 14:59:01",2,"Spawn host page: GQL query to get instanceTypes ""Spawn host page: GQL query to get instanceTypes""","",0,0,0,1,0,0,0,0,0,0,0,0,0,1,0
"EVG-12579","07/17/2020 14:59:02",2,"Volumes page: GQL mutation to unmount / mount volume from host ""Volumes page: GQL mutation to unmount / mount volume from host""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-12578","07/17/2020 14:59:02",2,"Volumes page: GQL mutation to delete volume ""Volumes page: GQL mutation to delete volume""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-12577","07/17/2020 14:59:02",1,"Volumes/Host page: Create tab for Volumes and Hosts and empty placeholder pages ""Volumes/Host page: Create tab for Volumes and Hosts at /spawn route and empty placeholder pages""","",0,0,0,1,0,0,0,0,0,0,0,0,0,1,0
"EVG-12582","07/17/2020 14:59:03",2,"Volumes page: Create table dropdown card component - hook up to volumes query ""Volumes page: Create table dropdown card component - hook up to volumes query""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-12580","07/17/2020 14:59:03",2,"Volumes page: GQL query for myVolumes ""Volumes page: GQL query for myVolumes, include these fields in the Volumes gql type: volume, mountedOn, status, expiresAt, createdAt, startedAt (maybe), type, size, availabilityZone, isHomeDir""","",0,0,0,1,0,0,0,0,0,0,0,0,0,1,0
"EVG-12584","07/17/2020 14:59:04",2,"Volumes page: GQL mutation to create volume ""Volumes page: GQL mutation to create volume""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-12583","07/17/2020 14:59:04",2,"Volumes page: GQL mutation to edit volume ""Volumes page: GQL mutation to edit volume""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-12588","07/17/2020 14:59:06",1,"Volumes page: Page title + badges ""Volumes page: Page title + badges""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-12603","07/20/2020 18:39:09",2,"Suggest re-logging into UI if evergreen CLI cannot authenticate user ""User refresh tokens expire after 100 days and the only way to get a new token is to log into Okta via the UI. However, the CLI currently just returns 401 unauthorized - it should suggest logging in again if it gets this due to expired tokens.    The way the middleware is written, there's no way to distinguish between different reasons for 401 unauthorized (e.g. unauthorized because ) since the user checking is based on the presence/absence of a {{gimlet.User}} being attached, so it's likely that suggesting logging in again will be the wrong solution since it's just a guess.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-12605","07/20/2020 19:33:24",2,"Generated task ran 8 hours after last task it depended on finished ""This task ran on Jul 17 at 1:49am¬†[https://evergreen.mongodb.com/task/mms_e2e_local_with_daemon_foliage_dd9fa2b4001cd68b7d427b3ff9e6e8924af9b5fb_20_07_16_13_59_36#/log/EV]    It ran over 8 hours after the last task it depended on finished on Jul 16 at 5:05pm    [https://evergreen.mongodb.com/task/mms_e2e_local_with_daemon_E2E_Local_BRS_Automated_PIT_Restore_ShardedCluster_Blockstore_S3_dd9fa2b4001cd68b7d427b3ff9e6e8924af9b5fb_20_07_16_13_59_36]    This was on rhel70-large over the evening which we would expect to not be constrained on hosts, so we're perplexed what caused the delay    The task was generated long before on Jul 16 at 10:12am¬†[https://evergreen.mongodb.com/task/mms_evg_foliage_stat_check_init_dd9fa2b4001cd68b7d427b3ff9e6e8924af9b5fb_20_07_16_13_59_36]    This gave us a makespan of 15 hours for the variant. We need to bring that down.    Looking for a root cause of why this 8 hour delay occurred, any steps the evergreen team or we can implement to prevent it in the future.    CC: [~geoff.mishkin] [~james.broadhead]""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-12609","07/20/2020 20:41:01",2,"Task restarted with system failure, then marked started twice ""[https://evergreen.mongodb.com/task/mms_e2e_local_with_daemon_E2E_Local_BRS_Automated_PIT_Restore_ShardedCluster_Blockstore_S3_dd9fa2b4001cd68b7d427b3ff9e6e8924af9b5fb_20_07_16_13_59_36#/log/EV]    We need to know if this behavior is something expected we need to change batch times or test lengths to account for, in order to make a task's contribution to the variant makespan shorter. Or if it is something that needs to be addressed by the evergreen team to prevent from happening again.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-12613","07/20/2020 23:25:02",2,"Hosts page table ""[https://mongodb.invisionapp.com/share/C2WKQWRWG5Y#/screens/424885145]""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-12624","07/21/2020 19:45:02",2,"Are task groups clearing the work dir between tasks within the group? ""https://github.com/evergreen-ci/evergreen/blob/2a733770e298ce01069e5c916b6a4d8773518c3d/agent/agent.go#L323 doesn't seem to check, but also I think we would be hearing about it if this were the case.    To test this, you can make a task group that writes a file in the first task and then reads that file in the second task.""","",0,0,0,0,0,1,0,0,0,1,0,0,0,0,0
"EVG-12625","07/21/2020 19:54:00",1,"Rename CreateSystemMetricRecord to CreateSystemMetricsRecord and fix panic logging in timber ""The naming change is just for consistency with other functions, which use the plural form.""","",0,1,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-12626","07/21/2020 21:53:15",2,"LoggingCache does not work as intended ""It should be a logging cache stored on the remote service side, not the client side.    It should probably follow the REST model for the logging cache implementation, where it connects to the REST service and makes requests for all the logging cache methods.    We should test the logging cache once it's implemented (along with {{SendMessages}}, which depends on this).""","",0,1,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-12629","07/22/2020 14:00:37",2,"Handle expired refresh tokens by logging out user ""If the user has an expired refresh token, the background reauthentication job should clear their login cache as soon as it detects that error so that they must log in again.    Gimlet will have to return a special error message for the case of a user's refresh token being expired.""","",0,1,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-12632","07/22/2020 20:59:36",1,"`evergreen admin enable-service` and `disable-service` fetch blank service flags ""They make a request to the legacy admin settings route, which returns an empty struct (except for the banner). We should fix this so it actually returns the existing service flags. Otherwise, these CLI commands will unset all the service flags.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-12640","07/23/2020 19:44:00",1,"Add exit status to cedar GRPC client ""Just in case the metrics collector fails.""","",0,1,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-12642","07/23/2020 21:07:51",2,"Don't stop starting a host if can't get price information ""EVG-12641 might be a situation where hosts can actually start, but the pricing API blocks Evergreen from setting hosts to running. We should put a context on calls to the cachingPriceFetcher and not error if they fail, since we can probably safely continue, since we no longer rely on it to get the cheapest AZ.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-12644","07/23/2020 21:56:56",1,"Create script to easily convert mongo documents to json ""This would help us quickly turn prod mongodb document data into plain json so that it can be used to seed the local data¬†    This would greatly speed up the process of generating data to seed the local db.""","",0,0,0,1,0,0,0,0,0,0,0,0,0,1,0
"EVG-12648","07/24/2020 14:50:19",2,"Initial task setup failure for task ""This is not related to problem creating certificates and occurred less than 1% of the time. https://evergreen.mongodb.com/task/mongodb_mongo_master_amazon_compile_78cc027285359cc21c55f2dac69ce41cb9f23959_20_07_24_10_05_58""","",0,0,0,0,0,0,0,1,0,1,0,0,0,0,0
"EVG-12649","07/24/2020 19:15:35",1,"Fix make dist to compile for the target GOOS operating system ""This has the same problem that Barque had where it'll compile for the native computer's GOOS instead of the one set in the command line (e.g. {{GOOS=linux make dist}})""","",0,1,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-12670","07/27/2020 20:20:33",2,"Implement LTS/continuous/development checks for new versioning scheme ""The new versioning implementation should distinguish between LTS releases and non-LTS releases (i.e. continuous and development releases).""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-12679","07/28/2020 14:46:59",1,"Remove freebsd from cross-compilation ""Nobody uses it anymore so we can get rid of it.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-12681","07/28/2020 15:59:20",1,"Can't patch with apple's version of git ""The version string for Apple's version of git doesn't match the [regexp|https://github.com/evergreen-ci/evergreen/blob/4dab3e36c27e0487aa3cf2c8c7da37e1c0d29259/operations/patch_util.go#L673] ""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-12682","07/28/2020 18:20:38",8,"Test new versioning scheme end to end ""We should verify that we can correctly put a version greater than 4.5.0 into the development repository. It may also make sense to do this with a release candidate.    This has to be done before we can do the first continuous release.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-12684","07/28/2020 19:55:18",2,"Fleet errors for a set of distros ""We're getting many errors trying to spawn ubuntu*-arm64-large hosts.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-12686","07/28/2020 20:02:55",0,"Remove nonce error checking for ID token validation ""After filing [this issue|https://github.com/okta/okta-jwt-verifier-golang/issues/43], it seems like it should no longer be necessary to check for an error string related to empty nonce claim when returned an ID token [here|https://github.com/evergreen-ci/gimlet/blob/d28831ee71d1d02871f7e6a1c94ec5387430218d/okta/okta.go#L196-L205]. We should be able to remove this check.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-12687","07/28/2020 21:13:11",1,"Can't create empty patches ""An empty patch errors:    {code:bash}  $ evergreen patch -p evergreen  Enter a description for this patch (optional):  Unexpected reply from server (500 Internal Server Error): 400 (Bad Request): error getting summaries by commit: error getting patch summaries for commit 'master: EVG-12681 fix for Apple's git (#3834)': couldn't validate patch: Error waiting on patch: 562 - fatal: unrecognized input  : exit status 128  {code}  ""","  $ evergreen patch -p evergreen  Enter a description for this patch (optional):  Unexpected reply from server (500 Internal Server Error): 400 (Bad Request): error getting summaries by commit: error getting patch summaries for commit 'master: EVG-12681 fix for Apple's git (#3834)': couldn't validate patch: Error waiting on patch: 562 - fatal: unrecognized input  : exit status 128  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-12690","07/29/2020 16:44:40",8,"Implement new versioning scheme ""This should ideally be a separate implementation from the legacy versioning scheme, whose logic should preferably not change.    For this, we should just implement the existing methods on the mongodb version object, but with their new meanings. This new versioning scheme should only apply for versions 4.5.0 and above.    For example, development series do not exist anymore, but a release that goes into the development repo should be denoted by any non-LTS version which has {{major.quarter.patch}} format and is not followed by {{-rcN}} (special for release candidates).""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-12696","07/29/2020 23:54:55",2,"New commits are not being tracked by mongo-go-driver-v1.4 ""The mongo-go-driver-v1.4 project isn't automatically scheduling waterfall builds for new commits to the branch it's tracking. [~john.liu]¬†initially fixed this by using the """"force run repotracker on save"""" option in the project settings, which kicked off one waterfall run, but the project did not pick up commits the next day either.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-12697","07/30/2020 00:53:05",1,"Call update function onEnter for table filters ""In table dropdown filters, the update function should be called if user presses Enter""","",0,0,0,1,0,0,0,0,0,0,0,0,0,1,0
"EVG-12712","07/31/2020 19:36:48",1,"Allow users to copy-to-clipboard build variant names on patch configuration page ""This is useful if a user wants to copy/paste build variant names for documentation, conversations about which task(s) to schedule, etc.    Presently, it is not possible to select them (see this [patch build|https://spruce.mongodb.com/patch/5f244d89d6d80a20695854b1/configure/tasks]). ""","",0,0,1,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-12717","08/03/2020 17:22:57",2,"Evergreen automatically scheduled a zSeries task from March 24th 2020 on August 2nd 2020 ""Tasks older than 7 days shouldn't be getting automatically scheduled.    https://evergreen.mongodb.com/task/mongodb_mongo_v4.4_enterprise_rhel_72_s390x_inmem_sharding_op_query_1_enterprise_rhel_72_s390x_inmem_70c19c844d348774290fdadb9f9bbb0deb5301ad_20_03_24_06_16_46#/log/EV    |Aug 2, 2020 6:45:04 am|Scheduled at Aug 2, 2020, 6:45:03 am|  |Aug 2, 2020 7:00:31 am|Dispatched to host [rhel74-z-12.dallasisv.build.10gen.cc|https://evergreen.mongodb.com/host/rhel74-z-12.dallasisv.build.10gen.cc]|  |Aug 2, 2020 7:00:37 am|Marked as """"started""""|""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-12724","08/03/2020 23:18:23",2,"Tasks submitted time should be their ingest_time ""The submitted time shown for a task taken from the task's create_time field. Given that a patch task's create time is [that of its base version|https://github.com/evergreen-ci/evergreen/blob/d40dbd00d349328491003a6fc21bc28fae5c8ef6/model/lifecycle.go#L1040] this is confusing. It would be better to show the task's ingest_time.""","",0,1,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-12729","08/05/2020 17:55:48",2,"Implement Download method ""This should download a single metric type from s3 for a SystemMetrics object.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-12730","08/05/2020 19:42:00",2,"Host Events Query  ""Fetch host event data on the ui.¬†""","",0,0,0,1,0,0,0,0,0,0,0,0,0,1,0
"EVG-12736","08/06/2020 16:58:47",2,"Upgrade gopsutil to latest tagged release ""The version of gopsutil that we're depending on panics on MacOS when calling {{(*Process).CreateTime()}} due to [a bug that has been fixed in a later version|https://github.com/shirou/gopsutil/issues/799#issuecomment-562764688].    This will require some work to fix grip, which is pinned to an old version of gopsutil.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-12737","08/06/2020 17:21:41",2,"Can you create a patch against a restricted project you don't have access to? ""[https://mongodb.slack.com/archives/C0V896UV8/p1596729650420200]    Initial thoughts are yes, but I don't have a restricted project that I don't have access to for testing.    If you can, then we should probably change this issue to a bug, since you could leak Evergreen project variable values in the patch.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-12738","08/06/2020 17:56:21",0,"Handle nil time and duration in jasper RPC conversions ""{{ptypes.Timestamp}}/{{ptypes.Duration}} will fail if passed a nil {{time.Time}}/{{time.Duration}} (e.g. if the process hasn't finished yet so doesn't have an ending timestamp)""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-12744","08/07/2020 19:21:42",3,"Create global_max_hosts functionality  ""Currently, we are relying on max_host limits to prevent the total number of hosts in the system from becoming too great. We should have a global limit in place so that we can loosen up max_host limits on individual distros, which are frequently pegged at max_hosts and build up very long wait times as a consequence.    use this data:  https://mongodb.splunkcloud.com/en-US/app/search/search?earliest=rt-1m&latest=rt&q=search%20index%3Devergreen%20%22host%20stats%20by%20distro%22&display.page.search.mode=fast&dispatch.sample_ratio=1&display.general.type=events&sid=rt_1596821781.155325    Pegged hosts:  https://mongodb.splunkcloud.com/en-US/app/search/search?earliest=-60m%40m&latest=now&q=search%20index%3Devergreen%20%22host%20stats%20by%20distro%22%20%7C%20spath%20path%3Ddata%7B%7D%20output%3Ddata%20%7C%20fields%20-%20_raw%20%7C%20fields%20data%20%7C%20mvexpand%20data%20%7C%20spath%20input%3Ddata%20%7C%20where%20status%3D%22running%22%20AND%20provider!%3D%22static%22%20and%20distro!%3D%22ubuntu1804-workstation-cluster%22%20and%20distro!%3D%22ubuntu1804-workstation%22%20%7C%20stats%20avg(max_hosts)%20as%20_max_hosts%20avg(count)%20as%20avg_count%20by%20distro%20%7C%20eval%20pegged_floor%3Dfloor(_max_hosts%20*%200.99)%20%7C%20where%20avg_count%20%3E%20pegged_floor%20%7C%20sort%20by%20pegged_floor&display.page.search.mode=verbose&dispatch.sample_ratio=1&display.general.type=visualizations&display.page.search.tab=visualizations&display.visualizations.charting.chart=column&sid=1596824255.157079      ""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-12746","08/08/2020 10:24:33",1,"The `evergreen` command line utility fails on Windows due to format of Git version ""The `evergreen` command line utility for Windows fails with this error:      The version that Git reports on Windows indeed is """"2.15.0.windows.1"""":  ""","  E:\workspace\mongo>evergreen patch -d """"SERVER-49192""""  Uncommitted changes are omitted from patches by default.  Use the '--uncommitted, -u' flag or set 'patch_uncommitted_changes: true' in your ~/.evergreen.yml file to include uncommitted changes.  Continue? (Y/n) y  problem getting git metadata: can't get git version: can't parse git version number from version string 'git version 2.15.0.windows.1'    E:\workspace\mongo>git --version  git version 2.15.0.windows.1  ",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-12747","08/10/2020 14:52:19",2,"Handle empty running task on host page ""On the host page, there may not be a running host. When there is no running task, it should display¬†Current Task:¬†_none._    !image-2020-08-10-15-28-58-974.png!""","",0,0,0,1,0,0,0,0,0,0,0,0,0,1,0
"EVG-12748","08/10/2020 14:54:44",2,"Add data and tests for host events  ""Add data and tests that test a host that has events attached to both a host id and a tag.¬†    When we create an intent host it has an ID like ‚Äúevg-abcdefgh‚Äù, and then when we create the actual host we now have an ID like ‚Äúi-1234"""". The host intent ID is saved as Tag` in the actual host. The current query should cover both, but¬† we need to add a test that specifically includes events that happened to the host intent.¬†""","",0,0,0,1,0,0,0,0,0,0,0,0,0,1,0
"EVG-12755","08/10/2020 16:18:46",2,"Task Queue: Route ""* /task-queue   * Just going to /task-queue page will redirect user to default distro queue   * e.g. /task-queue => /task-queue/macos-1012       * Selected task represented in route   * /task-queue/:distroId/:taskId    Regardless of distro id   * ‚ÄòTask Queue` page title always present   * ‚ÄòSearch for Distro‚Äô input always present""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-12758","08/10/2020 16:22:37",2,"Tasks Queue: Task table filtering ""* Can filter by task ID   * Can filter by revision""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-12762","08/10/2020 19:44:30",1,"Clean up interns' virtual workstations ""EVG-8183 provided an API for MANA to clean up unexpirable resources (e.g. virtual workstations) left behind when someone leaves the company. Since MANA doesn't call it yet we need to manually clean up the hosts/volumes left behind by the summer interns.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-12763","08/10/2020 21:00:51",1,"Commit queue command and patch show truncated commit message ""Using evergreen version 2020-08-06, I ran       The commit message is truncated from """"SERVER-50221 Use shared_ptr to manage NoLimitSorter and InMemIterator in-memory data"""" to """"SERVER-50221 Use shared_ptr to manage NoLimitSorter and InMemIterator"""", and it appears this way in the Evergreen UI as well.    It appears that the point of truncation is the point where the commit message rolls over to the next line on [GitHub|https://github.com/mongodb/mongo/commit/6d307c337d5d76e5471e0676fc255cab15aef61a].""","evergreen commit-queue merge --project mongodb-mongo-master   src/mongo/db/sorter/sorter.cpp | 41 ++++++++++++++++++++++-------------------   1 file changed, 22 insertions(+), 19 deletions(-)  190e83f93f SERVER-50221 Use shared_ptr to manage NoLimitSorter and InMemIterator in-memory data  This is a summary of the patch to be submitted. Continue? (y/n): y  Patch successfully created.          ID : 5f31a602a4cf474b2600ee5d   Created : 2020-08-10 19:54:42.903 +0000 UTC      Description : Commit Queue Merge: 'SERVER-50221 Use shared_ptr to manage NoLimitSorter and InMemIterator' into 'mongodb/mongo:master'     Build : https://evergreen.mongodb.com/patch/5f31a602a4cf474b2600ee5d?redirect_spruce_users=true    Status : created      Queue position is 0.",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-12764","08/11/2020 04:24:18",0,"Client should return non-zero status when user aborts patch submission at the uncommitted changes prompt ""I typically run  {code}  evergreen patch ... && git branch server-xxxxx-evgN  {code}  or similar so that I can keep track of my patch builds.  This works nicely if I change my mind and answer """"n"""" to the """"This is a summary of the patch"""" prompt, or if the patch submission fails for some reason.  However, if I answer """"n"""" to the """"Uncommitted changes are omitted from patches by default"""" prompt, then the exit code is still 0.  I would expect it to be non-zero, since the patch submission didn't run to successful completion.  The success exit status means the git branch/tag (or whatever followup action I wanted) is still performed, even though the patch wasn't submitted.  This is counter-intuitive given the way that the other prompt works.  Usually when I say """"n"""" to this prompt it's because I just want to run """"git status"""" to see what the uncommitted changes are.    ""","  evergreen patch ... && git branch server-xxxxx-evgN    $ evergreen version  2020-08-06  $ evergreen patch -d 'foo'  Uncommitted changes are omitted from patches by default.  Use the '--uncommitted, -u' flag or set 'patch_uncommitted_changes: true' in your ~/.evergreen.yml file to include uncommitted changes.  Continue? (Y/n) n  $ echo $?  0  $ evergreen patch -d 'foo'  Uncommitted changes are omitted from patches by default.  Use the '--uncommitted, -u' flag or set 'patch_uncommitted_changes: true' in your ~/.evergreen.yml file to include uncommitted changes.  Continue? (Y/n) y   src/mongo/db/repl/SConscript | 13 +++++++++++--   1 file changed, 11 insertions(+), 2 deletions(-)  49f95061530 SERVER-50002 separate unittest binary for ReplicaSetAwareService  This is a summary of the patch to be submitted. Continue? (y/n): n  patch aborted  $ echo $?  1  ",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-12765","08/11/2020 15:39:47",2,"Exclude dev releases from the download feed ""Dev releases should be available in the repo but should not be advertised publicly for downloading since it's meant for internal use.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-12766","08/11/2020 15:51:48",1,"Return 200 error on list endpoints with no resources attached ""List endpoints like /resource_A/a_id/B_resources should not 404 when there are no B resources attached to an existing resource_A. They should return a 200 with an empty list.    requests.exceptions.HTTPError: 404 Client Error: Not Found for url: https://evergreen.mongodb.com/rest/v2/tasks/mms_code_health_E2E_NDS_DRY_RUN_c93893c3366dc473a6eaacade37416d56ef25b16_20_08_11_13_22_13/tests""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-12767","08/11/2020 16:46:30",1,"Do not remove temporary file prematurely when updating evergreen binary ""This will cause updates via {{evergreen get-update --install}} to fail.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-12769","08/11/2020 20:43:42",2,"Poplar should enable env vars for sensitive information ""Some variables that are included in the upload report, such as the bucket api key, can only be added via the json report file. This file is often exported with the rest of the DSI artifacts which probably shouldn't have such sensitive information. We should enable env vars for these elements.""","",0,1,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-12777","08/12/2020 18:58:44",2,"Pushed tag not triggering new version ""After configuring the {{mongo-tools}} project for tag-triggered versions and pushing a tag called {{test-tag}}, I saw that the tag was added to the [existing version|https://evergreen.mongodb.com/version/mongo_tools_d3aec0abfc02b849946ab154e1cda1884c0d06d5] corresponding to the tagged commit, but no new version was created.    For reference, see the attached screenshot of the tag-triggered versions config.    More info from a slack conversation with [~annie.black]:  {quote}it looks like we weren't able to find any builds, but i see that release is a valid build so i'm not sure why it wasn't found{quote}""","",0,0,0,0,0,0,1,0,0,1,0,0,0,0,0
"EVG-12779","08/12/2020 21:35:18",2,"Stop using git's -c option in git.get_project ""git version  < 2.1.2 doesn't support it""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-12784","08/13/2020 16:22:25",2,"Restricted project mms-auto-code-change evergreen project appears in dropdown for Cory Mintz ""My understanding is that a restricted project should only be viewable by the admins of the project. That must be incorrect.    How can I change who can view this project? If I cannot change it myself, I need removed everyone except the admins from view access.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-12788","08/13/2020 22:34:02",2,"Re-execution of system failure did not activate blocked tasks ""I have a task which claims to be blocked. However, it depends only on a compile task, which successfully completed.  The compile task appears to have encountered system failures, and took four tries to successfully complete.  Is this expected for dependent tasks to remain blocked?    https://evergreen.mongodb.com/task/mongodb_mongo_master_debian92_aggregation_patch_424f10ec4bc7b333bd682c7490fc6147688fd0ec_5f3558913066156e86024d1b_20_08_13_15_15_09##comparehashes=424f10ec4bc7b333bd682c7490fc6147688fd0ec&threads=all""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-12789","08/14/2020 19:23:59",2,"gantt chart for tasks incorporating wait times ""Characterize system-introduced lag for SLAs.    Potential Metrics:    slowdown: runtime on a loaded system divided by runtime on a dedicated system     by task tree or by build  wait time: Time from scheduling to dispatch    problem: different schedulers function differently on this""","",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-12790","08/14/2020 19:54:43",1,"Can't start stopped hosts from the old UI ""Clicking the start button returns a 400""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-12798","08/17/2020 17:32:02",1,"Add new metadata fields to ArtifactVersion ""{{ArtifactVersion}}'s {{ProductionRelease}} and {{DevelopmentRelease}} are only for the old versioning scheme. The download feed will have {{ContinuousRelease}} and {{LTSRelease}} for the new versioning scheme.    Also, we should fix the JSON tags for {{Current}}.    It doesn't seem link any project is currently using these fields so far.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-12799","08/17/2020 18:48:03",1,"Fix semantics of IsDevelopmentBuild for NewMongoDBVersion ""It should be false for any new version that is not """"pre"""" or ends in """"-"""" or has """"~"""".""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-12801","08/17/2020 21:29:49",2,"Handle undefined hosts more gracefully  ""!image-2020-08-17-16-28-42-844.png!""","",0,0,0,1,0,0,0,0,0,0,0,0,0,1,0
"EVG-12804","08/18/2020 16:00:22",2,"validate_commit_message task in the commit queue does not work with a commit message across two lines ""I had difficulty with [a recent commit|https://github.com/mongodb/mongo/commit/456b0e3ff9c319f494f6defcf62315cd17f8d3a6] where I originally had the commit message across two lines so that each line was <=100 chars, like so:    SERVER-49731 Create an Ident base class for RecordStore and SortedDataInterface and thread a  shared_ptr<Ident> through to the KVDropPendingIdentReaper on drop collection/index.    When I tried to use     evergreen commit-queue merge --project mongodb-mongo-master    to send the patch to the commit queue, the message got completely garbled:    Commit Queue Merge: '=?UTF-8?q?SERVER-49731=20Create=20an=20Ident=20base=20class=20for?=' into 'mongodb/mongo:master'   (https://spruce.mongodb.com/version/5f3bd794e3c331627f992d36/tasks)    I changed it to a single really long line, and it finally worked fine: https://spruce.mongodb.com/version/5f3bd94de3c331627f993096/tasks    Is this expected behavior? Or a bug? What format commit message should I be using? This is the first commit message where this has been a problem. I've committed patches with two-line messages before that the commit queue turned into one line, which was not what I wanted but did get through the commit queue.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-12807","08/18/2020 19:32:53",1,"Add region credentials to distros in prod ""This is dependent on the build script being deployed to prod.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-12809","08/18/2020 21:04:02",1,"Set up CI testing for bond ""Currently, testing is all manual.    We should also set up golangci-lint as the preferred linter instead of gometalinter.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-12810","08/18/2020 21:38:52",2,"Ensure feeds have expected output for first continuous release ""Run some tests and manually check to ensure that the full.json and current.json will look as they're expected in preparation for the actual release. The other feeds that will be generated should also be spot-checked to ensure they'll produce the expected output.    Since the versions are just pulled from git tags in the mongo repo, it seems fine to just add the first continuous version to that list and see if it produces the expected feed.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-12814","08/19/2020 15:37:52",2,"Investigate Failed to acquire IX lock transaction errors ""This is causing commits to be missed in rare cases""","",0,0,1,0,0,0,0,0,0,1,0,0,1,0,0
"EVG-12824","08/20/2020 15:15:53",1,"Clean up makefiles ""1. Remove things used for goEnv that were necessary solely for gometalinter (mostly the PATH muddling).  2. Should also experiment with removing goEnv entirely and just setting environment variables using Make's {{export}} feature.  3. Clean up build directory creation.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-12825","08/20/2020 15:16:18",1,"Store regular patches in diff format ""[This commit|https://github.com/evergreen-ci/evergreen/commit/4321ae58c139be58a2370a4c0d6e62f9236ec3b2] causes patches to be stored in patch format. This breaks tests relying on git.get_project not committing the changes.  We should hold off on storing patches this way until the tests can handle the changes being committed.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-12826","08/20/2020 15:17:59",1,"Store regular patches in patch format ""Once tests have been adjusted to handle committed changes we should go back to storing patches in patch (mbox) format.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-12827","08/20/2020 15:59:17",2,"Mbox BodyReader cannot handle lines longer than 4096 bytes ""msg.BodyReader().Read calls nextLine(), which calls ReadSlice('\n'), which relies on the default bufio buffer size of 4096 bytes. This means that lines longer than 4096 bytes cause patches to fail.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-12829","08/20/2020 16:28:35",2,"Spawnhost setup scripts cd to non-existent directory on RHEL6.2 ""The user for RHEL is root and the root user's home directory is at /root.  When we [prepend|https://github.com/evergreen-ci/evergreen/blob/b043069916c03fbdedc843526ee204eec8e38481/units/util.go#L52] the script with   {{cd /home/<user>}}, it fails because the directory /home/root doesn't exist.""","",0,0,1,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-12838","08/21/2020 18:16:28",1,"Merge new versioning scheme logic ""Once the mongo-release-tools logic is code-complete and ready for the first continuous release, it should be merged into the master branch.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-12840","08/21/2020 19:54:33",1,"Handle dev releases for feeds and ensure continuous releases get release notes ""Ensure that:  - Development releases appear in full.json but not in current.json.  - Continuous releases get their own release notes, but Docs will have to update us on what the release notes URL will be for them.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-12843","08/24/2020 14:29:58",2,"Failures: coverage on Coverage [Evergreen @ a5450e38] (TestBackgroundSuite, TestMaxHeartbeats) "" h2. [coverage failed on Coverage|https://evergreen.mongodb.com/task/evergreen_coverage_coverage_a5450e38434901d38c62b11f5243f3c2bc88c91e_20_08_21_20_35_21/0] Host: [ec2-34-235-152-164.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/i-049d55f089ef5f68d] Project: [Evergreen|https://evergreen.mongodb.com/waterfall/evergreen] Commit: [diff|https://github.com/evergreen-ci/evergreen/commit/a5450e38434901d38c62b11f5243f3c2bc88c91e]: EVG-12481 Don't panic (#3918) | 21 Aug 20 20:35 UTC Evergreen Subscription: ; Evergreen Event:  *TestBackgroundSuite* - [Logs|https://evergreen.mongodb.com/test_log/5f4032a82fbabe0a1f64ef69] | [History|https://evergreen.mongodb.com/task_history/evergreen/coverage?revision=a5450e38434901d38c62b11f5243f3c2bc88c91e#/TestBackgroundSuite=fail] *TestMaxHeartbeats* - [Logs|https://evergreen.mongodb.com/test_log/5f4032a82fbabe0a1f64ef69] | [History|https://evergreen.mongodb.com/task_history/evergreen/coverage?revision=a5450e38434901d38c62b11f5243f3c2bc88c91e#/TestMaxHeartbeats=fail]  [Task Logs | https://evergreen.mongodb.com/task_log_raw/evergreen_coverage_coverage_a5450e38434901d38c62b11f5243f3c2bc88c91e_20_08_21_20_35_21/0?type=T] ""","",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0
"EVG-12845","08/24/2020 15:28:08",1,"Provide API for a patch's diff ""Currently If a task wants to get its patch it needs to get it itself from git diff. We should provide an endpoint for the task to get it from.   This will reduce reliance on how Evergreen applies the patch.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-12851","08/24/2020 18:30:21",1,"commit queue panics ""https://mongodb.slack.com/archives/C866SR2LR/p1598289724003000""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-12852","08/24/2020 21:50:32",2,"improve offboarding users by modifying expiration time ""Manual testing has shown that offboarding users takes more time than our route allows, given the one minute time out. To make this as successful as possible, I believe this should be moved to a job. Potentially if terminating an unexpirable instance fails, we should log critical, otherwise the unexpirable volume may never be terminated.    Title updated to reflect the comments.""","",0,0,0,1,0,0,0,0,0,1,0,0,0,0,0
"EVG-12873","08/25/2020 21:57:51",1,"Use latest version of golangci-lint ""The last go1.9 version of golangci-lint is buggy. It's probably better to lint with the latest linter version since go1.9 compatibility doesn't matter much.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"EVG-12874","08/25/2020 22:55:35",1,"Add link to task page that goes to /task-queue ""link only exists if task is on the queue""","",0,1,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-12877","08/25/2020 23:42:06",1,"Ensure that if parameter YAML defaults are changed for PRs, these are used ""This includes PRs.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-12876","08/25/2020 23:42:06",2,"Allow default parameters to be stored in the project YAML ""These should overwrite project variables. Should allow for a default value and a description.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-12881","08/25/2020 23:42:07",2,"Allow user to pass in parameters from the CLI, using either KEY=VALUE pairs or a file ""These parameters should also be stored with the patch and exposed via API.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-12878","08/25/2020 23:42:07",2,"Allow users to maintain project-specific default parameters in their local client configuration. ""This will just add onto the existing Project struct in local configs. This should overwrite defaults in the project YAML.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-12883","08/25/2020 23:42:08",1,"Ensure parameters are documented where relevant ""And potentially parameters should have their own section, to explain the hierarchy.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-12882","08/25/2020 23:42:08",1,"Add --parameters option to the evergreen list command ""This will display the description and defaults for the parameters defined in the YAML for a project.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-12888","08/26/2020 18:57:41",2,"host.create should log the distros or AMI it creates ""There have been several cases where it has been difficult to debug a problem with host.create, because it required reading a complex project config to figure out what distro was spawned. host.create should log the distro or AMI it is spawning to the agent logs.""","",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-12896","08/27/2020 15:25:21",1,"Use proper gRPC error codes ""Jasper currently just uses the {{github.com/pkg/errors}} to return errors to the gRPC service. However, because of this, it will always return an internal RPC error for any of these cases. We should use gRPC's error formatting {{google.golang.org/grpc/status}} since it supports returning specific gRPC statuses.""","",0,1,0,0,0,0,0,0,0,0,0,0,1,0,0
"EVG-12899","08/27/2020 19:19:38",1,"Change LastCommunication Format on /host/<hostID> ""Change the format from    ¬†Last Communication:¬†Jul 20, 2020 9:08:41 am   to¬†    ¬†Last Communication:¬† a month ago""","",0,0,1,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-12903","08/28/2020 15:45:59",2,"Way to exclude tasks from git tag triggered versions ""Similar to how we have """"patchable: false"""" it would be great to have a similar flag to disallow things from running on git tag triggered versions instead of just messing with regex    ""","",1,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"EVG-12907","08/28/2020 17:55:58",2,"Add the add note button and functionality to the build baron UI  ""¬†    Main Ticket    [Design|https://mongodb.invisionapp.com/share/C2WKQWRWG5Y#/screens/415337715]¬†¬†    ¬†""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-12910","08/28/2020 17:56:53",2,"Display related Jira tickets in the build baron  ""Fetch related Jira Tickets¬†data on the ui.¬†    [Main Ticket|https://jira.mongodb.org/browse/EVG-12459]    [Design|https://mongodb.invisionapp.com/share/C2WKQWRWG5Y#/screens/415337715]¬†¬†    ¬†""","",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"EVG-12913","08/31/2020 22:23:51",2,"Implement required scripting environment methods for CLI ""They have not been implemented so far.""","",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
