"issuekey","created","title","description","storypoint"
"COMPASS-167","09/12/2016 02:16:50","Re-implement ""open ranges"" behavior in reactified schema view","For MongoDB World, we've implemented a behavior in the query builder on ""number"" minicharts to create open ranges, e.g. {{\{""$lt"": 20\}}} instead of {{\{""$gt"": 15, ""$lt"": 20\}}} (special request from Dana for the demo). The behavior was to click-drag the selection box over the edge of the chart to trigger the open range, while still allowing closed ranges when dragging close to the edge.    !open_closed_ranges_query_builder.gif|width=600!    This behavior got lost in the transition to the React version of the schema in the 1.4.0-beta cycle.    We want to re-implement it, and also add subtle visual feedback that indiciates to the user that they have reached/passed the threshold between open/close ranges (e.g. a faded background to the side when switching to open range).    The implementation for this behavior is available in the old code base, but it needs to be adjusted to the new query builder code.     Code Snippets:    - Detection of mouse outside chart in the old code base: https://github.com/10gen/compass/blob/1.3-releases/src/app/minicharts/d3fns/many.js#L89-L98 ({{openLeft}}, {{openRight}} boolean flags)    - Code in the old Query Builder to handle open ranges: https://github.com/10gen/compass/blob/1.3-releases/src/app/minicharts/querybuilder.js#L292-L306 (probably not relevant, just adding for completeness).    - Somewhere in here we need to add the ""outside chart"" detection and construct the open query, and pass it to the {{setRangeValue}} action, see below. https://github.com/10gen/compass/blob/master/src/internal-packages/schema/lib/d3/many.js#L85-L108    - New Query Builder action {{setRangeValue}} already supports open ranges, just need to be called correctly: https://github.com/10gen/compass/blob/f05b3acf40fe9e56691aedd83cd7d970a9a84420/src/internal-plugins/query/lib/store/query-store.js#L564-L593    Acceptance criteria:  * add ""outside chart"" implementation for minicharts  * call {{setRangeValue}} in query store         ",3
"COMPASS-65","10/04/2016 17:06:38","CRUD: Improve Date Editing","- Add help section explaining types that can be converted to dates. Format example MUST be one of yyyy-mm-dd, yyyy-mm-ddThh:MM:SS, yyyy-mm-ddThh:MM:SS.SSS. Note: Date formats were expanded to a much larger set by using the Date constructor in COMPASS-919.  - Render the dates in the same format that can be accepted: yyyy-mm-ddThh:MM:SS.SSS      ",3
"COMPASS-115","10/08/2016 20:15:19","As a developer I want to show dates in server time and not local (laptop) time","h5. Story  As a developer, I want Compass to show date values in server time and not converted to the local (laptop) time so that I confirm that my application is saving dates correctly.    h5. User anecdote  More details:  With the current Compass implementation, I thought my App inserts dates with an offset of +1 day and I spent a lot of time trouble-shooting until I used the mongo shell and realized the dates are correct but Compass shows it converted to local time.    h5. Product Acceptance Criteria  * Have a menu option(s) to Show Dates as server time or local time  * Default to server time",5
"COMPASS-265","11/02/2016 15:29:49","Find in Page","Electron now has the bindings so ""Find in Page"" (Cmd+F) is accessible to us: https://github.com/atom/electron/blob/master/docs/api/web-contents.md#webcontentsfindinpagetext-options    Note: this will involve UI for the search input, prev/next/close buttons.",5
"COMPASS-273","11/03/2016 14:42:41","Field names should be available in doc validation pane","When using the GUI document validation rule builder, it would be a lot simpler to use if it allowed you to select from the existing document field names rather than having to type them in.      Acceptance Criteria:  - Use the react-select component index field names (COMPASS-540) to wire it up to the field store (COMPASS-727)  - Add functional tests for adding field names to Document Validation  - Update existing enzyme tests to account for these changes",5
"COMPASS-274","11/03/2016 15:03:41","Converting type names to numbers in doc validation rule builder makes JSON less readable","I created doc validation rules using type names (see attached) but Compass then converts them to the numeric equivalent in the JSON output and the rule that's added to MongoDB. It would be simpler for people to understand the rules if Compass kept the name instead.    {code:title=rules.js|borderStyle=solid}  {    ""name"": {      ""$type"": 3    },    ""name.first"": {      ""$type"": 2    },    ""name.last"": {      ""$type"": 1    },    ""social.twitter"": {      ""$type"": 4    }  }    db.getCollectionInfos({name:""people""})  [   {    ""name"" : ""people"",    ""type"" : ""collection"",    ""options"" : {     ""validator"" : {      ""name"" : {       ""$type"" : 3      },      ""name.first"" : {       ""$type"" : 2      },      ""name.last"" : {       ""$type"" : 1      },      ""social.twitter"" : {       ""$type"" : 4      }     },     ""validationLevel"" : ""strict"",     ""validationAction"" : ""error""    },    ""info"" : {     ""readOnly"" : false    },    ""idIndex"" : {     ""v"" : 2,     ""key"" : {      ""_id"" : 1     },     ""name"" : ""_id_"",     ""ns"" : ""clusterdb.people""    }   }  ]  {code}      Scope of the ticket:     - change type value to its string alias  - change tests to reflect this",2
"COMPASS-290","11/07/2016 02:17:49","Make sure all version comparisons use semver","For server version comparisons (e.g. all 3.4-only features) we should use a library that can handle version numbers correctly, e.g. the ""semver"" package.    Otherwise, we might run into issues with release candidates or other unusual version strings.    Simple string comparison fails in these cases:   {code}  > '3.4.0' > '3.4.0-rc3'  false  {code}    But semver can handle this correctly:   {code}  > semver.gt('3.4.0', '3.4.0-rc3')  true  {code}    One place where this happens:    https://github.com/10gen/compass/blob/d244de57b322ae4b3142c13220dec5191fafe0b9/src/internal-packages/crud/lib/component/editable-value.jsx#L73    Need to find all other places where we use simple string comparisons for versions.",3
"COMPASS-302","11/08/2016 23:44:32","When the user wants to execute an empty query, pop up a warning box that this is not ideal","Broken off from COMPASS-291 and should be implemented after that.    Show a modal popup to warn the user when they try to run an empty explain {} because that is potentially very expensive on the database and we already know the result: a collection scan.    Acceptance Criteria:     - When the user enters an empty query (or uses the default empty query) and hits apply, a modal window should appear with a warning text and 2 buttons, cancel/continue. Only when the user presses continue should the explain be executed.  ",1
"COMPASS-374","11/17/2016 15:36:38","Make schema/query timings visible to the user","- Dictate to the user the definition performance: ""You may think this was slow because you were also on a hangout""  - Don't want to think UI bugs/performance in Compass mean Server is slow  - We track these as metrics but don't expose to user  - Time to sample on server|analyze|render|$sample used  - If sample time on server slow (use ms value for slow queries from profiler?)     - recommend viewing the explain plan to make it faster    - green|yellow|red color indication like mocha's slowms?",1
"COMPASS-457","11/28/2016 05:39:07","Improve the Windows installer icon","Presumably the installer icon should use the MongoDB leaf, not something that looks a bit like a black Christmas present box.    !Screen Shot 2016-11-28 at 4.36.12 pm.png|width=50%!    Windows builds are available on Evergreen, e.g.    https://evergreen.mongodb.com/task/10gen_compass_testing_windows_64_compile_0ebd7009f7403340abb53f6691bf0325793bd8e5_16_11_28_04_14_13",1
"COMPASS-506","12/04/2016 03:36:55","Clear recent connections list from connect view","Or remove individual connections.",3
"COMPASS-632","01/11/2017 03:36:36","Support collation on Create Database & Collection dialogs","Introduced in MongoDB 3.4:  https://docs.mongodb.com/master/release-notes/3.4/#collation-and-case-insensitive-indexes    MongoChef claims full collation support which Compass cannot today:  http://3t.io/blog/what-is-new-in-mongochef-4-5/",5
"COMPASS-723","01/28/2017 10:39:28","Increase ssh tunnel connection timeouts","We have a user in intercom complaining that he gets ssh timeouts, when RoboMongo connects to the instance ok.   Currently, the timeout is [hardcoded to 5 seconds|https://github.com/mongodb-js/connection-model/blob/2002a3df39658665ac9d6713ace525bd35bb2dcb/lib/model.js#L703-L705] in the connection-model. Increase to 30 seconds to account for geo latency. ",1
"COMPASS-820","02/27/2017 06:10:10","Static assets all live under ./static","This will improve the Windows installation experience in two ways: 1. Installation assets to be decompressed before installation begins 2. Installation assets trigger less activity like to be disrupted by a virus scanner   - Make a new {{./static}} directory - Move {{./src/app/{images,styles}}} and HTML files into {{./static}} - Update all image references in the app and hadron-build to point at {{./static}} - Update hadron-build to write {{./src/compiled-less}} to{{./static}} - Add {{./static}} to the {{asar.upack}} option in {{hadron-build/commands/release.js}} (they don’t need to be packed)  Also consider updating any timing code to use [~lucas.hrabovsky] suggestion: https://github.com/nolanlawson/marky  h3. References   - [N1 ./static|https://github.com/nylas/N1/tree/master/static] - [N1’s bootloader.js|https://github.com/nylas/N1/blob/master/static/index.js] - [Atom ./static|https://github.com/atom/atom/tree/master/static] - [Atom’s advanced bootloader.js|https://github.com/atom/atom/blob/master/static/index.js]  If all goes well, this will negate https://jira.mongodb.org/browse/COMPASS-415",3
"COMPASS-851","03/06/2017 07:32:12","Investigate Kerberos Authentication if the username contains @ ","From COMPASS-745, it looks like Kerberos and X.509 are also likely to double-encode their auth-component in the same way LDAP does.    This ticket should:    1. Confirm if this is true, e.g. with https://docs.mongodb.com/v3.2/tutorial/control-access-to-mongodb-with-kerberos-authentication/    2. If so, add a regression test in connection-model.  3. Remove all redundant {{encodeURIComponent}} calls, including in comments to make it clearer that {{url.format}} already handles this even better than we could ([git blame|https://github.com/nodejs/node/blame/v6.3.1/lib/url.js#L557] reveals it has been [optimised for more performance|https://github.com/nodejs/node/commit/db9128135f382e22202d900263e872d8b48f0050]).",2
"COMPASS-909","03/14/2017 15:35:24","Rename collection","As the comments below indicate there are several feature requests to rename a collection. This can be achieved in the node driver by calling the [rename|http://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html#rename] command on particular collection. The goal of this ticket is to add the UI element, probably an extra option in the sidebar next to ever collection field to edit and call the rename command on the selected collection.    Acceptance Criteria:  * add {{rename}} to data-service (https://github.com/mongodb-js/data-service)  * include unit tests for rename in data-service  * make UI element (On the sidebar) that can be clicked to produce a modal for renaming collection  * add enzyme tests for the above element  * add store action to rename collection that calls the above data-service method  * add unit tests for the above store action        ",5
"COMPASS-931","03/20/2017 07:53:05","Spike: Research if/how Compass can be ""kerberized""","Reported by Barclays (00430436).    When connecting to a Kerberos authenticated MongoDB deployment using Compass, we must supply the password from the Compass UI. Ideally, Compass should use the context of the logged in user and hence a password should not be needed unless a different context/user is needed to connect to the MongoDB deployment.    This is how ""kerberized"" applications usually behave, and while the current implementation works, it's unusual and unexpected for users used to work in a kerberos environment.    ",3
"COMPASS-1014","04/07/2017 12:06:40","Unable to Enter Line Breaks in Strings","User reporting on Intercom that they are unable to create line breaks in Strings in the Documents tab. ""\n"" is getting escaped and we already override the Enter key functionality. Need to allow \n or provide a CTRL+Enter or similar to allow line breaks.",3
"COMPASS-1083","04/28/2017 17:58:30","LUUID/NUUID/BinData support for filters","Please see comments.",3
"COMPASS-1099","05/03/2017 19:01:09","Move Databases DDL to External Plugin","Move the databases-ddl internal package to the new compass-databases-ddl repo.    - Move all code from internal-packages/database-ddl to 10gen/compass-databases-ddl  - Use the khaos template to generate the plugin and make necessary changes to the template if problems arise.  - Move all databases-ddl tests from Compass to the compass-databases-ddl repo  - Add compass-databases-ddl to the compass-lite and compass-enterprise distribution configs in the package.json in Compass (for now)  - Remove internal-packages/databases-ddl",8
"COMPASS-1100","05/03/2017 19:07:22","Move Database Plugin to External Plugin","Move the database internal package to the new compass-collections-ddl repo.    - Move all code from internal-packages/database to 10gen/compass-collections-ddl  - Use the khaos template to generate the plugin and make necessary changes to the template if problems arise.  - Move all Database tests from Compass to the compass-collections-ddl repo  - Add compass-collections-ddl to the compass-lite and compass-enterprise distribution configs in the package.json in Compass (for now)  - Remove internal-packages/database",8
"COMPASS-1102","05/03/2017 19:39:30","Move Explain to external package","Move the explain internal package to the new compass-explain repo.    - Move all code from internal-packages/explain to 10gen/compass-explain  - Use the khaos template to generate the plugin and make necessary changes to the template if problems arise.  - Move all Validation tests from Compass to the compass-explain repo  - Add compass-explain to the compass-lite and compass-enterprise distribution configs in the package.json in Compass (for now)  - Remove internal-packages/explain",5
"COMPASS-1237","06/09/2017 17:03:49","Add Installation Drive Destination Selection to Install Workflow on Windows","A customer reported in [this coversation|https://app.intercom.io/a/apps/p57suhg7/respond/inbox/unassigned/conversations/10247108756] a desire to select to which drive Compass is installed. I then tested the workflow on a Windows 10 machine and was unable to select the drive to which I was installing.     I believe the ability to select the destination drive for the install to be a desirable addition to the workflow.",8
"COMPASS-1337","07/06/2017 08:58:47","Make Doc Validation's Editable Component reusable across plugins","Currently the Editable component resides in Doc Validation but it is a generic component that can be used throughout Compass.     It will be pulled over to Compass after COMPASS-1303 is done. The work remaining is:  - Remove the Editable component from [Doc Validation|https://github.com/10gen/compass-document-validation] and use the version from Compass via the appRegistry lifecycle methods  - Remove any !important flags in the {{editable.less}} file as it shouldn't be required anymore.    Acceptance criteria:  - Make sure Doc Validation UI remains the same  - Make sure Charts UI remains the same  ",3
"COMPASS-1404","07/12/2017 18:18:58","Hook into Server Description Changed Events","Currently deployment awareness listens to only topology description changed events, which does not cover the case when connected to a standalone instance. If a standalone server goes into an unknown state, the topology type remains as single according to the SDAM specification even though the server description becomes unknown.    Therefore, we must also listen to these events when connected in standalone mode and fire the same changes as the existing topology related events.    - Change https://github.com/10gen/compass-deployment-awareness/blob/master/src/stores/index.js to also listen to 'serverDescriptionChanged` events and trigger with an overwritten 'unknown' state instead of keeping the same 'single' type. The read state and write state stores should handle this accordingly.",3
"COMPASS-1629","08/01/2017 18:55:26","Cross-realm Kerberos Support","From CS-26551. After a bit of initial investigation, imagine this breaking out into 3 tasks:    - COMPASS-1629: Spike: Research additional options needed to support cross-realm kerberos via the connect dialog  - Add additional Kerberos options to connect dialog  - Kerberos Cross-Realm testing backend setup    {quote}  Compass RC1 - Internal Server Error With (Cross Realm) Kerberos @ Connect Time    Debug Console Shows:  {code}  POST http://localhost:29017/api/v1/token 500 (Internal Server Error)Request.end @ client.js:1016Model.extend.create @ token.js:69(anonymous function) @ token.js:119Item.run @ browser.js:64drainQueue @ browser.js:34_super.bugsnag @ bugsnag.js:149(anonymous function) @ bugsnag.js:624  bugsnag.js:239 [Bugsnag] Invalid API key 'undefined'  bugsnag.js:239 [Bugsnag] Invalid API key 'undefined'  {code}    Note in the java driver we would have to do something along the following, would this be something that node driver can expose to compass?   {code}          MongoCredential gssAPICred = MongoCredential                  .createGSSAPICredential(KERBEROS + ""@WINDOWSREALM.COM"")                  .withMechanismProperty(""REALM"", ""LINUXREALM.COM"")                  .withMechanismProperty(""CANONICALIZE_HOST_NAME"", true);  {code}  {quote}",3
"COMPASS-1735","08/15/2017 04:09:04","Map Cmd-R (Ctrl-R) to reloading data only, Cmd-Shift-R app reload","This request has been made many times, e.g. this intercom conversation:   https://app.intercom.io/a/apps/p57suhg7/respond/inbox/conversation/11245082354    Based on email discussion with Sam, Dana, Fred (see below), let's make the following changes:    Cmd-R (Ctrl-R on Windows/Linux) should reload data only. No app refresh.     Behavior:    - always trigger a reload of the sidebar, and  - if the user is on the instance level databases view: refresh the list of databases  - if the user is on the instance level RTSS view, reset the view  - if the user is on the database level collections view: refresh the list of collections  - if the user is on one of the collection level tabs, additionally execute the following action:  -- Documents tab: reload the documents (like the dedicated Refresh button)  -- Schema tab: execute a new schema sampling with the same query  -- Explain tab: execute a new explain plan with the same query  -- Indexes tab: refresh indexes  -- Document validation: reload validation rules       Cmd-Shift-R (Ctrl-Shift-R on Windows/Linux) should reload the app (behavior that is Cmd-R today).  ",5
"COMPASS-1764","08/18/2017 09:14:29","Compass handles the crazy keys document series","h4. Usage/steps to reproduce    {code}  # Generate the document  python3 mkbson.py     # Import the document  mongorestore -d perf -c crazy_keys raw_crazy_keys.bson   {code}    Then navigate to the {{perf.crazy_keys}} collection in Compass.    An extended set of documents can be created and imported into MongoDB with this script relatively easily, on my local machine I already have the following numbers of keys and preliminary results:  32^3=32,768  48^3=110,592   64^3=262,144 (slow, ~5-10s)  80^3=512,000 (slow, ~30s)  96^3=884,736  140^3=2,744,000 (Compass 1.9.x betas crash with a memory exception)    h4. Proposed solution - cap at 100k fields    #intellectualhonesty - let the data drive your decision.    Thus Compass, most likely in [mongodb-schema|https://github.com/mongodb-js/mongodb-schema], should stop scanning at about 100k fields (configurable as other optimizations are found) in a document and report this Easter egg in the GUI (originally this was Issue 2 in COMPASS-1901).    h4. Acceptance criteria    * A mongoimport -able version of these documents, perhaps with easier to understand names like crazy_keys_512000 (might be already done by COMPASS-1766, if so drop up to 2 story points)  * Cap field or schema processing at 100k fields, reporting this somehow, e.g. with properties such as ""totalFieldCount"", ""analyzedFieldCount"" (working titles to capture the semantic, change the syntax as needed).  * Message displaying this scenario, e.g. ""100,000 fields limit reached, remaining N fields are not displayed""  * Appropriate unit tests    h4. Out of scope    * Anything in the schema/indexes/document validation tabs (such as the react-select dropdown to choose an index name), this is just about the Documents Tab.    h4. Background    So I let Friday afternoon get to me and challenged myself to create a document with ~2.7 million keys.    After about 3 minutes, Compass crashes. The mongo shell is still doing something in CPU-land after 8 minutes so far.    On different data sets, such as documents with ~500,000 fields (i.e. COMPASS-1766), Compass takes ~30 seconds or more to render, or crashes (COMPASS-1764).     Would explicitly limiting Compass to say 100,000 fields with a message like ""Compass cannot render documents with more than 100,000 fields"" seem reasonable? Yes but only when the user gets down to the 100,001st field.    For documents under 100k fields, is a loading spinner enough? (i.e. ~6 seconds, so should not need a progress bar?).     Proposed Solutions: Potentially push to the GPU? Otherwise just drop to {{Loading...}} text.",5
"COMPASS-1766","08/21/2017 04:36:16","Investigate Compass CRUD render times with increasing numbers of keys","# Use the script on COMPASS-1764, mgeneratejs or similar to generate documents with 50,100,200,400,800,1600,3200,6400,12800,25000,50000,100000 top-level fields  # Report results - Measure time to render and chart it     ## is it a straight line? is it exponentially slower each time?     ## is there a cut off point where it just hangs?  ",2
"COMPASS-1788","08/23/2017 07:13:35","Generalize ""Show N more fields"" to clone mode","Repeat the work as for Edit mode COMPASS-1787, but applied to Clone document mode.",3
"COMPASS-1802","08/27/2017 15:23:28","Move Indexes Interal Package to External Plugin","Move the Indexes internal plugin to an external one under 10gen/compass-indexes",5
"COMPASS-1803","08/27/2017 15:24:17","Move Explain Internal Plugin to External One","Move the explain plan internal plugin to an external one at mongodb-js/compass-explain-plan    Acceptance Criteria:  - Create mongodb-js/compass-explain-plan repo  - Generate the plugin from the new template.  - Move over Components  - Move from Reflux to Redux.  - Refactor Components to be Pure for use with Cloud",8
"COMPASS-1805","08/27/2017 15:26:05","Move Collection Internal Plugin to External Plugin","Move the collection internal plugin to external one at 10gen/compass-collection",5
"COMPASS-1901","09/04/2017 03:43:01","Implement CRUD loading spinners/ripples/animations","Add loading spinners in places known to be slow.    h4. Scenario  1. Visit data.mongodb.parts  2. Open mercedes.laps_31k_x_4k5 dataset, documents tab (Issue 1, Issue 2)  3. Click ""Show 1000 more fields""  4. Double click on a field (after the first 25) to edit it, rendering the 1025 fields (or 2025 or more if the user went further) can take a long time (Issue 3)    h4. Issue 1  Fetching data from the server can take an unbounded amount of time (e.g. server never responds, server under a DDoS attack, rogue queries, etc).    !Thinking about remaining bottlenecks post disable chartView and COMPASS-1786.png|thumbnail!     Solution: Reuse the existing loading spinner for loading more documents:   !Network activity loading spinner.png|thumbnail!     h4. Issue 2  See COMPASS-1764    Example with 110,592 fields (48^3):    !perf.crazy_keys_48.png|thumbnail!     h4. Issue 3  As rendering can take a long time, the naive fix here is to let the user know it can take a long time with a rendering/loading text or spinner, depending on whether the UI is locked.    Aside: Longer term, getting field-based updates to work would allow the user to project only the fields they care about and then update just those fields, but there are no current plans to implement this.    Aside 2: This issue only affects edit mode, where the user has double-clicked on the specific field they wish to edit. Specifically clone, loading, cancel, update success and delete can all drop back to rendering just 25 fields, as they have no specific requirement to maintain the user's current context, and so are not affected.    Aside 3: Table view (COMPASS-652) if it got filtering of fields may also resolve this, as might adding a filter fields box into CRUD itself.",3
"COMPASS-2282","11/06/2017 20:58:33","As a user I want to execute a query without leaving my keyboard","As a user I want to execute a query without leaving my keyboard so I can be more agile and not have to use the mouse.",3
"COMPASS-2299","11/13/2017 11:46:30","User Provides DNS Wildcard for CSP","Allow the user to enter a DNS wildcard value to add to the CSP.    Acceptance Criteria:  - User selects a CSP directive.  - Use may enter multiple DNS wildcard values for the directive.    ",5
"COMPASS-2300","11/13/2017 11:48:12","Compass Stores User Provided CSP","Compass persists the user provided CSP.    Acceptance Criteria:  - Clicking on save will persist the CSP to disk (user data dir).  - On plugin initialization the CSP is loaded from disk (user data dir).",5
"COMPASS-2301","11/13/2017 11:50:11","Make Application index.html a Template","Make the Compass index.html a template.    Acceptance Criteria:  - Make template with area to insert a CSP into the meta tags.  - Compass generates a new html file to load via browserWindow.loadURL() on start up from the template and the user saved CSP.",5
"COMPASS-2381","11/30/2017 07:57:05","As a user I would like visual feedback when executing queries","As a user I would like visual feedback when executing queries so that I can tell that the operation was sent to the server and is currently in progress (remove uncertainty).     From Joe:    In Compass (all versions up to 1.10.1.0) long running queries give no feedback when running or when completed. As a result you have to spot the number of results changing to determine if a query is complete. I have attached a screen capture demonstrating this. Sorry about the background noise on the video. I was in an airport lounge :-)    ",3
"COMPASS-2406","12/15/2017 11:47:31","As a user I am confused between when the reset button takes the place of the Analyze button","As a user I am confused between when the reset button takes the place of the Analyze button and I find myself hitting refresh by mistake when I really want to analyze.",1
"COMPASS-2470","01/23/2018 19:41:30","Compass app quits when last window is closed on macOS","On Compass 1.11.1, the whole Compass app quits when the last window is closed.     This creates friction if the user intends to create a new window/connection - they are forced to search for and open Compass again. On macOS, it is customary for the app to stay open even when there are no running windows or sessions; quitting is an explicit step by the user rather than implicit by the developer. For reference, Slack does not quit if the last window is closed. ",1
"COMPASS-2553","02/20/2018 14:15:41","Create Auto Update Plugin","Create the auto update plugin.    Acceptance Criteria:  - Create the repo  - Generate the plugin from the template.",2
"COMPASS-2554","02/20/2018 14:16:46","Create Auto Update Component","Create the Auto Update Component    Acceptance Criteria:  - Create the component.  - Component displays if update available  - Component displays new version number.  - Component displays release notes.",5
"COMPASS-2590","03/05/2018 16:13:04","Write a ECMAScript generator","Write a custom visitor that can visit the AST produced by COMPASS-2589     Support literals, arithmetic, etc. without any BSON-specific support. No need for assignments/functions/anything higher-order.",3
"COMPASS-2591","03/05/2018 16:14:35","Expand ECMAScript visitor to objects/arrays","Resulting language is basically JSON without any BSON-specific objects.",3
"COMPASS-2592","03/05/2018 16:16:02","Expand ECMAScript visitor to BSON type constructors","Add support for each BSON type, but not built-in methods or utils. Can be split into smaller tickets for each subtype if multiple people are working on it at the same time.",3
"COMPASS-2593","03/05/2018 16:19:36","Expand ECMAScript visitor to language-specific built-in types","dates, regex, etc.",3
"COMPASS-2602","03/05/2018 16:40:14","Expand Java generator to BSON object built-in functions","Expand the bson objects so that the functions in the `supports` column of the 'Export to Language Spec' tables. Can be split into smaller tickets for each subtype if multiple people are working on it at the same time.",3
"COMPASS-2612","03/07/2018 19:30:43","Pretty print generated code","ace editor is taking the generated code and just pastes in as is without formatting it properly. this ticket is meant to figure out formatting on setValue as well as setting up ability to change syntax highlighting / formatting based on output language",5
"COMPASS-2621","03/09/2018 11:22:08","Add BSON type constructors to python symbol table","Add python template to the symbol table for each BSON constructor. Blocked by COMPASS-2727",3
"COMPASS-2622","03/09/2018 11:23:23","Add BSON constants or utils to Python symbol table","Add python template to the symbol table for each BSON constant/util. Blocked by COMPASS-2727 and needs to be done after COMPASS-2621",5
"COMPASS-2623","03/09/2018 11:26:06","Add BSON object built-in functions to Python symbol table","Add python template to the symbol table for each BSON object method. Blocked by COMPASS-2727. Has to be done after COMPASS-2621  ",5
"COMPASS-2626","03/09/2018 11:59:17","Expand C# generator to BSON type constructors","Add C# template to the symbol table for each BSON constructor. Blocked by COMPASS-2727",3
"COMPASS-2627","03/09/2018 11:59:29","Add BSON object built-in functions to C# symbol table","Add C# template to the symbol table for each BSON object method. Blocked by COMPASS-2727 and needs to happen after COMPASS-2626",5
"COMPASS-2628","03/09/2018 11:59:41","Add BSON constants or utils to C# symbol table","Add C# template to the symbol table for each BSON constant or util. Blocked by COMPASS-2727, and needs to be done after COMPASS-2626",5
"COMPASS-2695","03/26/2018 03:40:14","write c# test cases","This task is meant to correct / input test cases for c#. C# results should be accurate code, but tests don't have to be yet passing.    This task also involves researching how c# handles bson / how the language works a bit.",2
"COMPASS-2716","04/03/2018 20:20:14","Add Snippets to Query Operators","Add snippets to each of the query operator constants.",5
"COMPASS-2717","04/03/2018 20:21:56","Move Ace Autocomplete Constants to Separate Module","Move the autocomplete constants to a separate module for reuse in Charts.    AC:  - Create mongodb-ace-autocompletions  - Move constants in agg pipeline builder to the new module.  - Publish module.  - Use module in agg pipeline builder.",3
"COMPASS-2719","04/03/2018 22:12:42","Kill Long Running Pipelines","For pipeline stages that are taking a long time to run (ex match without index), look at more optimizations or killing stages.",5
"COMPASS-2722","04/05/2018 16:20:32","Add allowDiskUse to agg pipeline execution","Add allowDiskUse flag to agg pipeline queries.",1
"COMPASS-2723","04/05/2018 16:26:01","Increase Intelligence of Stage Editor","Have the autocompleter suggest better items based on context.",5
"COMPASS-2724","04/05/2018 16:47:14","Agg Pipeline Execution Rules","- $limit before $group, $sort (long running ops)  - $match nothing before to prevent index use.  - remove $sample completely  - Add maxTimeMS to each preview and allow user to re-execute.    ",8
"COMPASS-2727","04/05/2018 19:13:45","Abstract templates from symbol table","This needs to happen before we can do anything else.     Right now the symbol table just has the java templates directly in them, but we need a way for each code generator to fill out the template and argTemplates with the correct language.    Should we put it in a separate file, and have a ""loader"" that fills out the symbol table with the template?    Should we have a separate ""templates"" object?    Should we just copy + paste the SymbolTable.js and fill out the correct templates for each target language, then worry about abstracting it away later?",3
"COMPASS-2737","04/11/2018 13:35:10","Progressive Backoff With MaxTimeMS","Allow users to progressively increase the max time ms setting up to a max amount.",5
"COMPASS-2742","04/13/2018 12:21:45","Add Link to Create Atlas Cluster","Create a link to create an atlas cluster.    AC:  - Add the component to the connect window sidebar.  - Clicking on the link opens the sign-up page in Atlas in a browser.",2
"COMPASS-2743","04/13/2018 12:22:42","Track Create Atlas Cluster Link Clicks","Add tracking each time a user clicks on the create Atlas cluster link.",1
"COMPASS-2749","04/16/2018 08:44:59","Implement Export to language UI","Designs are here: https://jira.mongodb.org/browse/COMPASS-2675",3
"COMPASS-2750","04/16/2018 15:10:12","Add Telemetry Data to Aggregation Pipeline","Add Telemetry Data to Aggregation Pipeline:    - Pipeline length  - User scrolling through documents.  - Pipeline Error Rate  - Stage Operators",3
"COMPASS-2751","04/16/2018 15:11:34","Import Pipeline","Add the ability to import an aggregation pipeline into the builder.",5
"COMPASS-2754","04/17/2018 14:33:31","Figure out how to test non-symmetric translations","Right now our test suite expects all translations to be symmetric, but that's not always possible (especially as our generated code gets more idiomatic).     For example, Code in javascript can accept a function or a string, but in shell it only accepts a string.    Javascript --> Shell:    {code:javascript}  Code(function(x){console.log(x)};) --> Code(""function(x){console.log(x)};"")  {code}  Shell --> Javascript   {code:javascript}  Code(""function(x){console.log(x)};"") --> Code(""function(x){console.log(x)};"")  {code}  ",3
"COMPASS-2755","04/17/2018 18:23:11","Explicitly indicate a view","h3. User story  As a Compass user  I want to distinguish views from collections  So that I easily understand what I am selecting in the sidebar or in the list of collections    h3. Acceptance criteria  - Views are represented with an intuitive icon in the sidebar  - Views appear after Collections in the sidebar  - Views appear after Collections in the [Views and Collections screen|https://mongodb.invisionapp.com/share/ZKQDF41YGSJ#/screens/350992753]  - In the Views and Collections screen, Views are displayed with the collection (or view) they are based on    h4. Original description  bq. Currently a view is distinguished from ""normal"" collection with a lock side its name. A more explicit way should be used to indicate a view.",3
"COMPASS-2760","04/18/2018 15:58:50","make bson-compilers work in the browser","currently to consume this package, you need to be running a node environment as all the symbol tables get joined dynamically with 'path'.    Need to consider a browserify transform that gets triggered on 'npm prepublish' and packages up a pure javascript module.    https://www.npmjs.com/package/path-browserify and https://www.npmjs.com/package/brfs will probably do the trick.  ",5
"COMPASS-2761","04/18/2018 18:23:12","As a Compass user, I need support for $near and $nearSphere","Current support for $geoWithin in Compass does not return a sorted list of matching points.    ",3
"COMPASS-2766","04/18/2018 21:55:52","Set default numeric type","For example, numeric literals are doubles in the shell and javascript, but in java they are 32-bit integers. Ensure we're being consistent with integer types.",3
"COMPASS-2774","04/25/2018 13:56:06","Upgrade CRUD Plugin to React 16","Update the CRUD Plugin to React 16:    AC:  - Update to React 16.3.2  - Update Enzyme to 3.3.0  - Bump apiVersion to 2.0.0  - Update dependencies to support changes and fix issues.  - Release new major version for Cloud.",5
"COMPASS-2775","04/25/2018 13:57:50","Upgrade Aggregations Plugin to React 16","Update aggregations plugin to React 16:    AC:  - Update to React 16.3.2  - Update Enzyme to 3.3.0  - Bump apiVersion to 2.0.0  - Fix dependencies and failures.",5
"COMPASS-2776","04/25/2018 14:07:44","Update Import/Export to React 16","Update import/export plugin to React 16:    AC:  - Update to React 16.3.2  - Update Enzyme to 3.3.0  - Bump apiVersion to 2.0.0  - Fix dependencies and failures.",3
"COMPASS-2777","04/25/2018 14:09:03","Update Collection Stats to React 16","Update collection stats plugin to React 16:    AC:  - Update to React 16.3.2  - Update Enzyme to 3.3.0  - Bump apiVersion to 2.0.0  - Fix dependencies and failures.  - Open source plugin.",3
"COMPASS-2778","04/25/2018 14:10:03","Update Connect to React 16","Update connect plugin to React 16:    AC:  - Update to React 16.3.2  - Update Enzyme to 3.3.0  - Bump apiVersion to 2.0.0  - Fix dependencies and failures.",3
"COMPASS-2779","04/25/2018 14:11:17","Update Connect Auth Roles to React 16","Update connect auth plugins plugin to React 16:    AC:  - Update to React 16.3.2  - Update Enzyme to 3.3.0  - Bump apiVersion to 2.0.0  - Fix dependencies and failures.",5
"COMPASS-2780","04/25/2018 14:12:38","Update Document Validation to React 16","Update document validation plugin to React 16:    AC:  - Update to React 16.3.2  - Update Enzyme to 3.3.0  - Bump apiVersion to 2.0.0  - Fix dependencies and failures.",3
"COMPASS-2781","04/25/2018 14:13:49","Update Deployment Awareness to React 16","Update deployment awareness plugin to React 16:    AC:  - Update to React 16.3.2  - Update Enzyme to 3.3.0  - Bump apiVersion to 2.0.0  - Fix dependencies and failures.",3
"COMPASS-2782","04/25/2018 14:14:51","Update Query History to React 16","Update query history plugin to React 16:    AC:  - Update to React 16.3.2  - Update Enzyme to 3.3.0  - Bump apiVersion to 2.0.0  - Fix dependencies and failures.",3
"COMPASS-2783","04/25/2018 14:15:45","Update Security Plugin to React 16","Update secutiry plugin to React 16:    AC:  - Update to React 16.3.2  - Update Enzyme to 3.3.0  - Bump apiVersion to 2.0.0  - Fix dependencies and failures.",3
"COMPASS-2784","04/25/2018 14:16:19","Update Instance Plugin to React 16","Update instance plugin to React 16:    AC:  - Update to React 16.3.2  - Update Enzyme to 3.3.0  - Bump apiVersion to 2.0.0  - Fix dependencies and failures.",2
"COMPASS-2785","04/25/2018 14:17:08","Update Server Stats Plugin to React 16","Update server stats plugin to React 16:    AC:  - Update to React 16.3.2  - Update Enzyme to 3.3.0  - Bump apiVersion to 2.0.0  - Fix dependencies and failures.",3
"COMPASS-2786","04/25/2018 14:18:06","Update Server Version to React 16","Update server version plugin to React 16:    AC:  - Update to React 16.3.2  - Update Enzyme to 3.3.0  - Bump apiVersion to 2.0.0  - Fix dependencies and failures.",2
"COMPASS-2787","04/25/2018 14:18:56","Update SSH Tunnel Status to React 16","Update ssh tunnel status plugin to React 16:    AC:  - Update to React 16.3.2  - Update Enzyme to 3.3.0  - Bump apiVersion to 2.0.0  - Fix dependencies and failures.",2
"COMPASS-2788","04/25/2018 14:19:52","Update Status to React 16","Update status plugin to React 16:    AC:  - Update to React 16.3.2  - Update Enzyme to 3.3.0  - Bump apiVersion to 2.0.0  - Fix dependencies and failures.",2
"COMPASS-2789","04/25/2018 15:27:20","get export to language modal to be worked in compass","The Idea™ at the moment is to get start off in compass main repo and create a dropdown to include the current history feature and export to language.    To trigger both history and export components, generate an event on the global app registry – `global.hadronApp.appRegistry`.    Then get export to language to listen in the `store.onActivated` for the above ^ event to be dispatched.    A good example to see something like this working is in import-export plugin.    -*Update:* use these two events to get the query bar – open-aggregation-export-to-language, open-query-export-to-language-    -*Update2:* once the event is 'caught' in store.onActivated, dispatch an event to be handled in export-query.js module. The event in export-query.js should change the state to have an inputQuery passed in from aggregation/querybar.-    *Update3:* check that this actually works with the compass branch that has the appRegistry events; need to send back the close button event",5
"COMPASS-2797","05/01/2018 15:00:30","Figure out how to handle elisions in java","Elisions in javascript: [,,1, 2] --> [undefined, 1, 2]    Won't work in java because doing `.append(""array with leading elision"", Arrays.asList(null, ""1"", ""2"")) will throw a null pointer exception.`         Use BsonUndefined     ",1
"COMPASS-2802","05/02/2018 13:22:09","RTSS Still Polling on Auth Errors","Investigate and fix RTSS still polling when an authentication error is encountered.",1
"COMPASS-2803","05/02/2018 14:40:55","Write error handling tests for C#","Write C# JSON tests in test/json/error/*         Need to make sure we throw when code won't run in the target language, and the error messages are useful. These tests need to be *complete*, so that we are testing every error path.",3
"COMPASS-2804","05/02/2018 14:43:09","Write error handling tests for Python","Write Python JSON tests in test/json/error/*         Need to make sure we throw when code won't run in the target language, and the error messages are useful. These tests need to be *complete*, so that we are testing every error path.",3
"COMPASS-2805","05/02/2018 14:44:39","Write error handling tests for Java","Write Java JSON tests in test/json/error/*         Need to make sure we throw when code won't run in the target language, and the error messages are useful. These tests need to be *complete*, so that we are testing every error path.",3
"COMPASS-2806","05/02/2018 14:45:14","Write error handling tests for Javascript","Write JS JSON tests in test/json/error/*         Need to make sure we throw when code won't run in the target language, and the error messages are useful. These tests need to be *complete*, so that we are testing every error path.",3
"COMPASS-2808","05/02/2018 14:49:17","Run python tests in python","Need to run each of the generated python tests in the python interpreter to make sure that they run and do what's expected (i.e. str vs repr).         Can add a python template to [https://github.com/mongodb-js/bson-compilers/blob/test-file/make-test-file.js] and write to a file that can be run in python.",3
"COMPASS-2814","05/02/2018 14:58:16","Add Shell BSON constructors to JS symbol table","(lower priority because not needed for v1)",1
"COMPASS-2815","05/02/2018 14:58:51","Add Shell BSON utils to JS symbol table","(lower priority because not needed for v1)",3
"COMPASS-2816","05/02/2018 14:59:38","Add Shell BSON methods to JS symbol table","(lower priority because not needed for v1)",3
"COMPASS-2817","05/02/2018 15:05:43","Move anything JS-specific out of the Generators and into javascript/Visitor.js","The generators need to be input-language agnostic, so anytime we execute JS code in an emit method it needs to be moved to the Visitor, whenever possible.",3
"COMPASS-2820","05/02/2018 15:57:34","Put export to language into read-only ace code editor","To get syntax highlighting and maybe even pretty printing?",3
"COMPASS-2829","05/04/2018 14:35:22","Create Unique Identifier to Send to Atlas with Link","Send a unique identifier to the Atlas link so they know it came from Compass.",1
"COMPASS-2830","05/04/2018 14:43:37","Disable Intercom in Compass Dev Environments","Disable Intercom in Compass Dev Environments",2
"COMPASS-2846","05/14/2018 16:01:42","Validate TLS 1.2 Support with MongoDB 4.0 ","We need to verify that the latest version of Compass can connect to a MongoDB 3.7.9/4.0.0 instance with --requireSSL enabled [--sslDisabledProtocols=TLS1_0] (1.0 is disabled by default).    This is enough to mark Compass as done with regards to the company/product wide Safe TLS initiative driven by the PCI-DSS deadline of June 30, 2018 where TLS 1.0 must be disabled by default everywhere. ",2
"COMPASS-2847","05/14/2018 16:24:27","Investigate User Upserts Failing","Compass is not updating user data in the data warehouse, failing on the attempted update/upsert via Stitch. Need to investigate is this is a Stitch or Compass issue.",3
"COMPASS-2864","05/18/2018 15:28:44","Investigate adding buffer type to query bar","Discuss if we want to add a ""buffer"" support.   * Right now it is valid to instantiate a JS Buffer only in the Binary object constructor. Should users be able to instantiate buffer data types outside of the BSON binary object?   * Will people ever actually use it, outside of the BSON Binary type?   * There isn't a shell equivalent outside of using the subtype like `md5(...data...)`.",1
"COMPASS-2865","05/21/2018 15:29:53","Explore idiomatic export to language","Exploratory ticket for the idiomatic export to language feature.   * Work with the drivers/education teams to specify exactly what ""idiomatic"" code should look like for Java, Python, Node, Shell, CSharp.   * Split the work into tickets with estimates.   * Do we want to give people the option to have idiomatic/standard, or do we want to always generate ""idiomatic"" code?",5
"COMPASS-2888","05/27/2018 03:37:20","Agg pipeline builder to autocompolete newly defined fields","Currently, the Agg Pipeline builder offers field autocompletion based on the collection selected for aggregation. I'd like to see this extended to the new fields defined in the $project stages that precede any new stages that attempts to use them. See example attached.",3
"COMPASS-2889","05/27/2018 05:18:36","Agg Pipeline Builder - Create an icon to create (insert) a new stage inplace","Add a plus button next to the Delete button for each stage. When clicked, it inserts a new stage right after the one that is currently selected. This will help avoid a lot of vertical scrolling and also unnecessary movement/dragging of stages when you want to simply insert a stage in the middle of a pipeline, which is very common when authoring/debugging agg pipelines.",3
"COMPASS-2893","05/29/2018 15:26:18","implement design changes for export to language feature","input / output to be side by side –> [https://mongodb.invisionapp.com/share/YZGJBROJ6UT#/screens/287448203]    plus a few code structure / component changes:   * -separate out components from main export-modal.jsx. Primarily a new *ace editor* component and *select-box* component-   * -create *copy successful* messaging-   * -make sure *copy* always works-   * -level out and vertically align titles / buttons for ace editor. Currently export-to and select box are misaligned-   * write a few more test cases for each component and modules – going to make another ticket for this!",3
"COMPASS-2894","05/29/2018 15:26:37","implement feedback for c# syntax to be idiomatic","[https://github.com/mongodb-js/bson-compilers/pull/65 |https://github.com/mongodb-js/bson-compilers/pull/65]    Doesn't include Builders: see https://jira.mongodb.org/browse/COMPASS-2900?filter=-2",3
"COMPASS-2895","05/29/2018 15:51:52","create a wiki for bson-compilers","There are a few things that need to be explained in a wiki about how this project works. That way if people want to contribute, it'll be easier for them to get started. Also useful for other teams that will be using this package. Should include:    1) Symbol tables   * how are these generated   * how does the hierarchy work   * what happens to them afterwards    2) Visitors and Generators. How do we end up with ctx being ""passed down"" from visitor to generator?    3) What happens once Antlr generates the AST? what do we do from there?    4) Diagram to explain the javascript visitor structure.    5) Maybe a few more diagrams if they prove useful",5
"COMPASS-2896","05/29/2018 16:36:10","Idiomatic java numbers","Generate numbers idiomatically in java.         [https://github.com/mongodb-js/bson-compilers/pull/83]",3
"COMPASS-2898","05/29/2018 16:39:25","Misc Idiomatic Java Syntax","* Use {{BsonUndefined}} instead of null   * {{java.lang}} is always imported, so don't need to use the full name.   * Use {{SimpleDateFormat}} instead of {{toString()}}   * Use {{toHexString}} instead of {{toString}} for ObjectId   * Use {{BINARY}} instead of {{OLD_BINARY}} for Binary subtype.   * Use Document constructor, so generate ""\{x: 1}"" as ""new Document(""x"", 1)"" and not ""new Document().append(""x"", 1)""   * Remove Code.toString() for JS and Shell because the result is just ""[object Object]""    [https://github.com/mongodb-js/bson-compilers/pull/82]     [https://github.com/mongodb-js/bson-compilers/pull/84]    Comments from: [https://github.com/mongodb-js/bson-compilers/pull/76]     ",3
"COMPASS-2899","05/29/2018 16:42:18","Use Builders for java documents","http://mongodb.github.io/mongo-java-driver/3.6/builders/",5
"COMPASS-2901","05/29/2018 16:46:25","Misc Python idiomatic syntax ","From: https://github.com/mongodb-js/bson-compilers/pull/78",3
"COMPASS-2902","05/29/2018 16:55:32","Generate accurate and idiomatic Binary data","Instead of extracting the data as a string, we need to extract the data as bytes so that we can generate the correct output language binary data.          Java, for example, has only signed bytes and must be constructed with:  {code:java}  new BsonBinary(new byte[] {4, 6, 4, -3, -128, 0, 127});{code}",5
"COMPASS-2903","05/29/2018 17:15:58","Add csharp to test generator","Java + python are already done:  [https://github.com/mongodb-js/bson-compilers/blob/test-file/make-test-file.js]",1
"COMPASS-2904","05/29/2018 17:27:43","Add ""required imports"" to generated code","There was some concern that we need to indicate which classes we're using in the generated code so that beginners know exactly how to import the bson classes/etc.         We can use the code in [https://github.com/mongodb-js/bson-compilers/blob/test-file/make-test-file.js] as a starting point.         Open questions:    * how do we want to display this visually?   * do we only import what we use (therefore do a scan of the exported code) or should we just provide a generic ""import"" list of things that can be used?   * Is this required for version 1?",3
"COMPASS-2906","05/30/2018 15:38:03","write nested document tests","should test for larger, more complicated document queries",3
"COMPASS-2909","05/31/2018 03:16:42","Compass not able to auto fill connection string with LDAP userDN information. ","Hi Compass team,    Compass not able to auto fill connection string with LDAP userDN information when copying from Atlas connection modal. User have to manually input the all the required information manually.     Please see the screenshot video here: [https://cl.ly/0J2l3Y3T0o00]         Thanks,    Steve",1
"COMPASS-2910","06/01/2018 09:44:07","ace editor to change language modes based on outputs","need to be able to set proper syntax highlighting based on ouptut language in the plugin UI",1
"COMPASS-2917","06/04/2018 14:03:26","Update Compass Version With Last Login Date","We need to update the Compass version along with the last login date in the metrics.",2
"COMPASS-2923","06/05/2018 21:29:48","Update Language Model to Support $text, $mod, $bits...","Update the language model to support modern MQL features.",3
"COMPASS-2937","06/12/2018 15:59:01","Support 4.0 Features in Grammar","Add support for 4.0 conversion features to the grammar. Also support new $bucket syntax.",3
"COMPASS-2943","06/18/2018 12:03:07","unify test cases for bson compilers","Maintaining tests based on input language might prove itself tedious in the long run. Something to consider in the future is coming up with a yml / json file to store all tests and read out the input and output from a single json / yml object. If either the output or input are non existent for a particular method, the test can be skipped (i.e. the key/value pair will not be in that particular code block).",3
"COMPASS-2949","06/19/2018 15:50:52","Toggle Auto-Preview","Add another mode, auto-preview, which allows the user to toggle if the stages are executing when typing. When turned off, require CMD/CTL+Return to execute.",3
"COMPASS-2950","06/19/2018 15:58:55","Add New Atlas Link","Add the new Atlas link to the connect window with the updated designs.",2
"COMPASS-2964","06/26/2018 12:35:20","Export to Language Modal Needs Max Height","With long queries or pipelines, the export to language modal goes off screen. Think we just need to set a max height on the modal itself and let the contents scroll. See screen shot.",1
"COMPASS-2966","06/28/2018 15:15:54","Only provide imports for used packages","Only applies to java + javascript imports, but right now we always import all potential classes. We should figure out which classes are actually used and only import those.",3
"COMPASS-2971","06/29/2018 15:13:41","Abstract new into template","Right now we are using ""this.new"" to determine if new is required, we should abstract that into a template so that we can support [~durran.jordan]'s work on ruby.",1
"COMPASS-2976","07/02/2018 20:50:42","NaN in EditableDocument Double fields","if I enter alphabetic characters into a Double field it changes the text to ""NaN"" and you sort of get stuck in that state. Can't backspace to get rid of it, have to select all and then enter a number to start over         !https://mail.google.com/mail/u/0?ui=2&ik=7a0111ff37&attid=0.1&permmsgid=msg-a:r3017218747656759137&th=1644ca3c9016d539&view=fimg&sz=w1600-h1000&attbid=ANGjdJ8NBqAZ14nzrIKji5xeBJVgPfL0ScqX7gV8M5Hz2Z5uSV9lJQS4hg0lttEK2d94bkfPWf3UjPLQUiaSrsnRMAP7KIshyX1ahWOfOfbCg0EOSmNtgyVCLtRqJOw&disp=emb&realattid=ii_jj09mmwz0!",2
"COMPASS-2977","07/03/2018 12:55:19","Update Node Driver to 3.1.0","Upgrade the Node driver to 3.1.0 for SCRAM-SHA256 support.",2
"COMPASS-2983","07/09/2018 12:34:55","Add SCRAM-SHA-256 Support","Add SCRAM-SHA-256 support to the connection window.",5
"COMPASS-2998","07/16/2018 17:47:29","Add ""Idiomatic"" button to export to language UI","Since we can support regular documents or builders in java + c# (soon), we need to allow the user to active/deactivate. [~durran.jordan], do we want default to be ""use builders"" or not?",1
"COMPASS-3020","07/26/2018 16:44:47","Java default to using builders","[https://github.com/mongodb-js/compass-export-to-language/pull/13]    https://github.com/mongodb-js/bson-compilers/pull/120",1
"COMPASS-3033","07/31/2018 12:40:08","rename Bson-Compilers to Bson-Transpilers","Because Bson-Source-To-Source-Compilers is too long",1
"COMPASS-3045","08/08/2018 14:36:15","Support Collation in Agg Pipeline Builder","Add collation support to the aggregation pipeline builder.        # Add the collation field.   # Pass collation options when executing the stages.   # Pass collation options when executing a $out    https://mongodb.invisionapp.com/share/ZSMFJZ4DHKY#/screens/309739115_Design_04_-_1280px_-_Option_A",5
"COMPASS-3051","08/09/2018 15:35:49","Add copy button to original pipeline in Export to Lang modal","* Add copy button to left code snippet (original pipeline)   * Add tooltip to both copy buttons ""Click to Copy""   *",3
"COMPASS-3063","08/14/2018 19:39:44","Change in-progress banner icons in collation support modals","Updating icons from ""align-center"" to ""spinner""    !image-2018-08-14-14-39-05-265.png|width=576,height=411!",2
"COMPASS-3065","08/15/2018 15:54:42","Migrate services from deis to new techops platform","The auto-update and maps proxy currently run on Deis, which is being decommissioned by TECHOPS this quarter. Migrating to [the new platform|https://github.com/10gen/platform-docs] will dramatically increase reliability and provide long overdue monitoring and alerting. This is a multi-step project that will involve circling back with TECHOPS to update the DNS of these current services to point at the new platform containers. cc [~angelo.olivera]",5
"COMPASS-3072","08/21/2018 14:11:41","mongodb_schema.rs: project setup","* -setup- [-rust-clippy-|https://github.com/rust-lang-nursery/rust-clippy]   * -setup- [-rustfmt-|https://github.com/rust-lang-nursery/rustfmt]   * -setup ci to include rust-clippy and rustfmt check-   * -setup ci to make sure wasm pack can be build-   * -setup github-templates-   * -setup [wasm-pack|https://github.com/rustwasm/wasm-pack] (abstraction over [wasm-bindgen|https://github.com/rustwasm/wasm-bindgen])-   * look into existing project figure out api endpoints and what will need to be exposed to wasm-pack/wasm-bindgen   * -check 'clone' and 'debug' are implemented for all structs-   * -figure out how to do testing with rust's internal test framework / possibly look into [quickcheck|https://github.com/BurntSushi/quickcheck] for model testing-   * -#![deny(unsafe_code)]-   * -deny missing docs-   * -add code of conduct-   * documentation for all of the above ^",8
"COMPASS-3074","08/22/2018 10:06:08","Investigate export-to-lang modal size","Split off from COMPASS-3051, since it included two separate features.   * Improve the modal height   ** See if we can have the modal height extend to full height of the compass window (margin top and bottom should be the same) OR   ** See if we can have the modal be resizable? (drag to resize)",3
"COMPASS-3086","08/24/2018 15:09:18","As a user, I would like an improved experience when pasting pre-existing Aggregation Pipelines.","Let's try if no stage selected and you paste into stage editor, the pipeline fills out. If messy, we'll re-eval    !agg-paste-pipeline.png|width=600!",1
"COMPASS-3099","08/30/2018 21:58:46","Connection string autofill does not recognize authMechanism=PLAIN","https://jira.mongodb.org/browse/INT-3921 is marked done and hence I was testing the connection string autofill  I am using compass 1.15.0. I tried having the following strings in clipboard and open compass     mongodb+srv://:@cluster0-prc3c.mmscloudteam.com/%24external?authMechanism=PLAIN    mongodb+srv://test:@cluster0-prc3c.mmscloudteam.com/%24external?authMechanism=PLAIN    mongodb+srv://cluster0-prc3c.mmscloudteam.com/%24external?authMechanism=PLAIN    The 1st two looks good. But when i had the last string in my clipboard, LDAP option is not selected automatically.",1
"COMPASS-3100","08/31/2018 12:01:12","Windows msi supports unattended installation","Allow users to silently install Compass to a specific directory and set of users.",3
"COMPASS-3109","09/05/2018 15:20:38","Start on Symbol Table/Template blog post","Write a first draft for the team to edit!",5
"COMPASS-3110","09/05/2018 15:27:12","Support the python language-types as input to java","Expressions, literals, arrays, objects, comparisons. First output java code. Blocked on COMPASS-3108",8
"COMPASS-3113","09/05/2018 18:49:09","Refactor .evergreen.yaml for improved build times and functional tests","Refactor .evergreen.yaml to be sane so we can debug during setup for executing functional tests.",8
"COMPASS-3125","09/12/2018 09:51:25","Warn users instead of hiding replica set field for SSH tunneling","See https://jira.mongodb.org/browse/COMPASS-3057",1
"COMPASS-3136","09/19/2018 15:12:48","wasm: compass plugin to consume mongodb-schema.rs data","compass should be able to consume and output correct data provided by mongodb-schema.rs.",5
"COMPASS-3137","09/19/2018 15:14:08","wasm: compass plugin to send data to mongodb-schema.rs","things to watch out for: types! Rust might be particular about the types passed in as input, so we might have to figure out a way to create proper generics which have been currently avoided.",5
"COMPASS-3150","09/27/2018 12:37:17","Update to Electron 3/Node 10.2.1","Currently blocked by: https://github.com/atom/node-keytar/issues/125",8
"COMPASS-3157","09/28/2018 12:58:34","Enforce maxTimeMS for every query sent to the server","Currently query filters that can be entered in the ""Documents"" panel don't use the {{maxtimems}} parameter. It is possible with non selective filters not supported by indexes to cause to run very heavy queries (COLLSCAN) on the MongoDB server causing possibly performance issues for the other clients. The parameter {{maxTimeMS}} is not set in the count and in the find commands sent.    For example I loaded 5.7M tweets on a test MongoDB instances and I tried to use the filter  {source: ""a""} which causes a full collection scan over 5.7M documents:    {code}  2018-09-28T10:42:42.588+0200 I NETWORK  [conn6] received client metadata from 127.0.0.1:51337 conn6: { application: { name: ""MongoDB Shell"" }, driver: { name: ""MongoDB Internal Client"", version: ""3.6.6"" }, os: { type: ""Darwin"", name: ""Mac OS X"", architecture: ""x86_64"", version: ""17.7.0"" } }  2018-09-28T10:44:52.172+0200 I COMMAND  [conn5] command test.tweets command: count { count: ""tweets"", query: { source: ""a"" }, skip: 0, lsid: { id: UUID(""884572c0-9842-4d2f-ada2-72250fc64b9a"") }, $db: ""test"" } planSummary: COLLSCAN keysExamined:0 docsExamined:5712169 numYields:47574 reslen:44 locks:{ Global: { acquireCount: { r: 95150 } }, Database: { acquireCount: { r: 47575 } }, Collection: { acquireCount: { r: 47575 } } } protocol:op_query 137667ms  2018-09-28T10:46:53.077+0200 I COMMAND  [conn1] command test.tweets appName: ""MongoDB Compass Beta"" command: find { find: ""tweets"", filter: { source: ""a"" }, limit: 20, returnKey: false, showRecordId: false, lsid: { id: UUID(""884572c0-9842-4d2f-ada2-72250fc64b9a"") }, $db: ""test"" } planSummary: COLLSCAN keysExamined:0 docsExamined:5712169 cursorExhausted:1 numYields:47243 nreturned:0 reslen:99 locks:{ Global: { acquireCount: { r: 94488 } }, Database: { acquireCount: { r: 47244 } }, Collection: { acquireCount: { r: 47244 } } } protocol:op_query 120877ms  {code}    The query is limited to 20 documents but has no {{maxTimeMS}} set.    If you use the schema tab and you run the same filter, {{maxTimeMS}} is used, but I noticed that the same queries are then run without the timeout set:    {code}  2018-09-28T13:33:44.380+0200 I COMMAND  [conn10] command test.tweets command: count { count: ""tweets"", query: { source: ""a"" }, maxTimeMS: 10000, lsid: { id: UUID(""bbda3184-e246-44bd-a5dd-43650f767757"") }, $db: ""test"" } planSummary: COLLSCAN numYields:5903 reslen:182 locks:{ Global: { acquireCount: { r: 11808 } }, Database: { acquireCount: { r: 5904 } }, Collection: { acquireCount: { r: 5904 } } } protocol:op_query 10019ms  2018-09-28T13:33:44.390+0200 I COMMAND  [conn8] command test.tweets command: count { count: ""tweets"", query: { source: ""a"" }, maxTimeMS: 10000, lsid: { id: UUID(""e927734d-2de4-4d15-b958-5ed758860118"") }, $db: ""test"" } planSummary: COLLSCAN numYields:5916 reslen:182 locks:{ Global: { acquireCount: { r: 11834 } }, Database: { acquireCount: { r: 5917 } }, Collection: { acquireCount: { r: 5917 } } } protocol:op_query 10017ms    2018-09-28T13:36:03.315+0200 I COMMAND  [conn11] command test.tweets command: count { count: ""tweets"", query: { source: ""a"" }, skip: 0, lsid: { id: UUID(""f153a56e-d826-4256-bc41-3402c718bf42"") }, $db: ""test"" } planSummary: COLLSCAN keysExamined:0 docsExamined:5712169 numYields:48309 reslen:44 locks:{ Global: { acquireCount: { r: 96620 } }, Database: { acquireCount: { r: 48310 } }, Collection: { acquireCount: { r: 48310 } } } protocol:op_query 148950ms  2018-09-28T13:38:24.293+0200 I COMMAND  [conn10] command test.tweets command: find { find: ""tweets"", filter: { source: ""a"" }, limit: 20, returnKey: false, showRecordId: false, lsid: { id: UUID(""f153a56e-d826-4256-bc41-3402c718bf42"") }, $db: ""test"" } planSummary: COLLSCAN keysExamined:0 docsExamined:5712169 cursorExhausted:1 numYields:47984 nreturned:0 reslen:99 locks:{ Global: { acquireCount: { r: 95970 } }, Database: { acquireCount: { r: 47985 } }, Collection: { acquireCount: { r: 47985 } } } protocol:op_query 140951ms  {code}    I tested this with Compass 1.16.0 beta 7.",3
"COMPASS-3170","10/01/2018 12:25:53","Spike Lazy Linked List in Hadron Document","Spike turning hadron document into a configurable lazy linked list.",5
"COMPASS-3190","10/11/2018 15:35:10","refactor edge case tests for python","Right now we have a few tests that are not JSON based, and therefore are only being tested from javascript. Refactor those tests so that we can easily test them from Python as well, and move them into JSON form where possible.",5
"COMPASS-3192","10/11/2018 15:37:19","Add class layer between ANTLR and visitor classes","Right now there is a lot of repeated code between the python and javascript/shell visitors. Add a class layer in between the ANTLR-generated classes and the language-specific classes so that methods that all visitors have can be written in one place.",8
"COMPASS-3202","10/16/2018 16:00:44","Fix auto-argument casting for functions","Works for javascript, but the python implementation uncovered some odd behavior so go through and verify that the casting mechanism is working correctly. And document it! ",5
"COMPASS-3224","10/30/2018 16:48:17","Add native regex type to python","Other than optional and named args, this is the last feature required for python as an input language.",3
"COMPASS-3226","10/31/2018 13:31:11","api: library takes in and outputs a bson document","on this pass output document should have:   * -name-   * -path-   * -regular type-   * -iterate over nested documents and have the above information-   * -bson_type-   * -values-   * -add arrays at type-",3
"COMPASS-3227","10/31/2018 13:42:15","api: use typed_builder crate to support passin in options","https://docs.rs/typed-builder/0.1.1/typed_builder/",3
"COMPASS-3235","11/06/2018 15:10:56","Eliminate multiple keychain password requests","The multiple keychain password prompt has been a long-running unexplained behavior we haven't been able to get to the bottom of. A roll-up of bug reports:    - COMPASS-1767  - COMPASS-3091  - COMPASS-3147  - COMPASS-3215    My hunch after re-reading these tickets is this happens after an auto-update or a manual upgrade. What's most likely is that we simply need to call {{keytar}} methods from the main process via ipc rather than from the renderer as we do today. [See this example on stackoverflow|https://stackoverflow.com/a/43239854].    [From this blog post|https://medium.com/cameron-nokes/how-to-securely-store-sensitive-information-in-electron-with-node-keytar-51af99f1cfc4]:    {quote}  One other important note: I recommend you only call node-keytar from the main process. If you set a password from the main process and then attempt to get it from a renderer process, it’ll prompt a permissions dialog for the user (this is macOS only, Windows doesn’t seem to mind either way). Additionally, I think it’s cleaner and clearer to the user if the access control list has your app name and it’s icon, instead of MyApp Helper and the generic app icon which is what you get when a renderer sets it.  {quote}          More notes from previous tickets rolled up below.    ---    [{{SecKeychainFindGenericPassword}}|https://developer.apple.com/documentation/security/1397301-seckeychainfindgenericpassword?language=objc], which is the method [{{keytar}} uses to read a stored connection password|https://github.com/atom/node-keytar/blob/master/src/keytar_mac.cc#L107]. In the discussion:    {quote}  This function automatically calls the function [{{SecKeychainUnlock}}|https://developer.apple.com/documentation/security/1400341-seckeychainunlock?language=objc] to display the Unlock Keychain dialog box if the keychain is currently locked.  {quote}    A few ideas on what might need to happen:    - Maybe something in the keytar bindings is too specific?   Maybe when we run app-migrations today, macOS needs to re-validate or something?  - Maybe a bulk-read call to fetch all passwords with {{FindPassword}} would guarantee this unlock dialog is shown once and only once in all cases (a single, implicit {{SecKeychainUnlock}} call), but there are some potential security implications to consider.   ",3
"COMPASS-3252","11/14/2018 13:27:12","Paginate Document List Elements 20 at a time","Paginate the elements in the document in the document list 20 at a time.",5
"COMPASS-3253","11/14/2018 13:28:32","Paginate Document Table View Columns 20 at a time","Paginate columns in the document list table view 20 at a time. Needs update to hadron-document to accept a number to the flush method.",5
"COMPASS-3254","11/14/2018 14:11:30","Make Embedded Elements Lazy Loaded","Linked List in hadron-document is now lazy, but needs to expand further to lazy load embedded arrays and documents.",5
"COMPASS-3255","11/14/2018 15:08:19","api: add unique and duplicate fields","each type has a count field. to see if there are duplicates the following checks should be done:   * type.name is _Null_ or _Undefined_, check is type.count > 1   * if there is a type.values, check if the vec is all unique",5
"COMPASS-3256","11/14/2018 15:11:44","testing: test to process a json file","should take in a json file (fanclub.json), convert it to bson, be able to parse it and return the current result.    bson crate should have a deserializer for json implemented (hopefully).    should also track timing.",5
"COMPASS-3260","11/15/2018 11:04:46","Implement syntax for object generator","Support syntax like equality, math, etc.",5
"COMPASS-3263","11/15/2018 15:06:51","library: performance metrics","compare results in rust to node.     there is a way to write tests in rust as benchmarks. and that's what should be done for some of these.",2
"COMPASS-3270","11/20/2018 09:20:22","Need a way to interrrupt/kill long running queries","If you run a long running query (this is easy to do if you get a keyname wrong) there is no way to interrupt the query before it times out or completes. The only option is to kill the window.",5
"COMPASS-3291","11/23/2018 16:32:39","Agg. Pipeline settings","h3. User story  As a Compass user  I want to set sample size, number of docs in preview and maxTimeMS  So that I have better control over how Compass is executing and displaying my pipeline.    h3. Acceptance Criteria  - There is a place in the UI where I can set sample size, number of docs in preview and maxTimeMS  - By default, these settings are set to the default that is in Compass today  - When I change one of these values, the new configuration is preserved across different Compass sessions    h3. Notes  - Should the setting be per collection, per pipeline, or global? How does that resonate with tabs (COMPASS-3289)?",5
"COMPASS-3292","11/23/2018 16:32:59","Export to language discoverability","h3. User story  As a Compass user  I want a quick and discoverable access to “export to language”  So that I can easily find it and I can take advantage of it to speed up my application development.    h3. Acceptance Criteria  - When I look at the Agg. Pipeline builder, I want to know it is possible to export my pipeline to different languages  ",1
"COMPASS-3295","11/23/2018 16:34:31","Full-screen stage editor","h3. User story  As a Compass user  I want more real estate for my stage editor  So that I can see everything I type into the editor without a lot of scrolling, even when my stage contains a lot of code.    h3. Acceptance Criteria  - When I am working on a stage, I can make the stage editor full-screen  - When the stage editor is full-screen, I can see:      -- The stage selector      -- The code editor      -- A way to reach the documentation/examples for the current stage      -- A way to delete the stage      -- A way to disable the stage      -- A sample of the data entering the stage      -- A sample of the data outputted by the stage      -- A way to access the agg. pipeline settings, in case I need to adjust for instance the timeout if the current stage is too slow  - When I close the full-screen editor, the changes I made are reflected in the “small editor” and the results in the preview are updated  ",1
"COMPASS-3322","11/28/2018 12:16:13","library: refactor schema parser to use internal structs","currently using bson to manipulate data, should be using rust-specific methods.",5
"COMPASS-3323","11/28/2018 12:17:41","api: investigate error handling","no errors are currently handled or thrown (200 path only!), this should be fixed.",3
"COMPASS-3324","11/28/2018 12:23:49","library: modularize crate into separate components","right now everything is in one giant file, and that's a bit unsustainable. So:    *lib.rs – public facing api*    *schema_parser.rs – SchemaParser trait*    *field_type.rs – FieldType trait*    and possible have,    *field.rs – Field trait*",3
"COMPASS-3325","11/28/2018 12:24:56","library: investigate current use of lifetime","i *think* the lifetime situation is not as stable and efficient as it's meant to be. Look into (+ask advice) on how to improve this.",3
"COMPASS-3328","11/28/2018 14:18:39","api: should allow for SchemaParser struct output","currently output is directly converted to json in _flush_ method. The api should allow for either of the two to be an output, or have a way for user to call `to_json` or `to_bson`, `to_struct` methods (or something of the sort) for easier conversions",5
"COMPASS-3331","11/29/2018 13:44:50","Move Metrics To External Package","Move the metrics internal package to an external package in 10gen on the new plugin template.",3
"COMPASS-3354","12/12/2018 14:23:06","Write error state tests for object generation","Fill out error tests with object generation",5
"COMPASS-3356","12/12/2018 14:25:26","Fill out the rest of the tests for object generation","The leftover test files are builders, imports, and non-idiomatic. Should be filled out with object to compare with.",1
"COMPASS-3370","01/03/2019 11:17:42","library: refactor field_type and fields vectors into a more efficient data structure","when iterating over the input document we need to be checking whether an existing field already exist, and if it does update its field type. this requires two iterations over the 'fields' and 'field_type' vectors. this should be rewritten to be a more efficient data structure that would not require the double iteration and overwriting of an existing field_type struct.",5
"COMPASS-3371","01/03/2019 12:02:56","library: add assert_eq!(), test::Bencher and test::black_box() tests","the library is missing a large chuck of tests. to make sure future development is a bit more consistent, should add more tests \o/",3
"COMPASS-3373","01/04/2019 12:58:48","bson: add Decimal128 implementation to bson crate","bson crate - [https://docs.rs/bson/0.13.0/bson/index.html] - does not currently support Decimal128 implementation. To be able to pattern match on all available bson types, we will have to PR in support for Decimal128.",8
"COMPASS-3378","01/07/2019 15:44:28","bson: add wasm support for bson-rs crate","bson-rs crate is currently not wasm compatible as it makes system calls to get machine_id and process_id to make ObjectId bson type. This doesn't work in the browser and should be done as randomly generated numbers (like the node's bson package)",3
"COMPASS-3379","01/08/2019 14:58:00","wasm: use regular result type in wasm exported functions","currently library wraps around the existing methods to export them for wasm as the usual ""Result<T, E>"" doesn't quite work in wasm. There is an outstanding issue on wasm-bindgen project to improve this experience: https://github.com/rustwasm/wasm-bindgen/issues/1017    this ticket is mostly for monitoring and talking to the rust-wasm team to improve the current implementation",3
"COMPASS-3403","01/23/2019 15:04:43","wasm: set up compasss to allow for a dynamic import of npm package with wasm","to be able to consume the produced npm package with wasm, we need to be able to import it async. this requires for compass to handle an async import.    possible things to look at:   * babel plugins   * webpack plugins: wasm-load, and adding `.wasm` in extensions.",3
"COMPASS-3411","01/28/2019 16:22:04","api: should update fields and values in nested documents","currently only top level keys and values get updated with the parser, so values vectors of things like `_id.oid` don't get updated.",3
"COMPASS-3412","01/28/2019 16:29:42","api: should include probability field for every field","should count the probability of a given field existing over a sample collection set. previously used calculation:    {color:#24292e}field{color}{color:#24292e}.{color}{color:#24292e}probability{color} {color:#d73a49}={color} {color:#24292e}field{color}{color:#24292e}.{color}{color:#24292e}count{color} {color:#d73a49}/{color} {color:#24292e}parent{color}{color:#24292e}.{color}{color:#24292e}count{color}{color:#24292e};{color}",3
"COMPASS-3413","01/28/2019 16:33:04","wasm: should be able to pass in a cursor from js side","instead of reading a file and reading it line by line, should be able to take a cursor and :   # at first convert it to json and send to rust   # and (not sure if this is possible) take a node created cursor and pass it to rust for a rust driver to read off data from the cursor",5
"COMPASS-3423","01/31/2019 12:32:23","api: count fields should start at 1","count currently starts at zero for all the different fields, but should start at 1.    all structs should have a method to update their respective count fields",1
"COMPASS-3424","01/31/2019 12:34:07","library: implement fuzz testing for public api","there is a good library to do some fuzz testing in rust: [https://docs.rs/proptest/0.8.7/proptest/]    idea here: make sure lib doesn't crash.         example on how to do it: https://github.com/datrs/sleep-parser/blob/master/fuzz/fuzz_targets/header-from-vec.rs",3
"COMPASS-3425","01/31/2019 12:35:42","library: implement dealing with array as value types","should destructure the array and put all the values inside the field_type values vector. Currently no matching or further processing is done for arrray bson type.",5
"COMPASS-3426","01/31/2019 12:37:39","oss: write up docs on working with wasm-pack","we've been using wasm-pack to bundle a js + wasm package. They are currently in need of some docs to help people get this working in their own environments. This ticket is for putting a few of our use cases together for them.",1
"COMPASS-3427","01/31/2019 13:11:36","api: nested documents in json should stay nested in SchemaParser struct","current output:       {code:java}  {        ""name"": ""city"",        ""path"": ""address.city"",        ""count"": 0,        ""field_type"": null,        ""probability"": null,        ""has_duplicates"": true,        ""types"": [          {            ""name"": ""String"",            ""path"": ""address.city"",            ""count"": 99,            ""bsonType"": ""String"",            ""probability"": null,            ""values"": [              {                ""Str"": ""El Paso, Texas""              },              {                ""Str"": ""El Paso, Texas""              },            ]          }        ]  },  {        ""name"": ""street"",        ""path"": ""address.street"",        ""count"": 0,        ""field_type"": null,        ""probability"": null,        ""has_duplicates"": false,        ""types"": [          {            ""name"": ""String"",            ""path"": ""address.street"",            ""count"": 99,            ""bsonType"": ""String"",            ""probability"": null,            ""values"": [              {                ""Str"": ""133 Aloha Ave""              },              {                ""Str"": ""290 East George Rd""              }            ]          }        ]  }  {code}       expected output:  {code:java}  {      ""name"": ""address"",      ""path"": ""address"",      ""count"": 100,      ""types"": [{        ""name"": ""Document"",        ""bsonType"": ""Document"",        ""path"": ""address"",        ""count"": 100,        ""fields"": [           {            ""name"": ""city"",            ""path"": ""address.city"",            ""count"": 100,            ""types"": [{              ""name"": ""String"",              ""bsonType"": ""String"",              ""path"": ""address.city"",              ""count"": 100,              ""values"": [""El Paso, Texas"", ""El Paso, Texas""]            }]           }, {             ""name"": ""street"",             ""path"": ""address.street"",             ""count"": 100,             ""types"": [{               ""name"": ""String"",               ""bsonType"": ""String"",               ""path"": ""address.street"",               ""count"": 100,               ""values"": [""133 Aloha Ave"", ""290 East George Rd""]             }]           }]        }]  }    {code}",5
"COMPASS-3429","01/31/2019 13:26:38","api: to_json should strip off the ValueType type","I _think_ there should be a serde_json tag I can add to remove the current behaviour of value vector:  {code:java}  ""values"": [{""Str"":""+17438917865""},{""Str"":""+17518179206""},{""Str"":""+14108799192""}]  {code}  should really just be:  {code:java}  ""values"": [""+17438917865"", ""+17518179206"", ""+14108799192""}]   {code}  investigate in serde_json docs",2
"COMPASS-3432","02/01/2019 12:35:49","Render Visual Explain Plan for Any Explain Output","As a user I would like to drag the output of an explain plan into the Compass Explain tab and have the visual representation of it shown.    - User can drag a file that the the output of an explain plan onto the explain tab and see the visual representation of it.  - User can paste via CTRL/CMD+V the same output from the clipboard and see the visual representation of it.",2
"COMPASS-3436","02/04/2019 13:47:22","api: should deal with a semantic_type option","SchemaParser::new() should accept an option to handle semantic types. setting this to Some should allow for parsing of an email ""type"" and a geojson ""type"" along with the regular bson types.    should look for crates that could do the geojson check for us; email should be a rather straight forward regex.",5
"COMPASS-3437","02/04/2019 13:48:05","api: should deal with a store_values option","when store_values is set to none, don't store values.",3
"COMPASS-3438","02/04/2019 13:55:03","library: handle null and undefined data values","if either null or undefined, should remove all the field_type values in the finalizing step. this is currently done in the js land:  {code:java}  if (type.name === 'Null' || type.name === 'Undefined') {    delete type.values;            type.unique = type.count === 0 ? 0 : 1;            type.has_duplicates = type.count > 1;  }  {code}",2
"COMPASS-3439","02/04/2019 14:00:47","library: handle missing fields","if parent_count - field_count > 0, some fields are missing. Create an Undefined type to add this information:       {code:java}  field.types[""Undefined""] = {    name: 'Undefined',              type: 'Undefined',              path: field.path,              count: parent_count - field_count          };  {code}   ",3
"COMPASS-3440","02/04/2019 14:03:26","compass: move schema analyser into its own plugin","We will not be able to use wasm modules directly inside compass (needs current version of webpack), so will need to have this moved from internal-plugins/ in compass into its own plugin. Work was started here: https://github.com/10gen/compass-schema",8
"COMPASS-3445","02/05/2019 13:35:21","Extract Instance Header Plugin","Extract the instance header plugin to an external plugin on the new template.",8
"COMPASS-3446","02/05/2019 13:36:24","Extract Sidebar Plugin","Extract the sidebar plugin to an external plugin on the new plugin template.",8
"COMPASS-3447","02/05/2019 13:37:00","Extract Schema Plugin","Extract the schema plugin to an external plugin on the new plugin template.",8
"COMPASS-3448","02/05/2019 13:37:31","Extract App Plugin","Extract the app plugin to an external plugin on the new plugin template.",8
"COMPASS-3449","02/05/2019 13:38:17","Extract Home Plugin","Extract the home plugin to an external plugin on the new plugin template.",8
"COMPASS-3450","02/05/2019 13:40:29","Webpackify Compass","Build Compass using Webpack.  - Create Webpack configurations.  - Remove compile cache.  - Remove style manager.  - Remove module cache.    * Need to break up into multiple stories*",8
"COMPASS-3452","02/06/2019 14:37:40","Move Collection Store into Collection Plugin","Move the Collection store into the collection plugin.    - Convert to Redux store.  - Change store structure to have multiple collections.  - Bring in collection data for each collection. (readonly, capped, etc)  - Switch all collection plugins to use new store.",8
"COMPASS-3453","02/06/2019 14:39:29","TabNavBar Programatically Renders Tabs","Change the TabNavBar to programatically render tabs, instead of just setting display to none.    - Change all plugins with the dependency:    - compass-collection    - compass-database    - compass-instance",5
"COMPASS-3454","02/06/2019 14:39:47","library: field should create a different field_type if type does not exist","currently, if two different types for the same field are in use, only one field_type will be used; should use two different field_types.",3
"COMPASS-3482","03/04/2019 15:33:08","Save pipeline modal","Moves from inline to modal    - {{↵}} in modal to save  - {{Save}} on an unsaved pipeline brings up modal to specify a name  - {{Save}} on an existing saved pipeline just saves  - {{Save As...}} Enter new name {{➡️}} clone current pipeline  - If canceling from {{Save As...}} the current pipeline is not cloned  - {{Save As...}} from an unsaved pipeline should instead go to {{Save}}",3
"COMPASS-3486","03/06/2019 12:39:34","wasm: pass bson from js side","Instead of serializing json on JS side and then deserializing it _and_ converting it to bson on rust side, we should just pass bson.    This requires a change to mongodb-schema-parser to accept bson and collection-sampler to return bson.",8
"COMPASS-3488","03/06/2019 13:02:02","library: finalize_schema should be the only place to count unique","currently probability, duplicates, and unique counts are calculated when _every_ new field is added. We want to do this only once, when we finalize the schema. This way if fields are also missing, we are able to get accurate counts.",3
"COMPASS-3501","03/12/2019 13:53:45","1.18.0-beta.1 on macOS blocked by gatekeeper?","(from [slack|https://mongodb.slack.com/archives/C0U7K0MC3/p1552392785045300] HT [~brian.blevins])",1
"COMPASS-3508","03/15/2019 14:41:02","Handle Large Namespaces in Tabs","Handle overflow of large namespaces in the collection tabs.",1
"COMPASS-3509","03/15/2019 14:42:33","Collection Tab Keyboard Shortcuts","Add CTRL+T & CTRL+W to open/close tabs, plus CTRL+# to go to that tab index + 1",2
"COMPASS-3510","03/15/2019 14:43:39","Drag+Drop Tab Reordering","Add ability to reorder collection tabs via drag+drop.",3
"COMPASS-3511","03/15/2019 14:44:39","Add Configure Store Function to Collection tab Roles","When plugins define roles, add configure store option to the role.",2
"COMPASS-3512","03/15/2019 14:45:36","Create Tab Carousel","When a large number of collection tabs are opened, allow user to scroll through them.",3
"COMPASS-3513","03/15/2019 14:46:47","Collection Tabs are Subtab Aware","The collection tabs should display the currently active subtab in the collection.",3
"COMPASS-3514","03/15/2019 14:50:42","All Collection Plugins Use Configure Store","Change all collection tab plugins to use the configure store pattern.",3
"COMPASS-3515","03/15/2019 14:51:53","Add Select Namespace Event to Sidebar","The sidebar collection entries should emit the select-namespace event when clicking on a collection.",2
"COMPASS-3516","03/15/2019 14:53:25","Collection Plugin Configures Stores","The collection plugin should configure the stores for each collection tab role and then pass the configured store into the plugin props.",5
"COMPASS-3517","03/15/2019 14:54:42","Move Instance Header Plugin into Sidebar","As per the designs, move the instance header into the sidebar.",3
"COMPASS-3518","03/15/2019 14:55:47","Collection HUD Plugins Take Data as Params","Change the Collection HUD plugins to take their required data as properties.",5
"COMPASS-3519","03/15/2019 14:57:04","Pass Sub App Registry to Collection Tabs","Pass a new app registry to each of the collection tabs that is scoped only to the collection.",5
"COMPASS-3520","03/15/2019 14:58:50","Scope Events to Sub App Registry","Field store, import/export, refresh events should be scoped to the collection app registry and not the global app registry.",3
"COMPASS-3523","03/19/2019 08:47:49","Create a View from an aggregation pipeline","h3. User story  As a Compass user  I want to create a View from an aggregation pipeline  So that I can make sure my data is in the right shape to be used in my application or to create a chart from it.    h3. Acceptance criteria  - When I am in the aggregation pipeline builder and I have written a valid aggregation, I want to be able to save it as a View and give it a name  - When the server is older than 3.4, Save as a View is hidden  - When an aggregation is saved as a View, it immediately appears in the sidebar  - When an aggregation is saved as a View and I open the Database screen, I can see the newly created View  - It is possible to create a View on top of another View  - When I am trying to create a new View with the same name of an existing View, I want to see a meaningful error message  - When the server returns errors (e.g., the user doesn't have the necessary permissions to create a view), Compass needs to handle the errors nicely  - When the View has been created, Compass will open the new View in the main screen (in a new tab, as soon as tabs are available)",5
"COMPASS-3524","03/19/2019 09:14:21","Using a View","h3. User story  As a Compass user  I want to see the details of a View when I select it  So that I can:  - easily understand that it is a View and I can see what collection it is based on  - see the documents that are in the View and run queries and aggregations on top of it    h3. Acceptance criteria  - When I open a View in Compass, I can clearly see that I am actually looking at a View  - When I open a View in Compass, I can see what collection the View is based on  - When I open a View in Compass, I don't want to see N/A placeholders for the details we can't display (see screeenshot attached)  - When I am building aggregations on top of a View, I want so see meaningful errors when I try to use [operators that are not supported on Views|https://docs.mongodb.com/manual/reference/method/db.createView]  ",1
"COMPASS-3525","03/19/2019 09:24:21","Modify a View","h3. User story  As a Compass user  I want to edit a View (as in ""edit the aggregation pipeline behind the View"")  So that I can go and adjust the details if the documents I am seeing are not in the shape I expected them to be    h3. Acceptance criteria  - In the sidebar, I have an entry point to go and edit the aggregation behind each View  - In the main screen, when I am looking at a View, I have entry points to go and edit the aggregation behind the View  - When I go and edit the aggregation behind a View, I am editing it in the aggregation pipeline builder of the Collection or View the View I am editing is based on  - When I am done with editing the aggregation pipeline, I can update the View with the new pipeline  - When the server returns errors (e.g., the user doesn't have the necessary permissions to modify a View), Compass needs to handle the errors nicely    h3. Questions  - When a View has been updated, can we jump back to wherever the user was when they clicked on an entry point to editing the View?",5
"COMPASS-3526","03/19/2019 09:31:10","Duplicate a View","h3. User story  As a Compass user  I want to duplicate an existing View  So that I don't need to start from scratch when I want to create a new, similar one    h3. Acceptance criteria  - In the sidebar, I have an entry point to duplicate a View  - When I click on the entry point to duplicate a View, I can specify the name for the new View and then the new View is created with the same aggregation pipeline that is behind the original View  - When the duplicate View is created, a new tab is opened pointing to the Documents view of the new View  - When the server returns errors (e.g., the user doesn't have the necessary permissions to create a new view), Compass needs to handle the errors nicely",1
"COMPASS-3537","03/22/2019 14:23:19","Allow User Data Directoy to be Configurable","The user data directory should be configurable on the Windows MSI installer.",3
"COMPASS-3543","03/27/2019 16:13:26","Trim whitespaces on username field in Connect screen","In the connect screen, make sure white spaces are trimmed for the username field.",1
"COMPASS-3573","04/15/2019 19:36:45","macOS dmg file size has doubled","While testing COMPASS-3496, I noticed the macOS installer sizes have ballooned substantially. Unpacked dmg is now 900+ Mb. This also impacts launch performance. Appears source maps are being included in installed payloads for 1 or more plugins... Seeing the below in devtools console:    {code}  DevTools failed to parse SourceMap: file:///Applications/MongoDB Compass Dev.app/Contents/Resources/app.asar/node_modules/@mongodb-js/compass-indexes/lib/index.js.map  {code}",3
"COMPASS-3589","04/24/2019 14:29:47","Connection model should parse all URI options","Update the connection model to parse all connection options that URI can have. Use the node driver URI parser for it instead of mongodb-url.    - Replace mongodb-js/url parser with parseConnectionString from mongodb-js/mongodb-core  - Update tests according to changes in the code  - Add tests for parsing URI  - Update returning object structure    For more info the about connection string: https://docs.mongodb.com/manual/reference/connection-string/",5
"COMPASS-3601","04/29/2019 10:54:32","Query History Support in Collection Tabs","Support Query History plugin in collection tabs.",5
"COMPASS-3602","04/29/2019 10:55:13","Support Query Bar in Collection Tabs","Support for Query Bar in collection tabs.",5
"COMPASS-3604","04/29/2019 10:56:20","Support Import/Export in Collection Tabs","Support for import/export in collection tabs.",5
"COMPASS-3759","07/05/2019 13:11:17","Expose S3 download links for Compass releases","Some customers want to script the installation of the _latest stable version_ of Compass in enterprise environments. In order to do that, they would like to have a predictable URL to download the release artifacts.    Can we provide a solution to this without hitting Github as we currently do?",5
"COMPASS-3768","07/19/2019 19:46:02","Check if port is blocked by firewall","One of the first things we ask our students who have issues connecting to Atlas with Compass is to ensure port 27017 is not blocked by their firewall.    We ask the student to navigate to:    [http://portquiz.net:27017/]    It would be nice for Compass to integrate a similar check to guide the user a little more when they experience a connection issue.     ",3
"COMPASS-3780","07/26/2019 12:46:14","Display GeoJSON types other than points in Schema Map view","As a customer, I have a data set which contains both GeoJSON polygons and GeoJSON LinesStrings.  It would be really useful to be able to see these rendered in the map view in the Schema tab.     ",3
"COMPASS-3781","07/26/2019 12:48:33","Create other Geo-Queries in the Schema map view ","As a customer, I would like the ability to click to draw a polygon, in the same way as I can currently drag out a circle, to create a GeoWithin Query.",2
"COMPASS-3809","08/12/2019 08:42:29","Re-add drag circle functionality in mapview","This affects university students who can't complete the shipwrecks exercise without this functionality.",3
"COMPASS-3817","08/14/2019 15:36:02","Update Electron to Latest Non-Backwards Breaking Stable Version","Need to update Electron to latest.",5
"COMPASS-3818","08/14/2019 15:36:41","Update Plugin API Major Version","Update the Plugin API Major version to account for collection tabs.",5
"COMPASS-3825","08/16/2019 14:01:57","Export CSV","h3. User story  As a Compass user   I want to export documents to a CSV file   So that I can use them with tools outside the MongoDB ecosystem    h3. Acceptance Criteria   - Compass can export documents to a CSV file   - When filter, project, sort or limit are specified for the collection the user is exporting, the user has the option to use them as the settings for the export (https://mongodb.invisionapp.com/share/BVNOZB4DYT3#/screens/347756471)   - When an error happens during the export   ** Compass shows a meaningful error message   ** Compass says how many documents it managed to export   - During the export, progress is displayed in the export modal  ",3
"COMPASS-3826","08/16/2019 14:03:53","Import CSV: select fields","h3. User story  As a Compass user   I want to specify the fields I want to import from CSV   So that I can control what data I want to have in my collection and specify the schema    h3. Acceptance Criteria   - Before the CSV import starts, users can select the fields that are included in the import (https://mongodb.invisionapp.com/share/BVNOZB4DYT3#/screens/344502152, COMPASS-2956)      h3. Notes   - We pre-read a portion of the CSV file (headerline and a few lines) to display the preview in the field/type selector.  ",2
"COMPASS-3829","08/16/2019 14:06:28","Import JSON","h3. User story    As a Compass user   I want to import documents from a JSON file   So that I can quickly seed my collection with existing data    h3. Acceptance Criteria   - Compass can import a valid JSON file (an array of documents, COMPASS-3185)   - Compass cam import extended JSON (COMPASS-3384)   - Compass can import a valid JSONL file (http://jsonlines.org/)   - When an error happens during the import   ** Compass shows a meaningful error message   ** Compass says how many documents it managed to import   - When the JSON is invalid   ** Compass displays a meaningful error (COMPASS-3755)   - During the import, progress is displayed in the import modal    h3. Notes   - JSONL = whatever is the spec that mongoimport handles    ",3
"COMPASS-3830","08/16/2019 14:07:09","Import/Export entry points","As a Compass user   I want to contextual entry points to import/export   So that I can find and access the functionality where I needed  h3. Acceptance criteria   - -The contextual menu in the Collections view contains an entry point to Import (-[-https://mongodb.invisionapp.com/share/BVNOZB4DYT3#/screens/316135807).-|https://mongodb.invisionapp.com/share/BVNOZB4DYT3#/screens/316135807).-]   - -The contextual menu for a collection in the side bar contains an entry point to Import ([https://mongodb.invisionapp.com/share/BVNOZB4DYT3#/screens/316135808])-.   - The empty state of the documents tab contains an entry point to Import ([https://mongodb.invisionapp.com/share/BVNOZB4DYT3#/screens/316135808])   - The toolbar of the documents tab contains an entry point to Import ([https://mongodb.invisionapp.com/share/BVNOZB4DYT3#/screens/316135808])   - The entry point to Import opens the Import dialog in the context of the collection the user selected     - -The contextual menu in the Collections view contains an entry point to Export (-[-https://mongodb.invisionapp.com/share/BVNOZB4DYT3#/screens/316135807).-|https://mongodb.invisionapp.com/share/BVNOZB4DYT3#/screens/316135807).-]   - -The contextual menu for a collection in the side bar contains an entry point to Export (-[-https://mongodb.invisionapp.com/share/BVNOZB4DYT3#/screens/316135808)-|https://mongodb.invisionapp.com/share/BVNOZB4DYT3#/screens/316135808)-]   - The entry point to Export opens the Export dialog in the context of the collection the user selected. By default, the whole collection will be exported.     - The toolbar of the documents tab contains an entry point to Export ([https://mongodb.invisionapp.com/share/BVNOZB4DYT3#/screens/316135808])   - When Export is selected in the documents tab toolbar, Export defaults to the current filter, project, sort and limit    h3. Notes   - This story is only worth doing once the new implementation for import/export is ready.",3
"COMPASS-3851","08/28/2019 15:17:21","Select fields when exporting a collection","h3. User story    As a Compass user   I want to select the fields that will be written into the exported JSON or CSV file   So that I only export what is needed and I can keep the file small    h3. Acceptance Criteria   - Before exporting, the user can choose the fields that are exported (https://mongodb.invisionapp.com/share/BVNOZB4DYT3#/screens/349364209)   - When fields are selected/deselected, if a projection exists, it is modified according to the new selection   - Because the list of fields is probably generated from a sample of the collection, we give the user the possibility of adding other fields that may not exist in the sample   - When the export is completed, only the fields that the user selected are exported    ",3
"COMPASS-3853","08/28/2019 15:18:07","Replace backend of the feature with better CSV/JSON parsers","This task is about replacing the backend of the feature with community-maintained libraries that are battle-tested for CSV and JSON parsing/creation.    This is timeboxed to 1 week and the main goal is that after this is done, Import/Export in Compass *with the existing UX* works reliably, no matter the size of the collection:  * CSV are exported according to the CSV spec and can be imported back  * JSON is imported with no errors. For the time being, since we don't change the UX, it's ok to still only support JSONL but let's keep in mind that eventually we want to also support JSON arrays. JSON is also exported with no errors, and an exported JSON can be imported back.    If we are unable to make this work, we will fallback to using mongoimport/mongoexport.",5
"COMPASS-3882","09/05/2019 20:08:25","Support tooltip in aggregations plugin (part 2)","Added one liners for $merge and $searchBeta",1
"COMPASS-3884","09/06/2019 08:57:50","Migrate saved aggregations from IndexedDB to the filesystem","Customers have reported a few use cases where they'd like to reuse pipelines across clusters or on different computers. While we investigate how we can enable some sort of sharing, a cheap solution could be to have them on the filesystem so we can explain to them on a case by case basis what are the steps to migrate them.",2
"COMPASS-3940","10/23/2019 17:42:25","clicking on the ""+"" in agg pipeline builder discards current pipeline without warning","Found this while playing around with the pipeline builder. I wasn't familiar with what the ""+"" sign does (and there's no tool tip, unlike other buttons on that screen). Would be nice to prompt users that they're going to discard their current working pipeline builder.",1
"COMPASS-3949","10/30/2019 14:10:16","Import: update buttons when an import completes","h3. User story  As a Compass user  I want the buttons to update when an import completes  So that I don't accidentally import duplicate data into my collection    h3. Acceptance Criteria  -     h3. Notes  - From Slack:  -- max: the import button should be disabled, or maybe become “Done”  -- joy: so to clarify.. if it reaches 100%  what if we 1) remove “cancel” 2) replace “import” with “done” until the progress is complete, “import” is disabled  ",1
"COMPASS-3987","12/02/2019 16:17:18","Don't Show Import Data Zero State When Documents Exist","When the initial load of documents in the documents tab takes some time, the tab is showing the import data zero state screen even though documents exist in the collection.   * Change zero state to only show after the initial load of documents is finished.   * Add a loading indicator on the screen while the initial load is happening.",3
"COMPASS-4132","02/04/2020 15:15:16","Upgrade Stitch in Compass Metrics","Stitch is an old version in the metrics plugin and needs to be updated since it's using an old BSON version and the plugin fails to load.",2
"COMPASS-4169","02/26/2020 15:20:46","Update Hadron React to Support ES Modules","Hadron React components are breaking on latest version of electron since they do not use ES modules.",5
